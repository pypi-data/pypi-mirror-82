"""Broadworks OCI-P Interface Response Classes"""
# Autogenerated from the Broadworks XML Schemas.
# Do not edit as changes will be overwritten.
# Generated on 2020-10-13T18:33:21.784178
# fmt: off
from classforge import Field

import broadworks_ocip.types as OCI
from .base import ElementInfo as E
from .base import OCIResponse


class AuthenticationResponse(OCIResponse):
    """
    ``AuthenticationRequest()``/Response is 1st stage of the 2 stage OCI login process.

    """

    _ELEMENTS = (
        E("user_id", "userId", str, is_required=True),
        E("nonce", "nonce", str, is_required=True),
        E("password_algorithm", "passwordAlgorithm", str, is_required=True),
    )

    #: str: *Required* userId
    user_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* nonce
    nonce = Field(type=str, required=True, mutable=False)
    #: str: *Required* passwordAlgorithm
    password_algorithm = Field(type=str, required=True, mutable=False)


class AuthenticationVerifyResponse(OCIResponse):
    """
    Response to ``AuthenticationVerifyRequest()``

    Replaced By: ``AuthenticationVerifyResponse14sp8()``
    """

    _ELEMENTS = (
        E("login_type", "loginType", str, is_required=True),
        E("locale", "locale", str, is_required=True),
        E("encoding", "encoding", str, is_required=True),
        E("group_id", "groupId", str),
        E("service_provider_id", "serviceProviderId", str),
        E("is_enterprise", "isEnterprise", bool, is_required=True),
        E("password_expires_days", "passwordExpiresDays", int),
        E("user_domain", "userDomain", str, is_required=True),
        E("last_name", "lastName", str),
        E("first_name", "firstName", str),
    )

    #: str: *Required* loginType
    login_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* locale
    locale = Field(type=str, required=True, mutable=False)
    #: str: *Required* encoding
    encoding = Field(type=str, required=True, mutable=False)
    #: str: *Optional* groupId
    group_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceProviderId
    service_provider_id = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isEnterprise
    is_enterprise = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passwordExpiresDays
    password_expires_days = Field(type=int, required=False, mutable=False)
    #: str: *Required* userDomain
    user_domain = Field(type=str, required=True, mutable=False)
    #: str: *Optional* lastName
    last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* firstName
    first_name = Field(type=str, required=False, mutable=False)


class AuthenticationVerifyResponse14sp8(OCIResponse):
    """
    Response to ``AuthenticationVerifyRequest14sp8()`` If a phoneNumber is returned, it
    will be the primay DN of the user
    """

    _ELEMENTS = (
        E("login_type", "loginType", str, is_required=True),
        E("locale", "locale", str, is_required=True),
        E("encoding", "encoding", str, is_required=True),
        E("group_id", "groupId", str),
        E("service_provider_id", "serviceProviderId", str),
        E("is_enterprise", "isEnterprise", bool, is_required=True),
        E("password_expires_days", "passwordExpiresDays", int),
        E("last_name", "lastName", str),
        E("first_name", "firstName", str),
        E("user_id", "userId", str, is_required=True),
        E("phone_number", "phoneNumber", str),
    )

    #: str: *Required* loginType
    login_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* locale
    locale = Field(type=str, required=True, mutable=False)
    #: str: *Required* encoding
    encoding = Field(type=str, required=True, mutable=False)
    #: str: *Optional* groupId
    group_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceProviderId
    service_provider_id = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isEnterprise
    is_enterprise = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passwordExpiresDays
    password_expires_days = Field(type=int, required=False, mutable=False)
    #: str: *Optional* lastName
    last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* firstName
    first_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* userId
    user_id = Field(type=str, required=True, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)


class DeviceManagementFileAuthLocationGetResponse(OCIResponse):
    """
    Return the address and credentials of the File Repository hosting the requested access
    device file.

    Also return the file name and path on the File Repository.  This is a response to
    ``DeviceManagementFileAuthLocationGetRequest()``.
    """

    _ELEMENTS = (
        E("file_repository_user_name", "fileRepositoryUserName", str, is_required=True),
        E("file_repository_password", "fileRepositoryPassword", str, is_required=True),
        E("net_address", "netAddress", str, is_required=True),
        E("remote_file_format", "remoteFileFormat", str, is_required=True),
        E("port_number", "portNumber", int),
        E("root_directory", "rootDirectory", str),
        E("cpe_file_directory", "cpeFileDirectory", str),
        E("secure", "secure", bool),
        E("mac_in_non_request_uri", "macInNonRequestURI", bool),
        E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
        E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
        E(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication", bool,
        ),
        E("completion_notification", "completionNotification", bool),
        E("file_category", "fileCategory", str),
    )

    #: str: *Required* fileRepositoryUserName
    file_repository_user_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileRepositoryPassword
    file_repository_password = Field(type=str, required=True, mutable=False)
    #: str: *Required* netAddress
    net_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* remoteFileFormat
    remote_file_format = Field(type=str, required=True, mutable=False)
    #: int: *Optional* portNumber
    port_number = Field(type=int, required=False, mutable=False)
    #: str: *Optional* rootDirectory
    root_directory = Field(type=str, required=False, mutable=False)
    #: str: *Optional* cpeFileDirectory
    cpe_file_directory = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* secure
    secure = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* macInNonRequestURI
    mac_in_non_request_uri = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* macFormatInNonRequestURI
    mac_format_in_non_request_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* useHttpDigestAuthentication
    use_http_digest_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* macBasedFileAuthentication
    mac_based_file_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* userNamePasswordFileAuthentication
    user_name_password_file_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* completionNotification
    completion_notification = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* fileCategory
    file_category = Field(type=str, required=False, mutable=False)


class DeviceManagementFileAuthLocationGetResponse17(OCIResponse):
    """
    Return the address and credentials of the File Repository hosting the requested access
    device file.

    Also return the file name and path on the File Repository.  This is a response to
    ``DeviceManagementFileAuthLocationGetRequest17()``. Replaced by:
    ``DeviceManagementFileAuthLocationGetRequest18()``
    """

    _ELEMENTS = (
        E("file_repository_user_name", "fileRepositoryUserName", str, is_required=True),
        E("file_repository_password", "fileRepositoryPassword", str, is_required=True),
        E("net_address", "netAddress", str, is_required=True),
        E("remote_file_format", "remoteFileFormat", str, is_required=True),
        E("port_number", "portNumber", int),
        E("root_directory", "rootDirectory", str),
        E("cpe_file_directory", "cpeFileDirectory", str),
        E("secure", "secure", bool),
        E("mac_in_non_request_uri", "macInNonRequestURI", bool),
        E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
        E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
        E(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication", bool,
        ),
        E("completion_notification", "completionNotification", bool),
        E("file_category", "fileCategory", str),
    )

    #: str: *Required* fileRepositoryUserName
    file_repository_user_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileRepositoryPassword
    file_repository_password = Field(type=str, required=True, mutable=False)
    #: str: *Required* netAddress
    net_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* remoteFileFormat
    remote_file_format = Field(type=str, required=True, mutable=False)
    #: int: *Optional* portNumber
    port_number = Field(type=int, required=False, mutable=False)
    #: str: *Optional* rootDirectory
    root_directory = Field(type=str, required=False, mutable=False)
    #: str: *Optional* cpeFileDirectory
    cpe_file_directory = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* secure
    secure = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* macInNonRequestURI
    mac_in_non_request_uri = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* macFormatInNonRequestURI
    mac_format_in_non_request_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* useHttpDigestAuthentication
    use_http_digest_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* macBasedFileAuthentication
    mac_based_file_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* userNamePasswordFileAuthentication
    user_name_password_file_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* completionNotification
    completion_notification = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* fileCategory
    file_category = Field(type=str, required=False, mutable=False)


class DeviceManagementFileAuthLocationGetResponse18(OCIResponse):
    """
    Return the address and credentials of the File Repository hosting the requested access
    device file.

    Also return the file name and path on the File Repository.  This is a response to
    ``DeviceManagementFileAuthLocationGetRequest18()``. Replaced by:
    ``DeviceManagementFileAuthLocationGetResponse21()``.
    """

    _ELEMENTS = (
        E("file_repository_user_name", "fileRepositoryUserName", str, is_required=True),
        E("file_repository_password", "fileRepositoryPassword", str, is_required=True),
        E("net_address", "netAddress", str, is_required=True),
        E("remote_file_format", "remoteFileFormat", str, is_required=True),
        E("port_number", "portNumber", int),
        E("root_directory", "rootDirectory", str),
        E("cpe_file_directory", "cpeFileDirectory", str),
        E("secure", "secure", bool),
        E("mac_in_non_request_uri", "macInNonRequestURI", bool),
        E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
        E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
        E(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication", bool,
        ),
        E("completion_notification", "completionNotification", bool),
        E("file_category", "fileCategory", str),
        E("enable_caching", "enableCaching", bool),
    )

    #: str: *Required* fileRepositoryUserName
    file_repository_user_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileRepositoryPassword
    file_repository_password = Field(type=str, required=True, mutable=False)
    #: str: *Required* netAddress
    net_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* remoteFileFormat
    remote_file_format = Field(type=str, required=True, mutable=False)
    #: int: *Optional* portNumber
    port_number = Field(type=int, required=False, mutable=False)
    #: str: *Optional* rootDirectory
    root_directory = Field(type=str, required=False, mutable=False)
    #: str: *Optional* cpeFileDirectory
    cpe_file_directory = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* secure
    secure = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* macInNonRequestURI
    mac_in_non_request_uri = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* macFormatInNonRequestURI
    mac_format_in_non_request_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* useHttpDigestAuthentication
    use_http_digest_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* macBasedFileAuthentication
    mac_based_file_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* userNamePasswordFileAuthentication
    user_name_password_file_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* completionNotification
    completion_notification = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* fileCategory
    file_category = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* enableCaching
    enable_caching = Field(type=bool, required=False, mutable=False)


class DeviceManagementFileAuthLocationGetResponse21(OCIResponse):
    """
    This is a response to ``DeviceManagementFileAuthLocationGetRequest21()``.

    Return the address and credentials of the File Repository hosting the requested access
    device file.  Also return the file name and path on the File Repository.  Also returns
    the status of the file authentication.
    """

    _ELEMENTS = (
        E("status", "status", str),
        E("file_repository_user_name", "fileRepositoryUserName", str, is_required=True),
        E("file_repository_password", "fileRepositoryPassword", str, is_required=True),
        E("net_address", "netAddress", str, is_required=True),
        E("remote_file_format", "remoteFileFormat", str, is_required=True),
        E("port_number", "portNumber", int),
        E("root_directory", "rootDirectory", str),
        E("cpe_file_directory", "cpeFileDirectory", str),
        E("secure", "secure", bool),
        E("mac_in_non_request_uri", "macInNonRequestURI", bool),
        E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
        E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
        E(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication", bool,
        ),
        E("completion_notification", "completionNotification", bool),
        E("file_category", "fileCategory", str),
        E("enable_caching", "enableCaching", bool),
        E("notify_file_upload", "notifyFileUpload", bool),
    )

    #: str: *Optional* status
    status = Field(type=str, required=False, mutable=False)
    #: str: *Required* fileRepositoryUserName
    file_repository_user_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileRepositoryPassword
    file_repository_password = Field(type=str, required=True, mutable=False)
    #: str: *Required* netAddress
    net_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* remoteFileFormat
    remote_file_format = Field(type=str, required=True, mutable=False)
    #: int: *Optional* portNumber
    port_number = Field(type=int, required=False, mutable=False)
    #: str: *Optional* rootDirectory
    root_directory = Field(type=str, required=False, mutable=False)
    #: str: *Optional* cpeFileDirectory
    cpe_file_directory = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* secure
    secure = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* macInNonRequestURI
    mac_in_non_request_uri = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* macFormatInNonRequestURI
    mac_format_in_non_request_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* useHttpDigestAuthentication
    use_http_digest_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* macBasedFileAuthentication
    mac_based_file_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* userNamePasswordFileAuthentication
    user_name_password_file_authentication = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* completionNotification
    completion_notification = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* fileCategory
    file_category = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* enableCaching
    enable_caching = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* notifyFileUpload
    notify_file_upload = Field(type=bool, required=False, mutable=False)


class EnterpriseBroadWorksMobileManagerGetDomainListResponse(OCIResponse):
    """
    Response to the ``EnterpriseBroadWorksMobileManagerGetDomainListRequest()``.

    Contains the list of domains.
    """

    _ELEMENTS = (
        E("domain_name", "domainName", str, is_array=True),
    )

    #: list(str): *Optional* domainName  *Array*
    domain_name = Field(type=list, required=False, mutable=False)


class EnterpriseBroadWorksMobileManagerGetHomeZoneListResponse(OCIResponse):
    """
    Response to the ``EnterpriseBroadWorksMobileManagerGetHomeZoneListRequest()``.

    Contains a table with column headings: "Home Zone Id", "Domain Name", "Mobile Country
    Code", "Mobile Network Code", "Local Area Code" and "Cell Identity".
    """

    _ELEMENTS = (
        E(
            "home_zones_table", "homeZonesTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* homeZonesTable  *Tabular*
    home_zones_table = Field(type=list, required=True, mutable=False)


class EnterpriseBroadWorksMobileManagerGetHomeZoneResponse(OCIResponse):
    """
    Response to the ``EnterpriseBroadWorksMobileManagerGetHomeZoneRequest()``
    """

    _ELEMENTS = (
        E("home_zone_domain_name", "homeZoneDomainName", str, is_required=True),
        E("mobile_country_code", "mobileCountryCode", str, is_required=True),
        E("mobile_network_code", "mobileNetworkCode", str, is_required=True),
        E("location_area_code", "locationAreaCode", str, is_required=True),
        E("cell_identity", "cellIdentity", str, is_required=True),
    )

    #: str: *Required* homeZoneDomainName
    home_zone_domain_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* mobileCountryCode
    mobile_country_code = Field(type=str, required=True, mutable=False)
    #: str: *Required* mobileNetworkCode
    mobile_network_code = Field(type=str, required=True, mutable=False)
    #: str: *Required* locationAreaCode
    location_area_code = Field(type=str, required=True, mutable=False)
    #: str: *Required* cellIdentity
    cell_identity = Field(type=str, required=True, mutable=False)


class EnterpriseBroadWorksMobileManagerGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseBroadWorksMobileManagerGetRequest()``
    """

    _ELEMENTS = (
        E("mobile_manager_id", "mobileManagerId", str, is_required=True),
        E("name", "name", str, is_required=True),
        E("is_active", "isActive", bool, is_required=True),
        E("local_to_carrier", "localToCarrier", bool, is_required=True),
        E("deactivation_reason", "deactivationReason", str),
        E("max_tx_per_second_enabled", "maxTxPerSecondEnabled", bool, is_required=True),
        E("max_tx_per_second", "maxTxPerSecond", int),
        E("tldn_enabled", "tldnEnabled", bool, is_required=True),
        E("generic_number_enabled", "genericNumberEnabled", bool, is_required=True),
        E("mobile_state_check_enabled", "mobileStateCheckEnabled", bool, is_required=True),
        E(
            "location_based_services_enabled", "locationBasedServicesEnabled", bool,
            is_required=True,
        ),
    )

    #: str: *Required* mobileManagerId
    mobile_manager_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* name
    name = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* localToCarrier
    local_to_carrier = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* deactivationReason
    deactivation_reason = Field(type=str, required=False, mutable=False)
    #: bool: *Required* maxTxPerSecondEnabled
    max_tx_per_second_enabled = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* maxTxPerSecond
    max_tx_per_second = Field(type=int, required=False, mutable=False)
    #: bool: *Required* tldnEnabled
    tldn_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* genericNumberEnabled
    generic_number_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mobileStateCheckEnabled
    mobile_state_check_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* locationBasedServicesEnabled
    location_based_services_enabled = Field(type=bool, required=True, mutable=False)


class EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListRequest()``.

    The response contains a table with columns: "Mobile Number", "User Id", "Last Name",
    "First Name","Phone Number","Extension", "Group Id", "Department" and "Mobile
    Network". The "Mobile Number" column contains a single DN. The "User Id", "Last Name"
    and "First Name" columns contains the corresponding attributes of the user possessing
    the DN(s). The "Phone Number" column contains a single DN. The "Group Id" column
    contains the Group Id of the user.  The "Department" column contains the department of
    the user if it is part of a department.  The "Mobile Network" column contains the
    Mobile Network the number belongs to.
    """

    _ELEMENTS = (
        E(
            "mobile_subscriber_directory_numbers_assignment_table",
            "mobileSubscriberDirectoryNumbersAssignmentTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* mobileSubscriberDirectoryNumbersAssignmentTable  *Tabular*
    mobile_subscriber_directory_numbers_assignment_table = Field(
        type=list, required=True, mutable=False,
    )


class EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListRequest()``.

    Contains a list of available Mobile Subscriber Directory Numbers not yet assigned to
    any user.
    """

    _ELEMENTS = (
        E(
            "available_mobile_subscriber_directory_number",
            "availableMobileSubscriberDirectoryNumber", str, is_array=True,
        ),
    )

    #: list(str): *Optional* availableMobileSubscriberDirectoryNumber  *Array*
    available_mobile_subscriber_directory_number = Field(
        type=list, required=False, mutable=False,
    )


class EnterpriseCallCenterAgentThresholdDefaultProfileGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterAgentThresholdDefaultProfileGetRequest()``.

    The agent table contains the agents assigned to the profile and has column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address";
    """

    _ELEMENTS = (
        E("profile_name", "profileName", str, is_required=True),
        E("profile_description", "profileDescription", str),
        E(
            "threshold_current_call_state_idle_time_yellow",
            "thresholdCurrentCallStateIdleTimeYellow", int,
        ),
        E(
            "threshold_current_call_state_idle_time_red",
            "thresholdCurrentCallStateIdleTimeRed", int,
        ),
        E(
            "threshold_current_call_state_on_call_time_yellow",
            "thresholdCurrentCallStateOnCallTimeYellow", int,
        ),
        E(
            "threshold_current_call_state_on_call_time_red",
            "thresholdCurrentCallStateOnCallTimeRed", int,
        ),
        E(
            "threshold_current_agent_state_unavailable_time_yellow",
            "thresholdCurrentAgentStateUnavailableTimeYellow", int,
        ),
        E(
            "threshold_current_agent_state_unavailable_time_red",
            "thresholdCurrentAgentStateUnavailableTimeRed", int,
        ),
        E("threshold_average_busy_in_time_yellow", "thresholdAverageBusyInTimeYellow", int),
        E("threshold_average_busy_in_time_red", "thresholdAverageBusyInTimeRed", int),
        E("threshold_average_busy_out_time_yellow", "thresholdAverageBusyOutTimeYellow", int),
        E("threshold_average_busy_out_time_red", "thresholdAverageBusyOutTimeRed", int),
        E("threshold_average_wrap_up_time_yellow", "thresholdAverageWrapUpTimeYellow", int),
        E("threshold_average_wrap_up_time_red", "thresholdAverageWrapUpTimeRed", int),
        E("enable_notification_email", "enableNotificationEmail", bool, is_required=True),
        E("notification_email_address", "notificationEmailAddress", str),
        E("agent_table", "agentTable", list, is_complex=True, is_table=True),
    )

    #: str: *Required* profileName
    profile_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* profileDescription
    profile_description = Field(type=str, required=False, mutable=False)
    #: int: *Optional* thresholdCurrentCallStateIdleTimeYellow
    threshold_current_call_state_idle_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateIdleTimeRed
    threshold_current_call_state_idle_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateOnCallTimeYellow
    threshold_current_call_state_on_call_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateOnCallTimeRed
    threshold_current_call_state_on_call_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentAgentStateUnavailableTimeYellow
    threshold_current_agent_state_unavailable_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentAgentStateUnavailableTimeRed
    threshold_current_agent_state_unavailable_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdAverageBusyInTimeYellow
    threshold_average_busy_in_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyInTimeRed
    threshold_average_busy_in_time_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyOutTimeYellow
    threshold_average_busy_out_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyOutTimeRed
    threshold_average_busy_out_time_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageWrapUpTimeYellow
    threshold_average_wrap_up_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageWrapUpTimeRed
    threshold_average_wrap_up_time_red = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableNotificationEmail
    enable_notification_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* notificationEmailAddress
    notification_email_address = Field(type=str, required=False, mutable=False)
    #: list: *Optional* agentTable  *Tabular*
    agent_table = Field(type=list, required=False, mutable=False)


class EnterpriseCallCenterAgentThresholdProfileGetAvailableAgentListResponse(OCIResponse):
    """
    Response to the
    ``EnterpriseCallCenterAgentThresholdProfileGetAvailableAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "Agent Threshold Profile";
    """

    _ELEMENTS = (
        E(
            "agent_table", "agentTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* agentTable  *Tabular*
    agent_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterAgentThresholdProfileGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterAgentThresholdProfileGetListRequest()``.

    Contains a table with all the Call Center Agent Threshold Profiles in the Enterprise.
    The column headings are: "Default", "Name", "Description".
    """

    _ELEMENTS = (
        E(
            "profiles_table", "profilesTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* profilesTable  *Tabular*
    profiles_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterAgentThresholdProfileGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterAgentThresholdProfileGetRequest()``.

    The agentTable contains the agents assigned to the profile and has the column
    headings: "User Id", "Group Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address";
    """

    _ELEMENTS = (
        E("profile_description", "profileDescription", str),
        E(
            "threshold_current_call_state_idle_time_yellow",
            "thresholdCurrentCallStateIdleTimeYellow", int,
        ),
        E(
            "threshold_current_call_state_idle_time_red",
            "thresholdCurrentCallStateIdleTimeRed", int,
        ),
        E(
            "threshold_current_call_state_on_call_time_yellow",
            "thresholdCurrentCallStateOnCallTimeYellow", int,
        ),
        E(
            "threshold_current_call_state_on_call_time_red",
            "thresholdCurrentCallStateOnCallTimeRed", int,
        ),
        E(
            "threshold_current_agent_state_unavailable_time_yellow",
            "thresholdCurrentAgentStateUnavailableTimeYellow", int,
        ),
        E(
            "threshold_current_agent_state_unavailable_time_red",
            "thresholdCurrentAgentStateUnavailableTimeRed", int,
        ),
        E("threshold_average_busy_in_time_yellow", "thresholdAverageBusyInTimeYellow", int),
        E("threshold_average_busy_in_time_red", "thresholdAverageBusyInTimeRed", int),
        E("threshold_average_busy_out_time_yellow", "thresholdAverageBusyOutTimeYellow", int),
        E("threshold_average_busy_out_time_red", "thresholdAverageBusyOutTimeRed", int),
        E("threshold_average_wrap_up_time_yellow", "thresholdAverageWrapUpTimeYellow", int),
        E("threshold_average_wrap_up_time_red", "thresholdAverageWrapUpTimeRed", int),
        E("enable_notification_email", "enableNotificationEmail", bool, is_required=True),
        E("notification_email_address", "notificationEmailAddress", str),
        E(
            "agent_table", "agentTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Optional* profileDescription
    profile_description = Field(type=str, required=False, mutable=False)
    #: int: *Optional* thresholdCurrentCallStateIdleTimeYellow
    threshold_current_call_state_idle_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateIdleTimeRed
    threshold_current_call_state_idle_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateOnCallTimeYellow
    threshold_current_call_state_on_call_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateOnCallTimeRed
    threshold_current_call_state_on_call_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentAgentStateUnavailableTimeYellow
    threshold_current_agent_state_unavailable_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentAgentStateUnavailableTimeRed
    threshold_current_agent_state_unavailable_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdAverageBusyInTimeYellow
    threshold_average_busy_in_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyInTimeRed
    threshold_average_busy_in_time_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyOutTimeYellow
    threshold_average_busy_out_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyOutTimeRed
    threshold_average_busy_out_time_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageWrapUpTimeYellow
    threshold_average_wrap_up_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageWrapUpTimeRed
    threshold_average_wrap_up_time_red = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableNotificationEmail
    enable_notification_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* notificationEmailAddress
    notification_email_address = Field(type=str, required=False, mutable=False)
    #: list: *Required* agentTable  *Tabular*
    agent_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterAgentUnavailableCodeGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterAgentUnavailableCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description".
    """

    _ELEMENTS = (
        E(
            "unavailable_codes_table", "unavailableCodesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* unavailableCodesTable  *Tabular*
    unavailable_codes_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterAgentUnavailableCodeGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterAgentUnavailableCodeGetRequest()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("description", "description", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class EnterpriseCallCenterAgentUnavailableCodeSettingsGetResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterAgentUnavailableCodeSettingsGetRequest()``.

    Replaced by ``EnterpriseCallCenterAgentUnavailableCodeSettingsGetResponse17sp4()``.
    """

    _ELEMENTS = (
        E(
            "enable_agent_unavailable_codes", "enableAgentUnavailableCodes", bool,
            is_required=True,
        ),
        E("default_agent_unavailable_code_on_dnd", "defaultAgentUnavailableCodeOnDND", str),
        E(
            "default_agent_unavailable_code_on_personal_calls",
            "defaultAgentUnavailableCodeOnPersonalCalls", str,
        ),
        E(
            "default_agent_unavailable_code_on_consecutive_bounces",
            "defaultAgentUnavailableCodeOnConsecutiveBounces", str,
        ),
        E(
            "force_use_of_agent_unavailable_codes", "forceUseOfAgentUnavailableCodes",
            bool, is_required=True,
        ),
        E("default_agent_unavailable_code", "defaultAgentUnavailableCode", str),
    )

    #: bool: *Required* enableAgentUnavailableCodes
    enable_agent_unavailable_codes = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCodeOnDND
    default_agent_unavailable_code_on_dnd = Field(type=str, required=False, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCodeOnPersonalCalls
    default_agent_unavailable_code_on_personal_calls = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* defaultAgentUnavailableCodeOnConsecutiveBounces
    default_agent_unavailable_code_on_consecutive_bounces = Field(
        type=str, required=False, mutable=False,
    )
    #: bool: *Required* forceUseOfAgentUnavailableCodes
    force_use_of_agent_unavailable_codes = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCode
    default_agent_unavailable_code = Field(type=str, required=False, mutable=False)


class EnterpriseCallCenterAgentUnavailableCodeSettingsGetResponse17sp4(OCIResponse):
    """
    Response to ``EnterpriseCallCenterAgentUnavailableCodeSettingsGetRequest17sp4()``.

    """

    _ELEMENTS = (
        E(
            "enable_agent_unavailable_codes", "enableAgentUnavailableCodes", bool,
            is_required=True,
        ),
        E("default_agent_unavailable_code_on_dnd", "defaultAgentUnavailableCodeOnDND", str),
        E(
            "default_agent_unavailable_code_on_personal_calls",
            "defaultAgentUnavailableCodeOnPersonalCalls", str,
        ),
        E(
            "default_agent_unavailable_code_on_consecutive_bounces",
            "defaultAgentUnavailableCodeOnConsecutiveBounces", str,
        ),
        E(
            "default_agent_unavailable_code_on_not_reachable",
            "defaultAgentUnavailableCodeOnNotReachable", str,
        ),
        E(
            "force_use_of_agent_unavailable_codes", "forceUseOfAgentUnavailableCodes",
            bool, is_required=True,
        ),
        E("default_agent_unavailable_code", "defaultAgentUnavailableCode", str),
    )

    #: bool: *Required* enableAgentUnavailableCodes
    enable_agent_unavailable_codes = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCodeOnDND
    default_agent_unavailable_code_on_dnd = Field(type=str, required=False, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCodeOnPersonalCalls
    default_agent_unavailable_code_on_personal_calls = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* defaultAgentUnavailableCodeOnConsecutiveBounces
    default_agent_unavailable_code_on_consecutive_bounces = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* defaultAgentUnavailableCodeOnNotReachable
    default_agent_unavailable_code_on_not_reachable = Field(
        type=str, required=False, mutable=False,
    )
    #: bool: *Required* forceUseOfAgentUnavailableCodes
    force_use_of_agent_unavailable_codes = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCode
    default_agent_unavailable_code = Field(type=str, required=False, mutable=False)


class EnterpriseCallCenterCallDispositionCodeGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCallDispositionCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description".
    """

    _ELEMENTS = (
        E(
            "disposition_codes_table", "dispositionCodesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* dispositionCodesTable  *Tabular*
    disposition_codes_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterCallDispositionCodeGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCallDispositionCodeGetRequest()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("description", "description", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class EnterpriseCallCenterCallDispositionCodeGetUsageListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCallDispositionCodeGetUsageListRequest()``.

    The Type column contains either "Call Center" or "Route Point". Contains a table with
    column headings: "Group Id", "Id", "Name" and "Type".
    """

    _ELEMENTS = (
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterCurrentAndPastAgentGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCurrentAndPastAgentGetListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "deleted_agent_user_table", "deletedAgentUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* deletedAgentUserTable  *Tabular*
    deleted_agent_user_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterCurrentAndPastCallCenterGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCurrentAndPastCallCenterGetListRequest()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_array=True),
        E("deleted_service_user_id", "deletedServiceUserId", str, is_array=True),
    )

    #: list(str): *Optional* serviceUserId  *Array*
    service_user_id = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* deletedServiceUserId  *Array*
    deleted_service_user_id = Field(type=list, required=False, mutable=False)


class EnterpriseCallCenterCurrentAndPastDNISGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCurrentAndPastDNISGetListRequest()``.

    """

    _ELEMENTS = (
        E("name", "name", str, is_array=True),
        E("deleted_name", "deletedName", str, is_array=True),
    )

    #: list(str): *Optional* name  *Array*
    name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* deletedName  *Array*
    deleted_name = Field(type=list, required=False, mutable=False)


class EnterpriseCallCenterEnhancedReportingBrandingGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterEnhancedReportingBrandingGetRequest()``.

    """

    _ELEMENTS = (
        E("branding_choice", "brandingChoice", str, is_required=True),
        E("branding_file_description", "brandingFileDescription", str),
    )

    #: str: *Required* brandingChoice
    branding_choice = Field(type=str, required=True, mutable=False)
    #: str: *Optional* brandingFileDescription
    branding_file_description = Field(type=str, required=False, mutable=False)


class EnterpriseCallCenterEnhancedReportingGetAvailableReportTemplateListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseCallCenterEnhancedReportingGetAvailableReportTemplateListRequest()``.

    Contains a table with column headings: "Name", "Description" and "Level", "Is Agent
    Required", "Is Call Center Required", "Is Call Center Dnis Required", "Is Real Time
    Report", "Is Sampling Period Required", "Call Completion Threshold Parameter", "Short
    Duration Threshold Parameter", "Service Level Threshold Parameter", "Service Level
    Inclusions Parameter", "Service Level Objective Threshold Parameter", "Abandoned Call
    Threshold Parameter", "Service Level Threshold Parameter Number", "Abandoned Call
    Threshold Parameter Number" and "Scope". The possible values for "Level" are "System"
    and "Enterprise". The possible values for "Is Agent Required", "Is Call Center
    Required", "Is Call Center Dnis Required", "Is Real Time Report" and "Is Sampling
    Period Required" are "true" and "false". The possible values for "Call Completion
    Threshold Parameter", "Short Duration Threshold Parameter", "Service Level Threshold
    Parameter", "Service Level Inclusions Parameter", "Service Level Objective Threshold
    Parameter" and "Abandoned Call Threshold Parameter" are "Required", "Hidden" and "Does
    Not Apply". The possible values for "Scope" are "Supervisor Only" and "Supervisor and
    Agent".
    """

    _ELEMENTS = (
        E(
            "report_template_table", "reportTemplateTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* reportTemplateTable  *Tabular*
    report_template_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterEnhancedReportingGetResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingGetRequest()``.

    Replaced by ``EnterpriseCallCenterEnhancedReportingGetResponse19()``
    """

    _ELEMENTS = (
        E("reporting_server", "reportingServer", str, is_required=True),
        E("web_statistic_source", "webStatisticSource", str, is_required=True),
    )

    #: str: *Required* reportingServer
    reporting_server = Field(type=str, required=True, mutable=False)
    #: str: *Required* webStatisticSource
    web_statistic_source = Field(type=str, required=True, mutable=False)


class EnterpriseCallCenterEnhancedReportingGetResponse19(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingGetRequest19()``.

    """

    _ELEMENTS = (
        E("reporting_server", "reportingServer", str, is_required=True),
    )

    #: str: *Required* reportingServer
    reporting_server = Field(type=str, required=True, mutable=False)


class EnterpriseCallCenterEnhancedReportingReportTemplateGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingReportTemplateGetListRequest()``.

    Contains a table with column headings: "Name", "Description", "Type" and "Enabled".
    """

    _ELEMENTS = (
        E(
            "report_template_table", "reportTemplateTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* reportTemplateTable  *Tabular*
    report_template_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterEnhancedReportingReportTemplateGetResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingReportTemplateGetRequest()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E("data_template", "dataTemplate", str, is_required=True),
        E("filter_number", "filterNumber", int),
        E("xslt_template_description", "xsltTemplateDescription", str, is_required=True),
        E("scope", "scope", str, is_required=True),
        E("is_enabled", "isEnabled", bool, is_required=True),
        E("is_realtime_report", "isRealtimeReport", bool),
        E("call_completion_threshold_param", "callCompletionThresholdParam", str),
        E("short_duration_threshold_param", "shortDurationThresholdParam", str),
        E("service_level_threshold_param", "serviceLevelThresholdParam", str),
        E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
        E(
            "service_level_objective_threshold_param",
            "serviceLevelObjectiveThresholdParam", str,
        ),
        E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
        E("service_level_threshold_param_number", "serviceLevelThresholdParamNumber", int),
        E("abandoned_call_threshold_param_number", "abandonedCallThresholdParamNumber", int),
        E("filter_value", "filterValue", str),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* dataTemplate
    data_template = Field(type=str, required=True, mutable=False)
    #: int: *Optional* filterNumber
    filter_number = Field(type=int, required=False, mutable=False)
    #: str: *Required* xsltTemplateDescription
    xslt_template_description = Field(type=str, required=True, mutable=False)
    #: str: *Required* scope
    scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isEnabled
    is_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* isRealtimeReport
    is_realtime_report = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* callCompletionThresholdParam
    call_completion_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* shortDurationThresholdParam
    short_duration_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelThresholdParam
    service_level_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelInclusionsParam
    service_level_inclusions_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelObjectiveThresholdParam
    service_level_objective_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* abandonedCallThresholdParam
    abandoned_call_threshold_param = Field(type=str, required=False, mutable=False)
    #: int: *Optional* serviceLevelThresholdParamNumber
    service_level_threshold_param_number = Field(type=int, required=False, mutable=False)
    #: int: *Optional* abandonedCallThresholdParamNumber
    abandoned_call_threshold_param_number = Field(type=int, required=False, mutable=False)
    #: str: *Optional* filterValue
    filter_value = Field(type=str, required=False, mutable=False)


class EnterpriseCallCenterEnhancedReportingScheduledReportGetActiveListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetActiveListRequest()``.

    Contains a table with column headings : "Schedule Name", "Description", "Created By",
    "Is Supervisor Report", "Report Template Name", "Report Template Level" and
    "Recurring". The "Created By" can be either "Administrator" or user id if created by
    supervisor.  The possible values for "Recurring" are "None", "Daily", "Weekly",
    "Monthly" and "Yearly". The possible values for "Report Level" are "System" and
    "Enterprise".
    """

    _ELEMENTS = (
        E(
            "scheduled_report_table", "scheduledReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduledReportTable  *Tabular*
    scheduled_report_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterEnhancedReportingScheduledReportGetCompletedListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetCompletedListRequest()``
    Contains a table with column headings : "Schedule Name", "Description", "Created By",
    "Is Supervisor Report", "Report Template Name", "Report Template Level" and
    "Recurring".

    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and
    "Yearly". The possible values for "Report Level" are "System" and "Enterprise".
    """

    _ELEMENTS = (
        E(
            "scheduled_report_table", "scheduledReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduledReportTable  *Tabular*
    scheduled_report_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterEnhancedReportingScheduledReportGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingScheduledReportGetListRequest()``.

    Contains a table with column headings : "Schedule Name", "Description", "Created By",
    "Is Supervisor Report", "Status", "Report Template Name", "Report Template Level" and
    "Recurring". The "Created By" can be either "Administrator" or user id if created by
    supervisor.  The possible values for "Status" are "Active", and "Completed". The
    possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and "Yearly".
    The possible values for "Report Level" are "System" and "Enterprise".
    """

    _ELEMENTS = (
        E(
            "scheduled_report_table", "scheduledReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduledReportTable  *Tabular*
    scheduled_report_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest()``.

    Contains a table with column headings: "Schedule Name", "Created By", "Created By
    Supervisor", and "Is Active". The "Created By" can be either "Administrator" or user
    id if created by supervisor.
    """

    _ELEMENTS = (
        E(
            "schedule_report_table", "scheduleReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduleReportTable  *Tabular*
    schedule_report_table = Field(type=list, required=True, mutable=False)


class EnterpriseCallCenterGetResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterGetRequest()``.

    Replaced by ``EnterpriseCallCenterGetResponse17sp4()``.
    """

    _ELEMENTS = (
        E(
            "use_system_default_guard_timer", "useSystemDefaultGuardTimer", bool,
            is_required=True,
        ),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "use_system_default_unavailable_settings",
            "useSystemDefaultUnavailableSettings", bool,
        ),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int,
        ),
    )

    #: bool: *Required* useSystemDefaultGuardTimer
    use_system_default_guard_timer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* useSystemDefaultUnavailableSettings
    use_system_default_unavailable_settings = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=False, mutable=False,
    )
    #: int: *Optional* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=False, mutable=False,
    )


class EnterpriseCallCenterGetResponse17sp4(OCIResponse):
    """
    Response to ``EnterpriseCallCenterGetRequest17sp4()``.

    """

    _ELEMENTS = (
        E(
            "use_system_default_guard_timer", "useSystemDefaultGuardTimer", bool,
            is_required=True,
        ),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "use_system_default_unavailable_settings",
            "useSystemDefaultUnavailableSettings", bool,
        ),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int,
        ),
        E(
            "force_agent_unavailable_on_not_reachable",
            "forceAgentUnavailableOnNotReachable", bool,
        ),
    )

    #: bool: *Required* useSystemDefaultGuardTimer
    use_system_default_guard_timer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* useSystemDefaultUnavailableSettings
    use_system_default_unavailable_settings = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=False, mutable=False,
    )
    #: int: *Optional* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnNotReachable
    force_agent_unavailable_on_not_reachable = Field(type=bool, required=False, mutable=False)


class EnterpriseCallCenterGetRoutingPolicyResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterGetRoutingPolicyRequest()``.

    Contains a table with column headings: "Service User Id", "Name" and "Priority".
    """

    _ELEMENTS = (
        E("routing_policy", "routingPolicy", str, is_required=True),
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Required* routingPolicy
    routing_policy = Field(type=str, required=True, mutable=False)
    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class EnterpriseEnterpriseTrunkGetAvailableUserListResponse(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetAvailableUserListRequest()``.

    The column headings for the enterpriseTrunkUserTable are: "User Id", "Last Name",
    "First Name", "Hiragana Last Name", "Hiragana First Name", "Phone Number",
    "Extension", "Department", "Email Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class EnterpriseEnterpriseTrunkGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetListRequest()``.

    Contains a table of enterprise trunks defined in the enterprise The column headings
    are: "Enterprise Trunk Name", "Routing Type"
    """

    _ELEMENTS = (
        E(
            "enterprise_trunk_table", "enterpriseTrunkTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* enterpriseTrunkTable  *Tabular*
    enterprise_trunk_table = Field(type=list, required=True, mutable=False)


class EnterpriseEnterpriseTrunkGetResponse(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetRequest()``.

    Replaced by: ``EnterpriseEnterpriseTrunkGetResponse21()``.
    """

    _ELEMENTS = (
        E("maximum_reroute_attempts", "maximumRerouteAttempts", int, is_required=True),
        E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
        E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
        E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
        E(
            "priority_weighted_routing", "priorityWeightedRouting", str, is_complex=True,
        ),  # unknown
    )

    #: int: *Required* maximumRerouteAttempts
    maximum_reroute_attempts = Field(type=int, required=True, mutable=False)
    #: str: *Required* routeExhaustionAction
    route_exhaustion_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* routeExhaustionForwardAddress
    route_exhaustion_forward_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* orderedRouting
    ordered_routing = Field(type=str, required=False, mutable=False)
    #: str: *Optional* priorityWeightedRouting
    priority_weighted_routing = Field(type=str, required=False, mutable=False)


class EnterpriseEnterpriseTrunkGetResponse21(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetRequest21()``.

    """

    _ELEMENTS = (
        E("maximum_reroute_attempts", "maximumRerouteAttempts", int, is_required=True),
        E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
        E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
        E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
        E(
            "priority_weighted_routing", "priorityWeightedRouting", str, is_complex=True,
        ),  # unknown
        E("enable_capacity_management", "enableCapacityManagement", bool, is_required=True),
        E("max_active_calls", "maxActiveCalls", int),
        E("capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls", int),
        E("capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int),
    )

    #: int: *Required* maximumRerouteAttempts
    maximum_reroute_attempts = Field(type=int, required=True, mutable=False)
    #: str: *Required* routeExhaustionAction
    route_exhaustion_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* routeExhaustionForwardAddress
    route_exhaustion_forward_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* orderedRouting
    ordered_routing = Field(type=str, required=False, mutable=False)
    #: str: *Optional* priorityWeightedRouting
    priority_weighted_routing = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableCapacityManagement
    enable_capacity_management = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* maxActiveCalls
    max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=False, mutable=False)


class EnterpriseEnterpriseTrunkGetUserListResponse(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetUserListRequest()``.

    The column headings for the enterpriseTrunkUserTable are: "Group Id", "User Id", "Last
    Name", "First Name", "Phone Number", "Alternate Trunk Identity", "Hiragana Last Name",
    "Hiragana First Name", "Extension", "Department", "Email Address" and "Route List
    Assigned".
    """

    _ELEMENTS = (
        E(
            "enterprise_trunk_user_table", "enterpriseTrunkUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* enterpriseTrunkUserTable  *Tabular*
    enterprise_trunk_user_table = Field(type=list, required=True, mutable=False)


class EnterprisePhoneDirectoryGetListResponse(OCIResponse):
    """
    Response to ``EnterprisePhoneDirectoryGetListRequest()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id". If extended directory information is requested, the following
    columns are also included: "First Name", "Last Name", "User Id", "Pager", "Title",
    "Time Zone", "Location", "Address Line 1", "Address Line 2", "City", "State", "Zip",
    "Country". Replace by: ``EnterprisePhoneDirectoryGetListResponse17()``
    """

    _ELEMENTS = (
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class EnterprisePhoneDirectoryGetListResponse17(OCIResponse):
    """
    Response to ``EnterprisePhoneDirectoryGetListRequest17()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "Is Virtual On-Net User". If extended directory information is
    requested, the following columns are also included: "First Name", "Last Name", "User
    Id", "Pager", "Title", "Time Zone", "Location", "Address Line 1", "Address Line 2",
    "City", "State", "Zip", "Country". Replaced by:
    ``EnterprisePhoneDirectoryGetListResponse18()``
    """

    _ELEMENTS = (
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class EnterprisePhoneDirectoryGetListResponse17sp3(OCIResponse):
    """
    Response to ``EnterprisePhoneDirectoryGetListRequest17sp3()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "IMP Id", "Is Virtual On-Net User". If extended directory
    information is requested, the following columns are also included: "First Name", "Last
    Name", "User Id", "Pager", "Title", "Time Zone", "Location", "Address Line 1",
    "Address Line 2", "City", "State", "Zip", "Country". Replaced by:
    ``EnterprisePhoneDirectoryGetListResponse18()``
    """

    _ELEMENTS = (
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class EnterprisePhoneDirectoryGetListResponse18(OCIResponse):
    """
    Response to ``EnterprisePhoneDirectoryGetListRequest18()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "User Id", "IMP Id", "Is Virtual On-Net User". If extended
    directory information is requested, the following columns are also included: "First
    Name", "Last Name", "Pager", "Title", "Time Zone", "Location", "Address Line 1",
    "Address Line 2", "City", "State", "Zip", "Country".
    """

    _ELEMENTS = (
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class EnterprisePreAlertingAnnouncementGetResponse(OCIResponse):
    """
    Get the Enterprise level pre-alerting service settings.

    The response is either a ``EnterprisePreAlertingAnnouncementGetResponse()`` or an
    ``ErrorResponse()``.
    """

    _ELEMENTS = (
        E("announcement_interruption", "announcementInterruption", str, is_required=True),
        E("interruption_digit_sequence", "interruptionDigitSequence", str),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E("video_file_url", "videoFileUrl", str),
    )

    #: str: *Required* announcementInterruption
    announcement_interruption = Field(type=str, required=True, mutable=False)
    #: str: *Optional* interruptionDigitSequence
    interruption_digit_sequence = Field(type=str, required=False, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)


class EnterpriseRouteListEnterpriseTrunkNumberRangeGetAvailableListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseRouteListEnterpriseTrunkNumberRangeGetAvailableListRequest()``.

    Contains a list of number ranges that are assigned to an enterprise and still
    available for assignment to users within the enterprise.  The column headings are
    "Number Range Start", "Number Range End" and "Is Active".
    """

    _ELEMENTS = (
        E(
            "available_number_range_table", "availableNumberRangeTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* availableNumberRangeTable  *Tabular*
    available_number_range_table = Field(type=list, required=True, mutable=False)


class EnterpriseRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse(OCIResponse):
    """
    Response to ``EnterpriseRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest()``.

    The response contains a table with columns: "Number Range Start", "Number Range End",
    "Group Id", "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Phone Number", "Extension", "Department", "Email Address", "Enterprise
    Trunk" and "Is Active". The "User Id", "Last Name", "First Name", "Hiragana Last
    Name", "Hiragana First Name", "Phone Number", "Extension", "Department" and "Email
    Address" columns contains the corresponding attributes of the user possessing the
    number range.  The "Enterprise Trunk" column contains the enterprise trunk the user
    possessing the number range belongs to.  The "Is Active" column indicates if the
    number range has been activated.
    """

    _ELEMENTS = (
        E(
            "number_range_summary_table", "numberRangeSummaryTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* numberRangeSummaryTable  *Tabular*
    number_range_summary_table = Field(type=list, required=True, mutable=False)


class EnterpriseSessionAdmissionControlGroupGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseSessionAdmissionControlGroupGetListRequest()``.

    Contains a table of session admission control group configured in the enterprise.  The
    column headings are: "Name", "Is Default", "Maximum Sessions", "Maximum Originating
    Sessions", "Maximum Terminating Sessions"..
    """

    _ELEMENTS = (
        E(
            "session_admission_control_group_table", "sessionAdmissionControlGroupTable",
            list, is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* sessionAdmissionControlGroupTable  *Tabular*
    session_admission_control_group_table = Field(type=list, required=True, mutable=False)


class EnterpriseVirtualOnNetEnterpriseExtensionsGetUserListResponse(OCIResponse):
    """
    Response to ``EnterpriseVirtualOnNetEnterpriseExtensionsGetUserListRequest()``.

    Contains a table with column headings : "Group Id", "Last Name", "First Name", "Phone
    Number", "Extension", "Virtual On-Net Call Type" in a row for each user.
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class EnterpriseVoiceVPNGetPolicyListResponse(OCIResponse):
    """
    Response to ``EnterpriseVoiceVPNGetListResponse()``.

    Returns a 4 column table with column headings: "Location Code", "Min Extension
    Length", "Max Extension Length", "Location Selection".
    """

    _ELEMENTS = (
        E(
            "location_list", "locationList", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* locationList  *Tabular*
    location_list = Field(type=list, required=True, mutable=False)


class EnterpriseVoiceVPNGetResponse(OCIResponse):
    """
    Response to ``EnterpriseVoiceVPNGetRequest()``.

    Replaced By: ``EnterpriseVoiceVPNGetResponse14sp3()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("default_selection", "defaultSelection", str, is_required=True),
        E("e164_selection", "e164Selection", str, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* defaultSelection
    default_selection = Field(type=str, required=True, mutable=False)
    #: str: *Required* e164Selection
    e164_selection = Field(type=str, required=True, mutable=False)


class EnterpriseVoiceVPNGetResponse14sp3(OCIResponse):
    """
    Response to ``EnterpriseVoiceVPNGetRequest14sp3()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("default_selection", "defaultSelection", str, is_required=True),
        E("e164_selection", "e164Selection", str, is_required=True),
        E("use_phone_context", "usePhoneContext", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* defaultSelection
    default_selection = Field(type=str, required=True, mutable=False)
    #: str: *Required* e164Selection
    e164_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* usePhoneContext
    use_phone_context = Field(type=bool, required=True, mutable=False)


class ExternalAuthenticationCreateLoginTokenResponse(OCIResponse):
    """
    Response to ``ExternalAuthenticationCreateLoginTokenRequest()``.

    """

    _ELEMENTS = (
        E("login_token", "loginToken", str, is_required=True),
    )

    #: str: *Required* loginToken
    login_token = Field(type=str, required=True, mutable=False)


class GroupAccessDeviceAvailablePortGetListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceAvailablePortGetListRequest()``.

    Contains a list of available ports in a device using static mode.  The list is empty
    in case the device is using dynamic mode.
    """

    _ELEMENTS = (
        E("port_number", "portNumber", int, is_array=True),
    )

    #: list(int): *Optional* portNumber  *Array*
    port_number = Field(type=list, required=False, mutable=False)


class GroupAccessDeviceCustomTagGetListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceCustomTagGetListRequest()``.

    Contains a table of custom configuration tags managed by the Device Management System
    on a per-device profile basis.  The column headings are: "Tag Name", "Tag Value"
    """

    _ELEMENTS = (
        E(
            "device_custom_tags_table", "deviceCustomTagsTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceCustomTagsTable  *Tabular*
    device_custom_tags_table = Field(type=list, required=True, mutable=False)


class GroupAccessDeviceFileGetListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetListRequest()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Type", "File Format", "Is
    Authenticated".

    Replaced By: ``GroupAccessDeviceFileGetListResponse14sp8()``
    """

    _ELEMENTS = (
        E(
            "device_files_table", "deviceFilesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceFilesTable  *Tabular*
    device_files_table = Field(type=list, required=True, mutable=False)


class GroupAccessDeviceFileGetListResponse14sp8(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetListRequest14sp8()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Format", "Is Authenticated",
    "Access URL", "Repository URL", "Template URL", "Extended Capture". The following
    columns are only used in AS data mode: "Extended Capture"
    """

    _ELEMENTS = (
        E(
            "device_files_table", "deviceFilesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceFilesTable  *Tabular*
    device_files_table = Field(type=list, required=True, mutable=False)


class GroupAccessDeviceFileGetResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetRequest()``.

    Replaced By: ``GroupAccessDeviceFileGetResponse14sp8()``
    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)


class GroupAccessDeviceFileGetResponse14sp8(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetRequest14sp8()``.

    Replaced by: ``GroupAccessDeviceFileGetResponse16sp1()``
    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)


class GroupAccessDeviceFileGetResponse16sp1(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetRequest16sp1()``.

    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)


class GroupAccessDeviceFileGetResponse20(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetRequest20()``.

    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
        E("extended_capture_enabled", "extendedCaptureEnabled", bool),
        E("extended_capture_url", "extendedCaptureURL", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* extendedCaptureEnabled
    extended_capture_enabled = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* extendedCaptureURL
    extended_capture_url = Field(type=str, required=False, mutable=False)


class GroupAccessDeviceGetAvailableDetailListResponse14(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetAvailableDetailListRequest14()``.

    """

    _ELEMENTS = (
        E(
            "available_access_device", "availableAccessDevice", str, is_complex=True,
            is_array=True,
        ),  # unknown
    )

    #: list(str): *Optional* availableAccessDevice  *Array*
    available_access_device = Field(type=list, required=False, mutable=False)


class GroupAccessDeviceGetAvailableDetailListResponse19(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetAvailableDetailListRequest19()``.

    """

    _ELEMENTS = (
        E(
            "available_access_device", "availableAccessDevice", str, is_complex=True,
            is_array=True,
        ),  # unknown
    )

    #: list(str): *Optional* availableAccessDevice  *Array*
    available_access_device = Field(type=list, required=False, mutable=False)


class GroupAccessDeviceGetEnhancedConfigurationTypeListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetEnhancedConfigurationTypeListRequest()``.

    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_array=True),
    )

    #: list(str): *Optional* deviceType  *Array*
    device_type = Field(type=list, required=False, mutable=False)


class GroupAccessDeviceGetEnhancedConfigurationTypeResponse14(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetEnhancedConfigurationTypeRequest14()``.

    """

    _ELEMENTS = (
        E(
            "supports_enhanced_configuration", "supportsEnhancedConfiguration", bool,
            is_required=True,
        ),
        E("supports_reset", "supportsReset", bool, is_required=True),
        E("configuration_type", "configurationType", str),
        E("configuration_file_name", "configurationFileName", str),
    )

    #: bool: *Required* supportsEnhancedConfiguration
    supports_enhanced_configuration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportsReset
    supports_reset = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* configurationType
    configuration_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)


class GroupAccessDeviceGetListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetListRequest()``.

    Contains a table of devices configured in the group.  The column headings are: "Device
    Name", "Device Type", "Available Ports", "Net Address", "MAC Address", "Status" and
    "Version".
    """

    _ELEMENTS = (
        E(
            "access_device_table", "accessDeviceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* accessDeviceTable  *Tabular*
    access_device_table = Field(type=list, required=True, mutable=False)


class GroupAccessDeviceGetUserListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetUserListRequest()``.

    The column headings for the deviceUserTable are: "Line/Port", "Last Name", "First
    Name", "Phone Number", "User Id", "User Type", "Endpoint Type", "Order", "Primary
    Line/Port", "Extension", "Department", "Email Address", "Private Identity". In IMS
    mode, the table will contain a row for each TEL-URI in the Phone Number column.  In
    Standalone mode, rows for the alternate numbers are not included.  The User Type
    column contains one of the enumerated UserType values.  The Endpoint Type column
    contains one of the enumerated EndpointType values.  The Private Identity column is
    empty is AS mode.
    """

    _ELEMENTS = (
        E(
            "device_user_table", "deviceUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceUserTable  *Tabular*
    device_user_table = Field(type=list, required=True, mutable=False)


class GroupAccountAuthorizationCodesGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupAccountAuthorizationCodesGetAvailableUserListRequest()``.

    The column headings are: "User Id", "Last Name", "First Name", "Hiragana Last Name"
    and "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupAccountAuthorizationCodesGetResponse(OCIResponse):
    """
    Response to ``GroupAccountAuthorizationCodesGetRequest()``.

    The tables has the following column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address".
    """

    _ELEMENTS = (
        E("type", "type", str, is_required=True),
        E("number_of_digits", "numberOfDigits", int, is_required=True),
        E(
            "allow_local_and_toll_free_calls", "allowLocalAndTollFreeCalls", bool,
            is_required=True,
        ),
        E(
            "mandatory_usage_user_table", "mandatoryUsageUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E(
            "optional_usage_user_table", "optionalUsageUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Required* type
    type = Field(type=str, required=True, mutable=False)
    #: int: *Required* numberOfDigits
    number_of_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowLocalAndTollFreeCalls
    allow_local_and_toll_free_calls = Field(type=bool, required=True, mutable=False)
    #: list: *Required* mandatoryUsageUserTable  *Tabular*
    mandatory_usage_user_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* optionalUsageUserTable  *Tabular*
    optional_usage_user_table = Field(type=list, required=True, mutable=False)


class GroupAdminGetListResponse(OCIResponse):
    """
    Response to ``GroupAdminGetListRequest()``.

    Contains a 5 column table with column headings "Administrator ID", "Last Name", "First
    Name", "Department", "Language".
    """

    _ELEMENTS = (
        E(
            "group_admin_table", "groupAdminTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* groupAdminTable  *Tabular*
    group_admin_table = Field(type=list, required=True, mutable=False)


class GroupAdminGetPolicyResponse(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest()``.

    Contains the policy settings for the group administrator.
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "enhanced_service_instance_access", "enhancedServiceInstanceAccess", str,
            is_required=True,
        ),
        E("feature_access_code_access", "featureAccessCodeAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enhancedServiceInstanceAccess
    enhanced_service_instance_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* featureAccessCodeAccess
    feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)


class GroupAdminGetPolicyResponse14sp1(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest14sp1()``.

    Contains the policy settings for the group administrator.
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "enhanced_service_instance_access", "enhancedServiceInstanceAccess", str,
            is_required=True,
        ),
        E("feature_access_code_access", "featureAccessCodeAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enhancedServiceInstanceAccess
    enhanced_service_instance_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* featureAccessCodeAccess
    feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupAccess
    trunk_group_access = Field(type=str, required=True, mutable=False)


class GroupAdminGetPolicyResponse16sp1(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest16sp1()``.

    Contains the policy settings for the group administrator.  Replaced by:
    ``GroupAdminGetPolicyRequest17()``
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "enhanced_service_instance_access", "enhancedServiceInstanceAccess", str,
            is_required=True,
        ),
        E("feature_access_code_access", "featureAccessCodeAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enhancedServiceInstanceAccess
    enhanced_service_instance_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* featureAccessCodeAccess
    feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupAccess
    trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)


class GroupAdminGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest16sp2()``.

    Contains the policy settings for the group administrator.
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "enhanced_service_instance_access", "enhancedServiceInstanceAccess", str,
            is_required=True,
        ),
        E("feature_access_code_access", "featureAccessCodeAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("dialable_caller_id_access", "dialableCallerIDAccess", str, is_required=True),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enhancedServiceInstanceAccess
    enhanced_service_instance_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* featureAccessCodeAccess
    feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupAccess
    trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* dialableCallerIDAccess
    dialable_caller_id_access = Field(type=str, required=True, mutable=False)


class GroupAdminGetPolicyResponse17(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest17()``.

    Contains the policy settings for the group administrator.
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "enhanced_service_instance_access", "enhancedServiceInstanceAccess", str,
            is_required=True,
        ),
        E("feature_access_code_access", "featureAccessCodeAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("office_zone_access", "officeZoneAccess", str, is_required=True),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enhancedServiceInstanceAccess
    enhanced_service_instance_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* featureAccessCodeAccess
    feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupAccess
    trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* officeZoneAccess
    office_zone_access = Field(type=str, required=True, mutable=False)


class GroupAdminGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest17sp3()``.

    Contains the policy settings for the group administrator.  The following elements are
    only used in AS data mode: dialableCallerIDAccess
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "enhanced_service_instance_access", "enhancedServiceInstanceAccess", str,
            is_required=True,
        ),
        E("feature_access_code_access", "featureAccessCodeAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("office_zone_access", "officeZoneAccess", str, is_required=True),
        E("dialable_caller_id_access", "dialableCallerIDAccess", str, is_required=True),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enhancedServiceInstanceAccess
    enhanced_service_instance_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* featureAccessCodeAccess
    feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupAccess
    trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* officeZoneAccess
    office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* dialableCallerIDAccess
    dialable_caller_id_access = Field(type=str, required=True, mutable=False)


class GroupAdminGetPolicyResponse18(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest18()``.

    Contains the policy settings for the group administrator.  The following elements are
    only used in AS data mode: dialableCallerIDAccess
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "enhanced_service_instance_access", "enhancedServiceInstanceAccess", str,
            is_required=True,
        ),
        E("feature_access_code_access", "featureAccessCodeAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("office_zone_access", "officeZoneAccess", str, is_required=True),
        E("number_activation_access", "numberActivationAccess", str, is_required=True),
        E("dialable_caller_id_access", "dialableCallerIDAccess", str, is_required=True),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enhancedServiceInstanceAccess
    enhanced_service_instance_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* featureAccessCodeAccess
    feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupAccess
    trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* officeZoneAccess
    office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* numberActivationAccess
    number_activation_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* dialableCallerIDAccess
    dialable_caller_id_access = Field(type=str, required=True, mutable=False)


class GroupAdminGetPolicyResponse19sp1(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest19sp1()``.

    Contains the policy settings for the group administrator.  The following elements are
    only used in AS data mode: dialableCallerIDAccess
    communicationBarringUserProfileAccess (This element will not be returned in the
    response for Service Provider group administrators)
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "enhanced_service_instance_access", "enhancedServiceInstanceAccess", str,
            is_required=True,
        ),
        E("feature_access_code_access", "featureAccessCodeAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("office_zone_access", "officeZoneAccess", str, is_required=True),
        E("number_activation_access", "numberActivationAccess", str, is_required=True),
        E("dialable_caller_id_access", "dialableCallerIDAccess", str, is_required=True),
        E(
            "communication_barring_user_profile_access",
            "communicationBarringUserProfileAccess", str,
        ),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enhancedServiceInstanceAccess
    enhanced_service_instance_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* featureAccessCodeAccess
    feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupAccess
    trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* officeZoneAccess
    office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* numberActivationAccess
    number_activation_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* dialableCallerIDAccess
    dialable_caller_id_access = Field(type=str, required=True, mutable=False)
    #: str: *Optional* communicationBarringUserProfileAccess
    communication_barring_user_profile_access = Field(type=str, required=False, mutable=False)


class GroupAdminGetPolicyResponse20(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest20()``.

    Contains the policy settings for the group administrator.  The following elements are
    only used in AS data mode: dialableCallerIDAccess verifyTranslationAndroutingAccess
    communicationBarringUserProfileAccess (This element is only returned for groups in an
    enterprise)
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "enhanced_service_instance_access", "enhancedServiceInstanceAccess", str,
            is_required=True,
        ),
        E("feature_access_code_access", "featureAccessCodeAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("office_zone_access", "officeZoneAccess", str, is_required=True),
        E("number_activation_access", "numberActivationAccess", str, is_required=True),
        E("dialable_caller_id_access", "dialableCallerIDAccess", str, is_required=True),
        E(
            "verify_translation_and_routing_access", "verifyTranslationAndRoutingAccess",
            str, is_required=True,
        ),
        E(
            "communication_barring_user_profile_access",
            "communicationBarringUserProfileAccess", str,
        ),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enhancedServiceInstanceAccess
    enhanced_service_instance_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* featureAccessCodeAccess
    feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupAccess
    trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* officeZoneAccess
    office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* numberActivationAccess
    number_activation_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* dialableCallerIDAccess
    dialable_caller_id_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* verifyTranslationAndRoutingAccess
    verify_translation_and_routing_access = Field(type=str, required=True, mutable=False)
    #: str: *Optional* communicationBarringUserProfileAccess
    communication_barring_user_profile_access = Field(type=str, required=False, mutable=False)


class GroupAdminGetResponse(OCIResponse):
    """
    Response to the ``GroupAdminGetRequest()``.

    The response contains the group administrators profile information.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("first_name", "firstName", str),
        E("last_name", "lastName", str),
        E("language", "language", str, is_required=True),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Optional* firstName
    first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* lastName
    last_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)


class GroupAdviceOfChargeGetResponse(OCIResponse):
    """
    Response to ``GroupAdviceOfChargeGetRequest()``.

    Contains a list of Advice of Charge group parameters.
    """

    _ELEMENTS = (
        E(
            "use_group_level_ao_c_settings", "useGroupLevelAoCSettings", bool,
            is_required=True,
        ),
        E(
            "delay_between_notification_seconds", "delayBetweenNotificationSeconds", int,
            is_required=True,
        ),
    )

    #: bool: *Required* useGroupLevelAoCSettings
    use_group_level_ao_c_settings = Field(type=bool, required=True, mutable=False)
    #: int: *Required* delayBetweenNotificationSeconds
    delay_between_notification_seconds = Field(type=int, required=True, mutable=False)


class GroupAnnouncementFileGetListResponse(OCIResponse):
    """
    Response to ``GroupAnnouncementFileGetAvailableListRequest()``.

    When requested, the response contains a table with columns: "Name", "Media Type" and
    "File Size". The "Name" column contains the name of the announcement file.  The "Media
    Type" column contains the media type of the announcement File with the possible
    values: WMA - Windows Media Audio file WAV - A WAV file 3GP - A 3GP file MOV - A MOV
    file using a H.263 or H.264 codec.  The "File Size" column contains the file size (KB)
    of the announcement file.

    The response also contains the current total file size (KB) for the group across all
    media types and the maximum total file size (MB) allowed for the group.
    """

    _ELEMENTS = (
        E("announcement_table", "announcementTable", list, is_complex=True, is_table=True),
        E("total_file_size", "totalFileSize", int, is_required=True),
        E("max_file_size", "maxFileSize", int, is_required=True),
    )

    #: list: *Optional* announcementTable  *Tabular*
    announcement_table = Field(type=list, required=False, mutable=False)
    #: int: *Required* totalFileSize
    total_file_size = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxFileSize
    max_file_size = Field(type=int, required=True, mutable=False)


class GroupAnnouncementFileGetResponse(OCIResponse):
    """
    Response to ``GroupAnnouncementFileGetRequest()``.

    The response contains the file size, uploaded timestamp, description and usage for an
    announcement file in the user announcement repository.  The usage table has columns
    "Service Name", and "Instance Name". The Service Name values correspond to string
    values of the GroupService and UserService data types.  With the exception of the
    string "Voice Portal" which is returned when the announcement is being used by Voice
    Portal Personalized Name.
    """

    _ELEMENTS = (
        E("description", "description", str, is_required=True),
        E("filesize", "filesize", int, is_required=True),
        E("last_uploaded", "lastUploaded", str, is_required=True),
        E(
            "usage_table", "usageTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Required* description
    description = Field(type=str, required=True, mutable=False)
    #: int: *Required* filesize
    filesize = Field(type=int, required=True, mutable=False)
    #: str: *Required* lastUploaded
    last_uploaded = Field(type=str, required=True, mutable=False)
    #: list: *Required* usageTable  *Tabular*
    usage_table = Field(type=list, required=True, mutable=False)


class GroupApplicationServerSetGetResponse(OCIResponse):
    """
    Response to the ``GroupApplicationServerSetGetRequest()``.

    The response contains the group's Application Server set information.
    """

    _ELEMENTS = (
        E("application_server_set_name", "applicationServerSetName", str),
    )

    #: str: *Optional* applicationServerSetName
    application_server_set_name = Field(type=str, required=False, mutable=False)


class GroupAutoAttendantGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupAutoAttendantGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Video", "Phone
    Number", "Extension", "Department", "Is Active", "Type". The column values for "Video"
    and "Is Active" can either be true, or false.  The column values for "Type" can either
    be Basic or Standard.  In HSS Mode the value for the "Type" column will always be
    populated with Basic.
    """

    _ELEMENTS = (
        E(
            "auto_attendant_table", "autoAttendantTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* autoAttendantTable  *Tabular*
    auto_attendant_table = Field(type=list, required=True, mutable=False)


class GroupAutoAttendantSubmenuGetListResponse(OCIResponse):
    """
    Response to the ``GroupAutoAttendantSubmenuGetListRequest()``.

    Contains a table with column headings: "Submenu Id" "Is Used". The column values for
    "Is Used" can either be true, or false.
    """

    _ELEMENTS = (
        E(
            "submenu_table", "submenuTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* submenuTable  *Tabular*
    submenu_table = Field(type=list, required=True, mutable=False)


class GroupAutoAttendantSubmenuGetUsageListResponse(OCIResponse):
    """
    Response to the ``GroupAutoAttendantSubmenuGetUsageListRequest()``.

    Contains a table with column headings: "Type" and "Submenu ID". The "Type" Column will
    contain one of the following: Business Hours Menu, After Hours Menu, Holiday Menu or
    Submenu.  The "Submenu ID" Column will be left blank when the "Type" Column contains
    one of the base menu types (Business Hours Menu, After Hours Menu or Holiday Menu),
    and will contain the Submenu ID when the "Type" Column contains type Submenu.
    """

    _ELEMENTS = (
        E(
            "submenu_table", "submenuTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* submenuTable  *Tabular*
    submenu_table = Field(type=list, required=True, mutable=False)


class GroupBroadWorksAnywhereGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupBroadWorksAnywhereGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active". The column value for "Is Active" can either be
    true, or false.
    """

    _ELEMENTS = (
        E(
            "broad_works_anywhere_table", "broadWorksAnywhereTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* broadWorksAnywhereTable  *Tabular*
    broad_works_anywhere_table = Field(type=list, required=True, mutable=False)


class GroupBroadWorksMobileManagerGetDomainListResponse(OCIResponse):
    """
    Response to the ``GroupBroadWorksMobileManagerGetDomainListRequest()``.

    Contains the list of domains.
    """

    _ELEMENTS = (
        E("domain_name", "domainName", str, is_array=True),
    )

    #: list(str): *Optional* domainName  *Array*
    domain_name = Field(type=list, required=False, mutable=False)


class GroupBroadWorksMobileManagerGetHomeZoneListResponse(OCIResponse):
    """
    Response to the ``GroupBroadWorksMobileManagerGetHomeZoneListRequest()``.

    Contains a table with column headings: "Home Zone Id", "Domain Name", "Mobile Country
    Code", "Mobile Network Code", "Local Area Code" and "Cell Identity".
    """

    _ELEMENTS = (
        E(
            "home_zones_table", "homeZonesTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* homeZonesTable  *Tabular*
    home_zones_table = Field(type=list, required=True, mutable=False)


class GroupBroadWorksMobileManagerGetHomeZoneResponse(OCIResponse):
    """
    Response to the ``GroupBroadWorksMobileManagerGetHomeZoneRequest()``
    """

    _ELEMENTS = (
        E("home_zone_domain_name", "homeZoneDomainName", str, is_required=True),
        E("mobile_country_code", "mobileCountryCode", str, is_required=True),
        E("mobile_network_code", "mobileNetworkCode", str, is_required=True),
        E("location_area_code", "locationAreaCode", str, is_required=True),
        E("cell_identity", "cellIdentity", str, is_required=True),
    )

    #: str: *Required* homeZoneDomainName
    home_zone_domain_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* mobileCountryCode
    mobile_country_code = Field(type=str, required=True, mutable=False)
    #: str: *Required* mobileNetworkCode
    mobile_network_code = Field(type=str, required=True, mutable=False)
    #: str: *Required* locationAreaCode
    location_area_code = Field(type=str, required=True, mutable=False)
    #: str: *Required* cellIdentity
    cell_identity = Field(type=str, required=True, mutable=False)


class GroupBroadWorksMobileManagerGetResponse(OCIResponse):
    """
    Response to the ``GroupBroadWorksMobileManagerGetRequest()``
    """

    _ELEMENTS = (
        E("mobile_manager_id", "mobileManagerId", str, is_required=True),
        E("name", "name", str, is_required=True),
        E("is_active", "isActive", bool, is_required=True),
        E("local_to_carrier", "localToCarrier", bool, is_required=True),
        E("deactivation_reason", "deactivationReason", str),
        E("max_tx_per_second_enabled", "maxTxPerSecondEnabled", bool, is_required=True),
        E("max_tx_per_second", "maxTxPerSecond", int),
        E("tldn_enabled", "tldnEnabled", bool, is_required=True),
        E("generic_number_enabled", "genericNumberEnabled", bool, is_required=True),
        E("mobile_state_check_enabled", "mobileStateCheckEnabled", bool, is_required=True),
        E(
            "location_based_services_enabled", "locationBasedServicesEnabled", bool,
            is_required=True,
        ),
    )

    #: str: *Required* mobileManagerId
    mobile_manager_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* name
    name = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* localToCarrier
    local_to_carrier = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* deactivationReason
    deactivation_reason = Field(type=str, required=False, mutable=False)
    #: bool: *Required* maxTxPerSecondEnabled
    max_tx_per_second_enabled = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* maxTxPerSecond
    max_tx_per_second = Field(type=int, required=False, mutable=False)
    #: bool: *Required* tldnEnabled
    tldn_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* genericNumberEnabled
    generic_number_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mobileStateCheckEnabled
    mobile_state_check_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* locationBasedServicesEnabled
    location_based_services_enabled = Field(type=bool, required=True, mutable=False)


class GroupBroadWorksMobilityGetResponse(OCIResponse):
    """
    The response to a ``GroupBroadWorksMobilityGetRequest()``.

    """

    _ELEMENTS = (
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("enable_location_services", "enableLocationServices", bool, is_required=True),
        E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
        E(
            "enable_mobile_state_checking", "enableMobileStateChecking", bool,
            is_required=True,
        ),
        E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
        E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
    )

    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableLocationServices
    enable_location_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMSRNLookup
    enable_msrn_lookup = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMobileStateChecking
    enable_mobile_state_checking = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallOriginations
    deny_call_originations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallTerminations
    deny_call_terminations = Field(type=bool, required=True, mutable=False)


class GroupBroadWorksMobilityGetResponse19sp1(OCIResponse):
    """
    The response to a ``GroupBroadWorksMobilityGetRequest19sp1()``.

    """

    _ELEMENTS = (
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("enable_location_services", "enableLocationServices", bool, is_required=True),
        E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
        E(
            "enable_mobile_state_checking", "enableMobileStateChecking", bool,
            is_required=True,
        ),
        E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
        E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
        E(
            "enable_announcement_suppression", "enableAnnouncementSuppression", bool,
            is_required=True,
        ),
    )

    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableLocationServices
    enable_location_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMSRNLookup
    enable_msrn_lookup = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMobileStateChecking
    enable_mobile_state_checking = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallOriginations
    deny_call_originations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallTerminations
    deny_call_terminations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAnnouncementSuppression
    enable_announcement_suppression = Field(type=bool, required=True, mutable=False)


class GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListResponse(OCIResponse):
    """
    Response to the
    ``GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListRequest()``.

    The response contains a table with columns: "Mobile Number", "User Id", "Last Name",
    "First Name","Phone Number", "Extension", "Department",. The "Mobile Number" column
    contains a single DN. The "User Id", "Last Name" and "First Name" columns contains the
    corresponding attributes of the user possessing the DN(s). The "Phone Number" column
    contains a single DN. The "Department" column contains the department of the user if
    it is part of a department.
    """

    _ELEMENTS = (
        E(
            "mobile_subscriber_directory_number_table",
            "mobileSubscriberDirectoryNumberTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* mobileSubscriberDirectoryNumberTable  *Tabular*
    mobile_subscriber_directory_number_table = Field(type=list, required=True, mutable=False)


class GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListResponse(OCIResponse):
    """
    Response to
    ``GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListRequest()``.

    Contains a list of available Mobile Subscriber Directory Numbers not yet assigned to
    any user.
    """

    _ELEMENTS = (
        E(
            "mobile_subscriber_directory_number", "mobileSubscriberDirectoryNumber", str,
            is_array=True,
        ),
    )

    #: list(str): *Optional* mobileSubscriberDirectoryNumber  *Array*
    mobile_subscriber_directory_number = Field(type=list, required=False, mutable=False)


class GroupCallCapacityManagementGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCallCapacityManagementGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallCapacityManagementGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupCallCapacityManagementGetInstanceListRequest()``.

    Contains a table with column headings: "Name", "Is Default", "Maximum Calls", "Maximum
    Incoming Calls", "Maximum Outgoing Calls".
    """

    _ELEMENTS = (
        E(
            "call_capacity_group_table", "callCapacityGroupTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callCapacityGroupTable  *Tabular*
    call_capacity_group_table = Field(type=list, required=True, mutable=False)


class GroupCallCapacityManagementGetInstanceResponse(OCIResponse):
    """
    Response to the ``GroupCallCapacityManagementGetInstanceRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("name", "name", str, is_required=True),
        E("max_active_calls_allowed", "maxActiveCallsAllowed", int, is_required=True),
        E("max_incoming_active_calls_allowed", "maxIncomingActiveCallsAllowed", int),
        E("max_outgoing_active_calls_allowed", "maxOutgoingActiveCallsAllowed", int),
        E("default_group_for_new_users", "defaultGroupForNewUsers", bool, is_required=True),
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: str: *Required* name
    name = Field(type=str, required=True, mutable=False)
    #: int: *Required* maxActiveCallsAllowed
    max_active_calls_allowed = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingActiveCallsAllowed
    max_incoming_active_calls_allowed = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingActiveCallsAllowed
    max_outgoing_active_calls_allowed = Field(type=int, required=False, mutable=False)
    #: bool: *Required* defaultGroupForNewUsers
    default_group_for_new_users = Field(type=bool, required=True, mutable=False)
    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterAgentThresholdDefaultProfileGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterAgentThresholdDefaultProfileGetRequest()``.

    The agent table contains the agents assigned to the profile and has column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address";
    """

    _ELEMENTS = (
        E("profile_name", "profileName", str, is_required=True),
        E("profile_description", "profileDescription", str),
        E(
            "threshold_current_call_state_idle_time_yellow",
            "thresholdCurrentCallStateIdleTimeYellow", int,
        ),
        E(
            "threshold_current_call_state_idle_time_red",
            "thresholdCurrentCallStateIdleTimeRed", int,
        ),
        E(
            "threshold_current_call_state_on_call_time_yellow",
            "thresholdCurrentCallStateOnCallTimeYellow", int,
        ),
        E(
            "threshold_current_call_state_on_call_time_red",
            "thresholdCurrentCallStateOnCallTimeRed", int,
        ),
        E(
            "threshold_current_agent_state_unavailable_time_yellow",
            "thresholdCurrentAgentStateUnavailableTimeYellow", int,
        ),
        E(
            "threshold_current_agent_state_unavailable_time_red",
            "thresholdCurrentAgentStateUnavailableTimeRed", int,
        ),
        E("threshold_average_busy_in_time_yellow", "thresholdAverageBusyInTimeYellow", int),
        E("threshold_average_busy_in_time_red", "thresholdAverageBusyInTimeRed", int),
        E("threshold_average_busy_out_time_yellow", "thresholdAverageBusyOutTimeYellow", int),
        E("threshold_average_busy_out_time_red", "thresholdAverageBusyOutTimeRed", int),
        E("threshold_average_wrap_up_time_yellow", "thresholdAverageWrapUpTimeYellow", int),
        E("threshold_average_wrap_up_time_red", "thresholdAverageWrapUpTimeRed", int),
        E("enable_notification_email", "enableNotificationEmail", bool, is_required=True),
        E("notification_email_address", "notificationEmailAddress", str),
        E("agent_table", "agentTable", list, is_complex=True, is_table=True),
    )

    #: str: *Required* profileName
    profile_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* profileDescription
    profile_description = Field(type=str, required=False, mutable=False)
    #: int: *Optional* thresholdCurrentCallStateIdleTimeYellow
    threshold_current_call_state_idle_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateIdleTimeRed
    threshold_current_call_state_idle_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateOnCallTimeYellow
    threshold_current_call_state_on_call_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateOnCallTimeRed
    threshold_current_call_state_on_call_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentAgentStateUnavailableTimeYellow
    threshold_current_agent_state_unavailable_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentAgentStateUnavailableTimeRed
    threshold_current_agent_state_unavailable_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdAverageBusyInTimeYellow
    threshold_average_busy_in_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyInTimeRed
    threshold_average_busy_in_time_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyOutTimeYellow
    threshold_average_busy_out_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyOutTimeRed
    threshold_average_busy_out_time_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageWrapUpTimeYellow
    threshold_average_wrap_up_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageWrapUpTimeRed
    threshold_average_wrap_up_time_red = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableNotificationEmail
    enable_notification_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* notificationEmailAddress
    notification_email_address = Field(type=str, required=False, mutable=False)
    #: list: *Optional* agentTable  *Tabular*
    agent_table = Field(type=list, required=False, mutable=False)


class GroupCallCenterAgentThresholdProfileGetAvailableAgentListResponse(OCIResponse):
    """
    Response to the
    ``GroupCallCenterAgentThresholdProfileGetAvailableAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "Agent Threshold Profile";
    """

    _ELEMENTS = (
        E(
            "agent_table", "agentTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* agentTable  *Tabular*
    agent_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterAgentThresholdProfileGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterAgentThresholdProfileGetListRequest()``.

    Contains a table with all the Call Center Agent Threshold Profiles in the Group.  The
    column headings are: "Default", "Name", "Description".
    """

    _ELEMENTS = (
        E(
            "profiles_table", "profilesTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* profilesTable  *Tabular*
    profiles_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterAgentThresholdProfileGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterAgentThresholdProfileGetRequest()``.

    The agentTable contains the agents assigned to the profile and has the column
    headings: "User Id", "Group Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address";
    """

    _ELEMENTS = (
        E("profile_description", "profileDescription", str),
        E(
            "threshold_current_call_state_idle_time_yellow",
            "thresholdCurrentCallStateIdleTimeYellow", int,
        ),
        E(
            "threshold_current_call_state_idle_time_red",
            "thresholdCurrentCallStateIdleTimeRed", int,
        ),
        E(
            "threshold_current_call_state_on_call_time_yellow",
            "thresholdCurrentCallStateOnCallTimeYellow", int,
        ),
        E(
            "threshold_current_call_state_on_call_time_red",
            "thresholdCurrentCallStateOnCallTimeRed", int,
        ),
        E(
            "threshold_current_agent_state_unavailable_time_yellow",
            "thresholdCurrentAgentStateUnavailableTimeYellow", int,
        ),
        E(
            "threshold_current_agent_state_unavailable_time_red",
            "thresholdCurrentAgentStateUnavailableTimeRed", int,
        ),
        E("threshold_average_busy_in_time_yellow", "thresholdAverageBusyInTimeYellow", int),
        E("threshold_average_busy_in_time_red", "thresholdAverageBusyInTimeRed", int),
        E("threshold_average_busy_out_time_yellow", "thresholdAverageBusyOutTimeYellow", int),
        E("threshold_average_busy_out_time_red", "thresholdAverageBusyOutTimeRed", int),
        E("threshold_average_wrap_up_time_yellow", "thresholdAverageWrapUpTimeYellow", int),
        E("threshold_average_wrap_up_time_red", "thresholdAverageWrapUpTimeRed", int),
        E("enable_notification_email", "enableNotificationEmail", bool, is_required=True),
        E("notification_email_address", "notificationEmailAddress", str),
        E(
            "agent_table", "agentTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Optional* profileDescription
    profile_description = Field(type=str, required=False, mutable=False)
    #: int: *Optional* thresholdCurrentCallStateIdleTimeYellow
    threshold_current_call_state_idle_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateIdleTimeRed
    threshold_current_call_state_idle_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateOnCallTimeYellow
    threshold_current_call_state_on_call_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentCallStateOnCallTimeRed
    threshold_current_call_state_on_call_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentAgentStateUnavailableTimeYellow
    threshold_current_agent_state_unavailable_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentAgentStateUnavailableTimeRed
    threshold_current_agent_state_unavailable_time_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdAverageBusyInTimeYellow
    threshold_average_busy_in_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyInTimeRed
    threshold_average_busy_in_time_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyOutTimeYellow
    threshold_average_busy_out_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageBusyOutTimeRed
    threshold_average_busy_out_time_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageWrapUpTimeYellow
    threshold_average_wrap_up_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageWrapUpTimeRed
    threshold_average_wrap_up_time_red = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableNotificationEmail
    enable_notification_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* notificationEmailAddress
    notification_email_address = Field(type=str, required=False, mutable=False)
    #: list: *Required* agentTable  *Tabular*
    agent_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterAgentUnavailableCodeGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterAgentUnavailableCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description".
    """

    _ELEMENTS = (
        E(
            "unavailable_codes_table", "unavailableCodesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* unavailableCodesTable  *Tabular*
    unavailable_codes_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterAgentUnavailableCodeGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterAgentUnavailableCodeGetRequest()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("description", "description", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class GroupCallCenterAgentUnavailableCodeSettingsGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterAgentUnavailableCodeSettingsGetRequest()``.

    Replaced by ``GroupCallCenterAgentUnavailableCodeSettingsGetResponse17sp4()``.
    """

    _ELEMENTS = (
        E(
            "enable_agent_unavailable_codes", "enableAgentUnavailableCodes", bool,
            is_required=True,
        ),
        E("default_agent_unavailable_code_on_dnd", "defaultAgentUnavailableCodeOnDND", str),
        E(
            "default_agent_unavailable_code_on_personal_calls",
            "defaultAgentUnavailableCodeOnPersonalCalls", str,
        ),
        E(
            "default_agent_unavailable_code_on_consecutive_bounces",
            "defaultAgentUnavailableCodeOnConsecutiveBounces", str,
        ),
        E(
            "force_use_of_agent_unavailable_codes", "forceUseOfAgentUnavailableCodes",
            bool, is_required=True,
        ),
        E("default_agent_unavailable_code", "defaultAgentUnavailableCode", str),
    )

    #: bool: *Required* enableAgentUnavailableCodes
    enable_agent_unavailable_codes = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCodeOnDND
    default_agent_unavailable_code_on_dnd = Field(type=str, required=False, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCodeOnPersonalCalls
    default_agent_unavailable_code_on_personal_calls = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* defaultAgentUnavailableCodeOnConsecutiveBounces
    default_agent_unavailable_code_on_consecutive_bounces = Field(
        type=str, required=False, mutable=False,
    )
    #: bool: *Required* forceUseOfAgentUnavailableCodes
    force_use_of_agent_unavailable_codes = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCode
    default_agent_unavailable_code = Field(type=str, required=False, mutable=False)


class GroupCallCenterAgentUnavailableCodeSettingsGetResponse17sp4(OCIResponse):
    """
    Response to ``GroupCallCenterAgentUnavailableCodeSettingsGetRequest17sp4()``.

    """

    _ELEMENTS = (
        E(
            "enable_agent_unavailable_codes", "enableAgentUnavailableCodes", bool,
            is_required=True,
        ),
        E("default_agent_unavailable_code_on_dnd", "defaultAgentUnavailableCodeOnDND", str),
        E(
            "default_agent_unavailable_code_on_personal_calls",
            "defaultAgentUnavailableCodeOnPersonalCalls", str,
        ),
        E(
            "default_agent_unavailable_code_on_consecutive_bounces",
            "defaultAgentUnavailableCodeOnConsecutiveBounces", str,
        ),
        E(
            "default_agent_unavailable_code_on_not_reachable",
            "defaultAgentUnavailableCodeOnNotReachable", str,
        ),
        E(
            "force_use_of_agent_unavailable_codes", "forceUseOfAgentUnavailableCodes",
            bool, is_required=True,
        ),
        E("default_agent_unavailable_code", "defaultAgentUnavailableCode", str),
    )

    #: bool: *Required* enableAgentUnavailableCodes
    enable_agent_unavailable_codes = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCodeOnDND
    default_agent_unavailable_code_on_dnd = Field(type=str, required=False, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCodeOnPersonalCalls
    default_agent_unavailable_code_on_personal_calls = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* defaultAgentUnavailableCodeOnConsecutiveBounces
    default_agent_unavailable_code_on_consecutive_bounces = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* defaultAgentUnavailableCodeOnNotReachable
    default_agent_unavailable_code_on_not_reachable = Field(
        type=str, required=False, mutable=False,
    )
    #: bool: *Required* forceUseOfAgentUnavailableCodes
    force_use_of_agent_unavailable_codes = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultAgentUnavailableCode
    default_agent_unavailable_code = Field(type=str, required=False, mutable=False)


class GroupCallCenterBouncedCallGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterBouncedCallGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "number_of_rings_before_bouncing_call", "numberOfRingsBeforeBouncingCall",
            int, is_required=True,
        ),
        E("enable_transfer", "enableTransfer", bool),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "bounce_call_when_agent_unavailable", "bounceCallWhenAgentUnavailable", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfRingsBeforeBouncingCall
    number_of_rings_before_bouncing_call = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* enableTransfer
    enable_transfer = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* bounceCallWhenAgentUnavailable
    bounce_call_when_agent_unavailable = Field(type=bool, required=True, mutable=False)


class GroupCallCenterBouncedCallGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterBouncedCallGetRequest17()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "number_of_rings_before_bouncing_call", "numberOfRingsBeforeBouncingCall",
            int, is_required=True,
        ),
        E("enable_transfer", "enableTransfer", bool),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("bounce_call_when_agent_unavailable", "bounceCallWhenAgentUnavailable", bool),
        E("alert_call_center_call_on_hold", "alertCallCenterCallOnHold", bool),
        E("alert_call_center_call_on_hold_seconds", "alertCallCenterCallOnHoldSeconds", int),
        E("bounce_call_center_call_on_hold", "bounceCallCenterCallOnHold", bool),
        E(
            "bounce_call_center_call_on_hold_seconds",
            "bounceCallCenterCallOnHoldSeconds", int,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfRingsBeforeBouncingCall
    number_of_rings_before_bouncing_call = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* enableTransfer
    enable_transfer = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* bounceCallWhenAgentUnavailable
    bounce_call_when_agent_unavailable = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* alertCallCenterCallOnHold
    alert_call_center_call_on_hold = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* alertCallCenterCallOnHoldSeconds
    alert_call_center_call_on_hold_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* bounceCallCenterCallOnHold
    bounce_call_center_call_on_hold = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* bounceCallCenterCallOnHoldSeconds
    bounce_call_center_call_on_hold_seconds = Field(type=int, required=False, mutable=False)


class GroupCallCenterCallDispositionCodeGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCallDispositionCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description".
    """

    _ELEMENTS = (
        E(
            "disposition_codes_table", "dispositionCodesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* dispositionCodesTable  *Tabular*
    disposition_codes_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterCallDispositionCodeGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCallDispositionCodeGetRequest()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("description", "description", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class GroupCallCenterCallDispositionCodeGetUsageListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCallDispositionCodeGetUsageListRequest()``.

    The Type column contains either "Call Center" or "Route Point". Contains a table with
    column headings: "Id", "Name" and "Type".
    """

    _ELEMENTS = (
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterComfortMessageBypassGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterComfortMessageBypassGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "call_waiting_age_threshold_seconds", "callWaitingAgeThresholdSeconds", int,
            is_required=True,
        ),
        E(
            "play_announcement_after_ringing", "playAnnouncementAfterRinging", bool,
            is_required=True,
        ),
        E(
            "ring_time_before_playing_announcement_seconds",
            "ringTimeBeforePlayingAnnouncementSeconds", int, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E("audio_file_url", "audioFileUrl", str),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E("video_file_url", "videoFileUrl", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* callWaitingAgeThresholdSeconds
    call_waiting_age_threshold_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playAnnouncementAfterRinging
    play_announcement_after_ringing = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeBeforePlayingAnnouncementSeconds
    ring_time_before_playing_announcement_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)


class GroupCallCenterCurrentAndPastAgentGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCurrentAndPastAgentGetListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "deleted_agent_user_table", "deletedAgentUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* deletedAgentUserTable  *Tabular*
    deleted_agent_user_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterCurrentAndPastCallCenterGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCurrentAndPastCallCenterGetListRequest()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_array=True),
        E("deleted_service_user_id", "deletedServiceUserId", str, is_array=True),
    )

    #: list(str): *Optional* serviceUserId  *Array*
    service_user_id = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* deletedServiceUserId  *Array*
    deleted_service_user_id = Field(type=list, required=False, mutable=False)


class GroupCallCenterCurrentAndPastDNISGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCurrentAndPastDNISGetListRequest()``.

    """

    _ELEMENTS = (
        E("name", "name", str, is_array=True),
        E("deleted_name", "deletedName", str, is_array=True),
    )

    #: list(str): *Optional* name  *Array*
    name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* deletedName  *Array*
    deleted_name = Field(type=list, required=False, mutable=False)


class GroupCallCenterDistinctiveRingingGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterDistinctiveRingingGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "distinctive_ringing_call_center_calls", "distinctiveRingingCallCenterCalls",
            bool, is_required=True,
        ),
        E(
            "distinctive_ringing_ring_pattern_for_call_center",
            "distinctiveRingingRingPatternForCallCenter", str, is_required=True,
        ),
        E(
            "distinctive_ringing_force_delivery_ring_pattern",
            "distinctiveRingingForceDeliveryRingPattern", str,
        ),
    )

    #: bool: *Required* distinctiveRingingCallCenterCalls
    distinctive_ringing_call_center_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* distinctiveRingingRingPatternForCallCenter
    distinctive_ringing_ring_pattern_for_call_center = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Optional* distinctiveRingingForceDeliveryRingPattern
    distinctive_ringing_force_delivery_ring_pattern = Field(
        type=str, required=False, mutable=False,
    )


class GroupCallCenterEnhancedGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedGetRequest()``.

    """

    _ELEMENTS = (
        E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool, is_required=True),
        E("wrap_up_seconds", "wrapUpSeconds", int),
    )

    #: bool: *Required* overrideAgentWrapUpTime
    override_agent_wrap_up_time = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* wrapUpSeconds
    wrap_up_seconds = Field(type=int, required=False, mutable=False)


class GroupCallCenterEnhancedReportingBrandingGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterEnhancedReportingBrandingGetRequest()``.

    """

    _ELEMENTS = (
        E("branding_choice", "brandingChoice", str, is_required=True),
        E("branding_file_description", "brandingFileDescription", str),
    )

    #: str: *Required* brandingChoice
    branding_choice = Field(type=str, required=True, mutable=False)
    #: str: *Optional* brandingFileDescription
    branding_file_description = Field(type=str, required=False, mutable=False)


class GroupCallCenterEnhancedReportingGetAvailableReportTemplateListResponse(OCIResponse):
    """
    Response to
    ``GroupCallCenterEnhancedReportingGetAvailableReportTemplateListRequest()``.

    Contains a table with column headings: "Name", "Description" and "Level", "Is Agent
    Required", "Is Call Center Required", "Is Call Center Dnis Required","Is Real Time
    Report", "Is Sampling Period Required", "Call Completion Threshold Parameter", "Short
    Duration Threshold Parameter", "Service Level Threshold Parameter", "Service Level
    Inclusions Parameter", "Service Level Objective Threshold Parameter", "Abandoned Call
    Threshold Parameter", "Service Level Threshold Parameter Number", and "Abandoned Call
    Threshold Parameter Number". The possible values for "Level" are "System" and "Group".
    The possible values for "Is Agent Required", "Is Call Center Required", "Is Call
    Center Dnis Required", "Is Real Time Report" and "Is Sampling Period Required" are
    "true" and "false". The possible values for "Call Completion Threshold Parameter",
    "Short Duration Threshold Parameter", "Service Level Threshold Parameter", "Service
    Level Inclusions Parameter","Service Level Objective Threshold Parameter" and
    "Abandoned Call Threshold Parameter" are "Required", "Hidden" and "Does Not Apply".
    """

    _ELEMENTS = (
        E(
            "report_template_table", "reportTemplateTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* reportTemplateTable  *Tabular*
    report_template_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterEnhancedReportingGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingGetRequest()``.

    Replaced by ``GroupCallCenterEnhancedReportingGetResponse19()``
    """

    _ELEMENTS = (
        E("reporting_server", "reportingServer", str, is_required=True),
        E("web_statistic_source", "webStatisticSource", str, is_required=True),
    )

    #: str: *Required* reportingServer
    reporting_server = Field(type=str, required=True, mutable=False)
    #: str: *Required* webStatisticSource
    web_statistic_source = Field(type=str, required=True, mutable=False)


class GroupCallCenterEnhancedReportingGetResponse19(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingGetRequest19()``.

    """

    _ELEMENTS = (
        E("reporting_server", "reportingServer", str, is_required=True),
    )

    #: str: *Required* reportingServer
    reporting_server = Field(type=str, required=True, mutable=False)


class GroupCallCenterEnhancedReportingReportTemplateGetListResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingReportTemplateGetListRequest()``.

    Contains a table with column headings: "Name", "Description", "Type" and "Enabled"
    """

    _ELEMENTS = (
        E(
            "report_template_table", "reportTemplateTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* reportTemplateTable  *Tabular*
    report_template_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterEnhancedReportingReportTemplateGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingReportTemplateGetRequest()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E("data_template", "dataTemplate", str, is_required=True),
        E("filter_number", "filterNumber", int),
        E("xslt_template_description", "xsltTemplateDescription", str, is_required=True),
        E("scope", "scope", str, is_required=True),
        E("is_enabled", "isEnabled", bool, is_required=True),
        E("is_realtime_report", "isRealtimeReport", bool),
        E("call_completion_threshold_param", "callCompletionThresholdParam", str),
        E("short_duration_threshold_param", "shortDurationThresholdParam", str),
        E("service_level_threshold_param", "serviceLevelThresholdParam", str),
        E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
        E(
            "service_level_objective_threshold_param",
            "serviceLevelObjectiveThresholdParam", str,
        ),
        E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
        E("service_level_threshold_param_number", "serviceLevelThresholdParamNumber", int),
        E("abandoned_call_threshold_param_number", "abandonedCallThresholdParamNumber", int),
        E("filter_value", "filterValue", str),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* dataTemplate
    data_template = Field(type=str, required=True, mutable=False)
    #: int: *Optional* filterNumber
    filter_number = Field(type=int, required=False, mutable=False)
    #: str: *Required* xsltTemplateDescription
    xslt_template_description = Field(type=str, required=True, mutable=False)
    #: str: *Required* scope
    scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isEnabled
    is_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* isRealtimeReport
    is_realtime_report = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* callCompletionThresholdParam
    call_completion_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* shortDurationThresholdParam
    short_duration_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelThresholdParam
    service_level_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelInclusionsParam
    service_level_inclusions_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelObjectiveThresholdParam
    service_level_objective_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* abandonedCallThresholdParam
    abandoned_call_threshold_param = Field(type=str, required=False, mutable=False)
    #: int: *Optional* serviceLevelThresholdParamNumber
    service_level_threshold_param_number = Field(type=int, required=False, mutable=False)
    #: int: *Optional* abandonedCallThresholdParamNumber
    abandoned_call_threshold_param_number = Field(type=int, required=False, mutable=False)
    #: str: *Optional* filterValue
    filter_value = Field(type=str, required=False, mutable=False)


class GroupCallCenterEnhancedReportingScheduledReportGetActiveListResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingScheduledReportGetActiveListRequest()``
    Contains a table with column headings : "Schedule Name", "Description", "Created By",
    "Is Supervisor Report", "Report Template Name", "Report Template Level" and
    "Recurring".

    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and
    "Yearly". The possible values for "Report Template Level" are "System" and "Group".
    """

    _ELEMENTS = (
        E(
            "scheduled_report_table", "scheduledReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduledReportTable  *Tabular*
    scheduled_report_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterEnhancedReportingScheduledReportGetCompletedListResponse(OCIResponse):
    """
    Response to
    ``GroupCallCenterEnhancedReportingScheduledReportGetCompletedListRequest()`` Contains
    a table with column headings : "Schedule Name", "Description", "Created By", "Is
    Supervisor Report", "Report Template Name", "Report Template Level" and "Recurring".

    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and
    "Yearly". The possible values for "Report Template Level" are "System" and "Group".
    """

    _ELEMENTS = (
        E(
            "scheduled_report_table", "scheduledReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduledReportTable  *Tabular*
    scheduled_report_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterEnhancedReportingScheduledReportGetListResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingScheduledReportGetListRequest()``.

    Contains a table with column headings : "Schedule Name", "Description", "Created By",
    "Is Supervisor Report", "Status", "Report Template Name", "Report Template Level" and
    "Recurring". The "Created By" can be either "Administrator" or user id if created by
    supervisor.  The possible values for "Status" are "Active", and "Completed". The
    possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and "Yearly".
    The possible values for "Report Template Level" are "System" and "Group".
    """

    _ELEMENTS = (
        E(
            "scheduled_report_table", "scheduledReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduledReportTable  *Tabular*
    scheduled_report_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse(OCIResponse):
    """
    Response to
    ``GroupCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest()``.

    Contains a table with column headings: "Schedule Name", "Created By", "Created By
    Supervisor", and "Is Active". The "Created By" can be either "Administrator" or user
    id if created by supervisor.
    """

    _ELEMENTS = (
        E(
            "schedule_report_table", "scheduleReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduleReportTable  *Tabular*
    schedule_report_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterForcedForwardingGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterForcedForwardingGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E("allow_enable_via_fac", "allowEnableViaFAC", bool, is_required=True),
        E(
            "play_announcement_before_forwarding", "playAnnouncementBeforeForwarding",
            bool, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E("audio_file_url", "audioFileUrl", str),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E("video_file_url", "videoFileUrl", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowEnableViaFAC
    allow_enable_via_fac = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playAnnouncementBeforeForwarding
    play_announcement_before_forwarding = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)


class GroupCallCenterGetAgentListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Weight", "Phone Number", "Extension",
    "Department", "Email Address", "Skill Level".
    """

    _ELEMENTS = (
        E(
            "agent_table", "agentTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* agentTable  *Tabular*
    agent_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetAnnouncementResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest()``.

    """

    _ELEMENTS = (
        E("entrance_message_selection", "entranceMessageSelection", str, is_required=True),
        E(
            "entrance_message_audio_file_description",
            "entranceMessageAudioFileDescription", str,
        ),
        E(
            "entrance_message_video_file_description",
            "entranceMessageVideoFileDescription", str,
        ),
        E(
            "periodic_comfort_message_selection", "periodicComfortMessageSelection", str,
            is_required=True,
        ),
        E(
            "periodic_comfort_message_audio_file_description",
            "periodicComfortMessageAudioFileDescription", str,
        ),
        E(
            "periodic_comfort_message_video_file_description",
            "periodicComfortMessageVideoFileDescription", str,
        ),
        E("on_hold_message_selection", "onHoldMessageSelection", str, is_required=True),
        E("on_hold_message_audio_file_description", "onHoldMessageAudioFileDescription", str),
        E("on_hold_message_video_file_description", "onHoldMessageVideoFileDescription", str),
    )

    #: str: *Required* entranceMessageSelection
    entrance_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* entranceMessageAudioFileDescription
    entrance_message_audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* entranceMessageVideoFileDescription
    entrance_message_video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Required* periodicComfortMessageSelection
    periodic_comfort_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* periodicComfortMessageAudioFileDescription
    periodic_comfort_message_audio_file_description = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortMessageVideoFileDescription
    periodic_comfort_message_video_file_description = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Required* onHoldMessageSelection
    on_hold_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* onHoldMessageAudioFileDescription
    on_hold_message_audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* onHoldMessageVideoFileDescription
    on_hold_message_video_file_description = Field(type=str, required=False, mutable=False)


class GroupCallCenterGetAvailableAgentListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAvailableAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetAvailableSupervisorListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAvailableSupervisorListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetDNISAgentListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E(
            "agent_table", "agentTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* agentTable  *Tabular*
    agent_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetDNISListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISListResponse()``.

    Contains a table with column headings: "Name", "Phone Number", "Extension",
    "Priority", "Is Primary DNIS".
    """

    _ELEMENTS = (
        E("display_dnis_number", "displayDNISNumber", bool, is_required=True),
        E("display_dnis_name", "displayDNISName", bool, is_required=True),
        E(
            "promote_calls_from_priority1to0", "promoteCallsFromPriority1to0", bool,
            is_required=True,
        ),
        E(
            "promote_calls_from_priority2to1", "promoteCallsFromPriority2to1", bool,
            is_required=True,
        ),
        E(
            "promote_calls_from_priority3to2", "promoteCallsFromPriority3to2", bool,
            is_required=True,
        ),
        E(
            "promote_calls_from_priority1to0_seconds",
            "promoteCallsFromPriority1to0Seconds", int, is_required=True,
        ),
        E(
            "promote_calls_from_priority2to1_seconds",
            "promoteCallsFromPriority2to1Seconds", int, is_required=True,
        ),
        E(
            "promote_calls_from_priority3to2_seconds",
            "promoteCallsFromPriority3to2Seconds", int, is_required=True,
        ),
        E("dnis_table", "dnisTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: bool: *Required* displayDNISNumber
    display_dnis_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* displayDNISName
    display_dnis_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* promoteCallsFromPriority1to0
    promote_calls_from_priority1to0 = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* promoteCallsFromPriority2to1
    promote_calls_from_priority2to1 = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* promoteCallsFromPriority3to2
    promote_calls_from_priority3to2 = Field(type=bool, required=True, mutable=False)
    #: int: *Required* promoteCallsFromPriority1to0Seconds
    promote_calls_from_priority1to0_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* promoteCallsFromPriority2to1Seconds
    promote_calls_from_priority2to1_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* promoteCallsFromPriority3to2Seconds
    promote_calls_from_priority3to2_seconds = Field(type=int, required=True, mutable=False)
    #: list: *Required* dnisTable  *Tabular*
    dnis_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetDNISResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISResponse()``.

    """

    _ELEMENTS = (
        E("dnis_phone_number", "dnisPhoneNumber", str),
        E("extension", "extension", str),
        E("use_custom_clid_settings", "useCustomCLIDSettings", bool, is_required=True),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("calling_line_id_last_name", "callingLineIdLastName", str),
        E("calling_line_id_first_name", "callingLineIdFirstName", str),
        E(
            "use_custom_dnis_announcement_settings", "useCustomDnisAnnouncementSettings",
            bool, is_required=True,
        ),
        E("priority", "priority", str, is_required=True),
        E("allow_outgoing_acd_call", "allowOutgoingACDCall", bool, is_required=True),
    )

    #: str: *Optional* dnisPhoneNumber
    dnis_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useCustomCLIDSettings
    use_custom_clid_settings = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useCustomDnisAnnouncementSettings
    use_custom_dnis_announcement_settings = Field(type=bool, required=True, mutable=False)
    #: str: *Required* priority
    priority = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowOutgoingACDCall
    allow_outgoing_acd_call = Field(type=bool, required=True, mutable=False)


class GroupCallCenterGetDistinctiveRingingResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDistinctiveRingingRequest()``.

    """

    _ELEMENTS = (
        E(
            "distinctive_ringing_call_center_calls", "distinctiveRingingCallCenterCalls",
            bool, is_required=True,
        ),
        E(
            "distinctive_ringing_ring_pattern_for_call_center",
            "distinctiveRingingRingPatternForCallCenter", str, is_required=True,
        ),
        E(
            "distinctive_ringing_force_delivery_ring_pattern",
            "distinctiveRingingForceDeliveryRingPattern", str,
        ),
    )

    #: bool: *Required* distinctiveRingingCallCenterCalls
    distinctive_ringing_call_center_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* distinctiveRingingRingPatternForCallCenter
    distinctive_ringing_ring_pattern_for_call_center = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Optional* distinctiveRingingForceDeliveryRingPattern
    distinctive_ringing_force_delivery_ring_pattern = Field(
        type=str, required=False, mutable=False,
    )


class GroupCallCenterGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Video", "Phone
    Number", "Extension", "Department", "Is Active", "Policy", "Type". The column values
    for "Video" and "Is Active" can either be true, or false.  The column values for
    "Type" can be "Basic", "Standard" or "Premium". NOTE: prior to release 14, the policy
    column did not match the HuntPolicy enumerated type.
    """

    _ELEMENTS = (
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetInstanceQueueStatusResponse(OCIResponse):
    """
    Contains Call Center queue status and a table with column headings: "User Id", "First
    Name", "Last Name", "Phone Number", "Extension", "Department", "Email Address".

    """

    _ELEMENTS = (
        E("number_of_calls_queued_now", "numberOfCallsQueuedNow", int, is_required=True),
        E(
            "agents_currently_staffed", "agentsCurrentlyStaffed", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: int: *Required* numberOfCallsQueuedNow
    number_of_calls_queued_now = Field(type=int, required=True, mutable=False)
    #: list: *Required* agentsCurrentlyStaffed  *Tabular*
    agents_currently_staffed = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetInstanceStatisticsReportingResponse(OCIResponse):
    """
    Contains Call Center statistics reporting settings.

    """

    _ELEMENTS = (
        E("generate_daily_report", "generateDailyReport", bool, is_required=True),
        E("collection_period_minutes", "collectionPeriodMinutes", int, is_required=True),
        E("reporting_email_address1", "reportingEmailAddress1", str),
        E("reporting_email_address2", "reportingEmailAddress2", str),
    )

    #: bool: *Required* generateDailyReport
    generate_daily_report = Field(type=bool, required=True, mutable=False)
    #: int: *Required* collectionPeriodMinutes
    collection_period_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Optional* reportingEmailAddress1
    reporting_email_address1 = Field(type=str, required=False, mutable=False)
    #: str: *Optional* reportingEmailAddress2
    reporting_email_address2 = Field(type=str, required=False, mutable=False)


class GroupCallCenterGetInstanceStatisticsReportingResponse16(OCIResponse):
    """
    Contains Call Center statistics reporting settings.

    """

    _ELEMENTS = (
        E("generate_daily_report", "generateDailyReport", bool, is_required=True),
        E("collection_period_minutes", "collectionPeriodMinutes", int, is_required=True),
        E("reporting_email_address1", "reportingEmailAddress1", str),
        E("reporting_email_address2", "reportingEmailAddress2", str),
        E("statistics_source", "statisticsSource", str, is_required=True),
    )

    #: bool: *Required* generateDailyReport
    generate_daily_report = Field(type=bool, required=True, mutable=False)
    #: int: *Required* collectionPeriodMinutes
    collection_period_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Optional* reportingEmailAddress1
    reporting_email_address1 = Field(type=str, required=False, mutable=False)
    #: str: *Optional* reportingEmailAddress2
    reporting_email_address2 = Field(type=str, required=False, mutable=False)
    #: str: *Required* statisticsSource
    statistics_source = Field(type=str, required=True, mutable=False)


class GroupCallCenterGetInstanceStatisticsReportingResponse17sp1(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceStatisticsReportingRequest17sp1()``.

    Contains Call Center statistics reporting settings.
    """

    _ELEMENTS = (
        E("generate_daily_report", "generateDailyReport", bool, is_required=True),
        E("collection_period_minutes", "collectionPeriodMinutes", int, is_required=True),
        E("reporting_email_address1", "reportingEmailAddress1", str),
        E("reporting_email_address2", "reportingEmailAddress2", str),
        E("statistics_source", "statisticsSource", str, is_required=True),
    )

    #: bool: *Required* generateDailyReport
    generate_daily_report = Field(type=bool, required=True, mutable=False)
    #: int: *Required* collectionPeriodMinutes
    collection_period_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Optional* reportingEmailAddress1
    reporting_email_address1 = Field(type=str, required=False, mutable=False)
    #: str: *Optional* reportingEmailAddress2
    reporting_email_address2 = Field(type=str, required=False, mutable=False)
    #: str: *Required* statisticsSource
    statistics_source = Field(type=str, required=True, mutable=False)


class GroupCallCenterGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterGetRequest()``.

    Replaced by ``GroupCallCenterGetResponse17sp4()``.
    """

    _ELEMENTS = (
        E(
            "use_system_default_guard_timer", "useSystemDefaultGuardTimer", bool,
            is_required=True,
        ),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "use_system_default_unavailable_settings",
            "useSystemDefaultUnavailableSettings", bool,
        ),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int,
        ),
    )

    #: bool: *Required* useSystemDefaultGuardTimer
    use_system_default_guard_timer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* useSystemDefaultUnavailableSettings
    use_system_default_unavailable_settings = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=False, mutable=False,
    )
    #: int: *Optional* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=False, mutable=False,
    )


class GroupCallCenterGetResponse17sp4(OCIResponse):
    """
    Response to ``GroupCallCenterGetRequest17sp4()``.

    """

    _ELEMENTS = (
        E(
            "use_system_default_guard_timer", "useSystemDefaultGuardTimer", bool,
            is_required=True,
        ),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "use_system_default_unavailable_settings",
            "useSystemDefaultUnavailableSettings", bool,
        ),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int,
        ),
        E(
            "force_agent_unavailable_on_not_reachable",
            "forceAgentUnavailableOnNotReachable", bool,
        ),
    )

    #: bool: *Required* useSystemDefaultGuardTimer
    use_system_default_guard_timer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* useSystemDefaultUnavailableSettings
    use_system_default_unavailable_settings = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=False, mutable=False,
    )
    #: int: *Optional* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnNotReachable
    force_agent_unavailable_on_not_reachable = Field(type=bool, required=False, mutable=False)


class GroupCallCenterGetRoutingPolicyResponse(OCIResponse):
    """
    Response to ``GroupCallCenterGetRoutingPolicyRequest()``.

    Contains a table with column headings: "Service User Id", "Name" and "Priority".
    """

    _ELEMENTS = (
        E("routing_policy", "routingPolicy", str, is_required=True),
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Required* routingPolicy
    routing_policy = Field(type=str, required=True, mutable=False)
    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetSupervisorListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetSupervisorListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name". Element "reportingServerURL"" will always be blank.

    Replaced By: ``GroupCallCenterSupervisorReportingGetResponse()``
    """

    _ELEMENTS = (
        E("reporting_server_url", "reportingServerURL", str),
        E(
            "supervisor_table", "supervisorTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Optional* reportingServerURL
    reporting_server_url = Field(type=str, required=False, mutable=False)
    #: list: *Required* supervisorTable  *Tabular*
    supervisor_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetSupervisorListResponse16(OCIResponse):
    """
    Response to the ``GroupCallCenterGetSupervisorListRequest16()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E(
            "supervisor_table", "supervisorTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* supervisorTable  *Tabular*
    supervisor_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterGetUnlicensedAgentListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetUnlicensedAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Group Id", "Extension",
    "Department", "Email Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterHolidayServiceGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterHolidayServiceGetRequest()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("holiday_schedule", "holidaySchedule", str),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E("audio_file_url", "audioFileUrl", str),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E("video_file_url", "videoFileUrl", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* holidaySchedule
    holiday_schedule = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)


class GroupCallCenterNightServiceGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterNightServiceGetRequest()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("business_hours", "businessHours", str),
        E("force_night_service", "forceNightService", bool, is_required=True),
        E(
            "allow_manual_override_via_fac", "allowManualOverrideViaFAC", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E("audio_file_url", "audioFileUrl", str),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E("video_file_url", "videoFileUrl", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E("manual_announcement_mode", "manualAnnouncementMode", str, is_required=True),
        E(
            "manual_audio_message_selection", "manualAudioMessageSelection", str,
            is_required=True,
        ),
        E("manual_audio_file_url", "manualAudioFileUrl", str),
        E("manual_audio_file_description", "manualAudioFileDescription", str),
        E("manual_audio_media_type", "manualAudioMediaType", str),
        E(
            "manual_video_message_selection", "manualVideoMessageSelection", str,
            is_required=True,
        ),
        E("manual_video_file_url", "manualVideoFileUrl", str),
        E("manual_video_file_description", "manualVideoFileDescription", str),
        E("manual_video_media_type", "manualVideoMediaType", str),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* businessHours
    business_hours = Field(type=str, required=False, mutable=False)
    #: bool: *Required* forceNightService
    force_night_service = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowManualOverrideViaFAC
    allow_manual_override_via_fac = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* manualAnnouncementMode
    manual_announcement_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* manualAudioMessageSelection
    manual_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* manualAudioFileUrl
    manual_audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* manualAudioFileDescription
    manual_audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* manualAudioMediaType
    manual_audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* manualVideoMessageSelection
    manual_video_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* manualVideoFileUrl
    manual_video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* manualVideoFileDescription
    manual_video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* manualVideoMediaType
    manual_video_media_type = Field(type=str, required=False, mutable=False)


class GroupCallCenterOverflowGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterOverflowGetRequest()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("overflow_after_timeout", "overflowAfterTimeout", bool, is_required=True),
        E("timeout_seconds", "timeoutSeconds", int, is_required=True),
        E(
            "play_announcement_before_overflow_processing",
            "playAnnouncementBeforeOverflowProcessing", bool, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E("audio_file_url", "audioFileUrl", str),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_message_selection", "videoMessageSelection", str),
        E("video_file_url", "videoFileUrl", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* overflowAfterTimeout
    overflow_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeoutSeconds
    timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playAnnouncementBeforeOverflowProcessing
    play_announcement_before_overflow_processing = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMessageSelection
    video_message_selection = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)


class GroupCallCenterQueueCallDispositionCodeGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterQueueCallDispositionCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description" and "Level".
    Level column can be any of the values in the data type CallDispositionCodeLevel.
    """

    _ELEMENTS = (
        E(
            "disposition_codes_table", "dispositionCodesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* dispositionCodesTable  *Tabular*
    disposition_codes_table = Field(type=list, required=True, mutable=False)


class GroupCallCenterQueueCallDispositionCodeGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterQueueCallDispositionCodeGetRequest()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("description", "description", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class GroupCallCenterQueueStatusNotificationGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterQueueStatusNotificationGetRequest()``.

    The response contains the call center status configuration information.
    """

    _ELEMENTS = (
        E(
            "enable_queue_status_notification", "enableQueueStatusNotification", bool,
            is_required=True,
        ),
        E(
            "enable_queue_depth_threshold", "enableQueueDepthThreshold", bool,
            is_required=True,
        ),
        E(
            "enable_waiting_time_threshold", "enableWaitingTimeThreshold", bool,
            is_required=True,
        ),
        E("number_of_calls_threshold", "numberOfCallsThreshold", int, is_required=True),
        E(
            "waiting_time_of_calls_threshold", "waitingTimeOfCallsThreshold", int,
            is_required=True,
        ),
    )

    #: bool: *Required* enableQueueStatusNotification
    enable_queue_status_notification = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableQueueDepthThreshold
    enable_queue_depth_threshold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableWaitingTimeThreshold
    enable_waiting_time_threshold = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfCallsThreshold
    number_of_calls_threshold = Field(type=int, required=True, mutable=False)
    #: int: *Required* waitingTimeOfCallsThreshold
    waiting_time_of_calls_threshold = Field(type=int, required=True, mutable=False)


class GroupCallCenterQueueThresholdsGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterQueueThresholdsGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "threshold_current_calls_in_queue_yellow",
            "thresholdCurrentCallsInQueueYellow", int,
        ),
        E("threshold_current_calls_in_queue_red", "thresholdCurrentCallsInQueueRed", int),
        E(
            "threshold_current_longest_waiting_call_yellow",
            "thresholdCurrentLongestWaitingCallYellow", int,
        ),
        E(
            "threshold_current_longest_waiting_call_red",
            "thresholdCurrentLongestWaitingCallRed", int,
        ),
        E(
            "threshold_average_estimated_wait_time_yellow",
            "thresholdAverageEstimatedWaitTimeYellow", int,
        ),
        E(
            "threshold_average_estimated_wait_time_red",
            "thresholdAverageEstimatedWaitTimeRed", int,
        ),
        E(
            "threshold_average_handling_time_yellow",
            "thresholdAverageHandlingTimeYellow", int,
        ),
        E("threshold_average_handling_time_red", "thresholdAverageHandlingTimeRed", int),
        E(
            "threshold_average_speed_of_answer_yellow",
            "thresholdAverageSpeedOfAnswerYellow", int,
        ),
        E("threshold_average_speed_of_answer_red", "thresholdAverageSpeedOfAnswerRed", int),
        E("enable_notification_email", "enableNotificationEmail", bool, is_required=True),
        E("notification_email_address", "notificationEmailAddress", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* thresholdCurrentCallsInQueueYellow
    threshold_current_calls_in_queue_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdCurrentCallsInQueueRed
    threshold_current_calls_in_queue_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdCurrentLongestWaitingCallYellow
    threshold_current_longest_waiting_call_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdCurrentLongestWaitingCallRed
    threshold_current_longest_waiting_call_red = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdAverageEstimatedWaitTimeYellow
    threshold_average_estimated_wait_time_yellow = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* thresholdAverageEstimatedWaitTimeRed
    threshold_average_estimated_wait_time_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageHandlingTimeYellow
    threshold_average_handling_time_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageHandlingTimeRed
    threshold_average_handling_time_red = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageSpeedOfAnswerYellow
    threshold_average_speed_of_answer_yellow = Field(type=int, required=False, mutable=False)
    #: int: *Optional* thresholdAverageSpeedOfAnswerRed
    threshold_average_speed_of_answer_red = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableNotificationEmail
    enable_notification_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* notificationEmailAddress
    notification_email_address = Field(type=str, required=False, mutable=False)


class GroupCallCenterStrandedCallGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterStrandedCallGetRequest()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("audio_message_selection", "audioMessageSelection", str),
        E("audio_file_url", "audioFileUrl", str),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_message_selection", "videoMessageSelection", str),
        E("video_file_url", "videoFileUrl", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMessageSelection
    audio_message_selection = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMessageSelection
    video_message_selection = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)


class GroupCallCenterSupervisorReportingGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterSupervisorReportingGetRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name".
    """

    _ELEMENTS = (
        E("reporting_server_name", "reportingServerName", str),
        E(
            "supervisor_table", "supervisorTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Optional* reportingServerName
    reporting_server_name = Field(type=str, required=False, mutable=False)
    #: list: *Required* supervisorTable  *Tabular*
    supervisor_table = Field(type=list, required=True, mutable=False)


class GroupCallParkGetAvailableAlternateRecallUserListResponse(OCIResponse):
    """
    Response to the ``GroupCallParkGetAvailableAlternateRecallUserListResponse()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name".
    """

    _ELEMENTS = (
        E(
            "available_hunt_group_table", "availableHuntGroupTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* availableHuntGroupTable  *Tabular*
    available_hunt_group_table = Field(type=list, required=True, mutable=False)


class GroupCallParkGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCallParkGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallParkGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupCallParkGetInstanceListRequest()``.

    """

    _ELEMENTS = (
        E("name", "name", str, is_array=True),
    )

    #: list(str): *Optional* name  *Array*
    name = Field(type=list, required=False, mutable=False)


class GroupCallParkGetInstanceResponse(OCIResponse):
    """
    Response to the ``GroupCallParkGetInstanceRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name". The users are in the table are in the order they
    will try to be parked on.
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallParkGetInstanceResponse16sp2(OCIResponse):
    """
    Response to the ``GroupCallParkGetInstanceRequest16sp2()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address". The users are in the table are in the order they will try to be parked on.
    The following elements are only used in AS data mode: recallAlternateUserId recallTo
    """

    _ELEMENTS = (
        E("recall_alternate_user_id", "recallAlternateUserId", str),
        E("recall_to", "recallTo", str, is_required=True),
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: str: *Optional* recallAlternateUserId
    recall_alternate_user_id = Field(type=str, required=False, mutable=False)
    #: str: *Required* recallTo
    recall_to = Field(type=str, required=True, mutable=False)
    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallParkGetResponse(OCIResponse):
    """
    Response to the ``GroupCallParkGetRequest()``.

    Contains the settings that apply to the whole group for Call Park.
    """

    _ELEMENTS = (
        E("recall_timer_seconds", "recallTimerSeconds", int, is_required=True),
        E("display_timer_seconds", "displayTimerSeconds", int, is_required=True),
        E(
            "enable_destination_announcement", "enableDestinationAnnouncement", bool,
            is_required=True,
        ),
    )

    #: int: *Required* recallTimerSeconds
    recall_timer_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* displayTimerSeconds
    display_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableDestinationAnnouncement
    enable_destination_announcement = Field(type=bool, required=True, mutable=False)


class GroupCallParkGetResponse16sp2(OCIResponse):
    """
    Response to the ``GroupCallParkGetRequest16sp2()``.

    Contains the settings that apply to the whole group for Call Park.  The following
    elements are only used in AS data mode: recallAlternateUserId recallRingPattern
    recallTo alternateUserRecallTimerSeconds
    """

    _ELEMENTS = (
        E("recall_timer_seconds", "recallTimerSeconds", int, is_required=True),
        E("display_timer_seconds", "displayTimerSeconds", int, is_required=True),
        E(
            "enable_destination_announcement", "enableDestinationAnnouncement", bool,
            is_required=True,
        ),
        E("recall_alternate_user_id", "recallAlternateUserId", str),
        E("recall_ring_pattern", "recallRingPattern", str, is_required=True),
        E("recall_to", "recallTo", str, is_required=True),
        E(
            "alternate_user_recall_timer_seconds", "alternateUserRecallTimerSeconds", int,
            is_required=True,
        ),
    )

    #: int: *Required* recallTimerSeconds
    recall_timer_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* displayTimerSeconds
    display_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableDestinationAnnouncement
    enable_destination_announcement = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* recallAlternateUserId
    recall_alternate_user_id = Field(type=str, required=False, mutable=False)
    #: str: *Required* recallRingPattern
    recall_ring_pattern = Field(type=str, required=True, mutable=False)
    #: str: *Required* recallTo
    recall_to = Field(type=str, required=True, mutable=False)
    #: int: *Required* alternateUserRecallTimerSeconds
    alternate_user_recall_timer_seconds = Field(type=int, required=True, mutable=False)


class GroupCallPickupGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCallPickupGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallPickupGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupCallPickupGetInstanceListRequest()``.

    """

    _ELEMENTS = (
        E("name", "name", str, is_array=True),
    )

    #: list(str): *Optional* name  *Array*
    name = Field(type=list, required=False, mutable=False)


class GroupCallPickupGetInstanceResponse(OCIResponse):
    """
    Response to the ``GroupCallPickupGetInstanceRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCallProcessingGetPolicyResponse14(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest14()``.

    """

    _ELEMENTS = (
        E("use_group_setting", "useGroupSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
    )

    #: bool: *Required* useGroupSetting
    use_group_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )


class GroupCallProcessingGetPolicyResponse14sp1(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest14sp1()``.

    """

    _ELEMENTS = (
        E("use_group_setting", "useGroupSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
    )

    #: bool: *Required* useGroupSetting
    use_group_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )


class GroupCallProcessingGetPolicyResponse14sp4(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest14sp4()``.

    Replaced By : ``GroupCallProcessingGetPolicyResponse15()``
    """

    _ELEMENTS = (
        E("use_group_setting", "useGroupSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_external_calls_via_private_dialing_plan",
            "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan", bool,
            is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
    )

    #: bool: *Required* useGroupSetting
    use_group_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
    override_clid_restriction_for_external_calls_via_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )


class GroupCallProcessingGetPolicyResponse14sp7(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest14sp7()``.

    """

    _ELEMENTS = (
        E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
        E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
        E(
            "use_group_call_limits_setting", "useGroupCallLimitsSetting", bool,
            is_required=True,
        ),
        E(
            "use_group_translation_routing_setting", "useGroupTranslationRoutingSetting",
            bool, is_required=True,
        ),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_external_calls_via_private_dialing_plan",
            "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan", bool,
            is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
    )

    #: bool: *Required* useGroupCLIDSetting
    use_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupMediaSetting
    use_group_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupCallLimitsSetting
    use_group_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupTranslationRoutingSetting
    use_group_translation_routing_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
    override_clid_restriction_for_external_calls_via_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)


class GroupCallProcessingGetPolicyResponse15(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest15()``.

    """

    _ELEMENTS = (
        E("use_group_setting", "useGroupSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
    )

    #: bool: *Required* useGroupSetting
    use_group_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )


class GroupCallProcessingGetPolicyResponse15sp2(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest15sp2()``.

    """

    _ELEMENTS = (
        E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
        E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
        E(
            "use_group_call_limits_setting", "useGroupCallLimitsSetting", bool,
            is_required=True,
        ),
        E(
            "use_group_translation_routing_setting", "useGroupTranslationRoutingSetting",
            bool, is_required=True,
        ),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
    )

    #: bool: *Required* useGroupCLIDSetting
    use_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupMediaSetting
    use_group_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupCallLimitsSetting
    use_group_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupTranslationRoutingSetting
    use_group_translation_routing_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Optional* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)


class GroupCallProcessingGetPolicyResponse16(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest16()``.

    """

    _ELEMENTS = (
        E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
        E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
        E(
            "use_group_call_limits_setting", "useGroupCallLimitsSetting", bool,
            is_required=True,
        ),
        E(
            "use_group_translation_routing_setting", "useGroupTranslationRoutingSetting",
            bool, is_required=True,
        ),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
    )

    #: bool: *Required* useGroupCLIDSetting
    use_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupMediaSetting
    use_group_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupCallLimitsSetting
    use_group_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupTranslationRoutingSetting
    use_group_translation_routing_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Optional* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)


class GroupCallProcessingGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest16sp2()``.

    """

    _ELEMENTS = (
        E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
        E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
        E(
            "use_group_call_limits_setting", "useGroupCallLimitsSetting", bool,
            is_required=True,
        ),
        E(
            "use_group_translation_routing_setting", "useGroupTranslationRoutingSetting",
            bool, is_required=True,
        ),
        E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useGroupCLIDSetting
    use_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupMediaSetting
    use_group_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupCallLimitsSetting
    use_group_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupTranslationRoutingSetting
    use_group_translation_routing_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupDCLIDSetting
    use_group_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Optional* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class GroupCallProcessingGetPolicyResponse17(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest17()``.

    """

    _ELEMENTS = (
        E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
        E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
        E(
            "use_group_call_limits_setting", "useGroupCallLimitsSetting", bool,
            is_required=True,
        ),
        E(
            "use_group_translation_routing_setting", "useGroupTranslationRoutingSetting",
            bool, is_required=True,
        ),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* useGroupCLIDSetting
    use_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupMediaSetting
    use_group_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupCallLimitsSetting
    use_group_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupTranslationRoutingSetting
    use_group_translation_routing_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Optional* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)


class GroupCallProcessingGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest17sp3()``.

    The following elements are only used in AS data mode: useGroupDCLIDSetting
    enableDialableCallerID Replaced by ``GroupCallProcessingGetPolicyResponse17sp4()``
    """

    _ELEMENTS = (
        E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
        E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
        E(
            "use_group_call_limits_setting", "useGroupCallLimitsSetting", bool,
            is_required=True,
        ),
        E(
            "use_group_translation_routing_setting", "useGroupTranslationRoutingSetting",
            bool, is_required=True,
        ),
        E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useGroupCLIDSetting
    use_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupMediaSetting
    use_group_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupCallLimitsSetting
    use_group_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupTranslationRoutingSetting
    use_group_translation_routing_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupDCLIDSetting
    use_group_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Optional* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class GroupCallProcessingGetPolicyResponse17sp4(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest17sp4()``.

    The following elements are only used in AS data mode: useGroupDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity Replaced by
    ``GroupCallProcessingGetPolicyResponse18()``
    """

    _ELEMENTS = (
        E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
        E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
        E(
            "use_group_call_limits_setting", "useGroupCallLimitsSetting", bool,
            is_required=True,
        ),
        E(
            "use_group_translation_routing_setting", "useGroupTranslationRoutingSetting",
            bool, is_required=True,
        ),
        E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
    )

    #: bool: *Required* useGroupCLIDSetting
    use_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupMediaSetting
    use_group_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupCallLimitsSetting
    use_group_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupTranslationRoutingSetting
    use_group_translation_routing_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupDCLIDSetting
    use_group_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Optional* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )


class GroupCallProcessingGetPolicyResponse18(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest18()``.

    The following elements are only used in AS data mode: useGroupDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride
    """

    _ELEMENTS = (
        E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
        E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
        E(
            "use_group_call_limits_setting", "useGroupCallLimitsSetting", bool,
            is_required=True,
        ),
        E(
            "use_group_translation_routing_setting", "useGroupTranslationRoutingSetting",
            bool, is_required=True,
        ),
        E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* useGroupCLIDSetting
    use_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupMediaSetting
    use_group_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupCallLimitsSetting
    use_group_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupTranslationRoutingSetting
    use_group_translation_routing_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupDCLIDSetting
    use_group_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Optional* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)


class GroupCallProcessingGetPolicyResponse18sp1(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest18()``.

    The following elements are only used in AS data mode: useGroupDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride enterpriseCallsCLIDPolicy groupCallsCLIDPolicy
    Replaced by: ``GroupCallProcessingGetPolicyResponse19sp1()``
    """

    _ELEMENTS = (
        E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
        E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
        E(
            "use_group_call_limits_setting", "useGroupCallLimitsSetting", bool,
            is_required=True,
        ),
        E(
            "use_group_translation_routing_setting", "useGroupTranslationRoutingSetting",
            bool, is_required=True,
        ),
        E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E("group_calls_clid_policy", "groupCallsCLIDPolicy", str, is_required=True),
    )

    #: bool: *Required* useGroupCLIDSetting
    use_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupMediaSetting
    use_group_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupCallLimitsSetting
    use_group_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupTranslationRoutingSetting
    use_group_translation_routing_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupDCLIDSetting
    use_group_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Optional* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupCallsCLIDPolicy
    group_calls_clid_policy = Field(type=str, required=True, mutable=False)


class GroupCallProcessingGetPolicyResponse19sp1(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest()``.

    The following elements are only used in AS data mode: useGroupDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride enterpriseCallsCLIDPolicy groupCallsCLIDPolicy
    """

    _ELEMENTS = (
        E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
        E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
        E(
            "use_group_call_limits_setting", "useGroupCallLimitsSetting", bool,
            is_required=True,
        ),
        E(
            "use_group_translation_routing_setting", "useGroupTranslationRoutingSetting",
            bool, is_required=True,
        ),
        E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E("group_calls_clid_policy", "groupCallsCLIDPolicy", str, is_required=True),
    )

    #: bool: *Required* useGroupCLIDSetting
    use_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupMediaSetting
    use_group_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupCallLimitsSetting
    use_group_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupTranslationRoutingSetting
    use_group_translation_routing_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupDCLIDSetting
    use_group_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Optional* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupCallsCLIDPolicy
    group_calls_clid_policy = Field(type=str, required=True, mutable=False)


class GroupCallRecordingGetResponse(OCIResponse):
    """
    Response to the ``GroupCallRecordingGetRequest()``.

    The response contains the group's Call Recording platform information.
    """

    _ELEMENTS = (
        E("name", "name", str),
    )

    #: str: *Optional* name
    name = Field(type=str, required=False, mutable=False)


class GroupCallingLineIdGetResponse(OCIResponse):
    """
    Response to the ``GroupCallingLineIdGetRequest()``.

    The response contains the group's calling line id settings.
    """

    _ELEMENTS = (
        E("use_group_number", "useGroupNumber", bool, is_required=True),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("calling_line_id_name", "callingLineIdName", str),
    )

    #: bool: *Required* useGroupNumber
    use_group_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdName
    calling_line_id_name = Field(type=str, required=False, mutable=False)


class GroupCallingPlanGetDigitPatternListResponse(OCIResponse):
    """
    Response to ``GroupCallingPlanGetDigitPatternListRequest()``.

    Contains a table with column headings: "Name", "Digit Pattern".
    """

    _ELEMENTS = (
        E(
            "digit_pattern_table", "digitPatternTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* digitPatternTable  *Tabular*
    digit_pattern_table = Field(type=list, required=True, mutable=False)


class GroupCollaborateBridgeGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCollaborateBridgeGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", and "Hiragana First Name", "Phone Number", "Extension", "Department",
    "Email Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCollaborateBridgeGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupCollaborateBridgeGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Participants", and "Is Default". The column values for "Is
    default" can either be true, or false.
    """

    _ELEMENTS = (
        E(
            "collaborate_bridge_table", "collaborateBridgeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* collaborateBridgeTable  *Tabular*
    collaborate_bridge_table = Field(type=list, required=True, mutable=False)


class GroupCommPilotCallManagerGetResponse(OCIResponse):
    """
    Response to ``GroupCommPilotCallManagerGetRequest()``.

    """

    _ELEMENTS = (
        E("group_directory", "groupDirectory", str, is_required=True),
    )

    #: str: *Required* groupDirectory
    group_directory = Field(type=str, required=True, mutable=False)


class GroupCommunicationBarringGetResponse(OCIResponse):
    """
    Response to ``SystemCommunicationBarringGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "use_default_service_provider_profile", "useDefaultServiceProviderProfile",
            bool, is_required=True,
        ),
        E("profile", "profile", str),
    )

    #: bool: *Required* useDefaultServiceProviderProfile
    use_default_service_provider_profile = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* profile
    profile = Field(type=str, required=False, mutable=False)


class GroupCommunicationBarringProfileGetAssignedListResponse(OCIResponse):
    """
    Response to the ``GroupCommunicationBarringProfileGetAssignedListRequest()``.

    The response contains a simple list of all communication barring profiles assigned to
    the group.
    """

    _ELEMENTS = (
        E("profile_name", "profileName", str, is_array=True),
    )

    #: list(str): *Optional* profileName  *Array*
    profile_name = Field(type=list, required=False, mutable=False)


class GroupCustomContactDirectoryGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCustomContactDirectoryGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name". Replace by:
    ``GroupCustomContactDirectoryGetAvailableUserListResponse17()``
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCustomContactDirectoryGetAvailableUserListResponse17(OCIResponse):
    """
    Response to the ``GroupCustomContactDirectoryGetAvailableUserListRequest17()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Virtual On-Net Phone Number", "Group Id", "Is
    Virtual On-Net User", "Phone Number", "Extension", "Department", "Email Address". If
    the entry represents a Virtual On-Net user then "User Id" is blank, the "Virtual On-
    Net Phone Number" contains the phone Number of the Virtual On-Net user, the "Group Id"
    contains the Virtual On-Net user's group and the "Is Virtual On-Net User" contains
    true.  If the entry represents a BroadWorks user then the "User Id" contains his
    BroadWorks userId, the "Virtual On-Net Phone Number" and "Group Id" fields are blank
    and the "Is Virtual On-Net User" contains false.
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCustomContactDirectoryGetListResponse(OCIResponse):
    """
    Response to the ``GroupCustomContactDirectoryGetListRequest()``.

    The response contains all the group's custom contact directory names.
    """

    _ELEMENTS = (
        E("name", "name", str, is_array=True),
    )

    #: list(str): *Optional* name  *Array*
    name = Field(type=list, required=False, mutable=False)


class GroupCustomContactDirectoryGetResponse(OCIResponse):
    """
    Response to the ``GroupCustomContactDirectoryGetRequest()``.

    The response contains all the group's custom contact directory names.  Contains a
    table with column headings: "User Id", "Last Name", "First Name", "Hiragana Last
    Name", "Hiragana First Name". Replace by:
    ``GroupCustomContactDirectoryGetResponse17()``
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCustomContactDirectoryGetResponse17(OCIResponse):
    """
    Response to the ``GroupCustomContactDirectoryGetRequest17()``.

    The response contains all the contacts in the group's given custom contact directory.
    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Virtual On-Net Phone Number", "Group Id", "Is
    Virtual On-Net User", "Department", "Phone Number", "Extension", "Mobile", "Email
    Address", "Yahoo Id", "Title", "IMP Id". If the entry represents a Virtual On-Net user
    then "User Id" is blank, the "Virtual On-Net Phone Number" contains the phone Number
    of the Virtual On-Net user, the "Group Id" contains the Virtual On-Net user's group
    and the "Is Virtual On-Net User" contains true.  If the entry represents a BroadWorks
    user then the "User Id" contains his BroadWorks userId, the "Virtual On-Net Phone
    Number" and "Group Id" fields are field is blank and the "Is Virtual On-Net User"
    contains false.
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupCustomRingbackGroupGetResponse(OCIResponse):
    """
    Response to the ``GroupCustomRingbackGroupGetRequest()``.

    Replaced By: ``GroupCustomRingbackGroupGetResponse16()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file_description", "videoFileDescription", str),
        E("video_file_url", "videoFileUrl", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)


class GroupCustomRingbackGroupGetResponse16(OCIResponse):
    """
    Response to the ``GroupCustomRingbackGroupGetRequest16()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E("video_file_url", "videoFileUrl", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)


class GroupDepartmentAdminGetListResponse(OCIResponse):
    """
    Response to ``GroupDepartmentAdminGetListRequest()``.

    Contains a 5 column table with column headings "Administrator ID", "Last Name", "First
    Name", "Department", "Language".
    """

    _ELEMENTS = (
        E(
            "department_admin_table", "departmentAdminTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* departmentAdminTable  *Tabular*
    department_admin_table = Field(type=list, required=True, mutable=False)


class GroupDepartmentGetListResponse18(OCIResponse):
    """
    Response to ``GroupDepartmentGetListRequest18()``.

    Contains a table of department attributes.  The column headings are: "Is Enterprise
    Department", "Department Name", "Full Path Name", "Calling Line Id Name", and "Calling
    Line Id Phone Number"
    """

    _ELEMENTS = (
        E(
            "department_table", "departmentTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* departmentTable  *Tabular*
    department_table = Field(type=list, required=True, mutable=False)


class GroupDeviceManagementEventGetListResponse(OCIResponse):
    """
    Response to ``GroupDeviceManagementEventGetListRequest()``.

    Contains a table with column headings: "Event Id", "Status", "Action", "Level",
    "Type", "Additional Info", "Is Local", "Completion %", "Pushed/ Same Hash/ Not
    Pushed", "Login Id", "Start Time", "Process Time". "Event Id" is a unique identifer
    for the event.  "Status" can be: Pending, Queued, In Progress, Process On Other Host,
    Stale, Completed, Canceled.  "Action" can be: Delete, Download, Rebuild, Reset,
    Upload.  "Level" can be: Device, Device Type, Device Type Group, Group, User.  "Type"
    can be: Automatic, Manual.  "Additional Info" includes the affected device type,
    device or group.  It depends on the level of the event: Device Profile: "Device Name"
    "Service Provider Id" "Group Id" Device Type: "Device Type Name" Device Type Group:
    "Service Provider Id" "Group Id" "Device Type Name" Group: "Service Provider Id"
    "Group Id" User: "User Id" "Is Local" is set to "yes" if the event is processed on the
    server who received the request, "no" otherwise meaning that the event is processed on
    another server.  "Completion %" provides an estimate of the completion of the event.
    A percentage is given, the current number of completed expanded event, and the total
    number of expanded event.  "Pushed/ Same Hash/ Not Pushed" gives the total number of
    files that were pushed, not pushed because of same hash, and not pushed when
    processing the event.  "LoginId" is the user or admin id who triggered the event.
    "Start Time" is the date when the event was started.  The display shows the month,
    days, hours, and minutes (MM-dd hh:mm). "Process Time" is the time taken to process
    the event in hours, minutes, seconds, and milliseconds (hhhh:mm:ss.SSS). Each row
    represents an event sorted by priority of processing.  The first row in the table is
    an event that has an associated expanded event currently being processed or next in
    line to be processed.
    """

    _ELEMENTS = (
        E(
            "event_table", "eventTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* eventTable  *Tabular*
    event_table = Field(type=list, required=True, mutable=False)


class GroupDeviceManagementGetAccessDeviceCountForDeviceTypeGroupResponse(OCIResponse):
    """
    Response to ``GroupDeviceManagementGetAccessDeviceCountForDeviceTypeGroupRequest()``.

    """

    _ELEMENTS = (
        E("access_device_count", "accessDeviceCount", int, is_required=True),
    )

    #: int: *Required* accessDeviceCount
    access_device_count = Field(type=int, required=True, mutable=False)


class GroupDeviceTypeCustomTagGetListResponse(OCIResponse):
    """
    Response to ``GroupDeviceTypeCustomTagGetListRequest()``.

    Contains a table of custom configuration tags managed by the Device Management System
    on a per-device type basis for a group.  The column headings are: "Tag Name", "Tag
    Value"
    """

    _ELEMENTS = (
        E(
            "group_device_type_custom_tags_table", "groupDeviceTypeCustomTagsTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* groupDeviceTypeCustomTagsTable  *Tabular*
    group_device_type_custom_tags_table = Field(type=list, required=True, mutable=False)


class GroupDeviceTypeFileGetListResponse(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetListRequest()``.

    Contains a table of device type files managed by the Device Management System, on a
    per-group basis.  The column headings are: "File Type", "File Format", "Is
    Authenticated".

    Replaced By: ``GroupDeviceTypeFileGetListResponse14sp8()``
    """

    _ELEMENTS = (
        E(
            "group_device_type_files_table", "groupDeviceTypeFilesTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* groupDeviceTypeFilesTable  *Tabular*
    group_device_type_files_table = Field(type=list, required=True, mutable=False)


class GroupDeviceTypeFileGetListResponse14sp8(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetListRequest14sp8()``.

    Contains a table of device type files managed by the Device Management System, on a
    per-group basis.  The column headings are: "File Format", "Is Authenticated", "Access
    URL", "Repository URL", "Template URL". Replaced by:
    GroupDeviceTypeFileGetListResponset21.
    """

    _ELEMENTS = (
        E(
            "group_device_type_files_table", "groupDeviceTypeFilesTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E(
            "group_has_files_with_customizable_tags", "groupHasFilesWithCustomizableTags",
            bool,
        ),
    )

    #: list: *Required* groupDeviceTypeFilesTable  *Tabular*
    group_device_type_files_table = Field(type=list, required=True, mutable=False)
    #: bool: *Optional* groupHasFilesWithCustomizableTags
    group_has_files_with_customizable_tags = Field(type=bool, required=False, mutable=False)


class GroupDeviceTypeFileGetListResponse21(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetListRequest21()``.

    Contains a table of device type files managed by the Device Management System, on a
    per-group basis.  The column headings are: "File Format", "Is Authenticated", "Access
    URL", "Repository URL", "Template URL".
    """

    _ELEMENTS = (
        E(
            "group_device_type_files_table", "groupDeviceTypeFilesTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E(
            "group_has_customizable_dynamic_files", "groupHasCustomizableDynamicFiles",
            bool, is_required=True,
        ),
    )

    #: list: *Required* groupDeviceTypeFilesTable  *Tabular*
    group_device_type_files_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* groupHasCustomizableDynamicFiles
    group_has_customizable_dynamic_files = Field(type=bool, required=True, mutable=False)


class GroupDeviceTypeFileGetResponse(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetRequest()``.

    Replaced By: ``GroupDeviceTypeFileGetResponse14sp8()``
    """

    _ELEMENTS = (
        E("file_source", "fileSource", str),
        E("configuration_file_name", "configurationFileName", str),
    )

    #: str: *Optional* fileSource
    file_source = Field(type=str, required=False, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)


class GroupDeviceTypeFileGetResponse14sp8(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetRequest14sp8()``.

    Replaced by: ``GroupDeviceTypeFileGetResponse16sp1()``
    """

    _ELEMENTS = (
        E("file_source", "fileSource", str),
        E("configuration_file_name", "configurationFileName", str),
    )

    #: str: *Optional* fileSource
    file_source = Field(type=str, required=False, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)


class GroupDeviceTypeFileGetResponse16sp1(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetRequest16sp1()``.

    """

    _ELEMENTS = (
        E("file_source", "fileSource", str),
        E("configuration_file_name", "configurationFileName", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
    )

    #: str: *Optional* fileSource
    file_source = Field(type=str, required=False, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)


class GroupDialPlanPolicyGetAccessCodeListResponse(OCIResponse):
    """
    Response to ``GroupDialPlanPolicyGetAccessCodeListRequest()`` Contains a table with
    column headings: "Access Code", "Enable Secondary Dial Tone", "Description"
    """

    _ELEMENTS = (
        E(
            "access_code_table", "accessCodeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* accessCodeTable  *Tabular*
    access_code_table = Field(type=list, required=True, mutable=False)


class GroupDialPlanPolicyGetAccessCodeResponse(OCIResponse):
    """
    Response to ``GroupDialPlanPolicyGetAccessCodeRequest()``
    """

    _ELEMENTS = (
        E(
            "include_code_for_network_translations_and_routing",
            "includeCodeForNetworkTranslationsAndRouting", bool, is_required=True,
        ),
        E(
            "include_code_for_screening_services", "includeCodeForScreeningServices",
            bool, is_required=True,
        ),
        E("enable_secondary_dial_tone", "enableSecondaryDialTone", bool, is_required=True),
        E("description", "description", str),
    )

    #: bool: *Required* includeCodeForNetworkTranslationsAndRouting
    include_code_for_network_translations_and_routing = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeCodeForScreeningServices
    include_code_for_screening_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableSecondaryDialTone
    enable_secondary_dial_tone = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class GroupDialPlanPolicyGetResponse(OCIResponse):
    """
    Response to ``GroupDialPlanPolicyGetRequest()`` Replaced by:
    ``GroupDialPlanPolicyGetResponse17()``
    """

    _ELEMENTS = (
        E("use_setting", "useSetting", str, is_required=True),
        E(
            "requires_access_code_for_public_calls", "requiresAccessCodeForPublicCalls",
            bool, is_required=True,
        ),
        E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
        E("public_digit_map", "publicDigitMap", str),
        E("private_digit_map", "privateDigitMap", str),
    )

    #: str: *Required* useSetting
    use_setting = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresAccessCodeForPublicCalls
    requires_access_code_for_public_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowE164PublicCalls
    allow_e164_public_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* publicDigitMap
    public_digit_map = Field(type=str, required=False, mutable=False)
    #: str: *Optional* privateDigitMap
    private_digit_map = Field(type=str, required=False, mutable=False)


class GroupDialPlanPolicyGetResponse17(OCIResponse):
    """
    Response to ``GroupDialPlanPolicyGetRequest17()``
    """

    _ELEMENTS = (
        E("use_setting", "useSetting", str, is_required=True),
        E(
            "requires_access_code_for_public_calls", "requiresAccessCodeForPublicCalls",
            bool, is_required=True,
        ),
        E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
        E(
            "prefer_e164_number_format_for_callback_services",
            "preferE164NumberFormatForCallbackServices", bool, is_required=True,
        ),
        E("public_digit_map", "publicDigitMap", str),
        E("private_digit_map", "privateDigitMap", str),
    )

    #: str: *Required* useSetting
    use_setting = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresAccessCodeForPublicCalls
    requires_access_code_for_public_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowE164PublicCalls
    allow_e164_public_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* preferE164NumberFormatForCallbackServices
    prefer_e164_number_format_for_callback_services = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Optional* publicDigitMap
    public_digit_map = Field(type=str, required=False, mutable=False)
    #: str: *Optional* privateDigitMap
    private_digit_map = Field(type=str, required=False, mutable=False)


class GroupDialableCallerIDCriteriaGetResponse(OCIResponse):
    """
    Response to the ``GroupDialableCallerIDCriteriaGetRequest()``.

    The response contains the Dialable Caller ID Criteria information.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("prefix_digits", "prefixDigits", str),
        E("match_call_type", "matchCallType", str, is_array=True),
        E(
            "match_alternate_call_indicator", "matchAlternateCallIndicator", str,
            is_array=True,
        ),
        E("match_local_category", "matchLocalCategory", bool, is_required=True),
        E("match_national_category", "matchNationalCategory", bool, is_required=True),
        E("match_interlata_category", "matchInterlataCategory", bool, is_required=True),
        E("match_intralata_category", "matchIntralataCategory", bool, is_required=True),
        E(
            "match_international_category", "matchInternationalCategory", bool,
            is_required=True,
        ),
        E("match_private_category", "matchPrivateCategory", bool, is_required=True),
        E("match_emergency_category", "matchEmergencyCategory", bool, is_required=True),
        E("match_other_category", "matchOtherCategory", bool, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* prefixDigits
    prefix_digits = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* matchCallType  *Array*
    match_call_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* matchAlternateCallIndicator  *Array*
    match_alternate_call_indicator = Field(type=list, required=False, mutable=False)
    #: bool: *Required* matchLocalCategory
    match_local_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNationalCategory
    match_national_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterlataCategory
    match_interlata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchIntralataCategory
    match_intralata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInternationalCategory
    match_international_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchPrivateCategory
    match_private_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEmergencyCategory
    match_emergency_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchOtherCategory
    match_other_category = Field(type=bool, required=True, mutable=False)


class GroupDialableCallerIDGetResponse(OCIResponse):
    """
    Response to the ``GroupDialableCallerIDGetRequest()``.

    The criteria table�s column headings are "Active", "Name", "Description", �Prefix
    Digits�, �Priority�.
    """

    _ELEMENTS = (
        E("use_group_criteria", "useGroupCriteria", bool, is_required=True),
        E("ns_screening_failure_policy", "nsScreeningFailurePolicy", str, is_required=True),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* useGroupCriteria
    use_group_criteria = Field(type=bool, required=True, mutable=False)
    #: str: *Required* nsScreeningFailurePolicy
    ns_screening_failure_policy = Field(type=str, required=True, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class GroupDigitCollectionGetResponse13mp4(OCIResponse):
    """
    Response to ``GroupDigitCollectionGetRequest13mp4()``.

    """

    _ELEMENTS = (
        E("use_setting", "useSetting", str, is_required=True),
        E("access_code", "accessCode", str),
        E("public_digit_map", "publicDigitMap", str),
        E("private_digit_map", "privateDigitMap", str),
    )

    #: str: *Required* useSetting
    use_setting = Field(type=str, required=True, mutable=False)
    #: str: *Optional* accessCode
    access_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* publicDigitMap
    public_digit_map = Field(type=str, required=False, mutable=False)
    #: str: *Optional* privateDigitMap
    private_digit_map = Field(type=str, required=False, mutable=False)


class GroupDirectoryNumberHuntingGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupDirectoryNumberHuntingGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupDirectoryNumberHuntingGetResponse(OCIResponse):
    """
    Response to the ``GroupDirectoryNumberHuntingGetRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address". Replaced by: ``GroupDirectoryNumberHuntingGetResponse17sp1()``
    """

    _ELEMENTS = (
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)


class GroupDirectoryNumberHuntingGetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupDirectoryNumberHuntingGetRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "use_terminate_call_to_agent_first", "useTerminateCallToAgentFirst", bool,
            is_required=True,
        ),
        E(
            "use_original_agent_services_for_busy_and_no_answer_calls",
            "useOriginalAgentServicesForBusyAndNoAnswerCalls", bool, is_required=True,
        ),
    )

    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* useTerminateCallToAgentFirst
    use_terminate_call_to_agent_first = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useOriginalAgentServicesForBusyAndNoAnswerCalls
    use_original_agent_services_for_busy_and_no_answer_calls = Field(
        type=bool, required=True, mutable=False,
    )


class GroupDnGetActivationListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetActivationListRequest()``.

    The response contains a table with columns: "Phone Numbers", and "Activated". ". Phone
    Numbers are only returned if assigned to a user.  The "Phone Numbers" column contains
    either a single DN or a range of DNs.  The "Activated" column indicates if the phone
    number(s) are activated or not.
    """

    _ELEMENTS = (
        E("dn_table", "dnTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* dnTable  *Tabular*
    dn_table = Field(type=list, required=True, mutable=False)


class GroupDnGetAssignmentListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetAssignmentListRequest()``.

    The response contains a table with columns: "Phone Numbers", "Assigned To",
    "Department", "Activated". The "Phone Numbers" column contains either a single DN or a
    range of DNs.  The "Assigned To" column contains the user name or service instance
    name possessing the DN(s). The "Department" column contains the department of the DN,
    not the department of the user or service instance.  The "Activated" column indicates
    if the DN or DN range has been activated.  Only has a value if the DN(s) is assigned
    to a user.  Replaced by: ``GroupDnGetAssignmentListResponse18()``
    """

    _ELEMENTS = (
        E("dn_table", "dnTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* dnTable  *Tabular*
    dn_table = Field(type=list, required=True, mutable=False)


class GroupDnGetAssignmentListResponse18(OCIResponse):
    """
    Response to the ``GroupDnGetAssignmentListRequest18()``.

    The response contains a table with columns: "Phone Numbers", "Department",
    "Activated", "User Id", "Last Name", "First Name", "Extension", "Email Address", "User
    Type". The "Phone Numbers" column contains either a single DN or a range of DNs.  The
    "User Id", "Last Name" and "First Name" columns contains the corresponding attributes
    of the user possessing the DN(s). For a service instance, "Last Name" contains the
    service instance name and "First Name" column contains the corresponding enumerated
    UserType value.  The "Department" column contains the department of the DN, not the
    department of the user or service instance.  The "Activated" column indicates if the
    DN or DN range has been activated.  Only has a value if the DN(s) is assigned to a
    user.  The "User Type" column contains the corresponding enumerated UserType value.
    NOTE: the same phone number can show up in the list twice if the phone number is being
    used as the group calling line Id.
    """

    _ELEMENTS = (
        E("dn_table", "dnTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* dnTable  *Tabular*
    dn_table = Field(type=list, required=True, mutable=False)


class GroupDnGetAvailableListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetAvailableListRequest()``.

    The response contains the list of DNs that are assigned to a group and still available
    for assignment to users or service instances within the group.
    """

    _ELEMENTS = (
        E("phone_number", "phoneNumber", str, is_array=True),
    )

    #: list(str): *Optional* phoneNumber  *Array*
    phone_number = Field(type=list, required=False, mutable=False)


class GroupDnGetAvailableRangesListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetAvailableRangesListRequest()``.

    The response contains the list of group DNs that are not assigned to user, service
    instances or IMRN pool.  The Dns are returned in a list of DNs or DN ranges and
    formated in E164 format for display.
    """

    _ELEMENTS = (
        E("phone_number", "phoneNumber", str, is_array=True),
    )

    #: list(str): *Optional* phoneNumber  *Array*
    phone_number = Field(type=list, required=False, mutable=False)


class GroupDnGetDetailedAvailableListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetDetailedAvailableListRequest()``.

    The response contains a table with columns: "Phone Number", "Department". The "Phone
    Numbers" column contains a single DN. The "Department" column contains the department
    of the DN if the DN is part of the department.  The "Activated" column indicates if
    the DN has been activated.  Only has a value if the DN(s) is assigned to a user or if
    "Group Enable Activation Mode" is enabled.
    """

    _ELEMENTS = (
        E("dn_table", "dnTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* dnTable  *Tabular*
    dn_table = Field(type=list, required=True, mutable=False)


class GroupDnGetListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetListRequest()``.

    The response contains the list of DNs assigned to the group.
    """

    _ELEMENTS = (
        E("phone_number", "phoneNumber", str, is_array=True),
    )

    #: list(str): *Optional* phoneNumber  *Array*
    phone_number = Field(type=list, required=False, mutable=False)


class GroupDnGetSummaryListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetSummaryListRequest()``.

    The response contains a table with columns: "Phone Numbers", "Assigned". The "Phone
    Numbers" column contains either a single DN or a range of DNs.  The "Assigned" column
    contains a boolean flag indicating if the DN(s) are currently assigned to a user or
    service instance.  The "Activated" column indicates if the DN or DN range has been
    activated.  Only has a value if the DN(s) is assigned to a user or if "Group Enable
    Activation Mode" is enabled.
    """

    _ELEMENTS = (
        E("dn_table", "dnTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* dnTable  *Tabular*
    dn_table = Field(type=list, required=True, mutable=False)


class GroupDomainGetAssignedListResponse(OCIResponse):
    """
    Contains a simple list of all group domain names.

    """

    _ELEMENTS = (
        E("group_default_domain", "groupDefaultDomain", str, is_required=True),
        E("domain", "domain", str, is_array=True),
    )

    #: str: *Required* groupDefaultDomain
    group_default_domain = Field(type=str, required=True, mutable=False)
    #: list(str): *Optional* domain  *Array*
    domain = Field(type=list, required=False, mutable=False)


class GroupDomainGetAssignedUserListResponse(OCIResponse):
    """
    Response to ``GroupDomainGetAssignedUserListRequest()``.

    The table columns are: "User Id", "Last Name", "First Name", "Department", "Phone
    Number", "Email Address", "Service Provider Id", "Group Id", "Hiragana Last Name" and
    "Hiragana First Name", "Extension".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupEmergencyZonesGetResponse(OCIResponse):
    """
    Response to ``GroupEmergencyZonesGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("emergency_zones_prohibition", "emergencyZonesProhibition", str, is_required=True),
        E(
            "send_emergency_call_notify_email", "sendEmergencyCallNotifyEmail", bool,
            is_required=True,
        ),
        E("emergency_call_notify_email_address", "emergencyCallNotifyEmailAddress", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* emergencyZonesProhibition
    emergency_zones_prohibition = Field(type=str, required=True, mutable=False)
    #: bool: *Required* sendEmergencyCallNotifyEmail
    send_emergency_call_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* emergencyCallNotifyEmailAddress
    emergency_call_notify_email_address = Field(type=str, required=False, mutable=False)


class GroupEndpointGetListResponse(OCIResponse):
    """
    Response to ``GroupEndpointGetListRequest()``.

    The column headings for the endpointTable are: "Line/Port", "Last Name", "First Name",
    "User Id", "User Type", "Phone Number", "Extension", "Device Type", "Device Name",
    "Net Address", "MAC Address", "Department", "Email Address". Possible values for User
    Type are �User�, �CCBasic�, �CCStandard�, �CCPremium�, �RP�, �MOH�, �MOHVideo�.
    """

    _ELEMENTS = (
        E(
            "endpoint_table", "endpointTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* endpointTable  *Tabular*
    endpoint_table = Field(type=list, required=True, mutable=False)


class GroupEnterpriseTrunkGetAvailableTrunkGroupListResponse(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetAvailableTrunkGroupListRequest()``.

    """

    _ELEMENTS = (
        E("trunk_group_name", "trunkGroupName", str, is_array=True),
    )

    #: list(str): *Optional* trunkGroupName  *Array*
    trunk_group_name = Field(type=list, required=False, mutable=False)


class GroupEnterpriseTrunkGetAvailableUserListResponse(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetAvailableUserListRequest()``.

    The column headings for the enterpriseTrunkUserTable are: "User Id", "Last Name",
    "First Name", "Hiragana Last Name", "Hiragana First Name", "Phone Number",
    "Extension", "Department", "Email Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupEnterpriseTrunkGetListResponse(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetListRequest()``.

    Contains a table of enterprise trunks defined in the enterprise The column headings
    are: "Enterprise Trunk Name", "Routing Type"
    """

    _ELEMENTS = (
        E(
            "enterprise_trunk_table", "enterpriseTrunkTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* enterpriseTrunkTable  *Tabular*
    enterprise_trunk_table = Field(type=list, required=True, mutable=False)


class GroupEnterpriseTrunkGetResponse(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetRequest()``.

    Replaced by: ``GroupEnterpriseTrunkGetResponse21()``.
    """

    _ELEMENTS = (
        E("maximum_reroute_attempts", "maximumRerouteAttempts", int, is_required=True),
        E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
        E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
        E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
        E(
            "priority_weighted_routing", "priorityWeightedRouting", str, is_complex=True,
        ),  # unknown
    )

    #: int: *Required* maximumRerouteAttempts
    maximum_reroute_attempts = Field(type=int, required=True, mutable=False)
    #: str: *Required* routeExhaustionAction
    route_exhaustion_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* routeExhaustionForwardAddress
    route_exhaustion_forward_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* orderedRouting
    ordered_routing = Field(type=str, required=False, mutable=False)
    #: str: *Optional* priorityWeightedRouting
    priority_weighted_routing = Field(type=str, required=False, mutable=False)


class GroupEnterpriseTrunkGetResponse21(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetRequest21()``.

    """

    _ELEMENTS = (
        E("maximum_reroute_attempts", "maximumRerouteAttempts", int, is_required=True),
        E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
        E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
        E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
        E(
            "priority_weighted_routing", "priorityWeightedRouting", str, is_complex=True,
        ),  # unknown
        E("enable_capacity_management", "enableCapacityManagement", bool, is_required=True),
        E("max_active_calls", "maxActiveCalls", int),
        E("capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls", int),
        E("capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int),
    )

    #: int: *Required* maximumRerouteAttempts
    maximum_reroute_attempts = Field(type=int, required=True, mutable=False)
    #: str: *Required* routeExhaustionAction
    route_exhaustion_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* routeExhaustionForwardAddress
    route_exhaustion_forward_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* orderedRouting
    ordered_routing = Field(type=str, required=False, mutable=False)
    #: str: *Optional* priorityWeightedRouting
    priority_weighted_routing = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableCapacityManagement
    enable_capacity_management = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* maxActiveCalls
    max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=False, mutable=False)


class GroupEnterpriseTrunkGetUserListResponse(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetUserListRequest()``.

    The column headings for the enterpriseTrunkUserTable are: "User Id", "Last Name",
    "First Name", "Phone Number", "Alternate Trunk Identity", "Hiragana Last Name",
    "Hiragana First Name", "Extension", "Department", "Email Address" and "Route List
    Assigned".
    """

    _ELEMENTS = (
        E(
            "enterprise_trunk_user_table", "enterpriseTrunkUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* enterpriseTrunkUserTable  *Tabular*
    enterprise_trunk_user_table = Field(type=list, required=True, mutable=False)


class GroupExchangeIntegrationGetResponse(OCIResponse):
    """
    Response to ``GroupExchangeIntegrationGetRequest()``.

    """

    _ELEMENTS = (
        E("enable_exchange_integration", "enableExchangeIntegration", bool, is_required=True),
        E("exchange_url", "exchangeURL", str),
        E("exchange_user_name", "exchangeUserName", str),
    )

    #: bool: *Required* enableExchangeIntegration
    enable_exchange_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* exchangeURL
    exchange_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* exchangeUserName
    exchange_user_name = Field(type=str, required=False, mutable=False)


class GroupExtensionLengthGetResponse(OCIResponse):
    """
    Response to ``GroupExtensionLengthGetRequest()``.

    """

    _ELEMENTS = (
        E("extension_length", "extensionLength", int, is_required=True),
    )

    #: int: *Required* extensionLength
    extension_length = Field(type=int, required=True, mutable=False)


class GroupExtensionLengthGetResponse17(OCIResponse):
    """
    Response to ``GroupExtensionLengthGetRequest17()``.

    """

    _ELEMENTS = (
        E("min_extension_length", "minExtensionLength", int, is_required=True),
        E("max_extension_length", "maxExtensionLength", int, is_required=True),
        E("default_extension_length", "defaultExtensionLength", int, is_required=True),
    )

    #: int: *Required* minExtensionLength
    min_extension_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxExtensionLength
    max_extension_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* defaultExtensionLength
    default_extension_length = Field(type=int, required=True, mutable=False)


class GroupFileRepositoryDeviceUserGetListResponse(OCIResponse):
    """
    Response to ``GroupFileRepositoryDeviceUserGetListRequest()``.

    Contains a table with column headings : "User Name","Allow Delete","Allow Get","Allow
    Put" in a row for each file repository service provider user.
    """

    _ELEMENTS = (
        E(
            "file_repository_user_table", "fileRepositoryUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* fileRepositoryUserTable  *Tabular*
    file_repository_user_table = Field(type=list, required=True, mutable=False)


class GroupFindMeFollowMeAlertingGroupGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupFindMeFollowMeAlertingGroupGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupFindMeFollowMeGetAlertingGroupListResponse(OCIResponse):
    """
    Response to the ``GroupFindMeFollowMeGetAlertingGroupListRequest()``.

    Contains a table with column headings: "Name", "Priority".
    """

    _ELEMENTS = (
        E(
            "alerting_group_table", "alertingGroupTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* alertingGroupTable  *Tabular*
    alerting_group_table = Field(type=list, required=True, mutable=False)


class GroupFindMeFollowMeGetAlertingGroupResponse(OCIResponse):
    """
    Response to ``GroupFindMeFollowMeGetAlertingGroupRequest()``.

    Contains the alerting group information.  The user table’s column headings are: "User
    Id", "Last Name", "First Name", "Hiragana Last Name" and "Hiragana First Name", "Phone
    Number", "Extension", "Department", "Email Address". The criteria table's column
    headings are: "Is Active", "Criteria Name", "Time Schedule", "Calls From",
    "Blacklisted", "Holiday Schedule"", "Calls To Type", "Calls To Number" and "Calls To
    Extension". The possible values for the "Calls To Type" column are the following or a
    combination of them separated by comma: - Primary - Alternate X (where x is a number
    between 1 and 10) The possible values for the "Calls To Number" column are the
    following or a combination of them separated by comma: - The value of the phone number
    for the corresponding Calls To Type, when the number is available.  i.e.  Alternate 1
    may have extension, but no number.  - When no number is available a blank space is
    provided instead.  The possible values for the "Calls To Extension" column are the
    following or a combination of them separated by comma: - The value of the extension
    for the corresponding Calls To Type, when the extension is available.  i.e.  Primary
    may have number, but no extension.  - When no extension is available a blank space is
    provided instead.
    """

    _ELEMENTS = (
        E("alerting_group_description", "alertingGroupDescription", str),
        E("use_diversion_inhibitor", "useDiversionInhibitor", bool, is_required=True),
        E(
            "answer_confirmation_required", "answerConfirmationRequired", bool,
            is_required=True,
        ),
        E("number_of_rings", "numberOfRings", int, is_required=True),
        E("phone_number", "phoneNumber", str, is_array=True),
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Optional* alertingGroupDescription
    alerting_group_description = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useDiversionInhibitor
    use_diversion_inhibitor = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* answerConfirmationRequired
    answer_confirmation_required = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfRings
    number_of_rings = Field(type=int, required=True, mutable=False)
    #: list(str): *Optional* phoneNumber  *Array*
    phone_number = Field(type=list, required=False, mutable=False)
    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class GroupFindMeFollowMeGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupFindMeFollowMeGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active". The column value for "Is Active" can either be
    true, or false.
    """

    _ELEMENTS = (
        E(
            "find_me_follow_me_table", "findMeFollowMeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* findMeFollowMeTable  *Tabular*
    find_me_follow_me_table = Field(type=list, required=True, mutable=False)


class GroupFlexibleSeatingAccessDeviceGetListResponse(OCIResponse):
    """
    Response to ``GroupFlexibleSeatingAccessDeviceGetListRequest()``
    """

    _ELEMENTS = (
        E(
            "available_access_device", "availableAccessDevice", str, is_complex=True,
            is_array=True,
        ),  # unknown
    )

    #: list(str): *Optional* availableAccessDevice  *Array*
    available_access_device = Field(type=list, required=False, mutable=False)


class GroupFlexibleSeatingHostGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupFlexibleSeatingHostGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active". The column value for "Is Active" can either be
    true, or false.
    """

    _ELEMENTS = (
        E(
            "flexible_seating_host_table", "flexibleSeatingHostTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* flexibleSeatingHostTable  *Tabular*
    flexible_seating_host_table = Field(type=list, required=True, mutable=False)


class GroupFlexibleSeatingHostGuestAssociationGetResponse(OCIResponse):
    """
    Response to ``GroupFlexibleSeatingHostGuestAssociationGetRequest()``.

    """

    _ELEMENTS = (
        E("enforce_association_limit", "enforceAssociationLimit", bool, is_required=True),
        E("association_limit_hours", "associationLimitHours", int, is_required=True),
        E("access_level", "accessLevel", str, is_required=True),
        E("guest_last_name", "guestLastName", str),
        E("guest_first_name", "guestFirstName", str),
        E("guest_phone_number", "guestPhoneNumber", str),
        E("guest_extension", "guestExtension", str),
        E("guest_location_dialing_code", "guestLocationDialingCode", str),
        E("guest_association_date_time", "guestAssociationDateTime", str),
    )

    #: bool: *Required* enforceAssociationLimit
    enforce_association_limit = Field(type=bool, required=True, mutable=False)
    #: int: *Required* associationLimitHours
    association_limit_hours = Field(type=int, required=True, mutable=False)
    #: str: *Required* accessLevel
    access_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* guestLastName
    guest_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestFirstName
    guest_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestPhoneNumber
    guest_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestExtension
    guest_extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestLocationDialingCode
    guest_location_dialing_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestAssociationDateTime
    guest_association_date_time = Field(type=str, required=False, mutable=False)


class GroupFlexibleSeatingHostRoutingPoliciesGetResponse(OCIResponse):
    """
    Response to the ``GroupFlexibleSeatingHostRoutingPoliciesGetRequest()``.

    """

    _ELEMENTS = (
        E("allow_emergency_calls", "allowEmergencyCalls", bool, is_required=True),
        E("allow_calls_to_voice_portal", "allowCallsToVoicePortal", bool, is_required=True),
    )

    #: bool: *Required* allowEmergencyCalls
    allow_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowCallsToVoicePortal
    allow_calls_to_voice_portal = Field(type=bool, required=True, mutable=False)


class GroupGetDefaultResponse(OCIResponse):
    """
    Response to the ``GroupGetDefaultRequest()``.

    All values are default values for a group's profile.
    """

    _ELEMENTS = (
        E("default_domain", "defaultDomain", str, is_required=True),
        E("user_limit", "userLimit", int, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
    )

    #: str: *Required* defaultDomain
    default_domain = Field(type=str, required=True, mutable=False)
    #: int: *Required* userLimit
    user_limit = Field(type=int, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)


class GroupGetListInServiceProviderResponse(OCIResponse):
    """
    Response to ``GroupGetListInServiceProviderRequest()``.

    Contains a 3 column table with column headings: "Group Id", "Group Name", "User Limit"
    and a row for each group.
    """

    _ELEMENTS = (
        E(
            "group_table", "groupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* groupTable  *Tabular*
    group_table = Field(type=list, required=True, mutable=False)


class GroupGetListInSystemResponse(OCIResponse):
    """
    Response to ``GroupGetListInSystemRequest()``.

    Contains a table with column headings: "Group Id", "Group Name", "User Limit",
    "Organization Id", "Organization Type" and a row for each group.  The "Organization
    Id" column is populated with either a service provider Id or an enterprise Id.  The
    "Organization Type" column is populated with one of the enumerated strings defined in
    the OrganizationType OCI data type.  Please see OCISchemaDataTypes.xsd for details on
    OrganizationType.
    """

    _ELEMENTS = (
        E(
            "group_table", "groupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* groupTable  *Tabular*
    group_table = Field(type=list, required=True, mutable=False)


class GroupGetUserServiceAssignedUserListResponse(OCIResponse):
    """
    Return a table containing the list of users assigned the user service or service pack.

    The table contains columns: "User Id", "Last Name", "First Name", "Department", "Phone
    Number", "Email Address", "Hiragana Last Name"; "Hiragana First Name", "Extension".
    This is a response to the ``GroupGetUserServiceAssignedUserListRequest()``.
    """

    _ELEMENTS = (
        E(
            "user_list_table", "userListTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* userListTable  *Tabular*
    user_list_table = Field(type=list, required=True, mutable=False)


class GroupGroupPagingGetAvailableOriginatorListResponse(OCIResponse):
    """
    Response to the ``GroupGroupPagingGetAvailableOriginatorListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name" and "Hiragana First Name", "Phone Number", "Extension", "Department",
    "Email Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupGroupPagingGetAvailableTargetListResponse(OCIResponse):
    """
    Response to the ``GroupGroupPagingGetAvailableTargetListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name" and "Hiragana First Name", "Phone Number", "Extension", "Department",
    "Email Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupGroupPagingGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupGroupPagingGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active". The column value for "Is Active" can either be
    true, or false.
    """

    _ELEMENTS = (
        E(
            "paging_group_table", "pagingGroupTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* pagingGroupTable  *Tabular*
    paging_group_table = Field(type=list, required=True, mutable=False)


class GroupGroupPagingGetOriginatorListResponse(OCIResponse):
    """
    Response to the ``GroupGroupPagingGetOriginatorListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E(
            "originator_table", "originatorTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* originatorTable  *Tabular*
    originator_table = Field(type=list, required=True, mutable=False)


class GroupGroupPagingGetTargetListResponse(OCIResponse):
    """
    Response to the ``GroupGroupPagingGetTargetListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E(
            "target_table", "targetTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* targetTable  *Tabular*
    target_table = Field(type=list, required=True, mutable=False)


class GroupGroupPagingTargetsCapacityGetResponse(OCIResponse):
    """
    Response to ``GroupGroupPagingTargetsCapacityGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "maximum_target_users_from_service_provider",
            "maximumTargetUsersFromServiceProvider", int, is_required=True,
        ),
        E("maximum_target_users", "maximumTargetUsers", int, is_required=True),
    )

    #: int: *Required* maximumTargetUsersFromServiceProvider
    maximum_target_users_from_service_provider = Field(type=int, required=True, mutable=False)
    #: int: *Required* maximumTargetUsers
    maximum_target_users = Field(type=int, required=True, mutable=False)


class GroupHolidayScheduleGetListResponse(OCIResponse):
    """
    Response to the ``GroupHolidayScheduleGetListRequest()``.

    The response contains all the group's holiday schedule name.
    """

    _ELEMENTS = (
        E("holiday_schedule_name", "holidayScheduleName", str, is_array=True),
    )

    #: list(str): *Optional* holidayScheduleName  *Array*
    holiday_schedule_name = Field(type=list, required=False, mutable=False)


class GroupHuntGroupGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupHuntGroupGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupHuntGroupGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupHuntGroupGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active", "Policy". The column values for "Is Active"
    can either be true, or false.  NOTE: prior to release 14, the policy column did not
    match the HuntPolicy enumerated type.
    """

    _ELEMENTS = (
        E(
            "hunt_group_table", "huntGroupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* huntGroupTable  *Tabular*
    hunt_group_table = Field(type=list, required=True, mutable=False)


class GroupIMRNGetListResponse(OCIResponse):
    """
    Response to ``GroupIMRNGetListRequest()``.

    """

    _ELEMENTS = (
        E("imrn", "imrn", str, is_array=True),
    )

    #: list(str): *Optional* imrn  *Array*
    imrn = Field(type=list, required=False, mutable=False)


class GroupInstantGroupCallGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupInstantGroupCallGetInstanceListRequest()``.

    Contains a 6 column table with column headings: "Service User Id", "Name", "Phone
    Number", "Extension", "Department", "Is Active". The column values for Is Active can
    either be true, or false.
    """

    _ELEMENTS = (
        E(
            "instant_group_call_table", "instantGroupCallTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* instantGroupCallTable  *Tabular*
    instant_group_call_table = Field(type=list, required=True, mutable=False)


class GroupIntegratedIMPGetResponse(OCIResponse):
    """
    Response to the ``GroupIntegratedIMPGetRequest()``.

    The response contains the group Integrated IMP service attributes.
    """

    _ELEMENTS = (
        E(
            "use_service_provider_setting", "useServiceProviderSetting", bool,
            is_required=True,
        ),
        E("service_domain", "serviceDomain", str),
    )

    #: bool: *Required* useServiceProviderSetting
    use_service_provider_setting = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* serviceDomain
    service_domain = Field(type=str, required=False, mutable=False)


class GroupInterceptGroupGetResponse(OCIResponse):
    """
    Response to the ``GroupInterceptGroupGetRequest()``.

    Replaced By: ``GroupInterceptGroupGetResponse16()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("announcement_selection", "announcementSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("video_file_description", "videoFileDescription", str),
        E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
        E("new_phone_number", "newPhoneNumber", str),
        E(
            "transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* announcementSelection
    announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playNewPhoneNumber
    play_new_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* newPhoneNumber
    new_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* transferOnZeroToPhoneNumber
    transfer_on_zero_to_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)


class GroupInterceptGroupGetResponse16(OCIResponse):
    """
    Response to the ``GroupInterceptGroupGetRequest16()``.

    Replaced By: ``GroupInterceptGroupGetResponse16sp1()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("announcement_selection", "announcementSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
        E("new_phone_number", "newPhoneNumber", str),
        E(
            "transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* announcementSelection
    announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playNewPhoneNumber
    play_new_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* newPhoneNumber
    new_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* transferOnZeroToPhoneNumber
    transfer_on_zero_to_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)


class GroupInterceptGroupGetResponse16sp1(OCIResponse):
    """
    Response to the ``GroupInterceptGroupGetRequest16sp1()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("announcement_selection", "announcementSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
        E("new_phone_number", "newPhoneNumber", str),
        E(
            "transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("reroute_outbound_calls", "rerouteOutboundCalls", bool, is_required=True),
        E("outbound_reroute_phone_number", "outboundReroutePhoneNumber", str),
        E("allow_outbound_local_calls", "allowOutboundLocalCalls", bool, is_required=True),
        E("inbound_call_mode", "inboundCallMode", str, is_required=True),
        E(
            "alternate_blocking_announcement", "alternateBlockingAnnouncement", bool,
            is_required=True,
        ),
        E("route_to_voice_mail", "routeToVoiceMail", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* announcementSelection
    announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playNewPhoneNumber
    play_new_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* newPhoneNumber
    new_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* transferOnZeroToPhoneNumber
    transfer_on_zero_to_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* rerouteOutboundCalls
    reroute_outbound_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* outboundReroutePhoneNumber
    outbound_reroute_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowOutboundLocalCalls
    allow_outbound_local_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* inboundCallMode
    inbound_call_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* alternateBlockingAnnouncement
    alternate_blocking_announcement = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeToVoiceMail
    route_to_voice_mail = Field(type=bool, required=True, mutable=False)


class GroupInventoryReportGetResponse(OCIResponse):
    """
    Response to ``GroupInventoryReportGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "inventory_report_table", "inventoryReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* inventoryReportTable  *Tabular*
    inventory_report_table = Field(type=list, required=True, mutable=False)


class GroupLDAPIntegrationGetDirectoryResponse(OCIResponse):
    """
    Response to ``GroupLDAPIntegrationGetDirectoryRequest()``.

    """

    _ELEMENTS = (
        E("use_level", "useLevel", str, is_required=True),
        E("server_net_address", "serverNetAddress", str),
        E("server_port", "serverPort", int, is_required=True),
        E("search_base", "searchBase", str),
        E("use_ssl", "useSSL", bool, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("authenticated_dn", "authenticatedDN", str),
        E("authenticated_password", "authenticatedPassword", str),
        E("is_sort_enabled", "isSortEnabled", bool, is_required=True),
        E("is_paged_result_enabled", "isPagedResultEnabled", bool, is_required=True),
        E("search_filter", "searchFilter", str),
        E(
            "include_search_attribute_in_search_filter",
            "includeSearchAttributeInSearchFilter", bool, is_required=True,
        ),
        E("column1_attribute_name", "column1AttributeName", str, is_required=True),
        E("column2_attribute_name", "column2AttributeName", str),
        E("column3_attribute_name", "column3AttributeName", str),
        E("column4_attribute_name", "column4AttributeName", str),
        E("column1_label", "column1Label", str),
        E("column2_label", "column2Label", str),
        E("column3_label", "column3Label", str),
        E("column4_label", "column4Label", str),
        E("search_column", "searchColumn", int, is_required=True),
    )

    #: str: *Required* useLevel
    use_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* serverNetAddress
    server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* serverPort
    server_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* searchBase
    search_base = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useSSL
    use_ssl = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* authenticatedDN
    authenticated_dn = Field(type=str, required=False, mutable=False)
    #: str: *Optional* authenticatedPassword
    authenticated_password = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isSortEnabled
    is_sort_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isPagedResultEnabled
    is_paged_result_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* searchFilter
    search_filter = Field(type=str, required=False, mutable=False)
    #: bool: *Required* includeSearchAttributeInSearchFilter
    include_search_attribute_in_search_filter = Field(type=bool, required=True, mutable=False)
    #: str: *Required* column1AttributeName
    column1_attribute_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* column2AttributeName
    column2_attribute_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column3AttributeName
    column3_attribute_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column4AttributeName
    column4_attribute_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column1Label
    column1_label = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column2Label
    column2_label = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column3Label
    column3_label = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column4Label
    column4_label = Field(type=str, required=False, mutable=False)
    #: int: *Required* searchColumn
    search_column = Field(type=int, required=True, mutable=False)


class GroupLDAPIntegrationGetResponse(OCIResponse):
    """
    Response to ``GroupLDAPIntegrationGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class GroupMWIDeliveryToMobileEndpointGetResponse(OCIResponse):
    """
    Response to ``GroupMWIDeliveryToMobileEndpointGetRequest()``.

    The templateActivationTable contains the list of templates defined for the group.  The
    column headings are "Enable", "Language", "Type".
    """

    _ELEMENTS = (
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E(
            "template_activation_table", "templateActivationTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: list: *Required* templateActivationTable  *Tabular*
    template_activation_table = Field(type=list, required=True, mutable=False)


class GroupMeetMeConferencingGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupMeetMeConferencingGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", and "Hiragana First Name", "Phone Number", "Extension", "Department",
    "Email Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupMeetMeConferencingGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupMeetMeConferencingGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Ports", and "Is Active". The column values for "Is Active"
    can either be true, or false.
    """

    _ELEMENTS = (
        E(
            "conference_bridge_table", "conferenceBridgeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* conferenceBridgeTable  *Tabular*
    conference_bridge_table = Field(type=list, required=True, mutable=False)


class GroupNetworkClassOfServiceGetAssignedListResponse(OCIResponse):
    """
    Response to ``GroupNetworkClassOfServiceGetAssignedListRequest()``.

    Contains a table of all Network Classes of Service assigned to the group.  The column
    headings are: "Name", "Description" and "Default".
    """

    _ELEMENTS = (
        E(
            "network_class_of_service_table", "networkClassOfServiceTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* networkClassOfServiceTable  *Tabular*
    network_class_of_service_table = Field(type=list, required=True, mutable=False)


class GroupNetworkClassOfServiceGetAssignedUserListResponse(OCIResponse):
    """
    Response to ``GroupNetworkClassOfServiceGetAssignedUserListRequest()``.

    Contains a table of users that have the Network Class of Service assigned.  The column
    headings are: "User Id", "User Type", "Last Name", "First Name", "Department", "Phone
    Number", "Email Address", "Service Provider Id", "Group Id", "Hiragana Last Name" and
    "Hiragana First Name" , "Extension". Replaced by
    ``GroupNetworkClassOfServiceGetAssignedUserListResponse21()``
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupNetworkClassOfServiceGetAssignedUserListResponse21(OCIResponse):
    """
    Response to ``GroupNetworkClassOfServiceGetAssignedUserListRequest21()``.

    Contains a table of users that have the Network Class of Service assigned.  The column
    headings are: "User Id", "User Type", "Last Name", "First Name", "Department", "Phone
    Number", "Email Address", "Service Provider Id", "Group Id", "Hiragana Last Name" and
    "Hiragana First Name" , "Extension". The User type column will display Auto Attendant
    and the Call Center subtype.  Call Center - Basic, Call Center - Standard and Call
    Center - Premium will be displayed instead of Call Center and Auto Attendant (for the
    Basic Auto Attendant) and Auto Attendant - Standard instead of Auto Attendant.
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupOfficeZoneGetAssignedListResponse(OCIResponse):
    """
    Response to ``GroupOfficeZoneGetAssignedListRequest()``.

    Contains a table of all Office Zones assigned to the group.  The column headings are:
    "Name", "Description" and "Default".
    """

    _ELEMENTS = (
        E(
            "office_zone_table", "officeZoneTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* officeZoneTable  *Tabular*
    office_zone_table = Field(type=list, required=True, mutable=False)


class GroupOfficeZoneGetAssignedUserListResponse(OCIResponse):
    """
    Response to ``GroupOfiiceZoneGetAssignedUserListRequest()``.

    Contains a table of users that have the Office Zone assigned.  The column headings
    are: "User Id", "User Type", "Last Name", "First Name", "Department", "Phone Number",
    "Email Address", "Hiragana Last Name" and "Hiragana First Name", "Extension". Office
    Zones can only be unassigned if the Location-Based Calling Restrictions has been
    authorized to the group otherwise the request will fail.
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupOutgoingCallingPlanPinholeDigitPatternGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanPinholeDigitPatternGetListRequest()``.

    Contains a table with column headings: "Name", "Digit Pattern".
    """

    _ELEMENTS = (
        E(
            "digit_pattern_table", "digitPatternTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* digitPatternTable  *Tabular*
    digit_pattern_table = Field(type=list, required=True, mutable=False)


class GroupPasswordRulesGetResponse(OCIResponse):
    """
    Response to ``GroupPasswordRulesGetRequest()``.

    Contains the password rules applicable to users within the group.  Repleced by:
    ``GroupPasswordRulesGetResponse16()``
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("disallow_user_id", "disallowUserId", bool, is_required=True),
        E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
        E(
            "disallow_reversed_old_password", "disallowReversedOldPassword", bool,
            is_required=True,
        ),
        E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
        E("min_digits", "minDigits", int, is_required=True),
        E(
            "restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool,
            is_required=True,
        ),
        E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
        E(
            "restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool,
            is_required=True,
        ),
        E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
        E(
            "restrict_min_non_alphanumeric_characters",
            "restrictMinNonAlphanumericCharacters", bool, is_required=True,
        ),
        E(
            "min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int,
            is_required=True,
        ),
        E("min_length", "minLength", int, is_required=True),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int, is_required=True),
        E("password_expires_days", "passwordExpiresDays", int, is_required=True),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
        E("disallow_rules_modification", "disallowRulesModification", bool, is_required=True),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: bool: *Required* disallowUserId
    disallow_user_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPassword
    disallow_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPassword
    disallow_reversed_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* restrictMinDigits
    restrict_min_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minDigits
    min_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinUpperCaseLetters
    restrict_min_upper_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minUpperCaseLetters
    min_upper_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinLowerCaseLetters
    restrict_min_lower_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minLowerCaseLetters
    min_lower_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinNonAlphanumericCharacters
    restrict_min_non_alphanumeric_characters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minNonAlphanumericCharacters
    min_non_alphanumeric_characters = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLength
    min_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=True, mutable=False)
    #: int: *Required* passwordExpiresDays
    password_expires_days = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* disallowRulesModification
    disallow_rules_modification = Field(type=bool, required=True, mutable=False)


class GroupPasswordRulesGetResponse16(OCIResponse):
    """
    Response to ``GroupPasswordRulesGetRequest16()``.

    Contains the password rules applicable to users within the group.
    """

    _ELEMENTS = (
        E("disallow_user_id", "disallowUserId", bool, is_required=True),
        E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
        E(
            "disallow_reversed_old_password", "disallowReversedOldPassword", bool,
            is_required=True,
        ),
        E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
        E("min_digits", "minDigits", int, is_required=True),
        E(
            "restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool,
            is_required=True,
        ),
        E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
        E(
            "restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool,
            is_required=True,
        ),
        E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
        E(
            "restrict_min_non_alphanumeric_characters",
            "restrictMinNonAlphanumericCharacters", bool, is_required=True,
        ),
        E(
            "min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int,
            is_required=True,
        ),
        E("min_length", "minLength", int, is_required=True),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int, is_required=True),
        E("password_expires_days", "passwordExpiresDays", int, is_required=True),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
        E("disallow_rules_modification", "disallowRulesModification", bool, is_required=True),
        E("disallow_previous_passwords", "disallowPreviousPasswords", bool, is_required=True),
        E("number_of_previous_passwords", "numberOfPreviousPasswords", int, is_required=True),
    )

    #: bool: *Required* disallowUserId
    disallow_user_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPassword
    disallow_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPassword
    disallow_reversed_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* restrictMinDigits
    restrict_min_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minDigits
    min_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinUpperCaseLetters
    restrict_min_upper_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minUpperCaseLetters
    min_upper_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinLowerCaseLetters
    restrict_min_lower_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minLowerCaseLetters
    min_lower_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinNonAlphanumericCharacters
    restrict_min_non_alphanumeric_characters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minNonAlphanumericCharacters
    min_non_alphanumeric_characters = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLength
    min_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=True, mutable=False)
    #: int: *Required* passwordExpiresDays
    password_expires_days = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* disallowRulesModification
    disallow_rules_modification = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowPreviousPasswords
    disallow_previous_passwords = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfPreviousPasswords
    number_of_previous_passwords = Field(type=int, required=True, mutable=False)


class GroupPhoneDirectoryGetListResponse(OCIResponse):
    """
    Response to ``GroupPhoneDirectoryGetListRequest()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id". If extended directory information is requested, the following
    columns are also included: "First Name", "Last Name", "User Id", "Pager", "Title",
    "Time Zone", "Location", "Address Line 1", "Address Line 2", "City", "State", "Zip",
    "Country". Replace by: ``GroupPhoneDirectoryGetListResponse17()``
    """

    _ELEMENTS = (
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class GroupPhoneDirectoryGetListResponse17(OCIResponse):
    """
    Response to ``GroupPhoneDirectoryGetListRequest17()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "Is Virtual On-Net User" If extended directory information is
    requested, the following columns are also included: "First Name", "Last Name", "User
    Id", "Pager", "Title", "Time Zone", "Location", "Address Line 1", "Address Line 2",
    "City", "State", "Zip", "Country". Replaced by:
    ``GroupPhoneDirectoryGetListResponse18()``
    """

    _ELEMENTS = (
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class GroupPhoneDirectoryGetListResponse17sp3(OCIResponse):
    """
    Response to ``GroupPhoneDirectoryGetListRequest17sp3()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "IMP Id" and "Is Virtual On-Net User" If extended directory
    information is requested, the following columns are also included: "First Name", "Last
    Name", "User Id", "Pager", "Title", "Time Zone", "Location", "Address Line 1",
    "Address Line 2", "City", "State", "Zip", "Country". Replaced by:
    ``GroupPhoneDirectoryGetListResponse18()``
    """

    _ELEMENTS = (
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class GroupPhoneDirectoryGetListResponse18(OCIResponse):
    """
    Response to ``GroupPhoneDirectoryGetListRequest18()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "User Id", "IMP Id" and "Is Virtual On-Net User". If extended
    directory information is requested, the following columns are also included: "First
    Name", "Last Name", "Pager", "Title", "Time Zone", "Location", "Address Line 1",
    "Address Line 2", "City", "State", "Zip", "Country".
    """

    _ELEMENTS = (
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class GroupPolicyGetResponse(OCIResponse):
    """
    Response to ``GroupPolicyGetRequest()``.

    Contains the policy settings for the group.
    """

    _ELEMENTS = (
        E("calling_plan_access", "callingPlanAccess", str, is_required=True),
        E("extension_access", "extensionAccess", str, is_required=True),
        E("ldap_integration_access", "ldapIntegrationAccess", str, is_required=True),
        E("voice_messaging_access", "voiceMessagingAccess", str, is_required=True),
        E("department_admin_user_access", "departmentAdminUserAccess", str, is_required=True),
        E("user_authentication_access", "userAuthenticationAccess", str, is_required=True),
        E("user_group_directory_access", "userGroupDirectoryAccess", str, is_required=True),
        E("user_profile_access", "userProfileAccess", str, is_required=True),
    )

    #: str: *Required* callingPlanAccess
    calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* extensionAccess
    extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* ldapIntegrationAccess
    ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingAccess
    voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminUserAccess
    department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAuthenticationAccess
    user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userGroupDirectoryAccess
    user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userProfileAccess
    user_profile_access = Field(type=str, required=True, mutable=False)


class GroupPolicyGetResponse14sp1(OCIResponse):
    """
    Response to ``GroupPolicyGetRequest14sp1()``.

    Contains the policy settings for the group.
    """

    _ELEMENTS = (
        E("calling_plan_access", "callingPlanAccess", str, is_required=True),
        E("extension_access", "extensionAccess", str, is_required=True),
        E("ldap_integration_access", "ldapIntegrationAccess", str, is_required=True),
        E("voice_messaging_access", "voiceMessagingAccess", str, is_required=True),
        E("department_admin_user_access", "departmentAdminUserAccess", str, is_required=True),
        E(
            "department_admin_trunk_group_access", "departmentAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E("user_authentication_access", "userAuthenticationAccess", str, is_required=True),
        E("user_group_directory_access", "userGroupDirectoryAccess", str, is_required=True),
        E("user_profile_access", "userProfileAccess", str, is_required=True),
    )

    #: str: *Required* callingPlanAccess
    calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* extensionAccess
    extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* ldapIntegrationAccess
    ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingAccess
    voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminUserAccess
    department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminTrunkGroupAccess
    department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAuthenticationAccess
    user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userGroupDirectoryAccess
    user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userProfileAccess
    user_profile_access = Field(type=str, required=True, mutable=False)


class GroupPolicyGetResponse14sp4(OCIResponse):
    """
    Response to ``GroupPolicyGetRequest14sp4()``.

    Contains the policy settings for the group.
    """

    _ELEMENTS = (
        E("calling_plan_access", "callingPlanAccess", str, is_required=True),
        E("extension_access", "extensionAccess", str, is_required=True),
        E("ldap_integration_access", "ldapIntegrationAccess", str, is_required=True),
        E("voice_messaging_access", "voiceMessagingAccess", str, is_required=True),
        E("department_admin_user_access", "departmentAdminUserAccess", str, is_required=True),
        E(
            "department_admin_trunk_group_access", "departmentAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E("user_authentication_access", "userAuthenticationAccess", str, is_required=True),
        E("user_group_directory_access", "userGroupDirectoryAccess", str, is_required=True),
        E("user_profile_access", "userProfileAccess", str, is_required=True),
        E(
            "user_enhanced_call_log_access", "userEnhancedCallLogAccess", str,
            is_required=True,
        ),
    )

    #: str: *Required* callingPlanAccess
    calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* extensionAccess
    extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* ldapIntegrationAccess
    ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingAccess
    voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminUserAccess
    department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminTrunkGroupAccess
    department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAuthenticationAccess
    user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userGroupDirectoryAccess
    user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userProfileAccess
    user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userEnhancedCallLogAccess
    user_enhanced_call_log_access = Field(type=str, required=True, mutable=False)


class GroupPolicyGetResponse17(OCIResponse):
    """
    Response to ``GroupPolicyGetRequest17()``.

    Contains the policy settings for the group.
    """

    _ELEMENTS = (
        E("calling_plan_access", "callingPlanAccess", str, is_required=True),
        E("extension_access", "extensionAccess", str, is_required=True),
        E("ldap_integration_access", "ldapIntegrationAccess", str, is_required=True),
        E("voice_messaging_access", "voiceMessagingAccess", str, is_required=True),
        E("department_admin_user_access", "departmentAdminUserAccess", str, is_required=True),
        E(
            "department_admin_trunk_group_access", "departmentAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "department_admin_phone_number_extension_access",
            "departmentAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "department_admin_calling_line_id_number_access",
            "departmentAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E("user_authentication_access", "userAuthenticationAccess", str, is_required=True),
        E("user_group_directory_access", "userGroupDirectoryAccess", str, is_required=True),
        E("user_profile_access", "userProfileAccess", str, is_required=True),
        E(
            "user_enhanced_call_log_access", "userEnhancedCallLogAccess", str,
            is_required=True,
        ),
    )

    #: str: *Required* callingPlanAccess
    calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* extensionAccess
    extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* ldapIntegrationAccess
    ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingAccess
    voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminUserAccess
    department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminTrunkGroupAccess
    department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminPhoneNumberExtensionAccess
    department_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* departmentAdminCallingLineIdNumberAccess
    department_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* userAuthenticationAccess
    user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userGroupDirectoryAccess
    user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userProfileAccess
    user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userEnhancedCallLogAccess
    user_enhanced_call_log_access = Field(type=str, required=True, mutable=False)


class GroupPolicyGetResponse20(OCIResponse):
    """
    Response to ``GroupPolicyGetRequest20()``.

    Contains the policy settings for the group.
    """

    _ELEMENTS = (
        E("calling_plan_access", "callingPlanAccess", str, is_required=True),
        E("extension_access", "extensionAccess", str, is_required=True),
        E("ldap_integration_access", "ldapIntegrationAccess", str, is_required=True),
        E("voice_messaging_access", "voiceMessagingAccess", str, is_required=True),
        E("department_admin_user_access", "departmentAdminUserAccess", str, is_required=True),
        E(
            "department_admin_trunk_group_access", "departmentAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "department_admin_phone_number_extension_access",
            "departmentAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "department_admin_calling_line_id_number_access",
            "departmentAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E("user_authentication_access", "userAuthenticationAccess", str, is_required=True),
        E("user_group_directory_access", "userGroupDirectoryAccess", str, is_required=True),
        E("user_profile_access", "userProfileAccess", str, is_required=True),
        E(
            "user_enhanced_call_log_access", "userEnhancedCallLogAccess", str,
            is_required=True,
        ),
        E(
            "user_auto_attendant_name_dialing_access",
            "userAutoAttendantNameDialingAccess", str, is_required=True,
        ),
    )

    #: str: *Required* callingPlanAccess
    calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* extensionAccess
    extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* ldapIntegrationAccess
    ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingAccess
    voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminUserAccess
    department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminTrunkGroupAccess
    department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAdminPhoneNumberExtensionAccess
    department_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* departmentAdminCallingLineIdNumberAccess
    department_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* userAuthenticationAccess
    user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userGroupDirectoryAccess
    user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userProfileAccess
    user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userEnhancedCallLogAccess
    user_enhanced_call_log_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAutoAttendantNameDialingAccess
    user_auto_attendant_name_dialing_access = Field(type=str, required=True, mutable=False)


class GroupPolycomPhoneServicesGetResponse(OCIResponse):
    """
    Response to ``GroupPolycomPhoneServicesGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "include_group_common_phone_list_in_directory",
            "includeGroupCommonPhoneListInDirectory", bool, is_required=True,
        ),
        E(
            "include_group_custom_contact_directory_in_directory",
            "includeGroupCustomContactDirectoryInDirectory", bool, is_required=True,
        ),
        E("group_custom_contact_directory", "groupCustomContactDirectory", str),
    )

    #: bool: *Required* includeGroupCommonPhoneListInDirectory
    include_group_common_phone_list_in_directory = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeGroupCustomContactDirectoryInDirectory
    include_group_custom_contact_directory_in_directory = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Optional* groupCustomContactDirectory
    group_custom_contact_directory = Field(type=str, required=False, mutable=False)


class GroupPortalPasscodeRulesGetResponse(OCIResponse):
    """
    Response to ``GroupPortalPasscodeRulesGetRequest()``.

    Contains the group's passcode rules setting.
    """

    _ELEMENTS = (
        E("use_rule_level", "useRuleLevel", str, is_required=True),
        E("disallow_repeated_digits", "disallowRepeatedDigits", bool, is_required=True),
        E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
        E(
            "disallow_reversed_user_number", "disallowReversedUserNumber", bool,
            is_required=True,
        ),
        E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
        E(
            "disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool,
            is_required=True,
        ),
        E("min_code_length", "minCodeLength", int, is_required=True),
        E("max_code_length", "maxCodeLength", int, is_required=True),
        E(
            "disable_login_after_max_failed_login_attempts",
            "disableLoginAfterMaxFailedLoginAttempts", bool, is_required=True,
        ),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
        E("expire_password", "expirePassword", bool, is_required=True),
        E("passcode_expires_days", "passcodeExpiresDays", int),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
    )

    #: str: *Required* useRuleLevel
    use_rule_level = Field(type=str, required=True, mutable=False)
    #: bool: *Required* disallowRepeatedDigits
    disallow_repeated_digits = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowUserNumber
    disallow_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedUserNumber
    disallow_reversed_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPasscode
    disallow_old_passcode = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPasscode
    disallow_reversed_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minCodeLength
    min_code_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCodeLength
    max_code_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableLoginAfterMaxFailedLoginAttempts
    disable_login_after_max_failed_login_attempts = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=False, mutable=False)
    #: bool: *Required* expirePassword
    expire_password = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passcodeExpiresDays
    passcode_expires_days = Field(type=int, required=False, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)


class GroupPortalPasscodeRulesGetResponse19(OCIResponse):
    """
    Response to ``GroupPortalPasscodeRulesGetRequest19()``.

    Contains the group's passcode rules setting.  The following elements are only used in
    AS data mode: numberOfRepeatedDigits disallowRepeatedPatterns
    disallowContiguousSequences numberOfAscendingDigits numberOfDescendingDigits
    numberOfPreviousPasscodes
    """

    _ELEMENTS = (
        E("use_rule_level", "useRuleLevel", str, is_required=True),
        E("disallow_repeated_digits", "disallowRepeatedDigits", bool, is_required=True),
        E("number_of_repeated_digits", "numberOfRepeatedDigits", int, is_required=True),
        E("disallow_repeated_patterns", "disallowRepeatedPatterns", bool, is_required=True),
        E(
            "disallow_contiguous_sequences", "disallowContiguousSequences", bool,
            is_required=True,
        ),
        E("number_of_ascending_digits", "numberOfAscendingDigits", int, is_required=True),
        E("number_of_descending_digits", "numberOfDescendingDigits", int, is_required=True),
        E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
        E(
            "disallow_reversed_user_number", "disallowReversedUserNumber", bool,
            is_required=True,
        ),
        E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
        E("number_of_previous_passcodes", "numberOfPreviousPasscodes", int, is_required=True),
        E(
            "disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool,
            is_required=True,
        ),
        E("min_code_length", "minCodeLength", int, is_required=True),
        E("max_code_length", "maxCodeLength", int, is_required=True),
        E(
            "disable_login_after_max_failed_login_attempts",
            "disableLoginAfterMaxFailedLoginAttempts", bool, is_required=True,
        ),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
        E("expire_password", "expirePassword", bool, is_required=True),
        E("passcode_expires_days", "passcodeExpiresDays", int),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
    )

    #: str: *Required* useRuleLevel
    use_rule_level = Field(type=str, required=True, mutable=False)
    #: bool: *Required* disallowRepeatedDigits
    disallow_repeated_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfRepeatedDigits
    number_of_repeated_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disallowRepeatedPatterns
    disallow_repeated_patterns = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowContiguousSequences
    disallow_contiguous_sequences = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfAscendingDigits
    number_of_ascending_digits = Field(type=int, required=True, mutable=False)
    #: int: *Required* numberOfDescendingDigits
    number_of_descending_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disallowUserNumber
    disallow_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedUserNumber
    disallow_reversed_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPasscode
    disallow_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfPreviousPasscodes
    number_of_previous_passcodes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPasscode
    disallow_reversed_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minCodeLength
    min_code_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCodeLength
    max_code_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableLoginAfterMaxFailedLoginAttempts
    disable_login_after_max_failed_login_attempts = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=False, mutable=False)
    #: bool: *Required* expirePassword
    expire_password = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passcodeExpiresDays
    passcode_expires_days = Field(type=int, required=False, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)


class GroupPreAlertingAnnouncementGetResponse(OCIResponse):
    """
    Get the group level pre-alerting service settings.

    The response is either a ``GroupPreAlertingAnnouncementGetResponse()`` or an
    ``ErrorResponse()``.
    """

    _ELEMENTS = (
        E("announcement_interruption", "announcementInterruption", str, is_required=True),
        E("interruption_digit_sequence", "interruptionDigitSequence", str),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E("video_file_url", "videoFileUrl", str),
    )

    #: str: *Required* announcementInterruption
    announcement_interruption = Field(type=str, required=True, mutable=False)
    #: str: *Optional* interruptionDigitSequence
    interruption_digit_sequence = Field(type=str, required=False, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)


class GroupRouteListEnterpriseTrunkNumberRangeGetAvailableListResponse(OCIResponse):
    """
    Response to ``GroupRouteListEnterpriseTrunkNumberRangeGetAvailableListRequest()``.

    Contains a list of number ranges that are assigned to a group and still available for
    assignment to users within the group.  The column headings are "Number Range Start",
    "Number Range End" and "Is Active".
    """

    _ELEMENTS = (
        E(
            "available_number_range_table", "availableNumberRangeTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* availableNumberRangeTable  *Tabular*
    available_number_range_table = Field(type=list, required=True, mutable=False)


class GroupRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse(OCIResponse):
    """
    Response to ``GroupRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest()``.

    The response contains a table with columns: "Number Range Start", "Number Range End",
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address", "Enterprise Trunk" and "Is
    Active". The "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Phone Number", "Extension", "Department" and "Email Address" columns
    contains the corresponding attributes of the user possessing the number range.  The
    "Enterprise Trunk" column contains the enterprise trunk the user possessing the number
    range belongs to.  The "Is Active" column indicates if the number range has been
    activated.
    """

    _ELEMENTS = (
        E(
            "number_range_summary_table", "numberRangeSummaryTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* numberRangeSummaryTable  *Tabular*
    number_range_summary_table = Field(type=list, required=True, mutable=False)


class GroupRoutePointBouncedCallGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointBouncedCallGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "number_of_rings_before_bouncing_call", "numberOfRingsBeforeBouncingCall",
            int, is_required=True,
        ),
        E("enable_transfer", "enableTransfer", bool),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "bounce_call_when_agent_unavailable", "bounceCallWhenAgentUnavailable", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfRingsBeforeBouncingCall
    number_of_rings_before_bouncing_call = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* enableTransfer
    enable_transfer = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* bounceCallWhenAgentUnavailable
    bounce_call_when_agent_unavailable = Field(type=bool, required=True, mutable=False)


class GroupRoutePointDistinctiveRingingGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointDistinctiveRingingGetRequest()``.

    """

    _ELEMENTS = (
        E("enable_distinctive_ringing", "enableDistinctiveRinging", bool, is_required=True),
        E(
            "distinctive_ringing_ring_pattern", "distinctiveRingingRingPattern", str,
            is_required=True,
        ),
        E(
            "distinctive_ringing_force_delivery_ring_pattern",
            "distinctiveRingingForceDeliveryRingPattern", str, is_required=True,
        ),
    )

    #: bool: *Required* enableDistinctiveRinging
    enable_distinctive_ringing = Field(type=bool, required=True, mutable=False)
    #: str: *Required* distinctiveRingingRingPattern
    distinctive_ringing_ring_pattern = Field(type=str, required=True, mutable=False)
    #: str: *Required* distinctiveRingingForceDeliveryRingPattern
    distinctive_ringing_force_delivery_ring_pattern = Field(
        type=str, required=True, mutable=False,
    )


class GroupRoutePointExternalSystemGetAssignedListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointExternalSystemGetAssignedListRequest()``.

    Contains a table of all Route Point External Systems assigned to the group.  The
    column headings are: "Name" and "Description".
    """

    _ELEMENTS = (
        E(
            "external_system_table", "externalSystemTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* externalSystemTable  *Tabular*
    external_system_table = Field(type=list, required=True, mutable=False)


class GroupRoutePointExternalSystemGetAssignedRoutePointListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointExternalSystemGetAssignedRoutePointListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Video", "Phone
    Number", "Extension", "Department". The column values for "Video" can either be
    "true", or "false".
    """

    _ELEMENTS = (
        E(
            "route_point_table", "routePointTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* routePointTable  *Tabular*
    route_point_table = Field(type=list, required=True, mutable=False)


class GroupRoutePointGetDNISAgentListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E(
            "agent_table", "agentTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* agentTable  *Tabular*
    agent_table = Field(type=list, required=True, mutable=False)


class GroupRoutePointGetDNISListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISListRequest()``.

    Contains a table with column headings: "Name", "Phone Number", "Extension".
    """

    _ELEMENTS = (
        E("display_dnis_number", "displayDNISNumber", bool, is_required=True),
        E("display_dnis_name", "displayDNISName", bool, is_required=True),
        E("dnis_table", "dnisTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: bool: *Required* displayDNISNumber
    display_dnis_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* displayDNISName
    display_dnis_name = Field(type=bool, required=True, mutable=False)
    #: list: *Required* dnisTable  *Tabular*
    dnis_table = Field(type=list, required=True, mutable=False)


class GroupRoutePointGetDNISResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISRequest()``.

    """

    _ELEMENTS = (
        E("dnis_phone_number", "dnisPhoneNumber", str),
        E("extension", "extension", str),
        E("use_custom_clid_settings", "useCustomCLIDSettings", bool, is_required=True),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("calling_line_id_last_name", "callingLineIdLastName", str),
        E("calling_line_id_first_name", "callingLineIdFirstName", str),
        E(
            "use_custom_dnis_announcement_settings", "useCustomDnisAnnouncementSettings",
            bool, is_required=True,
        ),
        E("allow_outgoing_acd_call", "allowOutgoingACDCall", bool, is_required=True),
    )

    #: str: *Optional* dnisPhoneNumber
    dnis_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useCustomCLIDSettings
    use_custom_clid_settings = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useCustomDnisAnnouncementSettings
    use_custom_dnis_announcement_settings = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowOutgoingACDCall
    allow_outgoing_acd_call = Field(type=bool, required=True, mutable=False)


class GroupRoutePointGetFailoverPolicyResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetFailoverPolicyRequest()``.

    """

    _ELEMENTS = (
        E("enable_failover_support", "enableFailoverSupport", bool, is_required=True),
        E("external_system", "externalSystem", str),
        E("failover_phone_number", "failoverPhoneNumber", str),
        E("failover_status", "failoverStatus", str, is_required=True),
        E(
            "per_call_enable_failover_support", "perCallEnableFailoverSupport", bool,
            is_required=True,
        ),
        E(
            "per_call_call_failure_timeout_seconds", "perCallCallFailureTimeoutSeconds",
            int, is_required=True,
        ),
        E(
            "per_call_outbound_call_failure_timeout_seconds",
            "perCallOutboundCallFailureTimeoutSeconds", int, is_required=True,
        ),
        E("per_call_failover_phone_number", "perCallFailoverPhoneNumber", str),
    )

    #: bool: *Required* enableFailoverSupport
    enable_failover_support = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* externalSystem
    external_system = Field(type=str, required=False, mutable=False)
    #: str: *Optional* failoverPhoneNumber
    failover_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Required* failoverStatus
    failover_status = Field(type=str, required=True, mutable=False)
    #: bool: *Required* perCallEnableFailoverSupport
    per_call_enable_failover_support = Field(type=bool, required=True, mutable=False)
    #: int: *Required* perCallCallFailureTimeoutSeconds
    per_call_call_failure_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* perCallOutboundCallFailureTimeoutSeconds
    per_call_outbound_call_failure_timeout_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Optional* perCallFailoverPhoneNumber
    per_call_failover_phone_number = Field(type=str, required=False, mutable=False)


class GroupRoutePointGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Video", "Phone
    Number", "Extension", "Department", "Is Active". The column values for "Video" and "Is
    Active" can either be true, or false.
    """

    _ELEMENTS = (
        E(
            "route_point_table", "routePointTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* routePointTable  *Tabular*
    route_point_table = Field(type=list, required=True, mutable=False)


class GroupRoutePointQueueCallDispositionCodeGetListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointQueueCallDispositionCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description" and "Level".
    Level column can be any of the values in the data type CallDispositionCodeLevel.
    """

    _ELEMENTS = (
        E(
            "disposition_codes_table", "dispositionCodesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* dispositionCodesTable  *Tabular*
    disposition_codes_table = Field(type=list, required=True, mutable=False)


class GroupRoutePointQueueCallDispositionCodeGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointQueueCallDispositionCodeGetRequest()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("description", "description", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class GroupRoutingProfileGetResponse(OCIResponse):
    """
    Response to ``GroupRoutingProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("routing_profile", "routingProfile", str),
    )

    #: str: *Optional* routingProfile
    routing_profile = Field(type=str, required=False, mutable=False)


class GroupScheduleGetEventListResponse(OCIResponse):
    """
    Response to ``GroupScheduleGetEventListRequest()``.

    The response contains a list of events.
    """

    _ELEMENTS = (
        E("event_name", "eventName", str, is_array=True),
    )

    #: list(str): *Optional* eventName  *Array*
    event_name = Field(type=list, required=False, mutable=False)


class GroupScheduleGetListResponse(OCIResponse):
    """
    Response to ``GroupScheduleGetListRequest()``.

    The response contains a list of system schedules.
    """

    _ELEMENTS = (
        E("schedule_name", "scheduleName", str, is_array=True),
        E("schedule_type", "scheduleType", str, is_array=True),
        E("schedule_level", "scheduleLevel", str, is_array=True),
    )

    #: list(str): *Optional* scheduleName  *Array*
    schedule_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* scheduleType  *Array*
    schedule_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* scheduleLevel  *Array*
    schedule_level = Field(type=list, required=False, mutable=False)


class GroupSeriesCompletionGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupSeriesCompletionGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupSeriesCompletionGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupSeriesCompletionGetInstanceListRequest()``.

    """

    _ELEMENTS = (
        E("name", "name", str, is_array=True),
    )

    #: list(str): *Optional* name  *Array*
    name = Field(type=list, required=False, mutable=False)


class GroupSeriesCompletionGetInstanceResponse(OCIResponse):
    """
    Response to the ``GroupSeriesCompletionGetInstanceRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupServiceGetAuthorizationListResponse(OCIResponse):
    """
    Response to ``GroupServiceGetAuthorizationListRequest()``.

    Contains three tables, one for the service packs, one for the group services, and one
    for the user services.  The user table has the following column headings: "Service
    Name", "Authorized", "Assigned", "Limited", "Quantity", "Usage", "Licensed",
    "Allowed", "User Assignable", "Group Service Assignable". The group service table has
    the following column headings: "Service Name", "Authorized", "Assigned", "Limited",
    "Quantity", "Usage", "Licensed", "Allowed". The service pack table's column headings
    are: "Service Pack Name", "Authorized", "Assigned", "Limited", "Allocated", "Allowed",
    "Usage", "Description".
    """

    _ELEMENTS = (
        E(
            "service_packs_authorization_table", "servicePacksAuthorizationTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E(
            "group_services_authorization_table", "groupServicesAuthorizationTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E(
            "user_services_authorization_table", "userServicesAuthorizationTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* servicePacksAuthorizationTable  *Tabular*
    service_packs_authorization_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* groupServicesAuthorizationTable  *Tabular*
    group_services_authorization_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* userServicesAuthorizationTable  *Tabular*
    user_services_authorization_table = Field(type=list, required=True, mutable=False)


class GroupServiceGetAuthorizedListResponse(OCIResponse):
    """
    Response to ``GroupServiceGetAuthorizedListRequest()``.

    """

    _ELEMENTS = (
        E("service_pack_name", "servicePackName", str, is_array=True),
        E("group_service_name", "groupServiceName", str, is_array=True),
        E("user_service_name", "userServiceName", str, is_array=True),
    )

    #: list(str): *Optional* servicePackName  *Array*
    service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* groupServiceName  *Array*
    group_service_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* userServiceName  *Array*
    user_service_name = Field(type=list, required=False, mutable=False)


class GroupServiceInstancePrivacyGetResponse(OCIResponse):
    """
    Response to ``GroupServiceInstancePrivacyGetRequest()``.

    Replaced by: ``GroupServiceInstancePrivacyGetResponse17sp4()``
    """

    _ELEMENTS = (
        E("enable_directory_privacy", "enableDirectoryPrivacy", bool, is_required=True),
        E(
            "enable_auto_attendant_extension_dialing_privacy",
            "enableAutoAttendantExtensionDialingPrivacy", bool, is_required=True,
        ),
    )

    #: bool: *Required* enableDirectoryPrivacy
    enable_directory_privacy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAutoAttendantExtensionDialingPrivacy
    enable_auto_attendant_extension_dialing_privacy = Field(
        type=bool, required=True, mutable=False,
    )


class GroupServiceInstancePrivacyGetResponse17sp4(OCIResponse):
    """
    Response to ``GroupServiceInstancePrivacyGetRequest17sp4()``.

    """

    _ELEMENTS = (
        E("enable_directory_privacy", "enableDirectoryPrivacy", bool, is_required=True),
        E(
            "enable_auto_attendant_extension_dialing_privacy",
            "enableAutoAttendantExtensionDialingPrivacy", bool, is_required=True,
        ),
        E(
            "enable_auto_attendant_name_dialing_privacy",
            "enableAutoAttendantNameDialingPrivacy", bool, is_required=True,
        ),
    )

    #: bool: *Required* enableDirectoryPrivacy
    enable_directory_privacy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAutoAttendantExtensionDialingPrivacy
    enable_auto_attendant_extension_dialing_privacy = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableAutoAttendantNameDialingPrivacy
    enable_auto_attendant_name_dialing_privacy = Field(
        type=bool, required=True, mutable=False,
    )


class GroupServiceIsAssignedResponse(OCIResponse):
    """
    Returns true if the GroupService is assigned, otherwise false.

    """

    _ELEMENTS = (
        E("is_assigned", "isAssigned", bool, is_required=True),
    )

    #: bool: *Required* isAssigned
    is_assigned = Field(type=bool, required=True, mutable=False)


class GroupServicePhoneNumberLookupResponse(OCIResponse):
    """
    Response to the ``GroupServicePhoneNumberLookupRequest()``.

    The column headings for the userTable are: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension" and
    "Department".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupServiceScriptsGroupGetLogResponse(OCIResponse):
    """
    Response to ``GroupServiceScriptsGroupGetLogRequest()``.

    """

    _ELEMENTS = (
        E("log_content", "logContent", str),
    )

    #: str: *Optional* logContent
    log_content = Field(type=str, required=False, mutable=False)


class GroupServiceScriptsGroupGetResponse(OCIResponse):
    """
    Response to ``GroupServiceScriptsGroupGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("script_name", "scriptName", str),
        E("script_content", "scriptContent", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* scriptName
    script_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* scriptContent
    script_content = Field(type=str, required=False, mutable=False)


class GroupSessionAdmissionControlGetResponse(OCIResponse):
    """
    Response to the ``GroupSessionAdmissionControlGetRequest()``.

    The response contains the session admission control capacity allocated for the group.
    """

    _ELEMENTS = (
        E("restrict_aggregate_sessions", "restrictAggregateSessions", bool, is_required=True),
        E("max_sessions", "maxSessions", int),
        E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
        E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
        E("count_intra_group_sessions", "countIntraGroupSessions", bool, is_required=True),
    )

    #: bool: *Required* restrictAggregateSessions
    restrict_aggregate_sessions = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* maxSessions
    max_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxUserOriginatingSessions
    max_user_originating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxUserTerminatingSessions
    max_user_terminating_sessions = Field(type=int, required=False, mutable=False)
    #: bool: *Required* countIntraGroupSessions
    count_intra_group_sessions = Field(type=bool, required=True, mutable=False)


class GroupSessionAdmissionControlGroupGetListResponse(OCIResponse):
    """
    Response to ``GroupSessionAdmissionControlGroupGetListRequest()``.

    Contains a table of session admission control group configured in the group.  The
    column headings are: "Name", "Is Default", "Maximum Sessions", "Maximum Originating
    Sessions", "Maximum Terminating Sessions".
    """

    _ELEMENTS = (
        E(
            "session_admission_control_group_table", "sessionAdmissionControlGroupTable",
            list, is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* sessionAdmissionControlGroupTable  *Tabular*
    session_admission_control_group_table = Field(type=list, required=True, mutable=False)


class GroupSpeedDial100GetResponse(OCIResponse):
    """
    Response to the ``GroupSpeedDial100GetRequest()``.

    """

    _ELEMENTS = (
        E("prefix", "prefix", str, is_required=True),
    )

    #: str: *Required* prefix
    prefix = Field(type=str, required=True, mutable=False)


class GroupSpeedDial100GetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupSpeedDial100GetRequest17sp1()``.

    """

    _ELEMENTS = (
        E("prefix", "prefix", str),
    )

    #: str: *Optional* prefix
    prefix = Field(type=str, required=False, mutable=False)


class GroupThirdPartyVoiceMailSupportGetResponse(OCIResponse):
    """
    Response to ``GroupThirdPartyVoiceMailSupportGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("group_server", "groupServer", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* groupServer
    group_server = Field(type=str, required=False, mutable=False)


class GroupTimeScheduleGetListResponse(OCIResponse):
    """
    Response to the ``GroupTimeScheduleGetListRequest()``.

    The response contains all the group's time schedule name.
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", str, is_array=True),
    )

    #: list(str): *Optional* timeSchedule  *Array*
    time_schedule = Field(type=list, required=False, mutable=False)


class GroupTrunkGroupGetAvailableDetailListResponse(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetAvailableDetailListRequest()``.

    """

    _ELEMENTS = (
        E("trunk_group", "trunkGroup", str, is_complex=True, is_array=True),  # unknown
    )

    #: list(str): *Optional* trunkGroup  *Array*
    trunk_group = Field(type=list, required=False, mutable=False)


class GroupTrunkGroupGetAvailableHostedUserListResponse(OCIResponse):
    """
    Response to the ``GroupTrunkGroupGetAvailableHostedUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupTrunkGroupGetInstanceListResponse14(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceListRequest14()``.

    Contains a table with column headings "Service User Id", "Name", "Department", "Device
    Name", "Device Level", "Group Id". The "Device Level" column contains one of the
    AccessDeviceLevel enumerated constants.
    """

    _ELEMENTS = (
        E(
            "trunk_group_table", "trunkGroupTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* trunkGroupTable  *Tabular*
    trunk_group_table = Field(type=list, required=True, mutable=False)


class GroupTrunkGroupGetInstanceListResponse14sp4(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceListRequest14sp4()``.

    Contains a table with column headings "Name", "Department", "Device Name", "Device
    Level", "Group Id". The "Device Level" column contains one of the AccessDeviceLevel
    enumerated constants.
    """

    _ELEMENTS = (
        E(
            "trunk_group_table", "trunkGroupTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* trunkGroupTable  *Tabular*
    trunk_group_table = Field(type=list, required=True, mutable=False)


class GroupTrunkGroupGetInstanceUserListResponse(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceUserListRequest()``.

    The response contains a 7 column table with column headings "User Id", "Last Name",
    "First Name", "Department", "Phone Number", "Hiragana Last Name", "Hiragana First
    Name".
    """

    _ELEMENTS = (
        E(
            "trunk_group_user_table", "trunkGroupUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* trunkGroupUserTable  *Tabular*
    trunk_group_user_table = Field(type=list, required=True, mutable=False)


class GroupTrunkGroupGetInstanceUserListResponse14sp4(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceUserListRequest14sp4()``.

    The response contains a 9 column table with column headings "User Id", "Last Name",
    "First Name", "Department", "Phone Number", "Hiragana Last Name", "Hiragana First
    Name", "Extension", "Email Address".
    """

    _ELEMENTS = (
        E(
            "trunk_group_user_table", "trunkGroupUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* trunkGroupUserTable  *Tabular*
    trunk_group_user_table = Field(type=list, required=True, mutable=False)


class GroupTrunkGroupSecurityClassificationGetResponse(OCIResponse):
    """
    Response to the ``GroupTrunkGroupSecurityClassificationGetRequest()``.

    """

    _ELEMENTS = (
        E("default_security_classification", "defaultSecurityClassification", str),
    )

    #: str: *Optional* defaultSecurityClassification
    default_security_classification = Field(type=str, required=False, mutable=False)


class GroupTrunkGroupUserCreationTaskGetListResponse(OCIResponse):
    """
    Response to ``GroupTrunkGroupUserCreationTaskGetListRequest()``.

    Contains a table with a row for each user creation task and column headings : "Name",
    "Status", "Users Created", "Total Users To Create", "Error Count".
    """

    _ELEMENTS = (
        E("task_table", "taskTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* taskTable  *Tabular*
    task_table = Field(type=list, required=True, mutable=False)


class GroupTrunkGroupUserCreationTaskGetListResponse14sp4(OCIResponse):
    """
    Response to ``GroupTrunkGroupUserCreationTaskGetListRequest14sp4()``.

    Contains a table with a row for each user creation task and column headings : "Name",
    "Status", "Users Created", "Total Users To Create", "Error Count".
    """

    _ELEMENTS = (
        E("task_table", "taskTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* taskTable  *Tabular*
    task_table = Field(type=list, required=True, mutable=False)


class GroupTrunkGroupUserCreationTaskGetResponse(OCIResponse):
    """
    Response to a ``GroupTrunkGroupUserCreationTaskGetRequest()``.

    """

    _ELEMENTS = (
        E("user_id_format", "userIdFormat", str, is_required=True),
        E("user_id_domain", "userIdDomain", str, is_required=True),
        E("populate_extension", "populateExtension", bool, is_required=True),
        E("line_port_format", "linePortFormat", str, is_required=True),
        E("line_port_domain", "linePortDomain", str, is_required=True),
        E("populate_contact", "populateContact", bool, is_required=True),
        E("contact_format", "contactFormat", str),
        E("contact_domain", "contactDomain", str),
        E("users_created", "usersCreated", int, is_required=True),
        E("total_users_to_create", "totalUsersToCreate", int, is_required=True),
        E("error_count", "errorCount", int, is_required=True),
        E("service_pack_name", "servicePackName", str, is_array=True),
        E("user_service_name", "userServiceName", str, is_array=True),
        E("status", "status", str, is_required=True),
        E("user_creation_mode", "userCreationMode", str, is_required=True),
        E("task_summary", "taskSummary", str, is_required=True),
    )

    #: str: *Required* userIdFormat
    user_id_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* userIdDomain
    user_id_domain = Field(type=str, required=True, mutable=False)
    #: bool: *Required* populateExtension
    populate_extension = Field(type=bool, required=True, mutable=False)
    #: str: *Required* linePortFormat
    line_port_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* linePortDomain
    line_port_domain = Field(type=str, required=True, mutable=False)
    #: bool: *Required* populateContact
    populate_contact = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* contactFormat
    contact_format = Field(type=str, required=False, mutable=False)
    #: str: *Optional* contactDomain
    contact_domain = Field(type=str, required=False, mutable=False)
    #: int: *Required* usersCreated
    users_created = Field(type=int, required=True, mutable=False)
    #: int: *Required* totalUsersToCreate
    total_users_to_create = Field(type=int, required=True, mutable=False)
    #: int: *Required* errorCount
    error_count = Field(type=int, required=True, mutable=False)
    #: list(str): *Optional* servicePackName  *Array*
    service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* userServiceName  *Array*
    user_service_name = Field(type=list, required=False, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Required* userCreationMode
    user_creation_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* taskSummary
    task_summary = Field(type=str, required=True, mutable=False)


class GroupTrunkGroupUserCreationTaskGetResponse14sp4(OCIResponse):
    """
    Response to a ``GroupTrunkGroupUserCreationTaskGetRequest14sp4()``.

    """

    _ELEMENTS = (
        E("user_id_format", "userIdFormat", str, is_required=True),
        E("user_id_domain", "userIdDomain", str, is_required=True),
        E("populate_extension", "populateExtension", bool, is_required=True),
        E("line_port_format", "linePortFormat", str, is_required=True),
        E("line_port_domain", "linePortDomain", str, is_required=True),
        E("populate_contact", "populateContact", bool, is_required=True),
        E("contact_format", "contactFormat", str),
        E("contact_domain", "contactDomain", str),
        E("users_created", "usersCreated", int, is_required=True),
        E("total_users_to_create", "totalUsersToCreate", int, is_required=True),
        E("error_count", "errorCount", int, is_required=True),
        E("service_pack_name", "servicePackName", str, is_array=True),
        E("user_service_name", "userServiceName", str, is_array=True),
        E("status", "status", str, is_required=True),
        E("user_creation_mode", "userCreationMode", str, is_required=True),
        E("task_summary", "taskSummary", str, is_required=True),
        E("report_file_key", "reportFileKey", str, is_required=True),
    )

    #: str: *Required* userIdFormat
    user_id_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* userIdDomain
    user_id_domain = Field(type=str, required=True, mutable=False)
    #: bool: *Required* populateExtension
    populate_extension = Field(type=bool, required=True, mutable=False)
    #: str: *Required* linePortFormat
    line_port_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* linePortDomain
    line_port_domain = Field(type=str, required=True, mutable=False)
    #: bool: *Required* populateContact
    populate_contact = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* contactFormat
    contact_format = Field(type=str, required=False, mutable=False)
    #: str: *Optional* contactDomain
    contact_domain = Field(type=str, required=False, mutable=False)
    #: int: *Required* usersCreated
    users_created = Field(type=int, required=True, mutable=False)
    #: int: *Required* totalUsersToCreate
    total_users_to_create = Field(type=int, required=True, mutable=False)
    #: int: *Required* errorCount
    error_count = Field(type=int, required=True, mutable=False)
    #: list(str): *Optional* servicePackName  *Array*
    service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* userServiceName  *Array*
    user_service_name = Field(type=list, required=False, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Required* userCreationMode
    user_creation_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* taskSummary
    task_summary = Field(type=str, required=True, mutable=False)
    #: str: *Required* reportFileKey
    report_file_key = Field(type=str, required=True, mutable=False)


class GroupVirtualOnNetEnterpriseExtensionsGetUserListResponse(OCIResponse):
    """
    Response to ``GroupVirtualOnNetEnterpriseExtensionsGetUserListRequest()``.

    Contains a table with column headings: "Last Name", "First Name", "Phone Number",
    "Extension", "Virtual On-Net Call Type Name" in a row for each user.
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class GroupVirtualOnNetEnterpriseExtensionsGetUserResponse(OCIResponse):
    """
    Response to ``GroupVirtualOnNetEnterpriseExtensionsGetUserRequest()``.

    """

    _ELEMENTS = (
        E("extension", "extension", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("virtual_on_net_call_type_name", "virtualOnNetCallTypeName", str, is_required=True),
    )

    #: str: *Required* extension
    extension = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* virtualOnNetCallTypeName
    virtual_on_net_call_type_name = Field(type=str, required=True, mutable=False)


class GroupVoiceMessagingGroupGetPasscodeRulesResponse(OCIResponse):
    """
    Response to ``GroupVoiceMessagingGroupGetPasscodeRulesRequest()``.

    Contains the group's voice portal passcode rules setting.

    Replaced By: ``GroupPortalPasscodeRulesGetResponse()``
    """

    _ELEMENTS = (
        E("use_rule_level", "useRuleLevel", str, is_required=True),
        E("disallow_repeated_digits", "disallowRepeatedDigits", bool, is_required=True),
        E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
        E(
            "disallow_reversed_user_number", "disallowReversedUserNumber", bool,
            is_required=True,
        ),
        E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
        E(
            "disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool,
            is_required=True,
        ),
        E("min_code_length", "minCodeLength", int, is_required=True),
        E("max_code_length", "maxCodeLength", int, is_required=True),
        E(
            "disable_login_after_max_failed_login_attempts",
            "disableLoginAfterMaxFailedLoginAttempts", bool, is_required=True,
        ),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
        E("expire_password", "expirePassword", bool, is_required=True),
        E("passcode_expires_days", "passcodeExpiresDays", int),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
    )

    #: str: *Required* useRuleLevel
    use_rule_level = Field(type=str, required=True, mutable=False)
    #: bool: *Required* disallowRepeatedDigits
    disallow_repeated_digits = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowUserNumber
    disallow_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedUserNumber
    disallow_reversed_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPasscode
    disallow_old_passcode = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPasscode
    disallow_reversed_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minCodeLength
    min_code_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCodeLength
    max_code_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableLoginAfterMaxFailedLoginAttempts
    disable_login_after_max_failed_login_attempts = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=False, mutable=False)
    #: bool: *Required* expirePassword
    expire_password = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passcodeExpiresDays
    passcode_expires_days = Field(type=int, required=False, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)


class GroupVoiceMessagingGroupGetResponse(OCIResponse):
    """
    Response to ``GroupVoiceMessagingGroupGetRequest()``.

    Contains the group's voice messaging settings.
    """

    _ELEMENTS = (
        E("use_mail_server_setting", "useMailServerSetting", str, is_required=True),
        E(
            "warn_caller_before_recording_voice_message",
            "warnCallerBeforeRecordingVoiceMessage", bool, is_required=True,
        ),
        E(
            "allow_users_configuring_advanced_settings",
            "allowUsersConfiguringAdvancedSettings", bool, is_required=True,
        ),
        E(
            "allow_compose_or_forward_message_to_entire_group",
            "allowComposeOrForwardMessageToEntireGroup", bool, is_required=True,
        ),
        E("mail_server_net_address", "mailServerNetAddress", str),
        E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
        E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
        E("max_mailbox_length_minutes", "maxMailboxLengthMinutes", int, is_required=True),
        E("does_message_age", "doesMessageAge", bool, is_required=True),
        E("hold_period_days", "holdPeriodDays", int, is_required=True),
    )

    #: str: *Required* useMailServerSetting
    use_mail_server_setting = Field(type=str, required=True, mutable=False)
    #: bool: *Required* warnCallerBeforeRecordingVoiceMessage
    warn_caller_before_recording_voice_message = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowUsersConfiguringAdvancedSettings
    allow_users_configuring_advanced_settings = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowComposeOrForwardMessageToEntireGroup
    allow_compose_or_forward_message_to_entire_group = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Optional* mailServerNetAddress
    mail_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* mailServerProtocol
    mail_server_protocol = Field(type=str, required=True, mutable=False)
    #: bool: *Required* realDeleteForImap
    real_delete_for_imap = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxMailboxLengthMinutes
    max_mailbox_length_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* doesMessageAge
    does_message_age = Field(type=bool, required=True, mutable=False)
    #: int: *Required* holdPeriodDays
    hold_period_days = Field(type=int, required=True, mutable=False)


class GroupVoiceMessagingGroupGetVoicePortalBrandingResponse(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalBrandingRequest()``.

    Replaced By: ``GroupVoiceMessagingGroupGetVoicePortalBrandingResponse16()``
    """

    _ELEMENTS = (
        E(
            "voice_portal_greeting_selection", "voicePortalGreetingSelection", str,
            is_required=True,
        ),
        E(
            "voice_portal_greeting_file_description",
            "voicePortalGreetingFileDescription", str,
        ),
        E(
            "voice_messaging_greeting_selection", "voiceMessagingGreetingSelection", str,
            is_required=True,
        ),
        E(
            "voice_messaging_greeting_file_description",
            "voiceMessagingGreetingFileDescription", str,
        ),
    )

    #: str: *Required* voicePortalGreetingSelection
    voice_portal_greeting_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* voicePortalGreetingFileDescription
    voice_portal_greeting_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Required* voiceMessagingGreetingSelection
    voice_messaging_greeting_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* voiceMessagingGreetingFileDescription
    voice_messaging_greeting_file_description = Field(type=str, required=False, mutable=False)


class GroupVoiceMessagingGroupGetVoicePortalBrandingResponse16(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalBrandingRequest16()``.

    """

    _ELEMENTS = (
        E(
            "voice_portal_greeting_selection", "voicePortalGreetingSelection", str,
            is_required=True,
        ),
        E(
            "voice_portal_greeting_file_description",
            "voicePortalGreetingFileDescription", str,
        ),
        E("voice_portal_greeting_media_type", "voicePortalGreetingMediaType", str),
        E(
            "voice_messaging_greeting_selection", "voiceMessagingGreetingSelection", str,
            is_required=True,
        ),
        E(
            "voice_messaging_greeting_file_description",
            "voiceMessagingGreetingFileDescription", str,
        ),
        E("voice_messaging_greeting_media_type", "voiceMessagingGreetingMediaType", str),
    )

    #: str: *Required* voicePortalGreetingSelection
    voice_portal_greeting_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* voicePortalGreetingFileDescription
    voice_portal_greeting_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* voicePortalGreetingMediaType
    voice_portal_greeting_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* voiceMessagingGreetingSelection
    voice_messaging_greeting_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* voiceMessagingGreetingFileDescription
    voice_messaging_greeting_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* voiceMessagingGreetingMediaType
    voice_messaging_greeting_media_type = Field(type=str, required=False, mutable=False)


class GroupVoiceXmlGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupVoiceXmlGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active". The column values for "Is Active" can either
    be true, or false.
    """

    _ELEMENTS = (
        E(
            "voice_xml_table", "voiceXmlTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* voiceXmlTable  *Tabular*
    voice_xml_table = Field(type=list, required=True, mutable=False)


class LoginResponse13mp10(OCIResponse):
    """
    ``LoginRequest13mp10()``/Response13mp10 is 2nd stage of the 2 stage OCI login process.

    """

    _ELEMENTS = (
        E("login_type", "loginType", str, is_required=True),
        E("locale", "locale", str, is_required=True),
        E("encoding", "encoding", str, is_required=True),
    )

    #: str: *Required* loginType
    login_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* locale
    locale = Field(type=str, required=True, mutable=False)
    #: str: *Required* encoding
    encoding = Field(type=str, required=True, mutable=False)


class LoginResponse14sp4(OCIResponse):
    """
    ``LoginRequest14sp4()``/Response14sp4 is 2nd stage of the 2 stage OCI login process.

    """

    _ELEMENTS = (
        E("login_type", "loginType", str, is_required=True),
        E("locale", "locale", str, is_required=True),
        E("encoding", "encoding", str, is_required=True),
        E("group_id", "groupId", str),
        E("service_provider_id", "serviceProviderId", str),
        E("is_enterprise", "isEnterprise", bool, is_required=True),
        E("password_expires_days", "passwordExpiresDays", int),
        E("user_domain", "userDomain", str, is_required=True),
    )

    #: str: *Required* loginType
    login_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* locale
    locale = Field(type=str, required=True, mutable=False)
    #: str: *Required* encoding
    encoding = Field(type=str, required=True, mutable=False)
    #: str: *Optional* groupId
    group_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceProviderId
    service_provider_id = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isEnterprise
    is_enterprise = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passwordExpiresDays
    password_expires_days = Field(type=int, required=False, mutable=False)
    #: str: *Required* userDomain
    user_domain = Field(type=str, required=True, mutable=False)


class PrimaryInfoGetResponse(OCIResponse):
    """
    Information about the primary server in the high-availablity cluster.

    For optimization, we only get the hostname and addresses for primary if they are
    explicitly requested or if the current server is not the primary.
    """

    _ELEMENTS = (
        E("is_primary", "isPrimary", bool, is_required=True),
        E("hostname_for_primary", "hostnameForPrimary", str),
        E("address_for_primary", "addressForPrimary", str, is_array=True),
        E("private_address_for_primary", "privateAddressForPrimary", str, is_array=True),
    )

    #: bool: *Required* isPrimary
    is_primary = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* hostnameForPrimary
    hostname_for_primary = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* addressForPrimary  *Array*
    address_for_primary = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* privateAddressForPrimary  *Array*
    private_address_for_primary = Field(type=list, required=False, mutable=False)


class PublicClusterGetFullyQualifiedDomainNameResponse(OCIResponse):
    """
    Response to ``PublicClusterGetFullyQualifiedDomainNameRequest()``.

    """

    _ELEMENTS = (
        E("public_cluster_fqdn", "publicClusterFQDN", str),
    )

    #: str: *Optional* publicClusterFQDN
    public_cluster_fqdn = Field(type=str, required=False, mutable=False)


class ServiceProviderAccessDeviceCustomTagGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceCustomTagGetListRequest()``.

    Contains a table of custom configuration tags managed by the Device Management System
    on a per-device profile basis.  The column headings are: "Tag Name", "Tag Value"
    """

    _ELEMENTS = (
        E(
            "device_custom_tags_table", "deviceCustomTagsTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceCustomTagsTable  *Tabular*
    device_custom_tags_table = Field(type=list, required=True, mutable=False)


class ServiceProviderAccessDeviceFileGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetListRequest()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Type", "File Format", "Is
    Authenticated".

    Replaced By: ``ServiceProviderAccessDeviceFileGetListResponse14sp8()``
    """

    _ELEMENTS = (
        E(
            "device_files_table", "deviceFilesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceFilesTable  *Tabular*
    device_files_table = Field(type=list, required=True, mutable=False)


class ServiceProviderAccessDeviceFileGetListResponse14sp8(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetListRequest14sp8()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Format", "Is Authenticated",
    "Access URL", "Repository URL", "Template URL", "Extended Capture". The following
    columns are only used in AS data mode: "Extended Capture"
    """

    _ELEMENTS = (
        E(
            "device_files_table", "deviceFilesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceFilesTable  *Tabular*
    device_files_table = Field(type=list, required=True, mutable=False)


class ServiceProviderAccessDeviceFileGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetRequest()``.

    Replaced By: ``ServiceProviderAccessDeviceFileGetResponse14sp8()``
    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)


class ServiceProviderAccessDeviceFileGetResponse14sp8(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetRequest14sp8()``.

    Replaced by: ``ServiceProviderAccessDeviceFileGetResponse16sp1()``
    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)


class ServiceProviderAccessDeviceFileGetResponse16sp1(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetRequest16sp1()``.

    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)


class ServiceProviderAccessDeviceFileGetResponse20(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetRequest20()``.

    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
        E("extended_capture_enabled", "extendedCaptureEnabled", bool),
        E("extended_capture_url", "extendedCaptureURL", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* extendedCaptureEnabled
    extended_capture_enabled = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* extendedCaptureURL
    extended_capture_url = Field(type=str, required=False, mutable=False)


class ServiceProviderAccessDeviceGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetListRequest()``.

    Contains a table of devices configured in the service provider.  The column headings
    are: "Device Name", "Device Type", "Available Ports", "Net Address", "MAC Address",
    "Status", and "Version".
    """

    _ELEMENTS = (
        E(
            "access_device_table", "accessDeviceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* accessDeviceTable  *Tabular*
    access_device_table = Field(type=list, required=True, mutable=False)


class ServiceProviderAccessDeviceGetUserListResponse(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetUserListRequest()``.

    The column headings for the deviceUserTable are: "Line/Port", "Last Name", "First
    Name", "Phone Number", "Group Id", "User Id", "User Type", "Endpoint Type", "Primary
    Line/Port", "Order", "Extension", "Department", "Email Address", "Private Identity".
    In IMS mode, the table will contain a row for each TEL-URI in the Phone Number column.
    In standalone mode, rows for the alternate numbers are not included.  The User Type
    column contains one of the enumerated UserType values.  The Endpoint Type column
    contains one of the enumerated EndpointType values.  The Private Identity column is
    empty is AS mode.
    """

    _ELEMENTS = (
        E(
            "device_user_table", "deviceUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceUserTable  *Tabular*
    device_user_table = Field(type=list, required=True, mutable=False)


class ServiceProviderAdminGetListResponse14(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetListRequest14()``.

    Contains a 5 column table with column headings "Administrator ID", "Last Name", "First
    Name", "Administrator Type", "Language".
    """

    _ELEMENTS = (
        E(
            "service_provider_admin_table", "serviceProviderAdminTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceProviderAdminTable  *Tabular*
    service_provider_admin_table = Field(type=list, required=True, mutable=False)


class ServiceProviderAdminGetPolicyResponse14(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest14()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess is returned only for the enterprise administrator.
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("group_access", "groupAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("service_pack_access", "servicePackAccess", str, is_required=True),
        E("web_branding_access", "webBrandingAccess", str, is_required=True),
        E("network_policy_access", "networkPolicyAccess", str),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAccess
    group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* servicePackAccess
    service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* webBrandingAccess
    web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Optional* networkPolicyAccess
    network_policy_access = Field(type=str, required=False, mutable=False)


class ServiceProviderAdminGetPolicyResponse16sp1(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest16sp1()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess is returned only for the enterprise administrator.  Replaced by:
    ``ServiceProviderAdminGetPolicyResponse17()``
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("group_access", "groupAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("service_pack_access", "servicePackAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("web_branding_access", "webBrandingAccess", str, is_required=True),
        E("network_policy_access", "networkPolicyAccess", str),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAccess
    group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* servicePackAccess
    service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* webBrandingAccess
    web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Optional* networkPolicyAccess
    network_policy_access = Field(type=str, required=False, mutable=False)


class ServiceProviderAdminGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest16sp1()``.

    Response to ``ServiceProviderAdminGetPolicyRequest16sp2()``. Contains the policy
    settings for the service provider administrator.  The networkPolicyAccess is returned
    only for the enterprise administrator.
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("group_access", "groupAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("service_pack_access", "servicePackAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("web_branding_access", "webBrandingAccess", str, is_required=True),
        E("network_policy_access", "networkPolicyAccess", str),
        E("dialable_caller_id_access", "dialableCallerIDAccess", str, is_required=True),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAccess
    group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* servicePackAccess
    service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* webBrandingAccess
    web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Optional* networkPolicyAccess
    network_policy_access = Field(type=str, required=False, mutable=False)
    #: str: *Required* dialableCallerIDAccess
    dialable_caller_id_access = Field(type=str, required=True, mutable=False)


class ServiceProviderAdminGetPolicyResponse17(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest17()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess is returned only for the enterprise administrator.
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("group_access", "groupAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("service_pack_access", "servicePackAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("web_branding_access", "webBrandingAccess", str, is_required=True),
        E("office_zone_access", "officeZoneAccess", str, is_required=True),
        E("network_policy_access", "networkPolicyAccess", str),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAccess
    group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* servicePackAccess
    service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* webBrandingAccess
    web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* officeZoneAccess
    office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Optional* networkPolicyAccess
    network_policy_access = Field(type=str, required=False, mutable=False)


class ServiceProviderAdminGetPolicyResponse17sp1(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest17sp1()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess is returned only for the enterprise administrator.  The following
    elements are only used in HSS data mode: communicationBarringAccess
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("group_access", "groupAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("service_pack_access", "servicePackAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("web_branding_access", "webBrandingAccess", str, is_required=True),
        E("office_zone_access", "officeZoneAccess", str, is_required=True),
        E(
            "communication_barring_access", "communicationBarringAccess", str,
            is_required=True,
        ),
        E("network_policy_access", "networkPolicyAccess", str),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAccess
    group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* servicePackAccess
    service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* webBrandingAccess
    web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* officeZoneAccess
    office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* communicationBarringAccess
    communication_barring_access = Field(type=str, required=True, mutable=False)
    #: str: *Optional* networkPolicyAccess
    network_policy_access = Field(type=str, required=False, mutable=False)


class ServiceProviderAdminGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest17sp3()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess is returned only for the enterprise administrator.  The following
    elements are only used in AS data mode: dialableCallerIDAccess The following elements
    are only used in HSS data mode: communicationBarringAccess
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("group_access", "groupAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("service_pack_access", "servicePackAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("web_branding_access", "webBrandingAccess", str, is_required=True),
        E("office_zone_access", "officeZoneAccess", str, is_required=True),
        E(
            "communication_barring_access", "communicationBarringAccess", str,
            is_required=True,
        ),
        E("network_policy_access", "networkPolicyAccess", str),
        E("dialable_caller_id_access", "dialableCallerIDAccess", str, is_required=True),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAccess
    group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* servicePackAccess
    service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* webBrandingAccess
    web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* officeZoneAccess
    office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* communicationBarringAccess
    communication_barring_access = Field(type=str, required=True, mutable=False)
    #: str: *Optional* networkPolicyAccess
    network_policy_access = Field(type=str, required=False, mutable=False)
    #: str: *Required* dialableCallerIDAccess
    dialable_caller_id_access = Field(type=str, required=True, mutable=False)


class ServiceProviderAdminGetPolicyResponse18(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest18()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess and numberActivationAccess are returned only for the enterprise
    administrator.  The following elements are only used in AS data mode:
    dialableCallerIDAccess
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("group_access", "groupAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("service_pack_access", "servicePackAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("web_branding_access", "webBrandingAccess", str, is_required=True),
        E("office_zone_access", "officeZoneAccess", str, is_required=True),
        E(
            "communication_barring_access", "communicationBarringAccess", str,
            is_required=True,
        ),
        E("network_policy_access", "networkPolicyAccess", str),
        E("number_activation_access", "numberActivationAccess", str),
        E("dialable_caller_id_access", "dialableCallerIDAccess", str, is_required=True),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAccess
    group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* servicePackAccess
    service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* webBrandingAccess
    web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* officeZoneAccess
    office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* communicationBarringAccess
    communication_barring_access = Field(type=str, required=True, mutable=False)
    #: str: *Optional* networkPolicyAccess
    network_policy_access = Field(type=str, required=False, mutable=False)
    #: str: *Optional* numberActivationAccess
    number_activation_access = Field(type=str, required=False, mutable=False)
    #: str: *Required* dialableCallerIDAccess
    dialable_caller_id_access = Field(type=str, required=True, mutable=False)


class ServiceProviderAdminGetPolicyResponse20(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest20()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess and numberActivationAccess are returned only for the enterprise
    administrator.  The following elements are only used in AS data mode:
    dialableCallerIDAccess verifyTranslationAndRoutingAccess
    """

    _ELEMENTS = (
        E("profile_access", "profileAccess", str, is_required=True),
        E("group_access", "groupAccess", str, is_required=True),
        E("user_access", "userAccess", str, is_required=True),
        E("admin_access", "adminAccess", str, is_required=True),
        E("department_access", "departmentAccess", str, is_required=True),
        E("access_device_access", "accessDeviceAccess", str, is_required=True),
        E(
            "phone_number_extension_access", "phoneNumberExtensionAccess", str,
            is_required=True,
        ),
        E(
            "calling_line_id_number_access", "callingLineIdNumberAccess", str,
            is_required=True,
        ),
        E("service_access", "serviceAccess", str, is_required=True),
        E("service_pack_access", "servicePackAccess", str, is_required=True),
        E(
            "session_admission_control_access", "sessionAdmissionControlAccess", str,
            is_required=True,
        ),
        E("web_branding_access", "webBrandingAccess", str, is_required=True),
        E("office_zone_access", "officeZoneAccess", str, is_required=True),
        E(
            "communication_barring_access", "communicationBarringAccess", str,
            is_required=True,
        ),
        E("network_policy_access", "networkPolicyAccess", str),
        E("number_activation_access", "numberActivationAccess", str),
        E("dialable_caller_id_access", "dialableCallerIDAccess", str, is_required=True),
        E(
            "verify_translation_and_routing_access", "verifyTranslationAndRoutingAccess",
            str, is_required=True,
        ),
    )

    #: str: *Required* profileAccess
    profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAccess
    group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* userAccess
    user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminAccess
    admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* departmentAccess
    department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessDeviceAccess
    access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* phoneNumberExtensionAccess
    phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdNumberAccess
    calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceAccess
    service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* servicePackAccess
    service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* sessionAdmissionControlAccess
    session_admission_control_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* webBrandingAccess
    web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* officeZoneAccess
    office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* communicationBarringAccess
    communication_barring_access = Field(type=str, required=True, mutable=False)
    #: str: *Optional* networkPolicyAccess
    network_policy_access = Field(type=str, required=False, mutable=False)
    #: str: *Optional* numberActivationAccess
    number_activation_access = Field(type=str, required=False, mutable=False)
    #: str: *Required* dialableCallerIDAccess
    dialable_caller_id_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* verifyTranslationAndRoutingAccess
    verify_translation_and_routing_access = Field(type=str, required=True, mutable=False)


class ServiceProviderAdminGetResponse14(OCIResponse):
    """
    Response to the ``ServiceProviderAdminGetRequest14()``.

    The response contains the service provider administrators profile information.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("first_name", "firstName", str),
        E("last_name", "lastName", str),
        E("language", "language", str, is_required=True),
        E("administrator_type", "administratorType", str, is_required=True),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Optional* firstName
    first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* lastName
    last_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* administratorType
    administrator_type = Field(type=str, required=True, mutable=False)


class ServiceProviderAdviceOfChargeGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderAdviceOfChargeGetRequest()``.

    Contains a list of Advice of Charge service provider parameters.
    """

    _ELEMENTS = (
        E("use_sp_level_ao_c_settings", "useSPLevelAoCSettings", bool, is_required=True),
        E(
            "delay_between_notification_seconds", "delayBetweenNotificationSeconds", int,
            is_required=True,
        ),
    )

    #: bool: *Required* useSPLevelAoCSettings
    use_sp_level_ao_c_settings = Field(type=bool, required=True, mutable=False)
    #: int: *Required* delayBetweenNotificationSeconds
    delay_between_notification_seconds = Field(type=int, required=True, mutable=False)


class ServiceProviderAnswerConfirmationGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderAnswerConfirmationGetRequest()``.

    Replaced By: ``ServiceProviderAnswerConfirmationGetResponse16()``
    """

    _ELEMENTS = (
        E(
            "announcement_message_selection", "announcementMessageSelection", str,
            is_required=True,
        ),
        E(
            "confirmation_message_audio_file_description",
            "confirmationMessageAudioFileDescription", str,
        ),
        E("confirmation_timout_seconds", "confirmationTimoutSeconds", int, is_required=True),
    )

    #: str: *Required* announcementMessageSelection
    announcement_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* confirmationMessageAudioFileDescription
    confirmation_message_audio_file_description = Field(
        type=str, required=False, mutable=False,
    )
    #: int: *Required* confirmationTimoutSeconds
    confirmation_timout_seconds = Field(type=int, required=True, mutable=False)


class ServiceProviderAnswerConfirmationGetResponse16(OCIResponse):
    """
    Response to the ``ServiceProviderAnswerConfirmationGetRequest16()``.

    """

    _ELEMENTS = (
        E(
            "announcement_message_selection", "announcementMessageSelection", str,
            is_required=True,
        ),
        E(
            "confirmation_message_audio_file_description",
            "confirmationMessageAudioFileDescription", str,
        ),
        E("confirmation_message_media_type", "confirmationMessageMediaType", str),
        E("confirmation_timout_seconds", "confirmationTimoutSeconds", int, is_required=True),
    )

    #: str: *Required* announcementMessageSelection
    announcement_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* confirmationMessageAudioFileDescription
    confirmation_message_audio_file_description = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* confirmationMessageMediaType
    confirmation_message_media_type = Field(type=str, required=False, mutable=False)
    #: int: *Required* confirmationTimoutSeconds
    confirmation_timout_seconds = Field(type=int, required=True, mutable=False)


class ServiceProviderApplicationServerSetGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderApplicationServerSetGetRequest()``.

    The response contains the service provider or enterprise's Application Server set
    information.
    """

    _ELEMENTS = (
        E("application_server_set_name", "applicationServerSetName", str),
    )

    #: str: *Optional* applicationServerSetName
    application_server_set_name = Field(type=str, required=False, mutable=False)


class ServiceProviderBroadWorksCommunicatorGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderBroadWorksCommunicatorGetRequest()``.

    """

    _ELEMENTS = (
        E("configuration_server_url", "configurationServerURL", str),
    )

    #: str: *Optional* configurationServerURL
    configuration_server_url = Field(type=str, required=False, mutable=False)


class ServiceProviderBroadWorksMobilityGetResponse(OCIResponse):
    """
    The response to a ``ServiceProviderBroadWorksMobilityGetRequest()``.

    """

    _ELEMENTS = (
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("enable_location_services", "enableLocationServices", bool, is_required=True),
        E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
        E(
            "enable_mobile_state_checking", "enableMobileStateChecking", bool,
            is_required=True,
        ),
        E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
        E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
    )

    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableLocationServices
    enable_location_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMSRNLookup
    enable_msrn_lookup = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMobileStateChecking
    enable_mobile_state_checking = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallOriginations
    deny_call_originations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallTerminations
    deny_call_terminations = Field(type=bool, required=True, mutable=False)


class ServiceProviderBroadWorksMobilityGetResponse19sp1(OCIResponse):
    """
    The response to a ``ServiceProviderBroadWorksMobilityGetRequest19sp1()``.

    """

    _ELEMENTS = (
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("enable_location_services", "enableLocationServices", bool, is_required=True),
        E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
        E(
            "enable_mobile_state_checking", "enableMobileStateChecking", bool,
            is_required=True,
        ),
        E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
        E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
        E(
            "enable_announcement_suppression", "enableAnnouncementSuppression", bool,
            is_required=True,
        ),
    )

    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableLocationServices
    enable_location_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMSRNLookup
    enable_msrn_lookup = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMobileStateChecking
    enable_mobile_state_checking = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallOriginations
    deny_call_originations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallTerminations
    deny_call_terminations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAnnouncementSuppression
    enable_announcement_suppression = Field(type=bool, required=True, mutable=False)


class ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListRequest()``.

    Contains a list of available Mobile Subscriber Directory Numbers not yet assigned to
    any group.
    """

    _ELEMENTS = (
        E(
            "available_mobile_subscriber_directory_number",
            "availableMobileSubscriberDirectoryNumber", str, is_array=True,
        ),
    )

    #: list(str): *Optional* availableMobileSubscriberDirectoryNumber  *Array*
    available_mobile_subscriber_directory_number = Field(
        type=list, required=False, mutable=False,
    )


class ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListRequest()``.

    The column headings are "Phone Number", "Group Id" and "Mobile Network".
    """

    _ELEMENTS = (
        E(
            "mobile_subscriber_directory_numbers_summary_table",
            "mobileSubscriberDirectoryNumbersSummaryTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* mobileSubscriberDirectoryNumbersSummaryTable  *Tabular*
    mobile_subscriber_directory_numbers_summary_table = Field(
        type=list, required=True, mutable=False,
    )


class ServiceProviderCallProcessingGetPolicyResponse14(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest14()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)


class ServiceProviderCallProcessingGetPolicyResponse14sp1(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest14sp1()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )


class ServiceProviderCallProcessingGetPolicyResponse14sp4(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest14sp4()``.

    Replaced By : ``ServiceProviderCallProcessingGetPolicyResponse15()``
    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_external_calls_via_private_dialing_plan",
            "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan", bool,
            is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
    override_clid_restriction_for_external_calls_via_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )


class ServiceProviderCallProcessingGetPolicyResponse14sp7(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest14sp7()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_external_calls_via_private_dialing_plan",
            "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan", bool,
            is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
    override_clid_restriction_for_external_calls_via_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )


class ServiceProviderCallProcessingGetPolicyResponse15(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest15()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )


class ServiceProviderCallProcessingGetPolicyResponse15sp2(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest15sp2()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )


class ServiceProviderCallProcessingGetPolicyResponse16(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest16()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )


class ServiceProviderCallProcessingGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest16sp2()``.

    """

    _ELEMENTS = (
        E(
            "use_service_provider_dclid_setting", "useServiceProviderDCLIDSetting", bool,
            is_required=True,
        ),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useServiceProviderDCLIDSetting
    use_service_provider_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class ServiceProviderCallProcessingGetPolicyResponse17(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest17()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)


class ServiceProviderCallProcessingGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest17sp3()``.

    The following elements are only used in AS data mode: useServiceProviderDCLIDSetting
    enableDialableCallerID
    """

    _ELEMENTS = (
        E(
            "use_service_provider_dclid_setting", "useServiceProviderDCLIDSetting", bool,
            is_required=True,
        ),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useServiceProviderDCLIDSetting
    use_service_provider_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class ServiceProviderCallProcessingGetPolicyResponse17sp4(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest17sp4()``.

    The following elements are only used in AS data mode: useServiceProviderDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    """

    _ELEMENTS = (
        E(
            "use_service_provider_dclid_setting", "useServiceProviderDCLIDSetting", bool,
            is_required=True,
        ),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
    )

    #: bool: *Required* useServiceProviderDCLIDSetting
    use_service_provider_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )


class ServiceProviderCallProcessingGetPolicyResponse18sp1(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest18sp1()``.

    The following elements are only used in AS data mode: useServiceProviderDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    enterpriseCallsCLIDPolicy groupCallsCLIDPolicy Replaced by:
    ``ServiceProviderCallProcessingGetPolicyResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "use_service_provider_dclid_setting", "useServiceProviderDCLIDSetting", bool,
            is_required=True,
        ),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E("group_calls_clid_policy", "groupCallsCLIDPolicy", str, is_required=True),
    )

    #: bool: *Required* useServiceProviderDCLIDSetting
    use_service_provider_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupCallsCLIDPolicy
    group_calls_clid_policy = Field(type=str, required=True, mutable=False)


class ServiceProviderCallProcessingGetPolicyResponse19sp1(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest19sp1()``.

    The following elements are only used in AS data mode: useServiceProviderDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    enterpriseCallsCLIDPolicy groupCallsCLIDPolicy
    """

    _ELEMENTS = (
        E(
            "use_service_provider_dclid_setting", "useServiceProviderDCLIDSetting", bool,
            is_required=True,
        ),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("conference_uri", "conferenceURI", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E("group_calls_clid_policy", "groupCallsCLIDPolicy", str, is_required=True),
    )

    #: bool: *Required* useServiceProviderDCLIDSetting
    use_service_provider_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupCallsCLIDPolicy
    group_calls_clid_policy = Field(type=str, required=True, mutable=False)


class ServiceProviderCommunicationBarringCriteriaGetAssignedListResponse(OCIResponse):
    """
    Response to ``ServiceProviderCommunicationBarringCriteriaGetAssignedListRequest()``.

    Contains a table of all Communication Barring Criteria assigned to the service
    provider.  The column headings are: "Name" and "Description".
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class ServiceProviderCommunicationBarringDigitPatternCriteriaGetListResponse(OCIResponse):
    """
    Response to the
    ``ServiceProviderCommunicationBarringDigitPatternCriteriaGetListRequest()``.

    The response contains a table of all Digit Pattern Criteria defined for the service
    provider.  The column headings are "Name" and "Description"
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class ServiceProviderCommunicationBarringDigitPatternCriteriaGetPatternListResponse(OCIResponse):
    """
    Response to the
    ``ServiceProviderCommunicationBarringDigitPatternCriteriaGetPatternListRequest()``.

    The response contains the Digit Pattern Criteria information.
    """

    _ELEMENTS = (
        E("match_digit_pattern", "matchDigitPattern", str, is_array=True),
    )

    #: list(str): *Optional* matchDigitPattern  *Array*
    match_digit_pattern = Field(type=list, required=False, mutable=False)


class ServiceProviderCommunicationBarringDigitPatternCriteriaGetResponse(OCIResponse):
    """
    Response to the
    ``ServiceProviderCommunicationBarringDigitPatternCriteriaGetRequest()``.

    The response contains the Digit Pattern Criteria information.
    """

    _ELEMENTS = (
        E("description", "description", str),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class ServiceProviderCommunicationBarringIncomingCriteriaGetAssignedListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderCommunicationBarringIncomingCriteriaGetAssignedListRequest()``.

    Contains a table of all Communication Barring Incoming Criteria assigned to the
    service provider.  The column headings are: "Name" and "Description".
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class ServiceProviderCommunicationBarringProfileGetAssignedGroupListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderCommunicationBarringProfileGetAssignedGroupListRequest()``.

    Contains a table of groups that have the Communication Barring Profile assigned.  The
    column headings are: "Group Id" and "Group Name".
    """

    _ELEMENTS = (
        E(
            "group_table", "groupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* groupTable  *Tabular*
    group_table = Field(type=list, required=True, mutable=False)


class ServiceProviderCommunicationBarringProfileGetCriteriaUsageListResponse(OCIResponse):
    """
    Response to ServiceProviderCommunicationBarring
    ``ProfileGetCriteriaUsageListRequest()``.

    Contains a table of profiles that have the Communication Barring Criteria assigned.
    The column headings are: "Name" and "Description".
    """

    _ELEMENTS = (
        E(
            "profile_table", "profileTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* profileTable  *Tabular*
    profile_table = Field(type=list, required=True, mutable=False)


class ServiceProviderCommunicationBarringProfileGetDigitPatternCriteriaUsageListResponse(OCIResponse):
    """
    Response to the
    ``ServiceProviderCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest()``.

    The response contains a table of all Profiles that use the specific Digit Pattern
    Criteria.  The column headings are "Name" and "Description"
    """

    _ELEMENTS = (
        E(
            "profile_table", "profileTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* profileTable  *Tabular*
    profile_table = Field(type=list, required=True, mutable=False)


class ServiceProviderCommunicationBarringProfileGetIncomingCriteriaUsageListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderCommunicationBarringProfileGetIncomingCriteriaUsageListRequest()``.

    Contains a table of profiles that have the Communication Barring Incoming Criteria
    assigned.  The column headings are: "Name" and "Description".
    """

    _ELEMENTS = (
        E(
            "profile_table", "profileTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* profileTable  *Tabular*
    profile_table = Field(type=list, required=True, mutable=False)


class ServiceProviderCommunicationBarringProfileGetListResponse(OCIResponse):
    """
    Response to the ``ServiceProviderCommunicationBarringProfileGetListRequest()``.

    The response contains a table of all Communication Barring Profiles for the service
    provider.  The column headings are "Default" , "Name" and "Description"
    """

    _ELEMENTS = (
        E(
            "profile_table", "profileTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* profileTable  *Tabular*
    profile_table = Field(type=list, required=True, mutable=False)


class ServiceProviderDeviceManagementEventGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderDeviceManagementEventGetListRequest()``.

    Contains a table with column headings: "Event Id", "Status", "Action", "Level",
    "Type", "Additional Info", "Is Local", "Completion %", "Pushed/ Same Hash/ Not
    Pushed", "Login Id", "Start Time", "Process Time". "Event Id" is a unique identifer
    for the event.  "Status" can be: Pending, Queued, In Progress, Process On Other Host,
    Stale, Completed, Canceled.  "Action" can be: Delete, Download, Rebuild, Reset,
    Upload.  "Level" can be: Device, Device Type, Device Type Group, Group, User.  "Type"
    can be: Automatic, Manual.  "Additional Info" includes the affected device type,
    device or group.  It depends on the level of the event: Device Profile: "Device Name"
    "Service Provider Id" "Group Id" Device Type: "Device Type Name" Device Type Group:
    "Service Provider Id" "Group Id" "Device Type Name" Group: "Service Provider Id"
    "Group Id" User: "User Id" "Is Local" is set to "yes" if the event is processed on the
    server who received the request, "no" otherwise meaning that the event is processed on
    another server.  "Completion %" provides an estimate of the completion of the event.
    A percentage is given, the current number of completed expanded event, and the total
    number of expanded event.  "Pushed/ Same Hash/ Not Pushed" gives the total number of
    files that were pushed, not pushed because of same hash, and not pushed when
    processing the event.  "LoginId" is the user or admin id who triggered the event.
    "Start Time" is the date when the event was started.  The display shows the month,
    days, hours, and minutes (MM-dd hh:mm). "Process Time" is the time taken to process
    the event in hours, minutes, seconds, and milliseconds (hhhh:mm:ss.SSS). Each row
    represents an event sorted by priority of processing.  The first row in the table is
    an event that has an associated expanded event currently being processed or next in
    line to be processed.
    """

    _ELEMENTS = (
        E(
            "event_table", "eventTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* eventTable  *Tabular*
    event_table = Field(type=list, required=True, mutable=False)


class ServiceProviderDeviceProfileAuthenticationPasswordRulesGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderDeviceProfileAuthenticationPasswordRulesGetRequest()``.

    Contains the device profile authentication password rules for the service provider.
    """

    _ELEMENTS = (
        E(
            "use_service_provider_settings", "useServiceProviderSettings", bool,
            is_required=True,
        ),
        E(
            "disallow_authentication_name", "disallowAuthenticationName", bool,
            is_required=True,
        ),
        E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
        E(
            "disallow_reversed_old_password", "disallowReversedOldPassword", bool,
            is_required=True,
        ),
        E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
        E("min_digits", "minDigits", int, is_required=True),
        E(
            "restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool,
            is_required=True,
        ),
        E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
        E(
            "restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool,
            is_required=True,
        ),
        E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
        E(
            "restrict_min_non_alphanumeric_characters",
            "restrictMinNonAlphanumericCharacters", bool, is_required=True,
        ),
        E(
            "min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int,
            is_required=True,
        ),
        E("min_length", "minLength", int, is_required=True),
        E(
            "send_permanent_lockout_notification", "sendPermanentLockoutNotification",
            bool, is_required=True,
        ),
        E(
            "permanent_lockout_notify_email_address",
            "permanentLockoutNotifyEmailAddress", str,
        ),
        E(
            "device_profile_authentication_lockout_type",
            "deviceProfileAuthenticationLockoutType", str, is_required=True,
        ),
        E(
            "device_profile_temporary_lockout_threshold",
            "deviceProfileTemporaryLockoutThreshold", int, is_required=True,
        ),
        E(
            "device_profile_wait_algorithm", "deviceProfileWaitAlgorithm", str,
            is_required=True,
        ),
        E(
            "device_profile_lockout_fixed_minutes", "deviceProfileLockoutFixedMinutes",
            str, is_required=True,
        ),
        E(
            "device_profile_permanent_lockout_threshold",
            "deviceProfilePermanentLockoutThreshold", int, is_required=True,
        ),
    )

    #: bool: *Required* useServiceProviderSettings
    use_service_provider_settings = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowAuthenticationName
    disallow_authentication_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPassword
    disallow_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPassword
    disallow_reversed_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* restrictMinDigits
    restrict_min_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minDigits
    min_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinUpperCaseLetters
    restrict_min_upper_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minUpperCaseLetters
    min_upper_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinLowerCaseLetters
    restrict_min_lower_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minLowerCaseLetters
    min_lower_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinNonAlphanumericCharacters
    restrict_min_non_alphanumeric_characters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minNonAlphanumericCharacters
    min_non_alphanumeric_characters = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLength
    min_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendPermanentLockoutNotification
    send_permanent_lockout_notification = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* permanentLockoutNotifyEmailAddress
    permanent_lockout_notify_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* deviceProfileAuthenticationLockoutType
    device_profile_authentication_lockout_type = Field(type=str, required=True, mutable=False)
    #: int: *Required* deviceProfileTemporaryLockoutThreshold
    device_profile_temporary_lockout_threshold = Field(type=int, required=True, mutable=False)
    #: str: *Required* deviceProfileWaitAlgorithm
    device_profile_wait_algorithm = Field(type=str, required=True, mutable=False)
    #: str: *Required* deviceProfileLockoutFixedMinutes
    device_profile_lockout_fixed_minutes = Field(type=str, required=True, mutable=False)
    #: int: *Required* deviceProfilePermanentLockoutThreshold
    device_profile_permanent_lockout_threshold = Field(type=int, required=True, mutable=False)


class ServiceProviderDialPlanPolicyGetAccessCodeListResponse(OCIResponse):
    """
    Response to ``ServiceProviderDialPlanPolicyGetAccessCodeListRequest()``.

    Contains a table with column headings: "Access Code", "Enable Secondary Dial Tone",
    "Description".
    """

    _ELEMENTS = (
        E(
            "access_code_table", "accessCodeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* accessCodeTable  *Tabular*
    access_code_table = Field(type=list, required=True, mutable=False)


class ServiceProviderDialPlanPolicyGetAccessCodeResponse(OCIResponse):
    """
    Response to ``ServiceProviderDialPlanPolicyGetAccessCodeRequest()``
    """

    _ELEMENTS = (
        E(
            "include_code_for_network_translations_and_routing",
            "includeCodeForNetworkTranslationsAndRouting", bool, is_required=True,
        ),
        E(
            "include_code_for_screening_services", "includeCodeForScreeningServices",
            bool, is_required=True,
        ),
        E("enable_secondary_dial_tone", "enableSecondaryDialTone", bool, is_required=True),
        E("description", "description", str),
    )

    #: bool: *Required* includeCodeForNetworkTranslationsAndRouting
    include_code_for_network_translations_and_routing = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeCodeForScreeningServices
    include_code_for_screening_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableSecondaryDialTone
    enable_secondary_dial_tone = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class ServiceProviderDialPlanPolicyGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderDialPlanPolicyGetRequest()`` Replaced by:
    ``ServiceProviderDialPlanPolicyGetResponse17()``
    """

    _ELEMENTS = (
        E(
            "requires_access_code_for_public_calls", "requiresAccessCodeForPublicCalls",
            bool, is_required=True,
        ),
        E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
        E("public_digit_map", "publicDigitMap", str),
        E("private_digit_map", "privateDigitMap", str),
    )

    #: bool: *Required* requiresAccessCodeForPublicCalls
    requires_access_code_for_public_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowE164PublicCalls
    allow_e164_public_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* publicDigitMap
    public_digit_map = Field(type=str, required=False, mutable=False)
    #: str: *Optional* privateDigitMap
    private_digit_map = Field(type=str, required=False, mutable=False)


class ServiceProviderDialPlanPolicyGetResponse17(OCIResponse):
    """
    Response to ``ServiceProviderDialPlanPolicyGetRequest17()``
    """

    _ELEMENTS = (
        E(
            "requires_access_code_for_public_calls", "requiresAccessCodeForPublicCalls",
            bool, is_required=True,
        ),
        E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
        E(
            "prefer_e164_number_format_for_callback_services",
            "preferE164NumberFormatForCallbackServices", bool, is_required=True,
        ),
        E("public_digit_map", "publicDigitMap", str),
        E("private_digit_map", "privateDigitMap", str),
    )

    #: bool: *Required* requiresAccessCodeForPublicCalls
    requires_access_code_for_public_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowE164PublicCalls
    allow_e164_public_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* preferE164NumberFormatForCallbackServices
    prefer_e164_number_format_for_callback_services = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Optional* publicDigitMap
    public_digit_map = Field(type=str, required=False, mutable=False)
    #: str: *Optional* privateDigitMap
    private_digit_map = Field(type=str, required=False, mutable=False)


class ServiceProviderDialableCallerIDCriteriaGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderDialableCallerIDCriteriaGetRequest()``.

    The response contains the Dialable Caller ID Criteria information.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("prefix_digits", "prefixDigits", str),
        E("match_call_type", "matchCallType", str, is_array=True),
        E(
            "match_alternate_call_indicator", "matchAlternateCallIndicator", str,
            is_array=True,
        ),
        E("match_local_category", "matchLocalCategory", bool, is_required=True),
        E("match_national_category", "matchNationalCategory", bool, is_required=True),
        E("match_interlata_category", "matchInterlataCategory", bool, is_required=True),
        E("match_intralata_category", "matchIntralataCategory", bool, is_required=True),
        E(
            "match_international_category", "matchInternationalCategory", bool,
            is_required=True,
        ),
        E("match_private_category", "matchPrivateCategory", bool, is_required=True),
        E("match_emergency_category", "matchEmergencyCategory", bool, is_required=True),
        E("match_other_category", "matchOtherCategory", bool, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* prefixDigits
    prefix_digits = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* matchCallType  *Array*
    match_call_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* matchAlternateCallIndicator  *Array*
    match_alternate_call_indicator = Field(type=list, required=False, mutable=False)
    #: bool: *Required* matchLocalCategory
    match_local_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNationalCategory
    match_national_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterlataCategory
    match_interlata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchIntralataCategory
    match_intralata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInternationalCategory
    match_international_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchPrivateCategory
    match_private_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEmergencyCategory
    match_emergency_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchOtherCategory
    match_other_category = Field(type=bool, required=True, mutable=False)


class ServiceProviderDialableCallerIDGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderDialableCallerIDGetRequest()``.

    The criteria table?s column headings are ?Active?, "Name", "Description", ?Prefix
    Digits?, and ?Priority?.
    """

    _ELEMENTS = (
        E(
            "use_service_provider_criteria", "useServiceProviderCriteria", bool,
            is_required=True,
        ),
        E("ns_screening_failure_policy", "nsScreeningFailurePolicy", str, is_required=True),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* useServiceProviderCriteria
    use_service_provider_criteria = Field(type=bool, required=True, mutable=False)
    #: str: *Required* nsScreeningFailurePolicy
    ns_screening_failure_policy = Field(type=str, required=True, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class ServiceProviderDigitCollectionGetResponse13mp4(OCIResponse):
    """
    Response to ``ServiceProviderDigitCollectionGetRequest13mp4()``.

    """

    _ELEMENTS = (
        E("access_code", "accessCode", str),
        E("public_digit_map", "publicDigitMap", str),
        E("private_digit_map", "privateDigitMap", str),
    )

    #: str: *Optional* accessCode
    access_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* publicDigitMap
    public_digit_map = Field(type=str, required=False, mutable=False)
    #: str: *Optional* privateDigitMap
    private_digit_map = Field(type=str, required=False, mutable=False)


class ServiceProviderDnGetAvailableListResponse(OCIResponse):
    """
    Response to ``ServiceProviderDnGetAvailableListRequest()``.

    Contains a list of available DNs not yet assigned to any group.
    """

    _ELEMENTS = (
        E("available_dn", "availableDn", str, is_array=True),
    )

    #: list(str): *Optional* availableDn  *Array*
    available_dn = Field(type=list, required=False, mutable=False)


class ServiceProviderDnGetSummaryListResponse(OCIResponse):
    """
    Response to ``ServiceProviderDnGetSummaryListRequest()``.

    The column headings are "Phone Numbers, "Group Id" and "Can Delete"
    """

    _ELEMENTS = (
        E(
            "dn_summary_table", "dnSummaryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* dnSummaryTable  *Tabular*
    dn_summary_table = Field(type=list, required=True, mutable=False)


class ServiceProviderDomainGetAssignedGroupListResponse(OCIResponse):
    """
    Response to ``ServiceProviderDomainGetAssignedGroupListRequest()``.

    Contains a table with column headings: "Group Id", "Group Name" and a row for each
    group.
    """

    _ELEMENTS = (
        E(
            "group_table", "groupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* groupTable  *Tabular*
    group_table = Field(type=list, required=True, mutable=False)


class ServiceProviderDomainGetAssignedListResponse(OCIResponse):
    """
    Contains a simple list of all service provider domain names.

    """

    _ELEMENTS = (
        E(
            "service_provider_default_domain", "serviceProviderDefaultDomain", str,
            is_required=True,
        ),
        E("domain", "domain", str, is_array=True),
    )

    #: str: *Required* serviceProviderDefaultDomain
    service_provider_default_domain = Field(type=str, required=True, mutable=False)
    #: list(str): *Optional* domain  *Array*
    domain = Field(type=list, required=False, mutable=False)


class ServiceProviderEndpointGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderEndpointGetListRequest()``.

    The column headings for the endpointTable are: "Group Id", "Line/Port", "Last Name",
    "First Name", "User Id", "User Type", "Phone Number", "Extension", "Device Type",
    "Device Name", "Net Address", "MAC Address", "Department", "Email Address". Possible
    values for User Type are "User", "CCBasic", "CCStandard", "CCPremium", "RP", "MOH",
    "MOHVideo".
    """

    _ELEMENTS = (
        E(
            "endpoint_table", "endpointTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* endpointTable  *Tabular*
    endpoint_table = Field(type=list, required=True, mutable=False)


class ServiceProviderEnhancedCallLogsGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderEnhancedCallLogsGetRequest()``.

    """

    _ELEMENTS = (
        E("max_logged_calls", "maxLoggedCalls", int, is_required=True),
        E("call_expiration_days", "callExpirationDays", int, is_required=True),
    )

    #: int: *Required* maxLoggedCalls
    max_logged_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* callExpirationDays
    call_expiration_days = Field(type=int, required=True, mutable=False)


class ServiceProviderEnhancedCallLogsGetResponse17sp4(OCIResponse):
    """
    Response to ``ServiceProviderEnhancedCallLogsGetRequest17sp4()``.

    """

    _ELEMENTS = (
        E("max_logged_calls", "maxLoggedCalls", int, is_required=True),
        E("call_expiration_days", "callExpirationDays", int, is_required=True),
    )

    #: int: *Required* maxLoggedCalls
    max_logged_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* callExpirationDays
    call_expiration_days = Field(type=int, required=True, mutable=False)


class ServiceProviderExternalCustomRingbackGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderExternalCustomRingbackGetRequest()``.

    """

    _ELEMENTS = (
        E("prefix_digits", "prefixDigits", str),
        E("server_net_address", "serverNetAddress", str),
        E("server_port", "serverPort", int),
        E("timeout_seconds", "timeoutSeconds", int, is_required=True),
    )

    #: str: *Optional* prefixDigits
    prefix_digits = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serverNetAddress
    server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* serverPort
    server_port = Field(type=int, required=False, mutable=False)
    #: int: *Required* timeoutSeconds
    timeout_seconds = Field(type=int, required=True, mutable=False)


class ServiceProviderFileRepositoryDeviceUserGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderFileRepositoryDeviceUserGetListRequest()``.

    Contains a table with column headings : "User Name","Allow Delete","Allow Get","Allow
    Put" in a row for each file repository service provider user.
    """

    _ELEMENTS = (
        E(
            "file_repository_user_table", "fileRepositoryUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* fileRepositoryUserTable  *Tabular*
    file_repository_user_table = Field(type=list, required=True, mutable=False)


class ServiceProviderGetDefaultResponse(OCIResponse):
    """
    Response to the ``ServiceProviderGetDefaultRequest()``.

    All values are default values for a service provider or enterprise's profile.
    """

    _ELEMENTS = (
        E("is_enterprise", "isEnterprise", bool, is_required=True),
        E("default_domain", "defaultDomain", str, is_required=True),
    )

    #: bool: *Required* isEnterprise
    is_enterprise = Field(type=bool, required=True, mutable=False)
    #: str: *Required* defaultDomain
    default_domain = Field(type=str, required=True, mutable=False)


class ServiceProviderGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderGetListRequest()``.

    Contains a 3 column table with column headings 'Service Provider Id', 'Service
    Provider Name' and 'Is Enterprise' and a row for each service provider or enterprise.
    """

    _ELEMENTS = (
        E(
            "service_provider_table", "serviceProviderTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceProviderTable  *Tabular*
    service_provider_table = Field(type=list, required=True, mutable=False)


class ServiceProviderGroupPagingTargetsCapacityGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderGroupPagingTargetsCapacityGetRequest()``.

    """

    _ELEMENTS = (
        E("maximum_target_users", "maximumTargetUsers", int, is_required=True),
    )

    #: int: *Required* maximumTargetUsers
    maximum_target_users = Field(type=int, required=True, mutable=False)


class ServiceProviderIMRNGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderIMRNGetListRequest()``.

    """

    _ELEMENTS = (
        E("imrn", "imrn", str, is_array=True),
    )

    #: list(str): *Optional* imrn  *Array*
    imrn = Field(type=list, required=False, mutable=False)


class ServiceProviderInCallServiceActivationGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderInCallServiceActivationGetRequest()``.

    Replaced by: ``ServiceProviderInCallServiceActivationGetResponse17()``
    """

    _ELEMENTS = (
        E("activation_digits", "activationDigits", str, is_required=True),
    )

    #: str: *Required* activationDigits
    activation_digits = Field(type=str, required=True, mutable=False)


class ServiceProviderInCallServiceActivationGetResponse17(OCIResponse):
    """
    Response to ``ServiceProviderInCallServiceActivationGetRequest17()``.

    """

    _ELEMENTS = (
        E("flash_activation_digits", "flashActivationDigits", str, is_required=True),
        E(
            "call_transfer_activation_digits", "callTransferActivationDigits", str,
            is_required=True,
        ),
    )

    #: str: *Required* flashActivationDigits
    flash_activation_digits = Field(type=str, required=True, mutable=False)
    #: str: *Required* callTransferActivationDigits
    call_transfer_activation_digits = Field(type=str, required=True, mutable=False)


class ServiceProviderIntegratedIMPGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderIntegratedIMPGetRequest()``.

    The response contains the service provider Integrated IMP service attributes.
    Replaced by: ``ServiceProviderIntegratedIMPGetResponse21()``
    """

    _ELEMENTS = (
        E("use_system_service_domain", "useSystemServiceDomain", bool, is_required=True),
        E("service_domain", "serviceDomain", str),
    )

    #: bool: *Required* useSystemServiceDomain
    use_system_service_domain = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* serviceDomain
    service_domain = Field(type=str, required=False, mutable=False)


class ServiceProviderIntegratedIMPGetResponse21(OCIResponse):
    """
    Response to the ``ServiceProviderIntegratedIMPGetRequest21()``.

    The response contains the service provider Integrated IMP service attributes.
    """

    _ELEMENTS = (
        E("use_system_service_domain", "useSystemServiceDomain", bool, is_required=True),
        E("service_domain", "serviceDomain", str),
        E("service_port", "servicePort", int),
        E("use_system_messaging_server", "useSystemMessagingServer", bool, is_required=True),
        E("provisioning_url", "provisioningUrl", str),
        E("provisioning_user_id", "provisioningUserId", str),
        E("bosh_url", "boshURL", str),
    )

    #: bool: *Required* useSystemServiceDomain
    use_system_service_domain = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* serviceDomain
    service_domain = Field(type=str, required=False, mutable=False)
    #: int: *Optional* servicePort
    service_port = Field(type=int, required=False, mutable=False)
    #: bool: *Required* useSystemMessagingServer
    use_system_messaging_server = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* provisioningUrl
    provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* provisioningUserId
    provisioning_user_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* boshURL
    bosh_url = Field(type=str, required=False, mutable=False)


class ServiceProviderLDAPIntegrationGetDirectoryResponse(OCIResponse):
    """
    Response to ``ServiceProviderLDAPIntegrationGetDirectoryRequest()``.

    """

    _ELEMENTS = (
        E("server_net_address", "serverNetAddress", str),
        E("server_port", "serverPort", int, is_required=True),
        E("search_base", "searchBase", str),
        E("use_ssl", "useSSL", bool, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("authenticated_dn", "authenticatedDN", str),
        E("authenticated_password", "authenticatedPassword", str),
        E("is_sort_enabled", "isSortEnabled", bool, is_required=True),
        E("is_paged_result_enabled", "isPagedResultEnabled", bool, is_required=True),
        E("search_filter", "searchFilter", str),
        E(
            "include_search_attribute_in_search_filter",
            "includeSearchAttributeInSearchFilter", bool, is_required=True,
        ),
        E("column1_attribute_name", "column1AttributeName", str, is_required=True),
        E("column2_attribute_name", "column2AttributeName", str),
        E("column3_attribute_name", "column3AttributeName", str),
        E("column4_attribute_name", "column4AttributeName", str),
        E("column1_label", "column1Label", str),
        E("column2_label", "column2Label", str),
        E("column3_label", "column3Label", str),
        E("column4_label", "column4Label", str),
        E("search_column", "searchColumn", int, is_required=True),
    )

    #: str: *Optional* serverNetAddress
    server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* serverPort
    server_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* searchBase
    search_base = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useSSL
    use_ssl = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* authenticatedDN
    authenticated_dn = Field(type=str, required=False, mutable=False)
    #: str: *Optional* authenticatedPassword
    authenticated_password = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isSortEnabled
    is_sort_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isPagedResultEnabled
    is_paged_result_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* searchFilter
    search_filter = Field(type=str, required=False, mutable=False)
    #: bool: *Required* includeSearchAttributeInSearchFilter
    include_search_attribute_in_search_filter = Field(type=bool, required=True, mutable=False)
    #: str: *Required* column1AttributeName
    column1_attribute_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* column2AttributeName
    column2_attribute_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column3AttributeName
    column3_attribute_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column4AttributeName
    column4_attribute_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column1Label
    column1_label = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column2Label
    column2_label = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column3Label
    column3_label = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column4Label
    column4_label = Field(type=str, required=False, mutable=False)
    #: int: *Required* searchColumn
    search_column = Field(type=int, required=True, mutable=False)


class ServiceProviderLanguageGetAvailableListResponse(OCIResponse):
    """
    Response to ``ServiceProviderLanguageGetAvailableListRequest()``.

    The language table column headings are: "Language", "Locale" and "Encoding".
    """

    _ELEMENTS = (
        E("default_language", "defaultLanguage", str, is_required=True),
        E(
            "language_table", "languageTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Required* defaultLanguage
    default_language = Field(type=str, required=True, mutable=False)
    #: list: *Required* languageTable  *Tabular*
    language_table = Field(type=list, required=True, mutable=False)


class ServiceProviderLanguageGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderLanguageGetListRequest()``.

    """

    _ELEMENTS = (
        E("language", "language", str, is_array=True),
        E("default_language", "defaultLanguage", str),
    )

    #: list(str): *Optional* language  *Array*
    language = Field(type=list, required=False, mutable=False)
    #: str: *Optional* defaultLanguage
    default_language = Field(type=str, required=False, mutable=False)


class ServiceProviderMWIDeliveryToMobileEndpointGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderMWIDeliveryToMobileEndpointGetRequest()``.

    The templateActivationTable contains the list of templates defined for the service
    provider.  The column headings are "Enable", "Language", "Type".
    """

    _ELEMENTS = (
        E(
            "template_activation_table", "templateActivationTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* templateActivationTable  *Tabular*
    template_activation_table = Field(type=list, required=True, mutable=False)


class ServiceProviderMaliciousCallTraceGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderMaliciousCallTraceGetRequest()``.

    The response contains the service provider Malicious Call Trace settings.
    """

    _ELEMENTS = (
        E(
            "use_system_play_mct_warning_announcement",
            "useSystemPlayMCTWarningAnnouncement", bool, is_required=True,
        ),
        E(
            "play_mct_warning_announcement", "playMCTWarningAnnouncement", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* useSystemPlayMCTWarningAnnouncement
    use_system_play_mct_warning_announcement = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playMCTWarningAnnouncement
    play_mct_warning_announcement = Field(type=bool, required=True, mutable=False)


class ServiceProviderNetworkClassOfServiceGetAssignedGroupListResponse(OCIResponse):
    """
    Response to ``ServiceProviderNetworkClassOfServiceGetAssignedGroupListRequest()``.

    Contains a table of groups that have the Network Class of Service assigned.  The
    column headings are: "Group Id" and "Group Name".
    """

    _ELEMENTS = (
        E(
            "group_table", "groupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* groupTable  *Tabular*
    group_table = Field(type=list, required=True, mutable=False)


class ServiceProviderNetworkClassOfServiceGetAssignedListResponse(OCIResponse):
    """
    Response to ``ServiceProviderNetworkClassOfServiceGetAssignedListRequest()``.

    Contains a table of all Network Classes of Service assigned to the service provider.
    The column headings are: "Name", "Description" and "Default".
    """

    _ELEMENTS = (
        E(
            "network_class_of_service_table", "networkClassOfServiceTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* networkClassOfServiceTable  *Tabular*
    network_class_of_service_table = Field(type=list, required=True, mutable=False)


class ServiceProviderNumberPortabilityQueryGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderNumberPortabilityQueryGetRequest()``.

    The response contains the service provider number portability query information.
    """

    _ELEMENTS = (
        E(
            "enable_number_portability_query_for_outgoing_calls",
            "enableNumberPortabilityQueryForOutgoingCalls", bool, is_required=True,
        ),
        E(
            "enable_number_portability_query_for_incoming_calls",
            "enableNumberPortabilityQueryForIncomingCalls", bool, is_required=True,
        ),
        E(
            "enable_number_portability_query_for_network_calls_only",
            "enableNumberPortabilityQueryForNetworkCallsOnly", bool, is_required=True,
        ),
        E("digit_pattern", "digitPattern", str, is_array=True),
    )

    #: bool: *Required* enableNumberPortabilityQueryForOutgoingCalls
    enable_number_portability_query_for_outgoing_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableNumberPortabilityQueryForIncomingCalls
    enable_number_portability_query_for_incoming_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableNumberPortabilityQueryForNetworkCallsOnly
    enable_number_portability_query_for_network_calls_only = Field(
        type=bool, required=True, mutable=False,
    )
    #: list(str): *Optional* digitPattern  *Array*
    digit_pattern = Field(type=list, required=False, mutable=False)


class ServiceProviderOfficeZoneGetAssignedGroupListResponse(OCIResponse):
    """
    Response to ``ServiceProviderOfficeZoneGetAssignedGroupListRequest()``.

    Contains a table of groups that have the Office Zone assigned.  The column headings
    are: "Group Id" and "Group Name".
    """

    _ELEMENTS = (
        E(
            "group_table", "groupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* groupTable  *Tabular*
    group_table = Field(type=list, required=True, mutable=False)


class ServiceProviderOfficeZoneGetAssignedListResponse(OCIResponse):
    """
    Response to ``ServiceProviderOfficeZoneGetAssignedListRequest()``.

    Contains a table of all Office Zones assigned to the service provider.  The column
    headings are: "Name", "Description" and "Default".
    """

    _ELEMENTS = (
        E(
            "office_zone_table", "officeZoneTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* officeZoneTable  *Tabular*
    office_zone_table = Field(type=list, required=True, mutable=False)


class ServiceProviderPasswordRulesGetResponse13mp2(OCIResponse):
    """
    Response to ``ServiceProviderPasswordRulesGetRequest13mp2()``.

    Contains the group, department administrator and/or user password rules setting.

    Replaced By: ``ServiceProviderPasswordRulesGetResponse16()``
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("rules_apply_to", "rulesApplyTo", str, is_required=True),
        E(
            "allow_web_add_external_authentication_users",
            "allowWebAddExternalAuthenticationUsers", bool, is_required=True,
        ),
        E("disallow_user_id", "disallowUserId", bool, is_required=True),
        E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
        E(
            "disallow_reversed_old_password", "disallowReversedOldPassword", bool,
            is_required=True,
        ),
        E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
        E("min_digits", "minDigits", int, is_required=True),
        E(
            "restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool,
            is_required=True,
        ),
        E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
        E(
            "restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool,
            is_required=True,
        ),
        E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
        E(
            "restrict_min_non_alphanumeric_characters",
            "restrictMinNonAlphanumericCharacters", bool, is_required=True,
        ),
        E(
            "min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int,
            is_required=True,
        ),
        E("min_length", "minLength", int, is_required=True),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int, is_required=True),
        E("password_expires_days", "passwordExpiresDays", int, is_required=True),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
        E("disallow_rules_modification", "disallowRulesModification", bool, is_required=True),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* rulesApplyTo
    rules_apply_to = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowWebAddExternalAuthenticationUsers
    allow_web_add_external_authentication_users = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* disallowUserId
    disallow_user_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPassword
    disallow_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPassword
    disallow_reversed_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* restrictMinDigits
    restrict_min_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minDigits
    min_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinUpperCaseLetters
    restrict_min_upper_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minUpperCaseLetters
    min_upper_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinLowerCaseLetters
    restrict_min_lower_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minLowerCaseLetters
    min_lower_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinNonAlphanumericCharacters
    restrict_min_non_alphanumeric_characters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minNonAlphanumericCharacters
    min_non_alphanumeric_characters = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLength
    min_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=True, mutable=False)
    #: int: *Required* passwordExpiresDays
    password_expires_days = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* disallowRulesModification
    disallow_rules_modification = Field(type=bool, required=True, mutable=False)


class ServiceProviderPasswordRulesGetResponse16(OCIResponse):
    """
    Response to ``ServiceProviderPasswordRulesGetRequest16()``.

    Contains the group, department administrator and/or user password rules setting.
    """

    _ELEMENTS = (
        E("rules_apply_to", "rulesApplyTo", str, is_required=True),
        E(
            "allow_web_add_external_authentication_users",
            "allowWebAddExternalAuthenticationUsers", bool, is_required=True,
        ),
        E("disallow_user_id", "disallowUserId", bool, is_required=True),
        E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
        E(
            "disallow_reversed_old_password", "disallowReversedOldPassword", bool,
            is_required=True,
        ),
        E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
        E("min_digits", "minDigits", int, is_required=True),
        E(
            "restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool,
            is_required=True,
        ),
        E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
        E(
            "restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool,
            is_required=True,
        ),
        E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
        E(
            "restrict_min_non_alphanumeric_characters",
            "restrictMinNonAlphanumericCharacters", bool, is_required=True,
        ),
        E(
            "min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int,
            is_required=True,
        ),
        E("min_length", "minLength", int, is_required=True),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int, is_required=True),
        E("password_expires_days", "passwordExpiresDays", int, is_required=True),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
        E("disallow_rules_modification", "disallowRulesModification", bool, is_required=True),
        E("disallow_previous_passwords", "disallowPreviousPasswords", bool, is_required=True),
        E("number_of_previous_passwords", "numberOfPreviousPasswords", int, is_required=True),
    )

    #: str: *Required* rulesApplyTo
    rules_apply_to = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowWebAddExternalAuthenticationUsers
    allow_web_add_external_authentication_users = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* disallowUserId
    disallow_user_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPassword
    disallow_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPassword
    disallow_reversed_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* restrictMinDigits
    restrict_min_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minDigits
    min_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinUpperCaseLetters
    restrict_min_upper_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minUpperCaseLetters
    min_upper_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinLowerCaseLetters
    restrict_min_lower_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minLowerCaseLetters
    min_lower_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinNonAlphanumericCharacters
    restrict_min_non_alphanumeric_characters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minNonAlphanumericCharacters
    min_non_alphanumeric_characters = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLength
    min_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=True, mutable=False)
    #: int: *Required* passwordExpiresDays
    password_expires_days = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* disallowRulesModification
    disallow_rules_modification = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowPreviousPasswords
    disallow_previous_passwords = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfPreviousPasswords
    number_of_previous_passwords = Field(type=int, required=True, mutable=False)


class ServiceProviderPortalPasscodeRulesGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderPortalPasscodeRulesGetRequest()``.

    Contains the service provider's passcode rules setting.
    """

    _ELEMENTS = (
        E("disallow_repeated_digits", "disallowRepeatedDigits", bool, is_required=True),
        E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
        E(
            "disallow_reversed_user_number", "disallowReversedUserNumber", bool,
            is_required=True,
        ),
        E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
        E(
            "disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool,
            is_required=True,
        ),
        E("min_code_length", "minCodeLength", int, is_required=True),
        E("max_code_length", "maxCodeLength", int, is_required=True),
        E(
            "disable_login_after_max_failed_login_attempts",
            "disableLoginAfterMaxFailedLoginAttempts", bool, is_required=True,
        ),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
        E("expire_password", "expirePassword", bool, is_required=True),
        E("passcode_expires_days", "passcodeExpiresDays", int),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
    )

    #: bool: *Required* disallowRepeatedDigits
    disallow_repeated_digits = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowUserNumber
    disallow_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedUserNumber
    disallow_reversed_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPasscode
    disallow_old_passcode = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPasscode
    disallow_reversed_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minCodeLength
    min_code_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCodeLength
    max_code_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableLoginAfterMaxFailedLoginAttempts
    disable_login_after_max_failed_login_attempts = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=False, mutable=False)
    #: bool: *Required* expirePassword
    expire_password = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passcodeExpiresDays
    passcode_expires_days = Field(type=int, required=False, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)


class ServiceProviderPortalPasscodeRulesGetResponse19(OCIResponse):
    """
    Response to ``ServiceProviderPortalPasscodeRulesGetRequest19()``.

    Contains the service provider's passcode rules setting.  The following elements are
    only used in AS data mode: numberOfRepeatedDigits disallowRepeatedPatterns
    disallowContiguousSequences numberOfAscendingDigits numberOfDescendingDigits
    numberOfPreviousPasscodes
    """

    _ELEMENTS = (
        E("disallow_repeated_digits", "disallowRepeatedDigits", bool, is_required=True),
        E("number_of_repeated_digits", "numberOfRepeatedDigits", int, is_required=True),
        E("disallow_repeated_patterns", "disallowRepeatedPatterns", bool, is_required=True),
        E(
            "disallow_contiguous_sequences", "disallowContiguousSequences", bool,
            is_required=True,
        ),
        E("number_of_ascending_digits", "numberOfAscendingDigits", int, is_required=True),
        E("number_of_descending_digits", "numberOfDescendingDigits", int, is_required=True),
        E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
        E(
            "disallow_reversed_user_number", "disallowReversedUserNumber", bool,
            is_required=True,
        ),
        E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
        E("number_of_previous_passcodes", "numberOfPreviousPasscodes", int, is_required=True),
        E(
            "disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool,
            is_required=True,
        ),
        E("min_code_length", "minCodeLength", int, is_required=True),
        E("max_code_length", "maxCodeLength", int, is_required=True),
        E(
            "disable_login_after_max_failed_login_attempts",
            "disableLoginAfterMaxFailedLoginAttempts", bool, is_required=True,
        ),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
        E("expire_password", "expirePassword", bool, is_required=True),
        E("passcode_expires_days", "passcodeExpiresDays", int),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
    )

    #: bool: *Required* disallowRepeatedDigits
    disallow_repeated_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfRepeatedDigits
    number_of_repeated_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disallowRepeatedPatterns
    disallow_repeated_patterns = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowContiguousSequences
    disallow_contiguous_sequences = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfAscendingDigits
    number_of_ascending_digits = Field(type=int, required=True, mutable=False)
    #: int: *Required* numberOfDescendingDigits
    number_of_descending_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disallowUserNumber
    disallow_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedUserNumber
    disallow_reversed_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPasscode
    disallow_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfPreviousPasscodes
    number_of_previous_passcodes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPasscode
    disallow_reversed_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minCodeLength
    min_code_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCodeLength
    max_code_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableLoginAfterMaxFailedLoginAttempts
    disable_login_after_max_failed_login_attempts = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=False, mutable=False)
    #: bool: *Required* expirePassword
    expire_password = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passcodeExpiresDays
    passcode_expires_days = Field(type=int, required=False, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)


class ServiceProviderPreferredCarrierGetAvailableCountryCodeListResponse(OCIResponse):
    """
    Response to a ``ServiceProviderPreferredCarrierGetAvailableCountryCodeListRequest()``.

    Contains the default country code and the list of unused country codes for a service
    provider / enterprise.
    """

    _ELEMENTS = (
        E("default_country_code", "defaultCountryCode", str),
        E("country_code", "countryCode", str, is_array=True),
    )

    #: str: *Optional* defaultCountryCode
    default_country_code = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* countryCode  *Array*
    country_code = Field(type=list, required=False, mutable=False)


class ServiceProviderPreferredCarrierGetCarrierListResponse(OCIResponse):
    """
    Response to a ``ServiceProviderPreferredCarrierGetCarrierListRequest()``.

    Contains the lists of carriers for a specified country code for a service provider /
    enterprise.
    """

    _ELEMENTS = (
        E("intra_lata_carrier", "intraLataCarrier", str, is_array=True),
        E("inter_lata_carrier", "interLataCarrier", str, is_array=True),
        E("international_carrier", "internationalCarrier", str, is_array=True),
    )

    #: list(str): *Optional* intraLataCarrier  *Array*
    intra_lata_carrier = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* interLataCarrier  *Array*
    inter_lata_carrier = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* internationalCarrier  *Array*
    international_carrier = Field(type=list, required=False, mutable=False)


class ServiceProviderPreferredCarrierGetListResponse(OCIResponse):
    """
    Response to a ``ServiceProviderPreferredCarrierGetListRequest()``.

    Contains a table with one row per carrier.  The table columns are: "Country Code",
    "Intra-Lata PIC", "Inter-Lata PIC", "International PIC".
    """

    _ELEMENTS = (
        E(
            "service_provider_carrier_table", "serviceProviderCarrierTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceProviderCarrierTable  *Tabular*
    service_provider_carrier_table = Field(type=list, required=True, mutable=False)


class ServiceProviderPreferredCarrierGetResponse(OCIResponse):
    """
    Response to a ``ServiceProviderPreferredCarrierGetRequest()``.

    Contains the currently configured carriers for a specified country code for a service
    provider / enterprise.
    """

    _ELEMENTS = (
        E("intra_lata_carrier", "intraLataCarrier", str),
        E("inter_lata_carrier", "interLataCarrier", str),
        E("international_carrier", "internationalCarrier", str),
    )

    #: str: *Optional* intraLataCarrier
    intra_lata_carrier = Field(type=str, required=False, mutable=False)
    #: str: *Optional* interLataCarrier
    inter_lata_carrier = Field(type=str, required=False, mutable=False)
    #: str: *Optional* internationalCarrier
    international_carrier = Field(type=str, required=False, mutable=False)


class ServiceProviderRouteListEnterpriseTrunkNumberRangeGetAvailableListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderRouteListEnterpriseTrunkNumberRangeGetAvailableListRequest()``.

    Contains a list of available number ranges not yet assigned to any group.  The column
    headings are "Number Range Start", "Number Range End" and "Is Active".
    """

    _ELEMENTS = (
        E(
            "available_number_range_table", "availableNumberRangeTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* availableNumberRangeTable  *Tabular*
    available_number_range_table = Field(type=list, required=True, mutable=False)


class ServiceProviderRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest()``.

    The column headings are "Number Range Start", "Number Range End", "Group Id" and "Is
    Active".
    """

    _ELEMENTS = (
        E(
            "number_range_summary_table", "numberRangeSummaryTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* numberRangeSummaryTable  *Tabular*
    number_range_summary_table = Field(type=list, required=True, mutable=False)


class ServiceProviderRoutePointExternalSystemGetAssignedGroupListResponse(OCIResponse):
    """
    Response to ``ServiceProviderRoutePointExternalSystemGetAssignedGroupListRequest()``.

    Contains a table with column headings: "Group Id", "Group Name" and a row for each
    group.
    """

    _ELEMENTS = (
        E(
            "group_table", "groupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* groupTable  *Tabular*
    group_table = Field(type=list, required=True, mutable=False)


class ServiceProviderRoutePointExternalSystemGetAssignedListResponse(OCIResponse):
    """
    Response to the ``ServiceProviderRoutePointExternalSystemGetAssignedListRequest()``.

    Contains a table of all Route Point External Systems assigned to the service provider.
    The column headings are: "Name" and "Description".
    """

    _ELEMENTS = (
        E(
            "external_system_table", "externalSystemTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* externalSystemTable  *Tabular*
    external_system_table = Field(type=list, required=True, mutable=False)


class ServiceProviderRoutingProfileGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderRoutingProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("routing_profile", "routingProfile", str),
    )

    #: str: *Optional* routingProfile
    routing_profile = Field(type=str, required=False, mutable=False)


class ServiceProviderSIPAuthenticationPasswordRulesGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderSIPAuthenticationPasswordRulesGetRequest()``.

    Contains the SIP authentication password rules for the service provider.
    """

    _ELEMENTS = (
        E(
            "use_service_provider_settings", "useServiceProviderSettings", bool,
            is_required=True,
        ),
        E(
            "disallow_authentication_name", "disallowAuthenticationName", bool,
            is_required=True,
        ),
        E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
        E(
            "disallow_reversed_old_password", "disallowReversedOldPassword", bool,
            is_required=True,
        ),
        E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
        E("min_digits", "minDigits", int, is_required=True),
        E(
            "restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool,
            is_required=True,
        ),
        E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
        E(
            "restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool,
            is_required=True,
        ),
        E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
        E(
            "restrict_min_non_alphanumeric_characters",
            "restrictMinNonAlphanumericCharacters", bool, is_required=True,
        ),
        E(
            "min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int,
            is_required=True,
        ),
        E("min_length", "minLength", int, is_required=True),
        E(
            "send_permanent_lockout_notification", "sendPermanentLockoutNotification",
            bool, is_required=True,
        ),
        E(
            "permanent_lockout_notify_email_address",
            "permanentLockoutNotifyEmailAddress", str,
        ),
        E(
            "endpoint_authentication_lockout_type", "endpointAuthenticationLockoutType",
            str, is_required=True,
        ),
        E(
            "endpoint_temporary_lockout_threshold", "endpointTemporaryLockoutThreshold",
            int, is_required=True,
        ),
        E("endpoint_wait_algorithm", "endpointWaitAlgorithm", str, is_required=True),
        E(
            "endpoint_lockout_fixed_minutes", "endpointLockoutFixedMinutes", str,
            is_required=True,
        ),
        E(
            "endpoint_permanent_lockout_threshold", "endpointPermanentLockoutThreshold",
            int, is_required=True,
        ),
        E(
            "trunk_group_temporary_lockout_threshold",
            "trunkGroupTemporaryLockoutThreshold", int, is_required=True,
        ),
        E(
            "trunk_group_authentication_lockout_type",
            "trunkGroupAuthenticationLockoutType", str, is_required=True,
        ),
        E("trunk_group_wait_algorithm", "trunkGroupWaitAlgorithm", str, is_required=True),
        E(
            "trunk_group_lockout_fixed_minutes", "trunkGroupLockoutFixedMinutes", str,
            is_required=True,
        ),
        E(
            "trunk_group_permanent_lockout_threshold",
            "trunkGroupPermanentLockoutThreshold", int, is_required=True,
        ),
    )

    #: bool: *Required* useServiceProviderSettings
    use_service_provider_settings = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowAuthenticationName
    disallow_authentication_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPassword
    disallow_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPassword
    disallow_reversed_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* restrictMinDigits
    restrict_min_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minDigits
    min_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinUpperCaseLetters
    restrict_min_upper_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minUpperCaseLetters
    min_upper_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinLowerCaseLetters
    restrict_min_lower_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minLowerCaseLetters
    min_lower_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinNonAlphanumericCharacters
    restrict_min_non_alphanumeric_characters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minNonAlphanumericCharacters
    min_non_alphanumeric_characters = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLength
    min_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendPermanentLockoutNotification
    send_permanent_lockout_notification = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* permanentLockoutNotifyEmailAddress
    permanent_lockout_notify_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* endpointAuthenticationLockoutType
    endpoint_authentication_lockout_type = Field(type=str, required=True, mutable=False)
    #: int: *Required* endpointTemporaryLockoutThreshold
    endpoint_temporary_lockout_threshold = Field(type=int, required=True, mutable=False)
    #: str: *Required* endpointWaitAlgorithm
    endpoint_wait_algorithm = Field(type=str, required=True, mutable=False)
    #: str: *Required* endpointLockoutFixedMinutes
    endpoint_lockout_fixed_minutes = Field(type=str, required=True, mutable=False)
    #: int: *Required* endpointPermanentLockoutThreshold
    endpoint_permanent_lockout_threshold = Field(type=int, required=True, mutable=False)
    #: int: *Required* trunkGroupTemporaryLockoutThreshold
    trunk_group_temporary_lockout_threshold = Field(type=int, required=True, mutable=False)
    #: str: *Required* trunkGroupAuthenticationLockoutType
    trunk_group_authentication_lockout_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupWaitAlgorithm
    trunk_group_wait_algorithm = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupLockoutFixedMinutes
    trunk_group_lockout_fixed_minutes = Field(type=str, required=True, mutable=False)
    #: int: *Required* trunkGroupPermanentLockoutThreshold
    trunk_group_permanent_lockout_threshold = Field(type=int, required=True, mutable=False)


class ServiceProviderScheduleGetEventListResponse(OCIResponse):
    """
    Response to ``ServiceProviderScheduleGetEventListRequest()``.

    The response contains a list of events.
    """

    _ELEMENTS = (
        E("event_name", "eventName", str, is_array=True),
    )

    #: list(str): *Optional* eventName  *Array*
    event_name = Field(type=list, required=False, mutable=False)


class ServiceProviderServiceGetAuthorizationListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServiceGetAuthorizationListRequest()``.

    Contains two tables, one for the group services and one for the user services.  The
    Group Service table has column headings: "Service Name", "Authorized", "Assigned",
    "Limited", "Quantity", "Allocated", "Licensed", "Service Pack Allocation" The User
    Service table has column headings: "Service Name", "Authorized", "Assigned",
    "Limited", "Quantity", "Allocated", "Licensed", "Service Pack Allocation", "User
    Assignable", "Service Pack Assignable".
    """

    _ELEMENTS = (
        E(
            "group_services_authorization_table", "groupServicesAuthorizationTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E(
            "user_services_authorization_table", "userServicesAuthorizationTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* groupServicesAuthorizationTable  *Tabular*
    group_services_authorization_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* userServicesAuthorizationTable  *Tabular*
    user_services_authorization_table = Field(type=list, required=True, mutable=False)


class ServiceProviderServiceGetUserAssignableListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServiceGetUserAssignableListRequest()``.

    """

    _ELEMENTS = (
        E("service_name", "serviceName", str, is_array=True),
    )

    #: list(str): *Optional* serviceName  *Array*
    service_name = Field(type=list, required=False, mutable=False)


class ServiceProviderServicePackGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackGetListRequest()``.

    """

    _ELEMENTS = (
        E("service_pack_name", "servicePackName", str, is_array=True),
    )

    #: list(str): *Optional* servicePackName  *Array*
    service_pack_name = Field(type=list, required=False, mutable=False)


class ServiceProviderServicePackGetServiceUsageListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackGetServiceUsageListRequest()``.

    The column headings are "Service Pack Name", "Total Packs" and "Allocated to Groups"
    """

    _ELEMENTS = (
        E(
            "service_usage_table", "serviceUsageTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceUsageTable  *Tabular*
    service_usage_table = Field(type=list, required=True, mutable=False)


class ServiceProviderServicePackGetUtilizationListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackGetUtilizationListRequest()``.

    For each service pack, a table of groups utilizing the pack is returned.  The
    utilization table column headings are "Group", "Total Packs" and "Assigned".
    """

    _ELEMENTS = (
        E("service_pack_name", "servicePackName", str, is_array=True),
        E(
            "service_utilization_table", "serviceUtilizationTable", list, is_complex=True,
            is_array=True, is_table=True,
        ),
    )

    #: list(str): *Optional* servicePackName  *Array*
    service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(list): *Optional* serviceUtilizationTable  *Array*  *Tabular*
    service_utilization_table = Field(type=list, required=False, mutable=False)


class ServiceProviderServicePackMigrationTaskGetAvailableGroupListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetAvailableGroupListRequest()``.

    The groupTable column headings are: "Group Id", "Group Name", "User Count".
    """

    _ELEMENTS = (
        E(
            "group_table", "groupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* groupTable  *Tabular*
    group_table = Field(type=list, required=True, mutable=False)


class ServiceProviderServicePackMigrationTaskGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetListRequest()``.

    Contains a table with a row for each service pack migration task and column headings :
    "Start Timestamp Milliseconds", "Name", "Status", "Error Count", "Users Processed",
    "Users Total". The start timestamp column is the number of milliseconds since the
    standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT.
    """

    _ELEMENTS = (
        E("task_table", "taskTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* taskTable  *Tabular*
    task_table = Field(type=list, required=True, mutable=False)


class ServiceProviderServicePackMigrationTaskGetListResponse21(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetListRequest21()``.

    Contains a table with a row for each service pack migration task and column headings :
    "Start Timestamp Milliseconds", "Name", "Status", "Error Count", "Users Processed",
    "Users Total". The start timestamp column is the number of milliseconds since the
    standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT. The
    status column is the task status which can be Awaiting edit, Pending, Processing,
    Terminating, Terminated, Stopped by system, Completed, or Expired.
    """

    _ELEMENTS = (
        E("task_table", "taskTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* taskTable  *Tabular*
    task_table = Field(type=list, required=True, mutable=False)


class ServiceProviderServicePackMigrationTaskGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetRequest()``.

    The groupTable column headings are: "Migrate", "Group Id", "Group Name", "User Count".

    Replaced By: ``ServiceProviderServicePackMigrationTaskGetResponse14sp4()``
    """

    _ELEMENTS = (
        E("task_name", "taskName", str, is_required=True),
        E("start_timestamp", "startTimestamp", str),
        E("max_duration_hours", "maxDurationHours", int, is_required=True),
        E("send_report_email", "sendReportEmail", bool, is_required=True),
        E("report_delivery_email_address", "reportDeliveryEmailAddress", str),
        E("abort_on_error", "abortOnError", bool, is_required=True),
        E("abort_error_threshold", "abortErrorThreshold", int),
        E("report_all_users", "reportAllUsers", bool, is_required=True),
        E(
            "automatically_increment_service_quantity",
            "automaticallyIncrementServiceQuantity", bool, is_required=True,
        ),
        E("error_count", "errorCount", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("groups_processed", "groupsProcessed", int, is_required=True),
        E("groups_total", "groupsTotal", int, is_required=True),
        E("users_processed", "usersProcessed", int, is_required=True),
        E("users_total", "usersTotal", int, is_required=True),
        E("user_selection_type", "userSelectionType", str, is_required=True),
        E("report_file_path_name", "reportFilePathName", str, is_required=True),
        E(
            "group_table", "groupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "user_selection_service_pack_name", "userSelectionServicePackName", str,
            is_array=True,
        ),
        E("user_selection_service_name", "userSelectionServiceName", str, is_array=True),
        E("remove_service_pack_name", "removeServicePackName", str, is_array=True),
        E("remove_service_name", "removeServiceName", str, is_array=True),
        E("assign_service_pack_name", "assignServicePackName", str, is_array=True),
        E("assign_service_name", "assignServiceName", str, is_array=True),
    )

    #: str: *Required* taskName
    task_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* startTimestamp
    start_timestamp = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxDurationHours
    max_duration_hours = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendReportEmail
    send_report_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* reportDeliveryEmailAddress
    report_delivery_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* abortOnError
    abort_on_error = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* abortErrorThreshold
    abort_error_threshold = Field(type=int, required=False, mutable=False)
    #: bool: *Required* reportAllUsers
    report_all_users = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* automaticallyIncrementServiceQuantity
    automatically_increment_service_quantity = Field(type=bool, required=True, mutable=False)
    #: int: *Required* errorCount
    error_count = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: int: *Required* groupsProcessed
    groups_processed = Field(type=int, required=True, mutable=False)
    #: int: *Required* groupsTotal
    groups_total = Field(type=int, required=True, mutable=False)
    #: int: *Required* usersProcessed
    users_processed = Field(type=int, required=True, mutable=False)
    #: int: *Required* usersTotal
    users_total = Field(type=int, required=True, mutable=False)
    #: str: *Required* userSelectionType
    user_selection_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* reportFilePathName
    report_file_path_name = Field(type=str, required=True, mutable=False)
    #: list: *Required* groupTable  *Tabular*
    group_table = Field(type=list, required=True, mutable=False)
    #: list(str): *Optional* userSelectionServicePackName  *Array*
    user_selection_service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* userSelectionServiceName  *Array*
    user_selection_service_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* removeServicePackName  *Array*
    remove_service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* removeServiceName  *Array*
    remove_service_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* assignServicePackName  *Array*
    assign_service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* assignServiceName  *Array*
    assign_service_name = Field(type=list, required=False, mutable=False)


class ServiceProviderServicePackMigrationTaskGetResponse14sp4(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetRequest14sp4()``.

    The groupTable column headings are: "Group Id", "Group Name", "User Count".
    """

    _ELEMENTS = (
        E("task_name", "taskName", str, is_required=True),
        E("start_timestamp", "startTimestamp", str),
        E("max_duration_hours", "maxDurationHours", int, is_required=True),
        E("send_report_email", "sendReportEmail", bool, is_required=True),
        E("report_delivery_email_address", "reportDeliveryEmailAddress", str),
        E("abort_on_error", "abortOnError", bool, is_required=True),
        E("abort_error_threshold", "abortErrorThreshold", int),
        E("report_all_users", "reportAllUsers", bool, is_required=True),
        E(
            "automatically_increment_service_quantity",
            "automaticallyIncrementServiceQuantity", bool, is_required=True,
        ),
        E("error_count", "errorCount", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("groups_processed", "groupsProcessed", int, is_required=True),
        E("groups_total", "groupsTotal", int, is_required=True),
        E("users_processed", "usersProcessed", int, is_required=True),
        E("users_total", "usersTotal", int, is_required=True),
        E("user_selection_type", "userSelectionType", str, is_required=True),
        E("report_file_path_name", "reportFilePathName", str, is_required=True),
        E("migrate_all_groups", "migrateAllGroups", bool),
        E("group_table", "groupTable", list, is_complex=True, is_table=True),
        E(
            "user_selection_service_pack_name", "userSelectionServicePackName", str,
            is_array=True,
        ),
        E("user_selection_service_name", "userSelectionServiceName", str, is_array=True),
        E("remove_service_pack_name", "removeServicePackName", str, is_array=True),
        E("remove_service_name", "removeServiceName", str, is_array=True),
        E("assign_service_pack_name", "assignServicePackName", str, is_array=True),
        E("assign_service_name", "assignServiceName", str, is_array=True),
    )

    #: str: *Required* taskName
    task_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* startTimestamp
    start_timestamp = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxDurationHours
    max_duration_hours = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendReportEmail
    send_report_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* reportDeliveryEmailAddress
    report_delivery_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* abortOnError
    abort_on_error = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* abortErrorThreshold
    abort_error_threshold = Field(type=int, required=False, mutable=False)
    #: bool: *Required* reportAllUsers
    report_all_users = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* automaticallyIncrementServiceQuantity
    automatically_increment_service_quantity = Field(type=bool, required=True, mutable=False)
    #: int: *Required* errorCount
    error_count = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: int: *Required* groupsProcessed
    groups_processed = Field(type=int, required=True, mutable=False)
    #: int: *Required* groupsTotal
    groups_total = Field(type=int, required=True, mutable=False)
    #: int: *Required* usersProcessed
    users_processed = Field(type=int, required=True, mutable=False)
    #: int: *Required* usersTotal
    users_total = Field(type=int, required=True, mutable=False)
    #: str: *Required* userSelectionType
    user_selection_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* reportFilePathName
    report_file_path_name = Field(type=str, required=True, mutable=False)
    #: bool: *Optional* migrateAllGroups
    migrate_all_groups = Field(type=bool, required=False, mutable=False)
    #: list: *Optional* groupTable  *Tabular*
    group_table = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* userSelectionServicePackName  *Array*
    user_selection_service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* userSelectionServiceName  *Array*
    user_selection_service_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* removeServicePackName  *Array*
    remove_service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* removeServiceName  *Array*
    remove_service_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* assignServicePackName  *Array*
    assign_service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* assignServiceName  *Array*
    assign_service_name = Field(type=list, required=False, mutable=False)


class ServiceProviderServicePackMigrationTaskGetResponse21(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetRequest21()``.

    The groupTable column headings are: "Group Id", "Group Name", and "User Count".
    """

    _ELEMENTS = (
        E("task_name", "taskName", str, is_required=True),
        E("start_timestamp", "startTimestamp", str),
        E("actual_start_timestamp", "actualStartTimestamp", str),
        E("expire_after_num_hours", "expireAfterNumHours", int, is_required=True),
        E("max_duration_hours", "maxDurationHours", int, is_required=True),
        E("send_report_email", "sendReportEmail", bool, is_required=True),
        E("report_delivery_email_address", "reportDeliveryEmailAddress", str),
        E("abort_on_error", "abortOnError", bool, is_required=True),
        E("abort_error_threshold", "abortErrorThreshold", int),
        E("report_all_users", "reportAllUsers", bool, is_required=True),
        E(
            "automatically_increment_service_quantity",
            "automaticallyIncrementServiceQuantity", bool, is_required=True,
        ),
        E("error_count", "errorCount", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("groups_processed", "groupsProcessed", int, is_required=True),
        E("groups_total", "groupsTotal", int, is_required=True),
        E("users_processed", "usersProcessed", int, is_required=True),
        E("users_total", "usersTotal", int, is_required=True),
        E("user_selection_type", "userSelectionType", str, is_required=True),
        E("report_file_path_name", "reportFilePathName", str, is_required=True),
        E("migrate_all_groups", "migrateAllGroups", bool),
        E("group_table", "groupTable", list, is_complex=True, is_table=True),
        E(
            "user_selection_service_pack_name", "userSelectionServicePackName", str,
            is_array=True,
        ),
        E("user_selection_service_name", "userSelectionServiceName", str, is_array=True),
        E("remove_service_pack_name", "removeServicePackName", str, is_array=True),
        E("remove_service_name", "removeServiceName", str, is_array=True),
        E("assign_service_pack_name", "assignServicePackName", str, is_array=True),
        E("assign_service_name", "assignServiceName", str, is_array=True),
    )

    #: str: *Required* taskName
    task_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* startTimestamp
    start_timestamp = Field(type=str, required=False, mutable=False)
    #: str: *Optional* actualStartTimestamp
    actual_start_timestamp = Field(type=str, required=False, mutable=False)
    #: int: *Required* expireAfterNumHours
    expire_after_num_hours = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxDurationHours
    max_duration_hours = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendReportEmail
    send_report_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* reportDeliveryEmailAddress
    report_delivery_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* abortOnError
    abort_on_error = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* abortErrorThreshold
    abort_error_threshold = Field(type=int, required=False, mutable=False)
    #: bool: *Required* reportAllUsers
    report_all_users = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* automaticallyIncrementServiceQuantity
    automatically_increment_service_quantity = Field(type=bool, required=True, mutable=False)
    #: int: *Required* errorCount
    error_count = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: int: *Required* groupsProcessed
    groups_processed = Field(type=int, required=True, mutable=False)
    #: int: *Required* groupsTotal
    groups_total = Field(type=int, required=True, mutable=False)
    #: int: *Required* usersProcessed
    users_processed = Field(type=int, required=True, mutable=False)
    #: int: *Required* usersTotal
    users_total = Field(type=int, required=True, mutable=False)
    #: str: *Required* userSelectionType
    user_selection_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* reportFilePathName
    report_file_path_name = Field(type=str, required=True, mutable=False)
    #: bool: *Optional* migrateAllGroups
    migrate_all_groups = Field(type=bool, required=False, mutable=False)
    #: list: *Optional* groupTable  *Tabular*
    group_table = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* userSelectionServicePackName  *Array*
    user_selection_service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* userSelectionServiceName  *Array*
    user_selection_service_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* removeServicePackName  *Array*
    remove_service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* removeServiceName  *Array*
    remove_service_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* assignServicePackName  *Array*
    assign_service_pack_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* assignServiceName  *Array*
    assign_service_name = Field(type=list, required=False, mutable=False)


class ServiceProviderServicePhoneNumberLookupResponse(OCIResponse):
    """
    Response to the ``ServiceProviderServicePhoneNumberLookupRequest()``.

    The column headings for the userTable are: "Group Id", "User Id", "Last Name", "First
    Name", "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension" and
    "Department".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class ServiceProviderSessionAdmissionControlGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderSessionAdmissionControlGetRequest()``.

    The response contains the session admission control capacity allocated for the service
    provider.
    """

    _ELEMENTS = (
        E("restrict_aggregate_sessions", "restrictAggregateSessions", bool, is_required=True),
        E("max_sessions", "maxSessions", int),
        E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
        E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
        E(
            "count_intra_service_provider_sessions", "countIntraServiceProviderSessions",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* restrictAggregateSessions
    restrict_aggregate_sessions = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* maxSessions
    max_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxUserOriginatingSessions
    max_user_originating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxUserTerminatingSessions
    max_user_terminating_sessions = Field(type=int, required=False, mutable=False)
    #: bool: *Required* countIntraServiceProviderSessions
    count_intra_service_provider_sessions = Field(type=bool, required=True, mutable=False)


class ServiceProviderSessionAdmissionControlWhiteListGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderSessionAdmissionControlWhiteListGetRequest()``.

    The response contains the White List information.
    """

    _ELEMENTS = (
        E("match_digit_pattern", "matchDigitPattern", str, is_array=True),
        E("enable_white_list", "enableWhiteList", bool, is_required=True),
    )

    #: list(str): *Optional* matchDigitPattern  *Array*
    match_digit_pattern = Field(type=list, required=False, mutable=False)
    #: bool: *Required* enableWhiteList
    enable_white_list = Field(type=bool, required=True, mutable=False)


class ServiceProviderVoiceMessagingGroupGetPasscodeRulesResponse(OCIResponse):
    """
    Response to ``ServiceProviderVoiceMessagingGroupGetPasscodeRulesRequest()``.

    Contains the service provider's voice portal passcode rules setting.

    Replaced By: ``ServiceProviderPortalPasscodeRulesGetResponse()``
    """

    _ELEMENTS = (
        E("disallow_repeated_digits", "disallowRepeatedDigits", bool, is_required=True),
        E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
        E(
            "disallow_reversed_user_number", "disallowReversedUserNumber", bool,
            is_required=True,
        ),
        E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
        E(
            "disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool,
            is_required=True,
        ),
        E("min_code_length", "minCodeLength", int, is_required=True),
        E("max_code_length", "maxCodeLength", int, is_required=True),
        E(
            "disable_login_after_max_failed_login_attempts",
            "disableLoginAfterMaxFailedLoginAttempts", bool, is_required=True,
        ),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
        E("expire_password", "expirePassword", bool, is_required=True),
        E("passcode_expires_days", "passcodeExpiresDays", int),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
    )

    #: bool: *Required* disallowRepeatedDigits
    disallow_repeated_digits = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowUserNumber
    disallow_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedUserNumber
    disallow_reversed_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPasscode
    disallow_old_passcode = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPasscode
    disallow_reversed_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minCodeLength
    min_code_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCodeLength
    max_code_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableLoginAfterMaxFailedLoginAttempts
    disable_login_after_max_failed_login_attempts = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=False, mutable=False)
    #: bool: *Required* expirePassword
    expire_password = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passcodeExpiresDays
    passcode_expires_days = Field(type=int, required=False, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)


class ServiceProviderVoiceMessagingGroupGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderVoiceMessagingGroupGetRequest()``.

    Contains the service provider's or enterprise's voice messaging settings.
    """

    _ELEMENTS = (
        E("delivery_from_address", "deliveryFromAddress", str),
        E("notification_from_address", "notificationFromAddress", str),
        E("voice_portal_lockout_from_address", "voicePortalLockoutFromAddress", str),
        E(
            "use_system_default_delivery_from_address",
            "useSystemDefaultDeliveryFromAddress", bool, is_required=True,
        ),
        E(
            "use_system_default_notification_from_address",
            "useSystemDefaultNotificationFromAddress", bool, is_required=True,
        ),
        E(
            "use_system_default_voice_portal_lockout_from_address",
            "useSystemDefaultVoicePortalLockoutFromAddress", bool, is_required=True,
        ),
    )

    #: str: *Optional* deliveryFromAddress
    delivery_from_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* notificationFromAddress
    notification_from_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* voicePortalLockoutFromAddress
    voice_portal_lockout_from_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useSystemDefaultDeliveryFromAddress
    use_system_default_delivery_from_address = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useSystemDefaultNotificationFromAddress
    use_system_default_notification_from_address = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useSystemDefaultVoicePortalLockoutFromAddress
    use_system_default_voice_portal_lockout_from_address = Field(
        type=bool, required=True, mutable=False,
    )


class ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingResponse(OCIResponse):
    """
    Response to the ``ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingRequest()``.

    Replaced By: ``ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingResponse16()``
    """

    _ELEMENTS = (
        E(
            "voice_portal_greeting_selection", "voicePortalGreetingSelection", str,
            is_required=True,
        ),
        E(
            "voice_portal_greeting_file_description",
            "voicePortalGreetingFileDescription", str,
        ),
        E(
            "voice_messaging_greeting_selection", "voiceMessagingGreetingSelection", str,
            is_required=True,
        ),
        E(
            "voice_messaging_greeting_file_description",
            "voiceMessagingGreetingFileDescription", str,
        ),
    )

    #: str: *Required* voicePortalGreetingSelection
    voice_portal_greeting_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* voicePortalGreetingFileDescription
    voice_portal_greeting_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Required* voiceMessagingGreetingSelection
    voice_messaging_greeting_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* voiceMessagingGreetingFileDescription
    voice_messaging_greeting_file_description = Field(type=str, required=False, mutable=False)


class ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingResponse16(OCIResponse):
    """
    Response to the
    ``ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingRequest16()``.

    """

    _ELEMENTS = (
        E(
            "voice_portal_greeting_selection", "voicePortalGreetingSelection", str,
            is_required=True,
        ),
        E(
            "voice_portal_greeting_file_description",
            "voicePortalGreetingFileDescription", str,
        ),
        E("voice_portal_greeting_media_file_type", "voicePortalGreetingMediaFileType", str),
        E(
            "voice_messaging_greeting_selection", "voiceMessagingGreetingSelection", str,
            is_required=True,
        ),
        E(
            "voice_messaging_greeting_file_description",
            "voiceMessagingGreetingFileDescription", str,
        ),
        E(
            "voice_messaging_greeting_media_file_type",
            "voiceMessagingGreetingMediaFileType", str,
        ),
    )

    #: str: *Required* voicePortalGreetingSelection
    voice_portal_greeting_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* voicePortalGreetingFileDescription
    voice_portal_greeting_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* voicePortalGreetingMediaFileType
    voice_portal_greeting_media_file_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* voiceMessagingGreetingSelection
    voice_messaging_greeting_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* voiceMessagingGreetingFileDescription
    voice_messaging_greeting_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* voiceMessagingGreetingMediaFileType
    voice_messaging_greeting_media_file_type = Field(type=str, required=False, mutable=False)


class ServiceProviderVoiceMessagingGroupGetVoicePortalResponse(OCIResponse):
    """
    Response to ``ServiceProviderVoiceMessagingGroupGetVoicePortalRequest()``.

    """

    _ELEMENTS = (
        E("voice_portal_scope", "voicePortalScope", str, is_required=True),
    )

    #: str: *Required* voicePortalScope
    voice_portal_scope = Field(type=str, required=True, mutable=False)


class ServiceProviderZoneCallingRestrictionsGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderZoneCallingRestrictionsGetRequest()``
    """

    _ELEMENTS = (
        E(
            "enable_zone_calling_restrictions", "enableZoneCallingRestrictions", bool,
            is_required=True,
        ),
        E(
            "enable_origination_roaming_restrictions",
            "enableOriginationRoamingRestrictions", bool, is_required=True,
        ),
        E(
            "enable_emergency_origination_roaming_restrictions",
            "enableEmergencyOriginationRoamingRestrictions", bool, is_required=True,
        ),
        E(
            "enable_termination_roaming_restrictions",
            "enableTerminationRoamingRestrictions", bool, is_required=True,
        ),
    )

    #: bool: *Required* enableZoneCallingRestrictions
    enable_zone_calling_restrictions = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableOriginationRoamingRestrictions
    enable_origination_roaming_restrictions = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableEmergencyOriginationRoamingRestrictions
    enable_emergency_origination_roaming_restrictions = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableTerminationRoamingRestrictions
    enable_termination_roaming_restrictions = Field(type=bool, required=True, mutable=False)


class SystemASRParametersGetResponse(OCIResponse):
    """
    Response to ``SystemASRParametersGetRequest()``.

    Contains a list of system Application Server Registration parameters.

    Replaced By: ``SystemASRParametersGetResponse14sp5()``
    """

    _ELEMENTS = (
        E("max_transmissions", "maxTransmissions", int, is_required=True),
        E(
            "retransmission_delay_milli_seconds", "retransmissionDelayMilliSeconds", int,
            is_required=True,
        ),
        E("listening_port", "listeningPort", int, is_required=True),
    )

    #: int: *Required* maxTransmissions
    max_transmissions = Field(type=int, required=True, mutable=False)
    #: int: *Required* retransmissionDelayMilliSeconds
    retransmission_delay_milli_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* listeningPort
    listening_port = Field(type=int, required=True, mutable=False)


class SystemASRParametersGetResponse14sp5(OCIResponse):
    """
    Response to ``SystemASRParametersGetRequest14sp5()``.

    Contains a list of system Application Server Registration parameters.
    """

    _ELEMENTS = (
        E("max_transmissions", "maxTransmissions", int, is_required=True),
        E(
            "retransmission_delay_milli_seconds", "retransmissionDelayMilliSeconds", int,
            is_required=True,
        ),
        E("listening_port", "listeningPort", int, is_required=True),
        E("source_address", "sourceAddress", str),
    )

    #: int: *Required* maxTransmissions
    max_transmissions = Field(type=int, required=True, mutable=False)
    #: int: *Required* retransmissionDelayMilliSeconds
    retransmission_delay_milli_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* listeningPort
    listening_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* sourceAddress
    source_address = Field(type=str, required=False, mutable=False)


class SystemASRParametersGetResponse14sp7(OCIResponse):
    """
    Response to ``SystemASRParametersGetRequest14sp7()``.

    Contains a list of system Application Server Registration parameters.
    """

    _ELEMENTS = (
        E("max_transmissions", "maxTransmissions", int, is_required=True),
        E(
            "retransmission_delay_milli_seconds", "retransmissionDelayMilliSeconds", int,
            is_required=True,
        ),
        E("listening_port", "listeningPort", int, is_required=True),
    )

    #: int: *Required* maxTransmissions
    max_transmissions = Field(type=int, required=True, mutable=False)
    #: int: *Required* retransmissionDelayMilliSeconds
    retransmission_delay_milli_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* listeningPort
    listening_port = Field(type=int, required=True, mutable=False)


class SystemAccessDeviceCustomTagGetListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceCustomTagGetListRequest()``.

    Contains a table of custom configuration tags managed by the Device Management System
    on a per-device profile basis.  The column headings are: "Tag Name", "Tag Value"
    """

    _ELEMENTS = (
        E(
            "device_custom_tags_table", "deviceCustomTagsTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceCustomTagsTable  *Tabular*
    device_custom_tags_table = Field(type=list, required=True, mutable=False)


class SystemAccessDeviceFileGetListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetListRequest()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Type", "File Format", "Is
    Authenticated".

    Replaced By: ``SystemAccessDeviceFileGetListResponse14sp8()``
    """

    _ELEMENTS = (
        E(
            "device_files_table", "deviceFilesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceFilesTable  *Tabular*
    device_files_table = Field(type=list, required=True, mutable=False)


class SystemAccessDeviceFileGetListResponse14sp8(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetListRequest14sp8()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Format", "Is Authenticated",
    "Access URL", "Repository URL", "Template URL", "Extended Capture". The following
    columns are only used in AS data mode: "Extended Capture"
    """

    _ELEMENTS = (
        E(
            "device_files_table", "deviceFilesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceFilesTable  *Tabular*
    device_files_table = Field(type=list, required=True, mutable=False)


class SystemAccessDeviceFileGetResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetRequest()``.

    Replaced By: ``SystemAccessDeviceFileGetResponse14sp8()``
    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)


class SystemAccessDeviceFileGetResponse14sp8(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetRequest14sp8()``.

    Replaced by: ``SystemAccessDeviceFileGetResponse16sp1()``
    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)


class SystemAccessDeviceFileGetResponse16sp1(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetRequest16sp1()``.

    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)


class SystemAccessDeviceFileGetResponse20(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetRequest20()``.

    """

    _ELEMENTS = (
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
        E("extended_capture_enabled", "extendedCaptureEnabled", bool),
        E("extended_capture_url", "extendedCaptureURL", str),
    )

    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* extendedCaptureEnabled
    extended_capture_enabled = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* extendedCaptureURL
    extended_capture_url = Field(type=str, required=False, mutable=False)


class SystemAccessDeviceGetAllResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetAllRequest()``.

    Contains a table of devices configured in the entire system.  The column headings are:
    "Service Provider Id", "Is Enterprise", "Group Id", "Device Name", "Device Type", "Net
    Address", "MAC Address", "Status".
    """

    _ELEMENTS = (
        E(
            "access_device_table", "accessDeviceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* accessDeviceTable  *Tabular*
    access_device_table = Field(type=list, required=True, mutable=False)


class SystemAccessDeviceGetListResponse14(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetListRequest14()``.

    Contains a table of devices defined at the System-level.  The column headings are:
    "Device Name", "Device Type", "Available Ports", "Net Address" and "MAC Address",
    "Status", "Version".
    """

    _ELEMENTS = (
        E(
            "access_device_table", "accessDeviceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* accessDeviceTable  *Tabular*
    access_device_table = Field(type=list, required=True, mutable=False)


class SystemAccessDeviceGetUserListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetUserListRequest()``.

    The column headings for the deviceUserTable are: "Line/Port", "Last Name", "First
    Name", "Phone Number", "Service Provider Id", "Group Id", "User Id", "User Type",
    "Endpoint Type", "Primary Line/Port", "Order", "Extension", "Department", "Email
    Address", "Private Identity". If the identity/device profile is an identity, the table
    will contain a row for each TEL-URI in the Phone Number column.  If the
    identity/device profile is a real device, rows for the alternate numbers are not
    included.  The User Type column contains one of the enumerated UserType values.  The
    Endpoint Type column contains one of the enumerated EndpointType values.  The Private
    Identity column is empty is AS mode.
    """

    _ELEMENTS = (
        E(
            "device_user_table", "deviceUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceUserTable  *Tabular*
    device_user_table = Field(type=list, required=True, mutable=False)


class SystemAccessDeviceMonitorGetDeviceTypeListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceMonitorGetDeviceTypeListRequest()``.

    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_array=True),
    )

    #: list(str): *Optional* deviceType  *Array*
    device_type = Field(type=list, required=False, mutable=False)


class SystemAccessDeviceMonitorParametersGetResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceMonitorParametersGetListRequest()``.

    Contains a list of system Access Device Monitor parameters.
    """

    _ELEMENTS = (
        E("polling_interval_minutes", "pollingIntervalMinutes", int, is_required=True),
    )

    #: int: *Required* pollingIntervalMinutes
    polling_interval_minutes = Field(type=int, required=True, mutable=False)


class SystemAccessDeviceTypeGetEnhancedConfigurableListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceTypeGetEnhancedConfigurableListRequest()``.

    Contains a table with columns: "Access Device Type", "Enhanced Configuration Type",
    "Supports Reset". The "Enhanced Configuration Type" column contains one of the
    AccessDeviceEnhancedConfigurationType14 enumerated values.  The "Supports Reset"
    column is a boolean flag indicating the device can be remotely reset.
    """

    _ELEMENTS = (
        E(
            "device_type_table", "deviceTypeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceTypeTable  *Tabular*
    device_type_table = Field(type=list, required=True, mutable=False)


class SystemAccessDeviceTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceTypeGetListRequest()``.

    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)


class SystemAccountingGetChargingFunctionElementServerListResponse(OCIResponse):
    """
    Response to ``SystemAccountingGetChargingFunctionElementServerListRequest()``.

    The accounting charging function element Server table column headings are: "Address",
    "Extended Net Address", "Type", "Description".
    """

    _ELEMENTS = (
        E(
            "charging_function_element_server_table",
            "chargingFunctionElementServerTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* chargingFunctionElementServerTable  *Tabular*
    charging_function_element_server_table = Field(type=list, required=True, mutable=False)


class SystemAccountingGetRadiusServerListResponse(OCIResponse):
    """
    Response to ``SystemAccountingGetRadiusServerListRequest()``.

    The Radius Server table column headings are: "Net Address", "Port", "Description"
    """

    _ELEMENTS = (
        E(
            "radius_server_table", "radiusServerTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* radiusServerTable  *Tabular*
    radius_server_table = Field(type=list, required=True, mutable=False)


class SystemAccountingInhibitedAttributeValuePairCodeGetListResponse(OCIResponse):
    """
    Response to ``SystemAccountingInhibitedAttributeValuePairCodeGetListRequest()``.

    Contains a 2 column table with column headings "Attribute Value Pair Code" and "Vendor
    Id".
    """

    _ELEMENTS = (
        E(
            "inhibited_attribute_value_pair_code_table",
            "inhibitedAttributeValuePairCodeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* inhibitedAttributeValuePairCodeTable  *Tabular*
    inhibited_attribute_value_pair_code_table = Field(type=list, required=True, mutable=False)


class SystemAdminGetListResponse(OCIResponse):
    """
    Response to ``SystemAdminGetListRequest()``.

    Contains a 6 column table with column headings "Administrator ID", "Last Name", "First
    Name", "Type", "Read Only", "Language".
    """

    _ELEMENTS = (
        E(
            "system_admin_table", "systemAdminTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* systemAdminTable  *Tabular*
    system_admin_table = Field(type=list, required=True, mutable=False)


class SystemAdminGetResponse(OCIResponse):
    """
    Response to the ``SystemAdminGetRequest()``.

    The response contains the system or provisioning administrators profile information.
    """

    _ELEMENTS = (
        E("first_name", "firstName", str),
        E("last_name", "lastName", str),
        E("language", "language", str, is_required=True),
        E("admin_type", "adminType", str, is_required=True),
        E("read_only", "readOnly", bool, is_required=True),
    )

    #: str: *Optional* firstName
    first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* lastName
    last_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* adminType
    admin_type = Field(type=str, required=True, mutable=False)
    #: bool: *Required* readOnly
    read_only = Field(type=bool, required=True, mutable=False)


class SystemAdviceOfChargeCostInformationSourceGetListResponse(OCIResponse):
    """
    Response to ``SystemAdviceOfChargeCostInformationSourceGetListRequest()``.

    Contains a table with column headings: "PeerIdentity", "Priority"
    """

    _ELEMENTS = (
        E(
            "cost_information_source_table", "costInformationSourceTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* costInformationSourceTable  *Tabular*
    cost_information_source_table = Field(type=list, required=True, mutable=False)


class SystemAdviceOfChargeGetResponse(OCIResponse):
    """
    Response to ``SystemAdviceOfChargeGetRequest()``.

    Contains a list of system Advice of Charge parameters.
    """

    _ELEMENTS = (
        E(
            "delay_between_notification_seconds", "delayBetweenNotificationSeconds", int,
            is_required=True,
        ),
        E("incoming_aoc_handling", "incomingAocHandling", str, is_required=True),
        E("cost_information_source", "costInformationSource", str),
    )

    #: int: *Required* delayBetweenNotificationSeconds
    delay_between_notification_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* incomingAocHandling
    incoming_aoc_handling = Field(type=str, required=True, mutable=False)
    #: str: *Optional* costInformationSource
    cost_information_source = Field(type=str, required=False, mutable=False)


class SystemAdviceOfChargeGetResponse19sp1(OCIResponse):
    """
    Response to ``SystemAdviceOfChargeGetRequest()``.

    Contains a list of system Advice of Charge parameters.
    """

    _ELEMENTS = (
        E(
            "delay_between_notification_seconds", "delayBetweenNotificationSeconds", int,
            is_required=True,
        ),
        E("incoming_aoc_handling", "incomingAocHandling", str, is_required=True),
        E("use_ocs_enquiry", "useOCSEnquiry", bool, is_required=True),
        E("ocs_enquiry_type", "OCSEnquiryType", str, is_required=True),
    )

    #: int: *Required* delayBetweenNotificationSeconds
    delay_between_notification_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* incomingAocHandling
    incoming_aoc_handling = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useOCSEnquiry
    use_ocs_enquiry = Field(type=bool, required=True, mutable=False)
    #: str: *Required* OCSEnquiryType
    ocs_enquiry_type = Field(type=str, required=True, mutable=False)


class SystemAliasGetListResponse(OCIResponse):
    """
    Response to ``SystemAliasGetListRequest()``.

    Contains the list of all network alias' for the Application Server.
    """

    _ELEMENTS = (
        E("alias_net_address", "aliasNetAddress", str, is_array=True),
    )

    #: list(str): *Optional* aliasNetAddress  *Array*
    alias_net_address = Field(type=list, required=False, mutable=False)


class SystemAnonymousCallRejectionGetResponse(OCIResponse):
    """
    Response to the ``SystemAnonymousCallRejectionGetRequest()``.

    The response contains the anonymous call rejection system.".
    """

    _ELEMENTS = (
        E("pai_required", "paiRequired", bool, is_required=True),
        E("screen_only_local_calls", "screenOnlyLocalCalls", bool, is_required=True),
    )

    #: bool: *Required* paiRequired
    pai_required = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* screenOnlyLocalCalls
    screen_only_local_calls = Field(type=bool, required=True, mutable=False)


class SystemApplicationControllerGetListResponse(OCIResponse):
    """
    Response to the ``SystemApplicationControllerGetListRequest()``.

    Contains a table with column headings: "Name", "Subscriber Id", "Channel Set Id",
    "Status". The column values for "Status" can either be "ready" or "notReady".
    """

    _ELEMENTS = (
        E(
            "application_controller_table", "applicationControllerTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* applicationControllerTable  *Tabular*
    application_controller_table = Field(type=list, required=True, mutable=False)


class SystemAttendantConsoleGetResponse(OCIResponse):
    """
    Response to ``SystemAttendantConsoleGetRequest()``.

    Contains a list of Attendant Console parameters.
    """

    _ELEMENTS = (
        E("max_monitored_users", "maxMonitoredUsers", int, is_required=True),
    )

    #: int: *Required* maxMonitoredUsers
    max_monitored_users = Field(type=int, required=True, mutable=False)


class SystemAuthenticationLockoutSettingsGetResponse(OCIResponse):
    """
    Response to ``SystemAuthenticationLockoutSettingsGetRequest()``.

    Contains the authentication lockout settings in the system.
    """

    _ELEMENTS = (
        E("counter_reset_interval_days", "counterResetIntervalDays", int, is_required=True),
        E("counter_reset_hour", "counterResetHour", int, is_required=True),
        E("counter_reset_minute", "counterResetMinute", int, is_required=True),
        E(
            "emergency_sip_bypass_allowed", "emergencySIPBypassAllowed", bool,
            is_required=True,
        ),
    )

    #: int: *Required* counterResetIntervalDays
    counter_reset_interval_days = Field(type=int, required=True, mutable=False)
    #: int: *Required* counterResetHour
    counter_reset_hour = Field(type=int, required=True, mutable=False)
    #: int: *Required* counterResetMinute
    counter_reset_minute = Field(type=int, required=True, mutable=False)
    #: bool: *Required* emergencySIPBypassAllowed
    emergency_sip_bypass_allowed = Field(type=bool, required=True, mutable=False)


class SystemAutomaticCallbackGetReleaseCauseListResponse(OCIResponse):
    """
    Response to ``SystemAutomaticCallbackGetReleaseCauseListRequest()``.

    """

    _ELEMENTS = (
        E("release_cause", "releaseCause", str, is_array=True),
    )

    #: list(str): *Optional* releaseCause  *Array*
    release_cause = Field(type=list, required=False, mutable=False)


class SystemAutomaticCallbackGetResponse(OCIResponse):
    """
    Response to ``SystemAutomaticCallbackGetRequest()``.

    Replaced By: ``SystemAutomaticCallbackGetResponse15()``
    """

    _ELEMENTS = (
        E("monitor_minutes", "monitorMinutes", int, is_required=True),
        E(
            "wait_between_retry_originator_minutes", "waitBetweenRetryOriginatorMinutes",
            int, is_required=True,
        ),
        E("max_monitors_per_originator", "maxMonitorsPerOriginator", int, is_required=True),
        E("max_callback_rings", "maxCallbackRings", int, is_required=True),
        E("max_retry_originator_minutes", "maxRetryOriginatorMinutes", int, is_required=True),
    )

    #: int: *Required* monitorMinutes
    monitor_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* waitBetweenRetryOriginatorMinutes
    wait_between_retry_originator_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMonitorsPerOriginator
    max_monitors_per_originator = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCallbackRings
    max_callback_rings = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRetryOriginatorMinutes
    max_retry_originator_minutes = Field(type=int, required=True, mutable=False)


class SystemAutomaticCallbackGetResponse15(OCIResponse):
    """
    Response to ``SystemAutomaticCallbackGetRequest15()``.

    Replaced By: ``SystemAutomaticCallbackGetResponse15sp2()``
    """

    _ELEMENTS = (
        E("monitor_minutes", "monitorMinutes", int, is_required=True),
        E("max_monitors_per_originator", "maxMonitorsPerOriginator", int, is_required=True),
        E("max_callback_rings", "maxCallbackRings", int, is_required=True),
        E("max_monitors_per_terminator", "maxMonitorsPerTerminator", int, is_required=True),
        E(
            "terminator_idle_guard_seconds", "terminatorIdleGuardSeconds", int,
            is_required=True,
        ),
    )

    #: int: *Required* monitorMinutes
    monitor_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMonitorsPerOriginator
    max_monitors_per_originator = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCallbackRings
    max_callback_rings = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMonitorsPerTerminator
    max_monitors_per_terminator = Field(type=int, required=True, mutable=False)
    #: int: *Required* terminatorIdleGuardSeconds
    terminator_idle_guard_seconds = Field(type=int, required=True, mutable=False)


class SystemAutomaticCallbackGetResponse15sp2(OCIResponse):
    """
    Response to ``SystemAutomaticCallbackGetRequest15sp2()``.

    """

    _ELEMENTS = (
        E("monitor_minutes", "monitorMinutes", int, is_required=True),
        E("max_monitors_per_originator", "maxMonitorsPerOriginator", int, is_required=True),
        E("max_callback_rings", "maxCallbackRings", int, is_required=True),
        E("max_monitors_per_terminator", "maxMonitorsPerTerminator", int, is_required=True),
        E(
            "terminator_idle_guard_seconds", "terminatorIdleGuardSeconds", int,
            is_required=True,
        ),
        E("callback_method", "callbackMethod", str, is_required=True),
        E("polling_interval_seconds", "pollingIntervalSeconds", int, is_required=True),
    )

    #: int: *Required* monitorMinutes
    monitor_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMonitorsPerOriginator
    max_monitors_per_originator = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCallbackRings
    max_callback_rings = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMonitorsPerTerminator
    max_monitors_per_terminator = Field(type=int, required=True, mutable=False)
    #: int: *Required* terminatorIdleGuardSeconds
    terminator_idle_guard_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* callbackMethod
    callback_method = Field(type=str, required=True, mutable=False)
    #: int: *Required* pollingIntervalSeconds
    polling_interval_seconds = Field(type=int, required=True, mutable=False)


class SystemAutomaticCallbackGetResponse17(OCIResponse):
    """
    Response to ``SystemAutomaticCallbackGetRequest17()``.

    """

    _ELEMENTS = (
        E("monitor_minutes", "monitorMinutes", int, is_required=True),
        E("max_monitors_per_originator", "maxMonitorsPerOriginator", int, is_required=True),
        E("max_callback_rings", "maxCallbackRings", int, is_required=True),
        E("max_monitors_per_terminator", "maxMonitorsPerTerminator", int, is_required=True),
        E(
            "terminator_idle_guard_seconds", "terminatorIdleGuardSeconds", int,
            is_required=True,
        ),
        E("callback_method", "callbackMethod", str, is_required=True),
        E("polling_interval_seconds", "pollingIntervalSeconds", int, is_required=True),
        E("activation_digit", "activationDigit", int, is_required=True),
    )

    #: int: *Required* monitorMinutes
    monitor_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMonitorsPerOriginator
    max_monitors_per_originator = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCallbackRings
    max_callback_rings = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMonitorsPerTerminator
    max_monitors_per_terminator = Field(type=int, required=True, mutable=False)
    #: int: *Required* terminatorIdleGuardSeconds
    terminator_idle_guard_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* callbackMethod
    callback_method = Field(type=str, required=True, mutable=False)
    #: int: *Required* pollingIntervalSeconds
    polling_interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* activationDigit
    activation_digit = Field(type=int, required=True, mutable=False)


class SystemBCCTGetOCIInterfaceAddressListResponse(OCIResponse):
    """
    Response to ``SystemBCCTGetOCIInterfaceAddressListRequest()``.

    """

    _ELEMENTS = (
        E("interface_net_address", "interfaceNetAddress", str, is_array=True),
    )

    #: list(str): *Optional* interfaceNetAddress  *Array*
    interface_net_address = Field(type=list, required=False, mutable=False)


class SystemBroadCloudGetResponse(OCIResponse):
    """
    Response to the ``SystemBroadCloudGetRequest()``.

    The response contains the system interface attributes for Messaging Server.
    """

    _ELEMENTS = (
        E("provisioning_url", "provisioningUrl", str),
        E("provisioning_user_id", "provisioningUserId", str),
        E("enable_synchronization", "enableSynchronization", bool, is_required=True),
    )

    #: str: *Optional* provisioningUrl
    provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* provisioningUserId
    provisioning_user_id = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableSynchronization
    enable_synchronization = Field(type=bool, required=True, mutable=False)


class SystemBroadWorksMobileManagerGetResponse(OCIResponse):
    """
    Response to the ``SystemBroadWorksMobileManagerGetRequest()``
    """

    _ELEMENTS = (
        E("scf_api_net_address1", "scfApiNetAddress1", str),
        E("scf_api_net_address2", "scfApiNetAddress2", str),
        E("user_name", "userName", str),
        E("email_from_address", "emailFromAddress", str),
        E("scf_ims_only", "scfIMSOnly", bool, is_required=True),
        E("signaling_ip_address", "signalingIPAddress", str),
        E("signaling_port", "signalingPort", int),
    )

    #: str: *Optional* scfApiNetAddress1
    scf_api_net_address1 = Field(type=str, required=False, mutable=False)
    #: str: *Optional* scfApiNetAddress2
    scf_api_net_address2 = Field(type=str, required=False, mutable=False)
    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailFromAddress
    email_from_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* scfIMSOnly
    scf_ims_only = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* signalingIPAddress
    signaling_ip_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* signalingPort
    signaling_port = Field(type=int, required=False, mutable=False)


class SystemBroadWorksMobilityGetIMRNListResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityDnGetListRequest()``.

    """

    _ELEMENTS = (
        E("imrn_number", "imrnNumber", str, is_array=True),
    )

    #: list(str): *Optional* imrnNumber  *Array*
    imrn_number = Field(type=list, required=False, mutable=False)


class SystemBroadWorksMobilityGetMobileNetworkIMRNListResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityGetMobileNetworkIMRNListRequest()``.

    """

    _ELEMENTS = (
        E("imrn_number", "imrnNumber", str, is_array=True),
    )

    #: list(str): *Optional* imrnNumber  *Array*
    imrn_number = Field(type=list, required=False, mutable=False)


class SystemBroadWorksMobilityGetResponse(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityGetRequest()``.

    Replaced by: ``SystemBroadWorksMobilityGetResponse17sp4()``.
    """

    _ELEMENTS = (
        E("enable_location_services", "enableLocationServices", bool, is_required=True),
        E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
        E(
            "enable_mobile_state_checking", "enableMobileStateChecking", bool,
            is_required=True,
        ),
        E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
        E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
        E("imrn_timeout_millisecnds", "imrnTimeoutMillisecnds", int, is_required=True),
        E("scf_signaling_ip_address", "scfSignalingIPAddress", str),
        E("scf_signaling_port", "scfSignalingPort", int),
    )

    #: bool: *Required* enableLocationServices
    enable_location_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMSRNLookup
    enable_msrn_lookup = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMobileStateChecking
    enable_mobile_state_checking = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallOriginations
    deny_call_originations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallTerminations
    deny_call_terminations = Field(type=bool, required=True, mutable=False)
    #: int: *Required* imrnTimeoutMillisecnds
    imrn_timeout_millisecnds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* scfSignalingIPAddress
    scf_signaling_ip_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* scfSignalingPort
    scf_signaling_port = Field(type=int, required=False, mutable=False)


class SystemBroadWorksMobilityGetResponse17sp4(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityGetRequest17sp4()``.

    """

    _ELEMENTS = (
        E("enable_location_services", "enableLocationServices", bool, is_required=True),
        E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
        E(
            "enable_mobile_state_checking", "enableMobileStateChecking", bool,
            is_required=True,
        ),
        E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
        E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
        E("imrn_timeout_millisecnds", "imrnTimeoutMillisecnds", int, is_required=True),
        E("scf_signaling_net_address", "scfSignalingNetAddress", str),
        E("scf_signaling_port", "scfSignalingPort", int),
        E("refresh_period_seconds", "refreshPeriodSeconds", int, is_required=True),
        E("max_consecutive_failures", "maxConsecutiveFailures", int, is_required=True),
        E(
            "max_response_wait_time_milliseconds", "maxResponseWaitTimeMilliseconds", int,
            is_required=True,
        ),
    )

    #: bool: *Required* enableLocationServices
    enable_location_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMSRNLookup
    enable_msrn_lookup = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMobileStateChecking
    enable_mobile_state_checking = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallOriginations
    deny_call_originations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallTerminations
    deny_call_terminations = Field(type=bool, required=True, mutable=False)
    #: int: *Required* imrnTimeoutMillisecnds
    imrn_timeout_millisecnds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* scfSignalingNetAddress
    scf_signaling_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* scfSignalingPort
    scf_signaling_port = Field(type=int, required=False, mutable=False)
    #: int: *Required* refreshPeriodSeconds
    refresh_period_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxConsecutiveFailures
    max_consecutive_failures = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxResponseWaitTimeMilliseconds
    max_response_wait_time_milliseconds = Field(type=int, required=True, mutable=False)


class SystemBroadWorksMobilityGetResponse19sp1(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityGetRequest19sp1()``.

    Replaced by ``SystemBroadWorksMobilityGetResponse21()``
    """

    _ELEMENTS = (
        E("enable_location_services", "enableLocationServices", bool, is_required=True),
        E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
        E(
            "enable_mobile_state_checking", "enableMobileStateChecking", bool,
            is_required=True,
        ),
        E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
        E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
        E("imrn_timeout_millisecnds", "imrnTimeoutMillisecnds", int, is_required=True),
        E("scf_signaling_net_address", "scfSignalingNetAddress", str),
        E("scf_signaling_port", "scfSignalingPort", int),
        E("refresh_period_seconds", "refreshPeriodSeconds", int, is_required=True),
        E("max_consecutive_failures", "maxConsecutiveFailures", int, is_required=True),
        E(
            "max_response_wait_time_milliseconds", "maxResponseWaitTimeMilliseconds", int,
            is_required=True,
        ),
        E(
            "enable_announcement_suppression", "enableAnnouncementSuppression", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* enableLocationServices
    enable_location_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMSRNLookup
    enable_msrn_lookup = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMobileStateChecking
    enable_mobile_state_checking = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallOriginations
    deny_call_originations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallTerminations
    deny_call_terminations = Field(type=bool, required=True, mutable=False)
    #: int: *Required* imrnTimeoutMillisecnds
    imrn_timeout_millisecnds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* scfSignalingNetAddress
    scf_signaling_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* scfSignalingPort
    scf_signaling_port = Field(type=int, required=False, mutable=False)
    #: int: *Required* refreshPeriodSeconds
    refresh_period_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxConsecutiveFailures
    max_consecutive_failures = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxResponseWaitTimeMilliseconds
    max_response_wait_time_milliseconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableAnnouncementSuppression
    enable_announcement_suppression = Field(type=bool, required=True, mutable=False)


class SystemBroadWorksMobilityGetResponse21(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityGetRequest21()``.

    """

    _ELEMENTS = (
        E("enable_location_services", "enableLocationServices", bool, is_required=True),
        E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
        E(
            "enable_mobile_state_checking", "enableMobileStateChecking", bool,
            is_required=True,
        ),
        E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
        E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
        E("imrn_timeout_millisecnds", "imrnTimeoutMillisecnds", int, is_required=True),
    )

    #: bool: *Required* enableLocationServices
    enable_location_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMSRNLookup
    enable_msrn_lookup = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMobileStateChecking
    enable_mobile_state_checking = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallOriginations
    deny_call_originations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallTerminations
    deny_call_terminations = Field(type=bool, required=True, mutable=False)
    #: int: *Required* imrnTimeoutMillisecnds
    imrn_timeout_millisecnds = Field(type=int, required=True, mutable=False)


class SystemBroadWorksMobilityMobileNetworkGetListResponse(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityMobileNetworkGetListRequest()``.

    Contains a table with column headings: "Name", "SCF Signaling Net Address", "SCF
    Signaling Port"
    """

    _ELEMENTS = (
        E(
            "mobile_network_table", "mobileNetworkTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* mobileNetworkTable  *Tabular*
    mobile_network_table = Field(type=list, required=True, mutable=False)


class SystemBroadWorksMobilityMobileNetworkGetResponse(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityMobileNetworkGetRequest()``.

    """

    _ELEMENTS = (
        E("scf_signaling_net_address", "scfSignalingNetAddress", str),
        E("scf_signaling_port", "scfSignalingPort", int),
        E("refresh_period_seconds", "refreshPeriodSeconds", int, is_required=True),
        E("max_consecutive_failures", "maxConsecutiveFailures", int, is_required=True),
        E(
            "max_response_wait_time_milliseconds", "maxResponseWaitTimeMilliseconds", int,
            is_required=True,
        ),
        E(
            "enable_announcement_suppression", "enableAnnouncementSuppression", bool,
            is_required=True,
        ),
        E("service_access_code_list_name", "serviceAccessCodeListName", str),
    )

    #: str: *Optional* scfSignalingNetAddress
    scf_signaling_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* scfSignalingPort
    scf_signaling_port = Field(type=int, required=False, mutable=False)
    #: int: *Required* refreshPeriodSeconds
    refresh_period_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxConsecutiveFailures
    max_consecutive_failures = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxResponseWaitTimeMilliseconds
    max_response_wait_time_milliseconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableAnnouncementSuppression
    enable_announcement_suppression = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* serviceAccessCodeListName
    service_access_code_list_name = Field(type=str, required=False, mutable=False)


class SystemBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListResponse(OCIResponse):
    """
    Response to
    ``SystemBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListRequest()``.

    The response contains a table with columns: "Mobile Number", "Mobile Network",
    "Service Provider Id", "Is Enterprise", "Group Id", "User Id", "Last Name", "First
    Name", "Hiragana Last Name", "Hiragana First Name", "Phone Number" and "Extension".
    """

    _ELEMENTS = (
        E(
            "mobile_subscriber_directory_numbers_summary_table",
            "mobileSubscriberDirectoryNumbersSummaryTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* mobileSubscriberDirectoryNumbersSummaryTable  *Tabular*
    mobile_subscriber_directory_numbers_summary_table = Field(
        type=list, required=True, mutable=False,
    )


class SystemBroadWorksMobilityServiceAccessCodeGetListResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityServiceAccessCodeGetListRequest()``.

    Contains a table with column headings: "Country Code", "Service Access Code",
    "Description". Replaced by SystemBroadWorksMobilityServiceAccessCodeGetListReponse21.
    """

    _ELEMENTS = (
        E(
            "service_access_code_table", "serviceAccessCodeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceAccessCodeTable  *Tabular*
    service_access_code_table = Field(type=list, required=True, mutable=False)


class SystemBroadWorksMobilityServiceAccessCodeGetListResponse21(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityServiceAccessCodeGetListRequest21()``.

    Contains a table with column headings: "Country Code", "Service Access Code",
    "Description"
    """

    _ELEMENTS = (
        E(
            "service_access_code_table", "serviceAccessCodeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceAccessCodeTable  *Tabular*
    service_access_code_table = Field(type=list, required=True, mutable=False)


class SystemBroadWorksMobilityServiceAccessCodeListGetListResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityServiceAccessCodeListGetListRequest()``.

    """

    _ELEMENTS = (
        E("name", "name", str, is_array=True),
    )

    #: list(str): *Optional* name  *Array*
    name = Field(type=list, required=False, mutable=False)


class SystemBroadWorksMobilityServiceAccessCodeListUsageGetResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityServiceAccessCodeListUsageGetRequest()``.

    """

    _ELEMENTS = (
        E("mobile_network_name", "mobileNetworkName", str, is_array=True),
    )

    #: list(str): *Optional* mobileNetworkName  *Array*
    mobile_network_name = Field(type=list, required=False, mutable=False)


class SystemBroadWorksReceptionistEnterpriseGetResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksReceptionistEnterpriseGetRequest()``.

    Contains a list of BroadWorks Receptionist - Enterprise parameters.
    """

    _ELEMENTS = (
        E("max_monitored_users", "maxMonitoredUsers", int, is_required=True),
    )

    #: int: *Required* maxMonitoredUsers
    max_monitored_users = Field(type=int, required=True, mutable=False)


class SystemBusyLampFieldGetResponse(OCIResponse):
    """
    Response to ``SystemBusyLampFieldGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "display_local_user_identity_last_name_first",
            "displayLocalUserIdentityLastNameFirst", bool, is_required=True,
        ),
    )

    #: bool: *Required* displayLocalUserIdentityLastNameFirst
    display_local_user_identity_last_name_first = Field(
        type=bool, required=True, mutable=False,
    )


class SystemBusyLampFieldGetResponse18(OCIResponse):
    """
    Response to ``SystemBusyLampFieldGetRequest18()``.

    The following elements are only used in AS data mode: forceUseOfTCP
    """

    _ELEMENTS = (
        E(
            "display_local_user_identity_last_name_first",
            "displayLocalUserIdentityLastNameFirst", bool, is_required=True,
        ),
        E("force_use_of_tcp", "forceUseOfTCP", bool, is_required=True),
    )

    #: bool: *Required* displayLocalUserIdentityLastNameFirst
    display_local_user_identity_last_name_first = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* forceUseOfTCP
    force_use_of_tcp = Field(type=bool, required=True, mutable=False)


class SystemBwDiameterBaseDataGetResponse(OCIResponse):
    """
    Response to ``SystemBwDiameterBaseDataGetRequest()``.

    Contains a list of System Diameter base parameters.
    """

    _ELEMENTS = (
        E("xs_realm", "xsRealm", str),
        E("xs_listening_port", "xsListeningPort", int, is_required=True),
        E("ps_realm", "psRealm", str),
        E("ps_listening_port", "psListeningPort", int, is_required=True),
        E("ps_relay_through_xs", "psRelayThroughXs", bool, is_required=True),
        E("xs_relay_listening_port", "xsRelayListeningPort", int, is_required=True),
        E("tc_timer_seconds", "tcTimerSeconds", int, is_required=True),
        E("tw_timer_seconds", "twTimerSeconds", int, is_required=True),
        E("request_timer_seconds", "requestTimerSeconds", int, is_required=True),
        E(
            "busy_peer_detection_outstanding_txn_count",
            "busyPeerDetectionOutstandingTxnCount", int, is_required=True,
        ),
        E(
            "busy_peer_restore_outstanding_txn_count",
            "busyPeerRestoreOutstandingTxnCount", int, is_required=True,
        ),
        E(
            "dynamic_entry_inactivity_timer_hours", "dynamicEntryInactivityTimerHours",
            int, is_required=True,
        ),
    )

    #: str: *Optional* xsRealm
    xs_realm = Field(type=str, required=False, mutable=False)
    #: int: *Required* xsListeningPort
    xs_listening_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* psRealm
    ps_realm = Field(type=str, required=False, mutable=False)
    #: int: *Required* psListeningPort
    ps_listening_port = Field(type=int, required=True, mutable=False)
    #: bool: *Required* psRelayThroughXs
    ps_relay_through_xs = Field(type=bool, required=True, mutable=False)
    #: int: *Required* xsRelayListeningPort
    xs_relay_listening_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* tcTimerSeconds
    tc_timer_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* twTimerSeconds
    tw_timer_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* requestTimerSeconds
    request_timer_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* busyPeerDetectionOutstandingTxnCount
    busy_peer_detection_outstanding_txn_count = Field(type=int, required=True, mutable=False)
    #: int: *Required* busyPeerRestoreOutstandingTxnCount
    busy_peer_restore_outstanding_txn_count = Field(type=int, required=True, mutable=False)
    #: int: *Required* dynamicEntryInactivityTimerHours
    dynamic_entry_inactivity_timer_hours = Field(type=int, required=True, mutable=False)


class SystemBwDiameterBaseDataGetResponse17sp3(OCIResponse):
    """
    Response to ``SystemBwDiameterBaseDataGetRequest17sp3()``.

    Contains a list of System Diameter base parameters.
    """

    _ELEMENTS = (
        E("xs_realm", "xsRealm", str),
        E("xs_listening_port", "xsListeningPort", int, is_required=True),
        E("ps_realm", "psRealm", str),
        E("ps_listening_port", "psListeningPort", int, is_required=True),
        E("ps_relay_through_xs", "psRelayThroughXs", bool, is_required=True),
        E("xs_relay_listening_port", "xsRelayListeningPort", int, is_required=True),
        E("tc_timer_seconds", "tcTimerSeconds", int, is_required=True),
        E("tw_timer_seconds", "twTimerSeconds", int, is_required=True),
        E("request_timer_seconds", "requestTimerSeconds", int, is_required=True),
        E(
            "busy_peer_detection_outstanding_txn_count",
            "busyPeerDetectionOutstandingTxnCount", int, is_required=True,
        ),
        E(
            "busy_peer_restore_outstanding_txn_count",
            "busyPeerRestoreOutstandingTxnCount", int, is_required=True,
        ),
        E(
            "dynamic_entry_inactivity_timer_hours", "dynamicEntryInactivityTimerHours",
            int, is_required=True,
        ),
        E(
            "advertised_offline_billing_application",
            "advertisedOfflineBillingApplication", str, is_required=True,
        ),
        E(
            "advertised_online_billing_application", "advertisedOnlineBillingApplication",
            str, is_required=True,
        ),
    )

    #: str: *Optional* xsRealm
    xs_realm = Field(type=str, required=False, mutable=False)
    #: int: *Required* xsListeningPort
    xs_listening_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* psRealm
    ps_realm = Field(type=str, required=False, mutable=False)
    #: int: *Required* psListeningPort
    ps_listening_port = Field(type=int, required=True, mutable=False)
    #: bool: *Required* psRelayThroughXs
    ps_relay_through_xs = Field(type=bool, required=True, mutable=False)
    #: int: *Required* xsRelayListeningPort
    xs_relay_listening_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* tcTimerSeconds
    tc_timer_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* twTimerSeconds
    tw_timer_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* requestTimerSeconds
    request_timer_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* busyPeerDetectionOutstandingTxnCount
    busy_peer_detection_outstanding_txn_count = Field(type=int, required=True, mutable=False)
    #: int: *Required* busyPeerRestoreOutstandingTxnCount
    busy_peer_restore_outstanding_txn_count = Field(type=int, required=True, mutable=False)
    #: int: *Required* dynamicEntryInactivityTimerHours
    dynamic_entry_inactivity_timer_hours = Field(type=int, required=True, mutable=False)
    #: str: *Required* advertisedOfflineBillingApplication
    advertised_offline_billing_application = Field(type=str, required=True, mutable=False)
    #: str: *Required* advertisedOnlineBillingApplication
    advertised_online_billing_application = Field(type=str, required=True, mutable=False)


class SystemBwDiameterPeerGetListResponse(OCIResponse):
    """
    Contains a 5 column table with column headings 'Instance', 'Identity', 'IP Address',
    'Port', and 'Enabled'.

    One row is present for each peer.
    """

    _ELEMENTS = (
        E("peer_table", "peerTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* peerTable  *Tabular*
    peer_table = Field(type=list, required=True, mutable=False)


class SystemBwDiameterRoutingPeerGetListResponse(OCIResponse):
    """
    Contains a 6 column table with column headings 'Instance', 'Realm', 'ApplicationID',
    'Identity, 'Priority', and 'Weight'.

    One row is present for each Diameter Routing Peer.
    """

    _ELEMENTS = (
        E(
            "routing_peer_table", "routingPeerTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* routingPeerTable  *Tabular*
    routing_peer_table = Field(type=list, required=True, mutable=False)


class SystemBwDiameterRoutingRealmGetListResponse(OCIResponse):
    """
    Contains a 4 column table with column headings 'Instance', 'Realm', 'ApplicationID',
    and 'Default'.

    One row is present for each Diameter routing realm.
    """

    _ELEMENTS = (
        E(
            "routing_realm_table", "routingRealmTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* routingRealmTable  *Tabular*
    routing_realm_table = Field(type=list, required=True, mutable=False)


class SystemCAPGetACLListResponse14(OCIResponse):
    """
    Response to ``SystemCAPGetACLListRequest14()``.

    The table columns are: "Net Address" and "Description".
    """

    _ELEMENTS = (
        E("acl_table", "aclTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* aclTable  *Tabular*
    acl_table = Field(type=list, required=True, mutable=False)


class SystemCAPParametersGetResponse(OCIResponse):
    """
    Response to ``SystemCAPParametersGetRequest()``.

    Contains a list of system CAP parameters.

    Replaced By: ``SystemCAPParametersGetResponse14sp3()``
    """

    _ELEMENTS = (
        E("server_port", "serverPort", int, is_required=True),
        E("max_client_connections", "maxClientConnections", int, is_required=True),
        E("enable_connection_ping", "enableConnectionPing", bool, is_required=True),
        E(
            "connection_ping_interval_minutes", "connectionPingIntervalMinutes", int,
            is_required=True,
        ),
        E("ccc2_server_port", "CCC2ServerPort", int, is_required=True),
        E("ccc2_max_client_connections", "CCC2MaxClientConnections", int, is_required=True),
    )

    #: int: *Required* serverPort
    server_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxClientConnections
    max_client_connections = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConnectionPing
    enable_connection_ping = Field(type=bool, required=True, mutable=False)
    #: int: *Required* connectionPingIntervalMinutes
    connection_ping_interval_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* CCC2ServerPort
    ccc2_server_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* CCC2MaxClientConnections
    ccc2_max_client_connections = Field(type=int, required=True, mutable=False)


class SystemCAPParametersGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemCAPParametersGetListRequest14sp3()``.

    Contains a list of system CAP parameters.  Replaced by
    ``SystemCAPParametersGetResponse19()``
    """

    _ELEMENTS = (
        E("server_port", "serverPort", int, is_required=True),
        E("max_client_connections", "maxClientConnections", int, is_required=True),
        E("enable_connection_ping", "enableConnectionPing", bool, is_required=True),
        E(
            "connection_ping_interval_minutes", "connectionPingIntervalMinutes", int,
            is_required=True,
        ),
        E("ccc2_server_port", "CCC2ServerPort", int, is_required=True),
        E("ccc2_max_client_connections", "CCC2MaxClientConnections", int, is_required=True),
        E("cap_server_call_center_port", "capServerCallCenterPort", int, is_required=True),
        E(
            "cap_server_call_center_max_client_connections",
            "capServerCallCenterMaxClientConnections", int, is_required=True,
        ),
    )

    #: int: *Required* serverPort
    server_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxClientConnections
    max_client_connections = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConnectionPing
    enable_connection_ping = Field(type=bool, required=True, mutable=False)
    #: int: *Required* connectionPingIntervalMinutes
    connection_ping_interval_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* CCC2ServerPort
    ccc2_server_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* CCC2MaxClientConnections
    ccc2_max_client_connections = Field(type=int, required=True, mutable=False)
    #: int: *Required* capServerCallCenterPort
    cap_server_call_center_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* capServerCallCenterMaxClientConnections
    cap_server_call_center_max_client_connections = Field(
        type=int, required=True, mutable=False,
    )


class SystemCAPParametersGetResponse19(OCIResponse):
    """
    Response to ``SystemCAPParametersGetRequest19()``.

    Contains a list of system CAP parameters.
    """

    _ELEMENTS = (
        E("server_port", "serverPort", int, is_required=True),
        E("max_client_connections", "maxClientConnections", int, is_required=True),
        E("enable_connection_ping", "enableConnectionPing", bool, is_required=True),
        E(
            "connection_ping_interval_minutes", "connectionPingIntervalMinutes", int,
            is_required=True,
        ),
        E("ccc2_server_port", "CCC2ServerPort", int, is_required=True),
        E("ccc2_max_client_connections", "CCC2MaxClientConnections", int, is_required=True),
    )

    #: int: *Required* serverPort
    server_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxClientConnections
    max_client_connections = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConnectionPing
    enable_connection_ping = Field(type=bool, required=True, mutable=False)
    #: int: *Required* connectionPingIntervalMinutes
    connection_ping_interval_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* CCC2ServerPort
    ccc2_server_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* CCC2MaxClientConnections
    ccc2_max_client_connections = Field(type=int, required=True, mutable=False)


class SystemCPEConfigGetFileServerListResponse(OCIResponse):
    """
    Response to ``SystemCPEConfigGetFileServerListRequest()``.

    The table columns are: "Device Type", "FTP Host Net Address", "FTP User Id",
    "Directory" and "Passive FTP".

    Replaced By: ``SystemCPEConfigGetFileServerListResponse14sp6()``
    """

    _ELEMENTS = (
        E(
            "file_server_table", "fileServerTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* fileServerTable  *Tabular*
    file_server_table = Field(type=list, required=True, mutable=False)


class SystemCPEConfigGetFileServerListResponse14sp6(OCIResponse):
    """
    Response to ``SystemCPEConfigGetFileServerListRequest14sp6()``.

    The table columns are: "Device Type", "File Repository Name", "Directory", "Extended
    File Repository Name". The following columns are only used in AS data mode: "Extended
    File Repository Name"
    """

    _ELEMENTS = (
        E(
            "file_server_table", "fileServerTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* fileServerTable  *Tabular*
    file_server_table = Field(type=list, required=True, mutable=False)


class SystemCPEConfigParametersGetResponse(OCIResponse):
    """
    Response to ``SystemCPEConfigParametersGetListRequest()``.

    Contains a list of system CPE Config parameters.

    Replaced By: ``SystemCPEConfigParametersGetResponse14sp6()``
    """

    _ELEMENTS = (
        E("enable_ip_device_management", "enableIPDeviceManagement", bool, is_required=True),
        E("ftp_connect_timeout_seconds", "ftpConnectTimeoutSeconds", int, is_required=True),
        E(
            "ftp_file_transfer_timeout_seconds", "ftpFileTransferTimeoutSeconds", int,
            is_required=True,
        ),
    )

    #: bool: *Required* enableIPDeviceManagement
    enable_ip_device_management = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ftpConnectTimeoutSeconds
    ftp_connect_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* ftpFileTransferTimeoutSeconds
    ftp_file_transfer_timeout_seconds = Field(type=int, required=True, mutable=False)


class SystemCPEConfigParametersGetResponse14sp6(OCIResponse):
    """
    Response to ``SystemCPEConfigParametersGetListRequest14sp6()``.

    Contains a list of system CPE Config parameters.
    """

    _ELEMENTS = (
        E("enable_ip_device_management", "enableIPDeviceManagement", bool, is_required=True),
        E("ftp_connect_timeout_seconds", "ftpConnectTimeoutSeconds", int, is_required=True),
        E(
            "ftp_file_transfer_timeout_seconds", "ftpFileTransferTimeoutSeconds", int,
            is_required=True,
        ),
        E(
            "pause_between_file_rebuild_milliseconds",
            "pauseBetweenFileRebuildMilliseconds", int, is_required=True,
        ),
        E("max_busy_time_minutes", "maxBusyTimeMinutes", int, is_required=True),
        E("device_access_app_server_cluster_name", "deviceAccessAppServerClusterName", str),
        E("file_rebuild_immediate", "fileRebuildImmediate", str, is_complex=True),  # unknown
        E("file_rebuild_daily", "fileRebuildDaily", str, is_complex=True),  # unknown
        E("file_rebuild_hourly", "fileRebuildHourly", str, is_complex=True),  # unknown
    )

    #: bool: *Required* enableIPDeviceManagement
    enable_ip_device_management = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ftpConnectTimeoutSeconds
    ftp_connect_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* ftpFileTransferTimeoutSeconds
    ftp_file_transfer_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* pauseBetweenFileRebuildMilliseconds
    pause_between_file_rebuild_milliseconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxBusyTimeMinutes
    max_busy_time_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Optional* deviceAccessAppServerClusterName
    device_access_app_server_cluster_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* fileRebuildImmediate
    file_rebuild_immediate = Field(type=str, required=False, mutable=False)
    #: str: *Optional* fileRebuildDaily
    file_rebuild_daily = Field(type=str, required=False, mutable=False)
    #: str: *Optional* fileRebuildHourly
    file_rebuild_hourly = Field(type=str, required=False, mutable=False)


class SystemCPEConfigParametersGetResponse20(OCIResponse):
    """
    Response to ``SystemCPEConfigParametersGetListRequest20()``.

    Contains a list of system CPE Config parameters.  Replaced by:
    ``SystemCPEConfigParametersGetResponse21()``
    """

    _ELEMENTS = (
        E("enable_ip_device_management", "enableIPDeviceManagement", bool, is_required=True),
        E("ftp_connect_timeout_seconds", "ftpConnectTimeoutSeconds", int, is_required=True),
        E(
            "ftp_file_transfer_timeout_seconds", "ftpFileTransferTimeoutSeconds", int,
            is_required=True,
        ),
        E(
            "pause_between_file_rebuild_milliseconds",
            "pauseBetweenFileRebuildMilliseconds", int, is_required=True,
        ),
        E("max_busy_time_minutes", "maxBusyTimeMinutes", int, is_required=True),
        E("device_access_app_server_cluster_name", "deviceAccessAppServerClusterName", str),
    )

    #: bool: *Required* enableIPDeviceManagement
    enable_ip_device_management = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ftpConnectTimeoutSeconds
    ftp_connect_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* ftpFileTransferTimeoutSeconds
    ftp_file_transfer_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* pauseBetweenFileRebuildMilliseconds
    pause_between_file_rebuild_milliseconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxBusyTimeMinutes
    max_busy_time_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Optional* deviceAccessAppServerClusterName
    device_access_app_server_cluster_name = Field(type=str, required=False, mutable=False)


class SystemCPEConfigParametersGetResponse21(OCIResponse):
    """
    Response to ``SystemCPEConfigParametersGetListRequest21()``.

    Contains a list of system CPE Config parameters.
    """

    _ELEMENTS = (
        E("enable_ip_device_management", "enableIPDeviceManagement", bool, is_required=True),
        E("ftp_connect_timeout_seconds", "ftpConnectTimeoutSeconds", int, is_required=True),
        E(
            "ftp_file_transfer_timeout_seconds", "ftpFileTransferTimeoutSeconds", int,
            is_required=True,
        ),
        E(
            "pause_between_file_rebuild_milliseconds",
            "pauseBetweenFileRebuildMilliseconds", int, is_required=True,
        ),
        E("device_access_app_server_cluster_name", "deviceAccessAppServerClusterName", str),
        E(
            "min_time_between_reset_milliseconds", "minTimeBetweenResetMilliseconds", int,
            is_required=True,
        ),
        E("always_push_files_on_rebuild", "alwaysPushFilesOnRebuild", bool, is_required=True),
        E(
            "max_file_operation_retry_attempts", "maxFileOperationRetryAttempts", int,
            is_required=True,
        ),
        E("enable_auto_rebuild_config", "enableAutoRebuildConfig", bool, is_required=True),
        E("event_queue_size", "eventQueueSize", int, is_required=True),
        E(
            "allow_device_credentials_retrieval", "allowDeviceCredentialsRetrieval", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* enableIPDeviceManagement
    enable_ip_device_management = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ftpConnectTimeoutSeconds
    ftp_connect_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* ftpFileTransferTimeoutSeconds
    ftp_file_transfer_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* pauseBetweenFileRebuildMilliseconds
    pause_between_file_rebuild_milliseconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* deviceAccessAppServerClusterName
    device_access_app_server_cluster_name = Field(type=str, required=False, mutable=False)
    #: int: *Required* minTimeBetweenResetMilliseconds
    min_time_between_reset_milliseconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* alwaysPushFilesOnRebuild
    always_push_files_on_rebuild = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFileOperationRetryAttempts
    max_file_operation_retry_attempts = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableAutoRebuildConfig
    enable_auto_rebuild_config = Field(type=bool, required=True, mutable=False)
    #: int: *Required* eventQueueSize
    event_queue_size = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowDeviceCredentialsRetrieval
    allow_device_credentials_retrieval = Field(type=bool, required=True, mutable=False)


class SystemCallCenterEnhancedReportingBrandingGetResponse(OCIResponse):
    """
    Response to the ``SystemCallCenterEnhancedReportingBrandingGetRequest()``.

    """

    _ELEMENTS = (
        E("branding_choice", "brandingChoice", str, is_required=True),
        E("custom_branding_file_description", "customBrandingFileDescription", str),
    )

    #: str: *Required* brandingChoice
    branding_choice = Field(type=str, required=True, mutable=False)
    #: str: *Optional* customBrandingFileDescription
    custom_branding_file_description = Field(type=str, required=False, mutable=False)


class SystemCallCenterEnhancedReportingGetResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingGetRequest()``.

    """

    _ELEMENTS = (
        E("archive_reports", "archiveReports", bool, is_required=True),
        E("report_application_url", "reportApplicationURL", str),
        E("repository_application_url", "repositoryApplicationURL", str),
    )

    #: bool: *Required* archiveReports
    archive_reports = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* reportApplicationURL
    report_application_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* repositoryApplicationURL
    repository_application_url = Field(type=str, required=False, mutable=False)


class SystemCallCenterEnhancedReportingReportTemplateGetListResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingReportTemplateGetListRequest()``.

    Contains a table with column headings: "Name", "Description", "Is Custom", "Type" and
    "Enabled"
    """

    _ELEMENTS = (
        E(
            "report_template_table", "reportTemplateTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* reportTemplateTable  *Tabular*
    report_template_table = Field(type=list, required=True, mutable=False)


class SystemCallCenterEnhancedReportingReportTemplateGetResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingReportTemplateGetRequest()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E("data_template", "dataTemplate", str, is_required=True),
        E("filter_number", "filterNumber", int),
        E("xslt_template_description", "xsltTemplateDescription", str, is_required=True),
        E("scope", "scope", str, is_required=True),
        E("is_enabled", "isEnabled", bool, is_required=True),
        E("is_realtime_report", "isRealtimeReport", bool),
        E("call_completion_threshold_param", "callCompletionThresholdParam", str),
        E("short_duration_threshold_param", "shortDurationThresholdParam", str),
        E("service_level_threshold_param", "serviceLevelThresholdParam", str),
        E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
        E(
            "service_level_objective_threshold_param",
            "serviceLevelObjectiveThresholdParam", str,
        ),
        E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
        E("service_level_threshold_param_number", "serviceLevelThresholdParamNumber", int),
        E("abandoned_call_threshold_param_number", "abandonedCallThresholdParamNumber", int),
        E("filter_value", "filterValue", str),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* dataTemplate
    data_template = Field(type=str, required=True, mutable=False)
    #: int: *Optional* filterNumber
    filter_number = Field(type=int, required=False, mutable=False)
    #: str: *Required* xsltTemplateDescription
    xslt_template_description = Field(type=str, required=True, mutable=False)
    #: str: *Required* scope
    scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isEnabled
    is_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* isRealtimeReport
    is_realtime_report = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* callCompletionThresholdParam
    call_completion_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* shortDurationThresholdParam
    short_duration_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelThresholdParam
    service_level_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelInclusionsParam
    service_level_inclusions_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelObjectiveThresholdParam
    service_level_objective_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* abandonedCallThresholdParam
    abandoned_call_threshold_param = Field(type=str, required=False, mutable=False)
    #: int: *Optional* serviceLevelThresholdParamNumber
    service_level_threshold_param_number = Field(type=int, required=False, mutable=False)
    #: int: *Optional* abandonedCallThresholdParamNumber
    abandoned_call_threshold_param_number = Field(type=int, required=False, mutable=False)
    #: str: *Optional* filterValue
    filter_value = Field(type=str, required=False, mutable=False)


class SystemCallCenterEnhancedReportingScheduledReportGetActiveListResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingScheduledReportGetActiveListRequest()``
    Contains a table with column headings : "Scheduled Report Name", "Description",
    "Service Provider Id", "Is Enterprise", "Group Id", "Created By", "Is Supervisor
    Report", "Report Template Name", "Report Template Level" and "Recurring".

    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and
    "Yearly". The possible values for "Report Template Level" are "System", "Enterprise"
    and "Group". For the rows with "Is Enterprise" column value "true", the "Group Id"
    column will be empty.
    """

    _ELEMENTS = (
        E(
            "scheduled_report_table", "scheduledReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduledReportTable  *Tabular*
    scheduled_report_table = Field(type=list, required=True, mutable=False)


class SystemCallCenterEnhancedReportingScheduledReportGetCompletedListResponse(OCIResponse):
    """
    Response to
    ``SystemCallCenterEnhancedReportingScheduledReportGetCompletedListRequest()`` Contains
    a table with column headings : "Scheduled Report Name", "Description", "Service
    Provider Id", "Is Enterprise", "Group Id", "Created By", "Is Supervisor Report",
    "Report Template Name", "Report Template Level" and "Recurring".

    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and
    "Yearly". The possible values for "Report Template Level" are "System", "Enterprise"
    and "Group". For the rows with "Is Enterprise" column value "true", the "Group Id"
    column will be empty.
    """

    _ELEMENTS = (
        E(
            "scheduled_report_table", "scheduledReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduledReportTable  *Tabular*
    scheduled_report_table = Field(type=list, required=True, mutable=False)


class SystemCallCenterEnhancedReportingScheduledReportGetListResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingScheduledReportGetListRequest()``.

    Contains a table with column headings : "Scheduled Report Name", "Description",
    "Service Provider Id", "Is Enterprise", "Group Id", "Created By", "Is Supervisor
    Report", "Status", "Report Template Name", "Report Template Level" and "Recurring".
    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Status" are "Active", and "Completed". The possible values
    for "Recurring" are "None", "Daily", "Weekly", "Monthly" and "Yearly". The possible
    values for "Report Template Level" are "System", "Enterprise" and "Group". For the
    rows with "Is Enterprise" column value "true", the "Group Id" column will be empty.
    """

    _ELEMENTS = (
        E(
            "scheduled_report_table", "scheduledReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduledReportTable  *Tabular*
    scheduled_report_table = Field(type=list, required=True, mutable=False)


class SystemCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse(OCIResponse):
    """
    Response to
    ``SystemCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest()``.

    Contains a table with column headings: "Schedule Name", "Organization Type", "Service
    Provider Id", "Group Id", "Created By", "Created By Supervisor", and "Is Active". The
    "Organization Type" is either "Service Provider" or "Enterprise". The "Created By" can
    be either "Administrator" or user id if created by supervisor.  The possible values
    for "Created By Supervisor" are "true" and "false".
    """

    _ELEMENTS = (
        E(
            "schedule_report_table", "scheduleReportTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* scheduleReportTable  *Tabular*
    schedule_report_table = Field(type=list, required=True, mutable=False)


class SystemCallCenterEnhancedReportingScheduledTaskParametersGetResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingScheduledTaskParametersGetRequest()``
    """

    _ELEMENTS = (
        E(
            "scheduled_report_search_interval_minutes",
            "scheduledReportSearchIntervalMinutes", int, is_required=True,
        ),
        E(
            "maximum_scheduled_reports_per_interval",
            "maximumScheduledReportsPerInterval", int, is_required=True,
        ),
        E(
            "delete_scheduled_report_days_after_completion",
            "deleteScheduledReportDaysAfterCompletion", int, is_required=True,
        ),
    )

    #: int: *Required* scheduledReportSearchIntervalMinutes
    scheduled_report_search_interval_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maximumScheduledReportsPerInterval
    maximum_scheduled_reports_per_interval = Field(type=int, required=True, mutable=False)
    #: int: *Required* deleteScheduledReportDaysAfterCompletion
    delete_scheduled_report_days_after_completion = Field(
        type=int, required=True, mutable=False,
    )


class SystemCallCenterGetResponse(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest()``.

    Replaced By: ``SystemCallCenterGetResponse14sp9()``
    """

    _ELEMENTS = (
        E("default_from_address", "defaultFromAddress", str, is_required=True),
    )

    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)


class SystemCallCenterGetResponse14sp9(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest14sp9()``.

    """

    _ELEMENTS = (
        E("default_from_address", "defaultFromAddress", str, is_required=True),
        E(
            "statistics_sampling_period_minutes", "statisticsSamplingPeriodMinutes", int,
            is_required=True,
        ),
    )

    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)
    #: int: *Required* statisticsSamplingPeriodMinutes
    statistics_sampling_period_minutes = Field(type=int, required=True, mutable=False)


class SystemCallCenterGetResponse16(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest16()``.

    """

    _ELEMENTS = (
        E("default_from_address", "defaultFromAddress", str, is_required=True),
        E(
            "statistics_sampling_period_minutes", "statisticsSamplingPeriodMinutes", int,
            is_required=True,
        ),
        E("default_enable_guard_timer", "defaultEnableGuardTimer", bool, is_required=True),
        E("default_guard_timer_seconds", "defaultGuardTimerSeconds", int, is_required=True),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool, is_required=True,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int, is_required=True,
        ),
    )

    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)
    #: int: *Required* statisticsSamplingPeriodMinutes
    statistics_sampling_period_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* defaultEnableGuardTimer
    default_enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* defaultGuardTimerSeconds
    default_guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=True, mutable=False,
    )


class SystemCallCenterGetResponse17(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest17()``.

    Replaced by ``SystemCallCenterGetResponse17sp4()``.
    """

    _ELEMENTS = (
        E("default_from_address", "defaultFromAddress", str, is_required=True),
        E(
            "statistics_sampling_period_minutes", "statisticsSamplingPeriodMinutes", int,
            is_required=True,
        ),
        E("default_enable_guard_timer", "defaultEnableGuardTimer", bool, is_required=True),
        E("default_guard_timer_seconds", "defaultGuardTimerSeconds", int, is_required=True),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool, is_required=True,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int, is_required=True,
        ),
        E(
            "default_play_ring_when_offer_call", "defaultPlayRingWhenOfferCall", bool,
            is_required=True,
        ),
        E(
            "uniform_call_distribution_policy_scope",
            "uniformCallDistributionPolicyScope", str, is_required=True,
        ),
        E(
            "call_handling_sampling_period_minutes", "callHandlingSamplingPeriodMinutes",
            int, is_required=True,
        ),
        E(
            "call_handling_minimum_sampling_size", "callHandlingMinimumSamplingSize", int,
            is_required=True,
        ),
        E(
            "play_tone_to_agent_for_emergency_call", "playToneToAgentForEmergencyCall",
            bool, is_required=True,
        ),
        E("emergency_call_clid_prefix", "emergencyCallCLIDPrefix", str, is_required=True),
    )

    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)
    #: int: *Required* statisticsSamplingPeriodMinutes
    statistics_sampling_period_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* defaultEnableGuardTimer
    default_enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* defaultGuardTimerSeconds
    default_guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* defaultPlayRingWhenOfferCall
    default_play_ring_when_offer_call = Field(type=bool, required=True, mutable=False)
    #: str: *Required* uniformCallDistributionPolicyScope
    uniform_call_distribution_policy_scope = Field(type=str, required=True, mutable=False)
    #: int: *Required* callHandlingSamplingPeriodMinutes
    call_handling_sampling_period_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* callHandlingMinimumSamplingSize
    call_handling_minimum_sampling_size = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playToneToAgentForEmergencyCall
    play_tone_to_agent_for_emergency_call = Field(type=bool, required=True, mutable=False)
    #: str: *Required* emergencyCallCLIDPrefix
    emergency_call_clid_prefix = Field(type=str, required=True, mutable=False)


class SystemCallCenterGetResponse17sp4(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest17sp4()``.

    Replaced by: ``SystemCallCenterGetResponse19()``.
    """

    _ELEMENTS = (
        E("default_from_address", "defaultFromAddress", str, is_required=True),
        E(
            "statistics_sampling_period_minutes", "statisticsSamplingPeriodMinutes", int,
            is_required=True,
        ),
        E("default_enable_guard_timer", "defaultEnableGuardTimer", bool, is_required=True),
        E("default_guard_timer_seconds", "defaultGuardTimerSeconds", int, is_required=True),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool, is_required=True,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_not_reachable",
            "forceAgentUnavailableOnNotReachable", bool, is_required=True,
        ),
        E(
            "default_play_ring_when_offer_call", "defaultPlayRingWhenOfferCall", bool,
            is_required=True,
        ),
        E(
            "uniform_call_distribution_policy_scope",
            "uniformCallDistributionPolicyScope", str, is_required=True,
        ),
        E(
            "call_handling_sampling_period_minutes", "callHandlingSamplingPeriodMinutes",
            int, is_required=True,
        ),
        E(
            "call_handling_minimum_sampling_size", "callHandlingMinimumSamplingSize", int,
            is_required=True,
        ),
        E(
            "play_tone_to_agent_for_emergency_call", "playToneToAgentForEmergencyCall",
            bool, is_required=True,
        ),
        E("emergency_call_clid_prefix", "emergencyCallCLIDPrefix", str, is_required=True),
    )

    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)
    #: int: *Required* statisticsSamplingPeriodMinutes
    statistics_sampling_period_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* defaultEnableGuardTimer
    default_enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* defaultGuardTimerSeconds
    default_guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* forceAgentUnavailableOnNotReachable
    force_agent_unavailable_on_not_reachable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* defaultPlayRingWhenOfferCall
    default_play_ring_when_offer_call = Field(type=bool, required=True, mutable=False)
    #: str: *Required* uniformCallDistributionPolicyScope
    uniform_call_distribution_policy_scope = Field(type=str, required=True, mutable=False)
    #: int: *Required* callHandlingSamplingPeriodMinutes
    call_handling_sampling_period_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* callHandlingMinimumSamplingSize
    call_handling_minimum_sampling_size = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playToneToAgentForEmergencyCall
    play_tone_to_agent_for_emergency_call = Field(type=bool, required=True, mutable=False)
    #: str: *Required* emergencyCallCLIDPrefix
    emergency_call_clid_prefix = Field(type=str, required=True, mutable=False)


class SystemCallCenterGetResponse19(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest19()``.

    Replaced by ``SystemCallCenterGetRequest21()``.
    """

    _ELEMENTS = (
        E("default_from_address", "defaultFromAddress", str, is_required=True),
        E(
            "statistics_sampling_period_minutes", "statisticsSamplingPeriodMinutes", int,
            is_required=True,
        ),
        E("default_enable_guard_timer", "defaultEnableGuardTimer", bool, is_required=True),
        E("default_guard_timer_seconds", "defaultGuardTimerSeconds", int, is_required=True),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool, is_required=True,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_not_reachable",
            "forceAgentUnavailableOnNotReachable", bool, is_required=True,
        ),
        E(
            "default_play_ring_when_offer_call", "defaultPlayRingWhenOfferCall", bool,
            is_required=True,
        ),
        E(
            "uniform_call_distribution_policy_scope",
            "uniformCallDistributionPolicyScope", str, is_required=True,
        ),
        E(
            "call_handling_sampling_period_minutes", "callHandlingSamplingPeriodMinutes",
            int, is_required=True,
        ),
        E(
            "call_handling_minimum_sampling_size", "callHandlingMinimumSamplingSize", int,
            is_required=True,
        ),
        E(
            "play_tone_to_agent_for_emergency_call", "playToneToAgentForEmergencyCall",
            bool, is_required=True,
        ),
        E("emergency_call_clid_prefix", "emergencyCallCLIDPrefix", str, is_required=True),
        E(
            "threshold_crossing_notification_email_guard_timer_seconds",
            "thresholdCrossingNotificationEmailGuardTimerSeconds", int, is_required=True,
        ),
    )

    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)
    #: int: *Required* statisticsSamplingPeriodMinutes
    statistics_sampling_period_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* defaultEnableGuardTimer
    default_enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* defaultGuardTimerSeconds
    default_guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* forceAgentUnavailableOnNotReachable
    force_agent_unavailable_on_not_reachable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* defaultPlayRingWhenOfferCall
    default_play_ring_when_offer_call = Field(type=bool, required=True, mutable=False)
    #: str: *Required* uniformCallDistributionPolicyScope
    uniform_call_distribution_policy_scope = Field(type=str, required=True, mutable=False)
    #: int: *Required* callHandlingSamplingPeriodMinutes
    call_handling_sampling_period_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* callHandlingMinimumSamplingSize
    call_handling_minimum_sampling_size = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playToneToAgentForEmergencyCall
    play_tone_to_agent_for_emergency_call = Field(type=bool, required=True, mutable=False)
    #: str: *Required* emergencyCallCLIDPrefix
    emergency_call_clid_prefix = Field(type=str, required=True, mutable=False)
    #: int: *Required* thresholdCrossingNotificationEmailGuardTimerSeconds
    threshold_crossing_notification_email_guard_timer_seconds = Field(
        type=int, required=True, mutable=False,
    )


class SystemCallCenterGetResponse21(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest21()``.

    """

    _ELEMENTS = (
        E("default_from_address", "defaultFromAddress", str, is_required=True),
        E(
            "statistics_sampling_period_minutes", "statisticsSamplingPeriodMinutes", int,
            is_required=True,
        ),
        E("default_enable_guard_timer", "defaultEnableGuardTimer", bool, is_required=True),
        E("default_guard_timer_seconds", "defaultGuardTimerSeconds", int, is_required=True),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool, is_required=True,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int, is_required=True,
        ),
        E(
            "force_agent_unavailable_on_not_reachable",
            "forceAgentUnavailableOnNotReachable", bool, is_required=True,
        ),
        E(
            "default_play_ring_when_offer_call", "defaultPlayRingWhenOfferCall", bool,
            is_required=True,
        ),
        E(
            "uniform_call_distribution_policy_scope",
            "uniformCallDistributionPolicyScope", str, is_required=True,
        ),
        E(
            "call_handling_sampling_period_minutes", "callHandlingSamplingPeriodMinutes",
            int, is_required=True,
        ),
        E(
            "call_handling_minimum_sampling_size", "callHandlingMinimumSamplingSize", int,
            is_required=True,
        ),
        E(
            "play_tone_to_agent_for_emergency_call", "playToneToAgentForEmergencyCall",
            bool, is_required=True,
        ),
        E("emergency_call_clid_prefix", "emergencyCallCLIDPrefix", str, is_required=True),
        E(
            "threshold_crossing_notification_email_guard_timer_seconds",
            "thresholdCrossingNotificationEmailGuardTimerSeconds", int, is_required=True,
        ),
        E(
            "allow_agent_device_initiated_forward", "allowAgentDeviceInitiatedForward",
            bool, is_required=True,
        ),
    )

    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)
    #: int: *Required* statisticsSamplingPeriodMinutes
    statistics_sampling_period_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* defaultEnableGuardTimer
    default_enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* defaultGuardTimerSeconds
    default_guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* forceAgentUnavailableOnNotReachable
    force_agent_unavailable_on_not_reachable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* defaultPlayRingWhenOfferCall
    default_play_ring_when_offer_call = Field(type=bool, required=True, mutable=False)
    #: str: *Required* uniformCallDistributionPolicyScope
    uniform_call_distribution_policy_scope = Field(type=str, required=True, mutable=False)
    #: int: *Required* callHandlingSamplingPeriodMinutes
    call_handling_sampling_period_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* callHandlingMinimumSamplingSize
    call_handling_minimum_sampling_size = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playToneToAgentForEmergencyCall
    play_tone_to_agent_for_emergency_call = Field(type=bool, required=True, mutable=False)
    #: str: *Required* emergencyCallCLIDPrefix
    emergency_call_clid_prefix = Field(type=str, required=True, mutable=False)
    #: int: *Required* thresholdCrossingNotificationEmailGuardTimerSeconds
    threshold_crossing_notification_email_guard_timer_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* allowAgentDeviceInitiatedForward
    allow_agent_device_initiated_forward = Field(type=bool, required=True, mutable=False)


class SystemCallCenterReportingServerGetListResponse(OCIResponse):
    """
    Response to ``SystemCallCenterReportingServerGetListRequest()``.

    The table columns are: "Name", "URL", "Net Address", and "Description".
    """

    _ELEMENTS = (
        E(
            "reporting_server_table", "reportingServerTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* reportingServerTable  *Tabular*
    reporting_server_table = Field(type=list, required=True, mutable=False)


class SystemCallMeNowGetResponse(OCIResponse):
    """
    Response to ``SystemCallMeNowGetRequest()``.

    """

    _ELEMENTS = (
        E("passcode_length", "passcodeLength", int, is_required=True),
        E("passcode_timeout_seconds", "passcodeTimeoutSeconds", int, is_required=True),
    )

    #: int: *Required* passcodeLength
    passcode_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* passcodeTimeoutSeconds
    passcode_timeout_seconds = Field(type=int, required=True, mutable=False)


class SystemCallNotifyGetResponse(OCIResponse):
    """
    Response to ``SystemCallNotifyGetRequest()``.

    """

    _ELEMENTS = (
        E("default_from_address", "defaultFromAddress", str, is_required=True),
        E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
        E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
    )

    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useShortSubjectLine
    use_short_subject_line = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDnInMailBody
    use_dn_in_mail_body = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingGetPolicyResponse14(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest14()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)


class SystemCallProcessingGetPolicyResponse14sp1(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest14sp1()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )


class SystemCallProcessingGetPolicyResponse14sp4(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest14sp4()``.

    Replaced By : ``SystemCallProcessingGetPolicyResponse15()``
    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_external_calls_via_private_dialing_plan",
            "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan", bool,
            is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
    override_clid_restriction_for_external_calls_via_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )


class SystemCallProcessingGetPolicyResponse14sp7(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest14sp7()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_external_calls_via_private_dialing_plan",
            "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan", bool,
            is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
    override_clid_restriction_for_external_calls_via_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )


class SystemCallProcessingGetPolicyResponse15(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest15()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )


class SystemCallProcessingGetPolicyResponse15sp2(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest15sp2()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )


class SystemCallProcessingGetPolicyResponse16(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest16()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )


class SystemCallProcessingGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest16sp2()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingGetPolicyResponse17(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest17()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest17sp3()``.

    The following elements are only used in AS data mode: enableDialableCallerID
    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingGetPolicyResponse17sp4(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest17sp4()``.

    The following elements are only used in AS data mode: enableDialableCallerID
    allowConfigurableCLIDForRedirectingIdentity
    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )


class SystemCallProcessingGetPolicyResponse18sp1(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest18sp1()``.

    The following elements are only used in AS data mode: enableDialableCallerID
    allowConfigurableCLIDForRedirectingIdentity enterpriseCallsCLIDPolicy
    enterpriseGroupCallsCLIDPolicy serviceProviderGroupCallsCLIDPolicy Replaced by:
    ``SystemCallProcessingGetPolicyResponse19sp1()``
    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)


class SystemCallProcessingGetPolicyResponse19sp1(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest19sp1()``.

    The following elements are only used in AS data mode: enableDialableCallerID
    allowConfigurableCLIDForRedirectingIdentity enterpriseCallsCLIDPolicy
    enterpriseGroupCallsCLIDPolicy serviceProviderGroupCallsCLIDPolicy
    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)


class SystemCallProcessingPolicyProfileAutoAttendantProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileAutoAttendantProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingPolicyProfileBroadWorksAnywhereProfileGetResponse(OCIResponse):
    """
    Response to
    ``SystemCallProcessingPolicyProfileBroadWorksAnywhereProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingPolicyProfileCallCenterProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileCallCenterProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingPolicyProfileCollaborateProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileCollaborateProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingPolicyProfileFindMeFollowMeProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileFindMeFollowMeProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingPolicyProfileFlexibleSeatingHostProfileGetResponse(OCIResponse):
    """
    Response to
    ``SystemCallProcessingPolicyProfileFlexibleSeatingHostProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )


class SystemCallProcessingPolicyProfileGetAssignedNCOSListResponse(OCIResponse):
    """
    Response to the ``SystemCallProcessingPolicyProfileGetAssignedNCOSListRequest()``.

    The response contains a table of all Network Classes of Service that contain the
    specific CAllP Policy Profile.  The column headings are "Name" and "Description".
    """

    _ELEMENTS = (
        E(
            "network_class_of_service_table", "networkClassOfServiceTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* networkClassOfServiceTable  *Tabular*
    network_class_of_service_table = Field(type=list, required=True, mutable=False)


class SystemCallProcessingPolicyProfileGetListResponse(OCIResponse):
    """
    Response to the ``SystemCallProcessingPolicyProfileGetListRequest()``.

    The response contains a table of all Call Processing Policy Profiles in the system.
    The column headings are "Name" and "Description".
    """

    _ELEMENTS = (
        E(
            "call_processing_policy_profiles_table", "callProcessingPolicyProfilesTable",
            list, is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callProcessingPolicyProfilesTable  *Tabular*
    call_processing_policy_profiles_table = Field(type=list, required=True, mutable=False)


class SystemCallProcessingPolicyProfileGetResponse(OCIResponse):
    """
    Response to a ``SystemCallProcessingPolicyProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E("assigned_subscriber_type", "assignedSubscriberType", str, is_array=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* assignedSubscriberType  *Array*
    assigned_subscriber_type = Field(type=list, required=False, mutable=False)


class SystemCallProcessingPolicyProfileGetResponse20(OCIResponse):
    """
    Response to a ``SystemCallProcessingPolicyProfileGetRequest20()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E("assigned_subscriber_type", "assignedSubscriberType", str, is_array=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* assignedSubscriberType  *Array*
    assigned_subscriber_type = Field(type=list, required=False, mutable=False)


class SystemCallProcessingPolicyProfileGetResponse21(OCIResponse):
    """
    Response to a ``SystemCallProcessingPolicyProfileGetRequest21()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E("assigned_subscriber_type", "assignedSubscriberType", str, is_array=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* assignedSubscriberType  *Array*
    assigned_subscriber_type = Field(type=list, required=False, mutable=False)


class SystemCallProcessingPolicyProfileGroupPagingProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileGroupPagingProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )


class SystemCallProcessingPolicyProfileHuntGroupProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileHuntGroupProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingPolicyProfileInstantGroupCallProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileInstantGroupCallProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )


class SystemCallProcessingPolicyProfileMeetMeConferencingProfileGetResponse(OCIResponse):
    """
    Response to
    ``SystemCallProcessingPolicyProfileMeetMeConferencingProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingPolicyProfileRoutePointProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileRoutePointProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingPolicyProfileTrunkGroupPilotProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileTrunkGroupPilotProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_media_policy", "useMediaPolicy", bool, is_required=True),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useMediaPolicy
    use_media_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingPolicyProfileUserProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileUserProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_media_policy", "useMediaPolicy", bool, is_required=True),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useMediaPolicy
    use_media_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallProcessingPolicyProfileVoicePortalProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileVoicePortalProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )


class SystemCallProcessingPolicyProfileVoiceXMLProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileVoiceXMLProfileGetRequest()``.

    """

    _ELEMENTS = (
        E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
        E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str, is_required=True),
        E(
            "enterprise_group_calls_clid_policy", "enterpriseGroupCallsCLIDPolicy", str,
            is_required=True,
        ),
        E(
            "service_provider_group_calls_clid_policy",
            "serviceProviderGroupCallsCLIDPolicy", str, is_required=True,
        ),
        E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_translation_routing_policy", "useTranslationRoutingPolicy", bool,
            is_required=True,
        ),
        E("network_usage_selection", "networkUsageSelection", str, is_required=True),
        E(
            "enable_enterprise_extension_dialing", "enableEnterpriseExtensionDialing",
            bool, is_required=True,
        ),
        E(
            "enforce_group_calling_line_identity_restriction",
            "enforceGroupCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "enforce_enterprise_calling_line_identity_restriction",
            "enforceEnterpriseCallingLineIdentityRestriction", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_private_dialing_plan",
            "allowEnterpriseGroupCallTypingForPrivateDialingPlan", bool, is_required=True,
        ),
        E(
            "allow_enterprise_group_call_typing_for_public_dialing_plan",
            "allowEnterpriseGroupCallTypingForPublicDialingPlan", bool, is_required=True,
        ),
        E(
            "override_clid_restriction_for_private_call_category",
            "overrideCLIDRestrictionForPrivateCallCategory", bool, is_required=True,
        ),
        E(
            "use_enterprise_clid_for_private_call_category",
            "useEnterpriseCLIDForPrivateCallCategory", bool, is_required=True,
        ),
        E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useCLIDPolicy
    use_clid_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)
    #: str: *Required* enterpriseCallsCLIDPolicy
    enterprise_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseGroupCallsCLIDPolicy
    enterprise_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderGroupCallsCLIDPolicy
    service_provider_group_calls_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useCallLimitsPolicy
    use_call_limits_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useTranslationRoutingPolicy
    use_translation_routing_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* networkUsageSelection
    network_usage_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseExtensionDialing
    enable_enterprise_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceGroupCallingLineIdentityRestriction
    enforce_group_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enforceEnterpriseCallingLineIdentityRestriction
    enforce_enterprise_calling_line_identity_restriction = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPrivateDialingPlan
    allow_enterprise_group_call_typing_for_private_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowEnterpriseGroupCallTypingForPublicDialingPlan
    allow_enterprise_group_call_typing_for_public_dialing_plan = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* overrideCLIDRestrictionForPrivateCallCategory
    override_clid_restriction_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useEnterpriseCLIDForPrivateCallCategory
    use_enterprise_clid_for_private_call_category = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useIncomingCLIDPolicy
    use_incoming_clid_policy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class SystemCallRecordingGetPlatformListResponse(OCIResponse):
    """
    Response to ``SystemCallRecordingGetPlatformListRequest()``.

    Contains the default system Call Recording platform and a table with columns headings
    "Name", "Net Address", "Port", "Transport Type", "Media Stream", "Description",
    "Schema Version", "Support Video Rec". The system default recording platform also
    appears in the table with the other platforms.  The possible values for "Support Video
    Rec" can be either true or false.  Schema version values include: 1.0, 2.0, 3.0
    """

    _ELEMENTS = (
        E("system_default", "systemDefault", str),
        E(
            "call_recording_platform_table", "callRecordingPlatformTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: str: *Optional* systemDefault
    system_default = Field(type=str, required=False, mutable=False)
    #: list: *Required* callRecordingPlatformTable  *Tabular*
    call_recording_platform_table = Field(type=list, required=True, mutable=False)


class SystemCallRecordingGetPlatformUsageResponse(OCIResponse):
    """
    Response to ``SystemCallRecordingGetPlatformUsageRequest()``.

    The response contains a table with columns headings "Service Provider Id", "Group Id".
    """

    _ELEMENTS = (
        E(
            "group_table", "groupTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* groupTable  *Tabular*
    group_table = Field(type=list, required=True, mutable=False)


class SystemCallRecordingGetResponse(OCIResponse):
    """
    Response to ``SystemCallRecordingGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "continue_call_after_recording_failure", "continueCallAfterRecordingFailure",
            bool, is_required=True,
        ),
        E("refresh_period_seconds", "refreshPeriodSeconds", int, is_required=True),
        E("max_consecutive_failures", "maxConsecutiveFailures", int, is_required=True),
        E(
            "max_response_wait_time_milliseconds", "maxResponseWaitTimeMilliseconds", int,
            is_required=True,
        ),
        E(
            "continue_call_after_video_recording_failure",
            "continueCallAfterVideoRecordingFailure", bool, is_required=True,
        ),
    )

    #: bool: *Required* continueCallAfterRecordingFailure
    continue_call_after_recording_failure = Field(type=bool, required=True, mutable=False)
    #: int: *Required* refreshPeriodSeconds
    refresh_period_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxConsecutiveFailures
    max_consecutive_failures = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxResponseWaitTimeMilliseconds
    max_response_wait_time_milliseconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* continueCallAfterVideoRecordingFailure
    continue_call_after_video_recording_failure = Field(
        type=bool, required=True, mutable=False,
    )


class SystemCallReturnGetResponse(OCIResponse):
    """
    Response to ``SystemCallReturnGetRequest()``.

    """

    _ELEMENTS = (
        E("two_level_activation", "twoLevelActivation", bool, is_required=True),
        E("provide_date", "provideDate", bool, is_required=True),
        E("last_unanswered_call_only", "lastUnansweredCallOnly", bool, is_required=True),
        E("confirmation_key", "confirmationKey", str),
        E("allow_restricted_number", "allowRestrictedNumber", bool, is_required=True),
        E(
            "delete_number_after_answered_call_return",
            "deleteNumberAfterAnsweredCallReturn", bool, is_required=True,
        ),
    )

    #: bool: *Required* twoLevelActivation
    two_level_activation = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* provideDate
    provide_date = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* lastUnansweredCallOnly
    last_unanswered_call_only = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* confirmationKey
    confirmation_key = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowRestrictedNumber
    allow_restricted_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* deleteNumberAfterAnsweredCallReturn
    delete_number_after_answered_call_return = Field(type=bool, required=True, mutable=False)


class SystemCallTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemCallTypeGetListRequest()``.

    """

    _ELEMENTS = (
        E("call_type", "callType", str, is_required=True),
    )

    #: str: *Required* callType
    call_type = Field(type=str, required=True, mutable=False)


class SystemCallTypeGetMappingListResponse(OCIResponse):
    """
    Response to ``SystemCallTypeGetMappingListRequest()``.

    The table columns are: "Country Code", "Digit Map" and "Call Type".
    """

    _ELEMENTS = (
        E(
            "call_type_mapping", "callTypeMapping", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callTypeMapping  *Tabular*
    call_type_mapping = Field(type=list, required=True, mutable=False)


class SystemCallWaitingGetResponse(OCIResponse):
    """
    Response to ``SystemCallWaitingGetRequest()``.

    """

    _ELEMENTS = (
        E("play_distinctive_ringback", "playDistinctiveRingback", bool, is_required=True),
    )

    #: bool: *Required* playDistinctiveRingback
    play_distinctive_ringback = Field(type=bool, required=True, mutable=False)


class SystemCallingNameRetrievalGetResponse14(OCIResponse):
    """
    Response to ``SystemCallingNameRetrievalGetRequest14()``.

    """

    _ELEMENTS = (
        E("query_timer_milli_seconds", "queryTimerMilliSeconds", int, is_required=True),
        E("server_net_address", "serverNetAddress", str),
        E("server_port", "serverPort", int),
        E("server_transport_protocol", "serverTransportProtocol", str, is_required=True),
    )

    #: int: *Required* queryTimerMilliSeconds
    query_timer_milli_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* serverNetAddress
    server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* serverPort
    server_port = Field(type=int, required=False, mutable=False)
    #: str: *Required* serverTransportProtocol
    server_transport_protocol = Field(type=str, required=True, mutable=False)


class SystemCallingNameRetrievalGetResponse16sp1(OCIResponse):
    """
    Response to ``SystemCallingNameRetrievalGetRequest16sp1()``.

    """

    _ELEMENTS = (
        E(
            "trigger_cnam_queries_for_all_network_calls",
            "triggerCNAMQueriesForAllNetworkCalls", bool, is_required=True,
        ),
        E(
            "trigger_cnam_queries_for_group_and_enterprise_calls",
            "triggerCNAMQueriesForGroupAndEnterpriseCalls", bool, is_required=True,
        ),
        E("query_protocol", "queryProtocol", str, is_required=True),
        E("query_timeout_milliseconds", "queryTimeoutMilliseconds", int, is_required=True),
        E("sip_external_database_net_address", "sipExternalDatabaseNetAddress", str),
        E("sip_external_database_port", "sipExternalDatabasePort", int),
        E(
            "sip_external_database_transport", "sipExternalDatabaseTransport", str,
            is_required=True,
        ),
        E("soap_external_database_net_address", "soapExternalDatabaseNetAddress", str),
        E("soap_supports_dnssrv", "soapSupportsDNSSRV", bool, is_required=True),
    )

    #: bool: *Required* triggerCNAMQueriesForAllNetworkCalls
    trigger_cnam_queries_for_all_network_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* triggerCNAMQueriesForGroupAndEnterpriseCalls
    trigger_cnam_queries_for_group_and_enterprise_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* queryProtocol
    query_protocol = Field(type=str, required=True, mutable=False)
    #: int: *Required* queryTimeoutMilliseconds
    query_timeout_milliseconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* sipExternalDatabaseNetAddress
    sip_external_database_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* sipExternalDatabasePort
    sip_external_database_port = Field(type=int, required=False, mutable=False)
    #: str: *Required* sipExternalDatabaseTransport
    sip_external_database_transport = Field(type=str, required=True, mutable=False)
    #: str: *Optional* soapExternalDatabaseNetAddress
    soap_external_database_net_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* soapSupportsDNSSRV
    soap_supports_dnssrv = Field(type=bool, required=True, mutable=False)


class SystemCallingNameRetrievalGetResponse17sp4(OCIResponse):
    """
    Response to ``SystemCallingNameRetrievalGetRequest17sp4()``.

    """

    _ELEMENTS = (
        E(
            "trigger_cnam_queries_for_all_network_calls",
            "triggerCNAMQueriesForAllNetworkCalls", bool, is_required=True,
        ),
        E(
            "trigger_cnam_queries_for_group_and_enterprise_calls",
            "triggerCNAMQueriesForGroupAndEnterpriseCalls", bool, is_required=True,
        ),
        E("query_protocol", "queryProtocol", str, is_required=True),
        E("query_timeout_milliseconds", "queryTimeoutMilliseconds", int, is_required=True),
        E("sip_external_database_net_address", "sipExternalDatabaseNetAddress", str),
        E("sip_external_database_port", "sipExternalDatabasePort", int),
        E(
            "sip_external_database_transport", "sipExternalDatabaseTransport", str,
            is_required=True,
        ),
        E("soap_external_database_net_address", "soapExternalDatabaseNetAddress", str),
        E("soap_supports_dnssrv", "soapSupportsDNSSRV", bool, is_required=True),
        E("calling_name_source", "callingNameSource", str, is_required=True),
    )

    #: bool: *Required* triggerCNAMQueriesForAllNetworkCalls
    trigger_cnam_queries_for_all_network_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* triggerCNAMQueriesForGroupAndEnterpriseCalls
    trigger_cnam_queries_for_group_and_enterprise_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* queryProtocol
    query_protocol = Field(type=str, required=True, mutable=False)
    #: int: *Required* queryTimeoutMilliseconds
    query_timeout_milliseconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* sipExternalDatabaseNetAddress
    sip_external_database_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* sipExternalDatabasePort
    sip_external_database_port = Field(type=int, required=False, mutable=False)
    #: str: *Required* sipExternalDatabaseTransport
    sip_external_database_transport = Field(type=str, required=True, mutable=False)
    #: str: *Optional* soapExternalDatabaseNetAddress
    soap_external_database_net_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* soapSupportsDNSSRV
    soap_supports_dnssrv = Field(type=bool, required=True, mutable=False)
    #: str: *Required* callingNameSource
    calling_name_source = Field(type=str, required=True, mutable=False)


class SystemCallingNameRetrievalGetResponse20(OCIResponse):
    """
    Response to ``SystemCallingNameRetrievalGetRequest20()``.

    """

    _ELEMENTS = (
        E(
            "trigger_cnam_queries_for_all_network_calls",
            "triggerCNAMQueriesForAllNetworkCalls", bool, is_required=True,
        ),
        E(
            "trigger_cnam_queries_for_group_and_enterprise_calls",
            "triggerCNAMQueriesForGroupAndEnterpriseCalls", bool, is_required=True,
        ),
        E("query_protocol", "queryProtocol", str, is_required=True),
        E("query_timeout_milliseconds", "queryTimeoutMilliseconds", int, is_required=True),
        E("sip_external_database_net_address", "sipExternalDatabaseNetAddress", str),
        E("sip_external_database_port", "sipExternalDatabasePort", int),
        E(
            "sip_external_database_transport", "sipExternalDatabaseTransport", str,
            is_required=True,
        ),
        E("soap_external_database_net_address", "soapExternalDatabaseNetAddress", str),
        E("calling_name_source", "callingNameSource", str, is_required=True),
        E("route_advance_timer", "routeAdvanceTimer", int, is_required=True),
        E(
            "retry_failed_cnam_server_interval", "retryFailedCNAMServerInterval", int,
            is_required=True,
        ),
        E(
            "ignore_restricted_presentation_indicator",
            "ignoreRestrictedPresentationIndicator", bool, is_required=True,
        ),
        E("supports_dnssrv", "supportsDNSSRV", bool, is_required=True),
    )

    #: bool: *Required* triggerCNAMQueriesForAllNetworkCalls
    trigger_cnam_queries_for_all_network_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* triggerCNAMQueriesForGroupAndEnterpriseCalls
    trigger_cnam_queries_for_group_and_enterprise_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* queryProtocol
    query_protocol = Field(type=str, required=True, mutable=False)
    #: int: *Required* queryTimeoutMilliseconds
    query_timeout_milliseconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* sipExternalDatabaseNetAddress
    sip_external_database_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* sipExternalDatabasePort
    sip_external_database_port = Field(type=int, required=False, mutable=False)
    #: str: *Required* sipExternalDatabaseTransport
    sip_external_database_transport = Field(type=str, required=True, mutable=False)
    #: str: *Optional* soapExternalDatabaseNetAddress
    soap_external_database_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* callingNameSource
    calling_name_source = Field(type=str, required=True, mutable=False)
    #: int: *Required* routeAdvanceTimer
    route_advance_timer = Field(type=int, required=True, mutable=False)
    #: int: *Required* retryFailedCNAMServerInterval
    retry_failed_cnam_server_interval = Field(type=int, required=True, mutable=False)
    #: bool: *Required* ignoreRestrictedPresentationIndicator
    ignore_restricted_presentation_indicator = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportsDNSSRV
    supports_dnssrv = Field(type=bool, required=True, mutable=False)


class SystemCallingPartyCategoryGetListResponse(OCIResponse):
    """
    Response to ``SystemCallingPartyCategoryGetListRequest()``.

    Contains a table of Calling Party Category defined in system.  The column headings
    are: "Category Name", "User Category", "Collect Call", "Default" and "Web Display
    Key".
    """

    _ELEMENTS = (
        E(
            "calling_party_category_table", "callingPartyCategoryTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callingPartyCategoryTable  *Tabular*
    calling_party_category_table = Field(type=list, required=True, mutable=False)


class SystemCallingPartyCategoryGetResponse(OCIResponse):
    """
    Response to ``SystemCallingPartyCategoryGetRequest()``.

    Contains information of a Calling Party Category defined in system.
    """

    _ELEMENTS = (
        E("cpc_value", "cpcValue", str),
        E("isup_oli_value", "isupOliValue", int),
        E("gtd_oli_value", "gtdOliValue", str),
        E("user_category", "userCategory", bool, is_required=True),
        E("pay_phone", "payPhone", bool, is_required=True),
        E("operator", "operator", bool, is_required=True),
        E("default", "default", bool, is_required=True),
        E("collect_call", "collectCall", bool, is_required=True),
        E("web_display_key", "webDisplayKey", str),
    )

    #: str: *Optional* cpcValue
    cpc_value = Field(type=str, required=False, mutable=False)
    #: int: *Optional* isupOliValue
    isup_oli_value = Field(type=int, required=False, mutable=False)
    #: str: *Optional* gtdOliValue
    gtd_oli_value = Field(type=str, required=False, mutable=False)
    #: bool: *Required* userCategory
    user_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* payPhone
    pay_phone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* operator
    operator = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* default
    default = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* collectCall
    collect_call = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webDisplayKey
    web_display_key = Field(type=str, required=False, mutable=False)


class SystemClassmarkGetListResponse(OCIResponse):
    """
    Response to ``SystemClassmarkGetListRequest()``.

    Contains a table of with the column headings: "Class Mark", "Value" and "Web Display
    Key".
    """

    _ELEMENTS = (
        E(
            "classmark_table", "classmarkTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* classmarkTable  *Tabular*
    classmark_table = Field(type=list, required=True, mutable=False)


class SystemClassmarkGetUtilizationListResponse(OCIResponse):
    """
    Response to ``SystemClassmarkGetUtilizationListRequest()``.

    Contains a table with the column headings: "User Id", "Group Id", "Service Provider
    Id", "Last Name", "First Name", and "Phone Number", "Extension", "Department", "Email
    Address".
    """

    _ELEMENTS = (
        E(
            "classmark_user_table", "classmarkUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* classmarkUserTable  *Tabular*
    classmark_user_table = Field(type=list, required=True, mutable=False)


class SystemClientSessionParametersGetResponse(OCIResponse):
    """
    Response to ``SystemClientSessionParametersGetRequest()``.

    Contains a list of system Client Session (web and CLI) parameters.
    """

    _ELEMENTS = (
        E("enable_inactivity_timeout", "enableInactivityTimeout", bool, is_required=True),
        E("inactivity_timeout_minutes", "inactivityTimeoutMinutes", int, is_required=True),
    )

    #: bool: *Required* enableInactivityTimeout
    enable_inactivity_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* inactivityTimeoutMinutes
    inactivity_timeout_minutes = Field(type=int, required=True, mutable=False)


class SystemCodecGetListResponse(OCIResponse):
    """
    Response to ``SystemCodecGetListRequest()``.

    """

    _ELEMENTS = (
        E("codec", "codec", str, is_array=True),
    )

    #: list(str): *Optional* codec  *Array*
    codec = Field(type=list, required=False, mutable=False)


class SystemCommunicationBarringAlternateCallIndicatorGetListResponse(OCIResponse):
    """
    Response to a ``SystemCommunicationBarringAlternateCallIndicatorGetListRequest()``.

    Contains a table with one row per Communication Barring Alternate Call Indicator.  The
    table column headings are: "Alternate Call Indicator" and "Network Server Alternate
    Call Indicator".
    """

    _ELEMENTS = (
        E(
            "alternate_call_indicator_table", "alternateCallIndicatorTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* alternateCallIndicatorTable  *Tabular*
    alternate_call_indicator_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringCallTypeGetListResponse(OCIResponse):
    """
    Response to a ``SystemCommunicationBarringCallTypeGetListRequest()``.

    Contains a table with one row per Communication Barring Call Type.  The table column
    headings are: "Call Type" and "Network Server Call Type".
    """

    _ELEMENTS = (
        E(
            "call_type_table", "callTypeTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* callTypeTable  *Tabular*
    call_type_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringCriteriaGetListResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringCriteriaGetListRequest()``.

    The response contains a table of all Communication Barring Criteria in the system.
    The column headings are "Name" and "Description".
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringCriteriaGetResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringCriteriaGetRequest()``.

    The response contains the Communication Barring Criteria information.  Replaced by:
    ``SystemCommunicationBarringCriteriaGetResponse17()``
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("match_call_type", "matchCallType", str, is_array=True),
        E(
            "match_alternate_call_indicator", "matchAlternateCallIndicator", str,
            is_array=True,
        ),
        E("match_public_network", "matchPublicNetwork", bool, is_required=True),
        E("match_private_network", "matchPrivateNetwork", bool, is_required=True),
        E("match_local_category", "matchLocalCategory", bool, is_required=True),
        E("match_national_category", "matchNationalCategory", bool, is_required=True),
        E("match_interlata_category", "matchInterlataCategory", bool, is_required=True),
        E("match_intralata_category", "matchIntralataCategory", bool, is_required=True),
        E(
            "match_international_category", "matchInternationalCategory", bool,
            is_required=True,
        ),
        E("match_private_category", "matchPrivateCategory", bool, is_required=True),
        E("match_emergency_category", "matchEmergencyCategory", bool, is_required=True),
        E("match_other_category", "matchOtherCategory", bool, is_required=True),
        E("match_inter_network", "matchInterNetwork", bool, is_required=True),
        E("match_inter_hosting_ne", "matchInterHostingNE", bool, is_required=True),
        E("match_inter_as", "matchInterAS", bool, is_required=True),
        E("match_intra_as", "matchIntraAS", bool, is_required=True),
        E("match_charge_calls", "matchChargeCalls", bool, is_required=True),
        E("match_no_charge_calls", "matchNoChargeCalls", bool, is_required=True),
        E("match_group_calls", "matchGroupCalls", bool, is_required=True),
        E("match_enterprise_calls", "matchEnterpriseCalls", bool, is_required=True),
        E("match_network_calls", "matchNetworkCalls", bool, is_required=True),
        E("match_network_url_calls", "matchNetworkURLCalls", bool, is_required=True),
        E("match_repair_calls", "matchRepairCalls", bool, is_required=True),
        E("match_emergency_calls", "matchEmergencyCalls", bool, is_required=True),
        E("match_internal_calls", "matchInternalCalls", bool, is_required=True),
        E("time_schedule", "timeSchedule", str),
        E("holiday_schedule", "holidaySchedule", str),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* matchCallType  *Array*
    match_call_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* matchAlternateCallIndicator  *Array*
    match_alternate_call_indicator = Field(type=list, required=False, mutable=False)
    #: bool: *Required* matchPublicNetwork
    match_public_network = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchPrivateNetwork
    match_private_network = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchLocalCategory
    match_local_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNationalCategory
    match_national_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterlataCategory
    match_interlata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchIntralataCategory
    match_intralata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInternationalCategory
    match_international_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchPrivateCategory
    match_private_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEmergencyCategory
    match_emergency_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchOtherCategory
    match_other_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterNetwork
    match_inter_network = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterHostingNE
    match_inter_hosting_ne = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterAS
    match_inter_as = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchIntraAS
    match_intra_as = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchChargeCalls
    match_charge_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNoChargeCalls
    match_no_charge_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchGroupCalls
    match_group_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEnterpriseCalls
    match_enterprise_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNetworkCalls
    match_network_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNetworkURLCalls
    match_network_url_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchRepairCalls
    match_repair_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEmergencyCalls
    match_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInternalCalls
    match_internal_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* timeSchedule
    time_schedule = Field(type=str, required=False, mutable=False)
    #: str: *Optional* holidaySchedule
    holiday_schedule = Field(type=str, required=False, mutable=False)


class SystemCommunicationBarringCriteriaGetResponse17(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringCriteriaGetRequest17()``.

    The response contains the Communication Barring Criteria information.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("match_call_type", "matchCallType", str, is_array=True),
        E(
            "match_alternate_call_indicator", "matchAlternateCallIndicator", str,
            is_array=True,
        ),
        E("match_virtual_on_net_call_type", "matchVirtualOnNetCallType", str, is_array=True),
        E("match_public_network", "matchPublicNetwork", bool, is_required=True),
        E("match_private_network", "matchPrivateNetwork", bool, is_required=True),
        E("match_local_category", "matchLocalCategory", bool, is_required=True),
        E("match_national_category", "matchNationalCategory", bool, is_required=True),
        E("match_interlata_category", "matchInterlataCategory", bool, is_required=True),
        E("match_intralata_category", "matchIntralataCategory", bool, is_required=True),
        E(
            "match_international_category", "matchInternationalCategory", bool,
            is_required=True,
        ),
        E("match_private_category", "matchPrivateCategory", bool, is_required=True),
        E("match_emergency_category", "matchEmergencyCategory", bool, is_required=True),
        E("match_other_category", "matchOtherCategory", bool, is_required=True),
        E("match_inter_network", "matchInterNetwork", bool, is_required=True),
        E("match_inter_hosting_ne", "matchInterHostingNE", bool, is_required=True),
        E("match_inter_as", "matchInterAS", bool, is_required=True),
        E("match_intra_as", "matchIntraAS", bool, is_required=True),
        E("match_charge_calls", "matchChargeCalls", bool, is_required=True),
        E("match_no_charge_calls", "matchNoChargeCalls", bool, is_required=True),
        E("match_group_calls", "matchGroupCalls", bool, is_required=True),
        E("match_enterprise_calls", "matchEnterpriseCalls", bool, is_required=True),
        E("match_network_calls", "matchNetworkCalls", bool, is_required=True),
        E("match_network_url_calls", "matchNetworkURLCalls", bool, is_required=True),
        E("match_repair_calls", "matchRepairCalls", bool, is_required=True),
        E("match_emergency_calls", "matchEmergencyCalls", bool, is_required=True),
        E("match_internal_calls", "matchInternalCalls", bool, is_required=True),
        E("match_location", "matchLocation", str, is_required=True),
        E("match_roaming", "matchRoaming", str, is_required=True),
        E("time_schedule", "timeSchedule", str),
        E("holiday_schedule", "holidaySchedule", str),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* matchCallType  *Array*
    match_call_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* matchAlternateCallIndicator  *Array*
    match_alternate_call_indicator = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* matchVirtualOnNetCallType  *Array*
    match_virtual_on_net_call_type = Field(type=list, required=False, mutable=False)
    #: bool: *Required* matchPublicNetwork
    match_public_network = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchPrivateNetwork
    match_private_network = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchLocalCategory
    match_local_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNationalCategory
    match_national_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterlataCategory
    match_interlata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchIntralataCategory
    match_intralata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInternationalCategory
    match_international_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchPrivateCategory
    match_private_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEmergencyCategory
    match_emergency_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchOtherCategory
    match_other_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterNetwork
    match_inter_network = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterHostingNE
    match_inter_hosting_ne = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterAS
    match_inter_as = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchIntraAS
    match_intra_as = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchChargeCalls
    match_charge_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNoChargeCalls
    match_no_charge_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchGroupCalls
    match_group_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEnterpriseCalls
    match_enterprise_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNetworkCalls
    match_network_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNetworkURLCalls
    match_network_url_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchRepairCalls
    match_repair_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEmergencyCalls
    match_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInternalCalls
    match_internal_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* matchLocation
    match_location = Field(type=str, required=True, mutable=False)
    #: str: *Required* matchRoaming
    match_roaming = Field(type=str, required=True, mutable=False)
    #: str: *Optional* timeSchedule
    time_schedule = Field(type=str, required=False, mutable=False)
    #: str: *Optional* holidaySchedule
    holiday_schedule = Field(type=str, required=False, mutable=False)


class SystemCommunicationBarringCriteriaGetResponse19sp1(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringCriteriaGetRequest19sp1()``.

    The response contains the Communication Barring Criteria information.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("match_call_type", "matchCallType", str, is_array=True),
        E(
            "match_alternate_call_indicator", "matchAlternateCallIndicator", str,
            is_array=True,
        ),
        E("match_virtual_on_net_call_type", "matchVirtualOnNetCallType", str, is_array=True),
        E("match_public_network", "matchPublicNetwork", bool, is_required=True),
        E("match_private_network", "matchPrivateNetwork", bool, is_required=True),
        E("match_local_category", "matchLocalCategory", bool, is_required=True),
        E("match_national_category", "matchNationalCategory", bool, is_required=True),
        E("match_interlata_category", "matchInterlataCategory", bool, is_required=True),
        E("match_intralata_category", "matchIntralataCategory", bool, is_required=True),
        E(
            "match_international_category", "matchInternationalCategory", bool,
            is_required=True,
        ),
        E("match_private_category", "matchPrivateCategory", bool, is_required=True),
        E("match_emergency_category", "matchEmergencyCategory", bool, is_required=True),
        E("match_other_category", "matchOtherCategory", bool, is_required=True),
        E("match_inter_network", "matchInterNetwork", bool, is_required=True),
        E("match_inter_hosting_ne", "matchInterHostingNE", bool, is_required=True),
        E("match_inter_as", "matchInterAS", bool, is_required=True),
        E("match_intra_as", "matchIntraAS", bool, is_required=True),
        E("match_charge_calls", "matchChargeCalls", bool, is_required=True),
        E("match_no_charge_calls", "matchNoChargeCalls", bool, is_required=True),
        E("match_group_calls", "matchGroupCalls", bool, is_required=True),
        E("match_enterprise_calls", "matchEnterpriseCalls", bool, is_required=True),
        E("match_network_calls", "matchNetworkCalls", bool, is_required=True),
        E("match_network_url_calls", "matchNetworkURLCalls", bool, is_required=True),
        E("match_repair_calls", "matchRepairCalls", bool, is_required=True),
        E("match_emergency_calls", "matchEmergencyCalls", bool, is_required=True),
        E("match_internal_calls", "matchInternalCalls", bool, is_required=True),
        E("match_location", "matchLocation", str, is_required=True),
        E("match_roaming", "matchRoaming", str, is_required=True),
        E("time_schedule", "timeSchedule", str),
        E("holiday_schedule", "holidaySchedule", str),
        E(
            "match_number_portability_status", "matchNumberPortabilityStatus", str,
            is_array=True,
        ),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* matchCallType  *Array*
    match_call_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* matchAlternateCallIndicator  *Array*
    match_alternate_call_indicator = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* matchVirtualOnNetCallType  *Array*
    match_virtual_on_net_call_type = Field(type=list, required=False, mutable=False)
    #: bool: *Required* matchPublicNetwork
    match_public_network = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchPrivateNetwork
    match_private_network = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchLocalCategory
    match_local_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNationalCategory
    match_national_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterlataCategory
    match_interlata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchIntralataCategory
    match_intralata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInternationalCategory
    match_international_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchPrivateCategory
    match_private_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEmergencyCategory
    match_emergency_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchOtherCategory
    match_other_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterNetwork
    match_inter_network = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterHostingNE
    match_inter_hosting_ne = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterAS
    match_inter_as = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchIntraAS
    match_intra_as = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchChargeCalls
    match_charge_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNoChargeCalls
    match_no_charge_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchGroupCalls
    match_group_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEnterpriseCalls
    match_enterprise_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNetworkCalls
    match_network_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNetworkURLCalls
    match_network_url_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchRepairCalls
    match_repair_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEmergencyCalls
    match_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInternalCalls
    match_internal_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* matchLocation
    match_location = Field(type=str, required=True, mutable=False)
    #: str: *Required* matchRoaming
    match_roaming = Field(type=str, required=True, mutable=False)
    #: str: *Optional* timeSchedule
    time_schedule = Field(type=str, required=False, mutable=False)
    #: str: *Optional* holidaySchedule
    holiday_schedule = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* matchNumberPortabilityStatus  *Array*
    match_number_portability_status = Field(type=list, required=False, mutable=False)


class SystemCommunicationBarringDigitPatternCriteriaGetListResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringDigitPatternCriteriaGetListRequest()``.

    The response contains a table of all Digit Pattern Criteria defined at the system
    level.  The column headings are "Name" and "Description"
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringDigitPatternCriteriaGetPatternListResponse(OCIResponse):
    """
    Response to the
    ``SystemCommunicationBarringDigitPatternCriteriaGetPatternListRequest()``.

    The response contains the Digit Pattern Criteria information.
    """

    _ELEMENTS = (
        E("match_digit_pattern", "matchDigitPattern", str, is_array=True),
    )

    #: list(str): *Optional* matchDigitPattern  *Array*
    match_digit_pattern = Field(type=list, required=False, mutable=False)


class SystemCommunicationBarringDigitPatternCriteriaGetResponse(OCIResponse):
    """
    The response to a ``SystemCommunicationBarringDigitPatternCriteriaGetRequest()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E("digit_pattern", "digitPattern", str, is_array=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* digitPattern  *Array*
    digit_pattern = Field(type=list, required=False, mutable=False)


class SystemCommunicationBarringGetResponse(OCIResponse):
    """
    Response to ``SystemCommunicationBarringGetRequest()``.

    """

    _ELEMENTS = (
        E("direct_transfer_screening", "directTransferScreening", bool, is_required=True),
    )

    #: bool: *Required* directTransferScreening
    direct_transfer_screening = Field(type=bool, required=True, mutable=False)


class SystemCommunicationBarringIncomingCriteriaGetListResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringIncomingCriteriaGetListRequest()``.

    The response contains a table of all Communication Barring Incoming Criteria in the
    system.  The column headings are "Name" and "Description".
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringIncomingCriteriaGetResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringIncomingCriteriaGetRequest()``.

    The response contains the Communication Barring Incoming Criteria information.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("time_schedule", "timeSchedule", str),
        E("holiday_schedule", "holidaySchedule", str),
        E(
            "match_number_portability_status", "matchNumberPortabilityStatus", str,
            is_array=True,
        ),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* timeSchedule
    time_schedule = Field(type=str, required=False, mutable=False)
    #: str: *Optional* holidaySchedule
    holiday_schedule = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* matchNumberPortabilityStatus  *Array*
    match_number_portability_status = Field(type=list, required=False, mutable=False)


class SystemCommunicationBarringProfileGetCriteriaUsageListResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetCriteriaUsageListRequest()``.

    The response contains a table of system Communication Barring Profiles that use the
    specific Communication Barring Criteria.  The column headings are "Name" and
    "Description"
    """

    _ELEMENTS = (
        E(
            "profile_table", "profileTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* profileTable  *Tabular*
    profile_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringProfileGetDigitPatternCriteriaUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest()``.

    The response contains a table of all Profiles that use the specific Digit Pattern
    Criteria.  The column headings are "Name" and "Description"
    """

    _ELEMENTS = (
        E(
            "profile_table", "profileTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* profileTable  *Tabular*
    profile_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringProfileGetIncomingCriteriaUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemCommunicationBarringProfileGetIncomingCriteriaUsageListRequest()``.

    The response contains a table of system Communication Barring Profiles that use the
    specific Communication Barring Incoming Criteria.  The column headings are "Name" and
    "Description"
    """

    _ELEMENTS = (
        E(
            "profile_table", "profileTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* profileTable  *Tabular*
    profile_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringProfileGetListResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetListRequest()``.

    The response contains a table of all Communication Barring Profiles in the system.
    The column headings are "Name" and "Description"
    """

    _ELEMENTS = (
        E(
            "profile_table", "profileTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* profileTable  *Tabular*
    profile_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringServiceProviderGetCriteriaUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemCommunicationBarringServiceProviderGetCriteriaUsageListRequest()``.

    The response contains a table of all Service Providers that use the specific
    Communication Barring criteria.  The column headings are "Service Provider Id",
    "Service Provider Name" and "Is Enterprise"
    """

    _ELEMENTS = (
        E(
            "service_provider_table", "serviceProviderTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceProviderTable  *Tabular*
    service_provider_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringServiceProviderGetIncomingCriteriaUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemCommunicationBarringServiceProviderGetIncomingCriteriaUsageListRequest()``.

    The response contains a table of all Service Providers that use the specific
    Communication Barring Incoming criteria.  The column headings are "Service Provider
    Id", "Service Provider Name" and "Is Enterprise"
    """

    _ELEMENTS = (
        E(
            "service_provider_table", "serviceProviderTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceProviderTable  *Tabular*
    service_provider_table = Field(type=list, required=True, mutable=False)


class SystemCommunicationBarringUserControlGetResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringUserControlGetRequest()``.

    Contains the settings to whole system for Communication Barring User-Control
    """

    _ELEMENTS = (
        E("enable_lockout", "enableLockout", bool, is_required=True),
        E(
            "max_number_of_failed_attempts", "maxNumberOfFailedAttempts", int,
            is_required=True,
        ),
        E("lockout_minutes", "lockoutMinutes", int, is_required=True),
    )

    #: bool: *Required* enableLockout
    enable_lockout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxNumberOfFailedAttempts
    max_number_of_failed_attempts = Field(type=int, required=True, mutable=False)
    #: int: *Required* lockoutMinutes
    lockout_minutes = Field(type=int, required=True, mutable=False)


class SystemConfigurableFileSystemGetResponse(OCIResponse):
    """
    Response to ``SystemConfigurableFileSystemGetRequest()``.

    Contains the File System parameters.
    """

    _ELEMENTS = (
        E("media_directory", "mediaDirectory", str, is_required=True),
        E("protocol_file", "protocolFile", str, is_complex=True),  # unknown
        E("protocol_web_dav", "protocolWebDAV", str, is_complex=True),  # unknown
    )

    #: str: *Required* mediaDirectory
    media_directory = Field(type=str, required=True, mutable=False)
    #: str: *Optional* protocolFile
    protocol_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* protocolWebDAV
    protocol_web_dav = Field(type=str, required=False, mutable=False)


class SystemConfigurableTreatmentGetListResponse(OCIResponse):
    """
    Response to a ``SystemConfigurableTreatmentGetListRequest()``.

    Contains a table with one row per treatment.  The table columns are: "Treatment Id",
    "Description".
    """

    _ELEMENTS = (
        E(
            "treatment_table", "treatmentTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* treatmentTable  *Tabular*
    treatment_table = Field(type=list, required=True, mutable=False)


class SystemConfigurableTreatmentGetResponse(OCIResponse):
    """
    Response to the ``SystemConfigurableTreatmentGetRequest()``.

    The response contains the treatment configurable information.

    Replaced By: ``SystemConfigurableTreatmentGetResponse16()``
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("charge_indicator", "chargeIndicator", str, is_required=True),
        E("access_sip_status_code", "accessSIPStatusCode", int),
        E("access_sip_status_message", "accessSIPStatusMessage", str),
        E("network_sip_status_code", "networkSIPStatusCode", int),
        E("network_sip_status_message", "networkSIPStatusMessage", str),
        E("q850_cause_value", "q850CauseValue", int),
        E("q850_text", "q850Text", str),
        E("access_treatment_audio_file", "accessTreatmentAudioFile", str),
        E("access_treatment_video_file", "accessTreatmentVideoFile", str),
        E("network_treatment_audio_file", "networkTreatmentAudioFile", str),
        E("network_treatment_video_file", "networkTreatmentVideoFile", str),
        E("cdr_termination_cause", "cdrTerminationCause", str),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("internal_release_cause", "internalReleaseCause", str),
        E("access_send_reason_header", "accessSendReasonHeader", bool, is_required=True),
        E("network_send_reason_header", "networkSendReasonHeader", bool, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* chargeIndicator
    charge_indicator = Field(type=str, required=True, mutable=False)
    #: int: *Optional* accessSIPStatusCode
    access_sip_status_code = Field(type=int, required=False, mutable=False)
    #: str: *Optional* accessSIPStatusMessage
    access_sip_status_message = Field(type=str, required=False, mutable=False)
    #: int: *Optional* networkSIPStatusCode
    network_sip_status_code = Field(type=int, required=False, mutable=False)
    #: str: *Optional* networkSIPStatusMessage
    network_sip_status_message = Field(type=str, required=False, mutable=False)
    #: int: *Optional* q850CauseValue
    q850_cause_value = Field(type=int, required=False, mutable=False)
    #: str: *Optional* q850Text
    q850_text = Field(type=str, required=False, mutable=False)
    #: str: *Optional* accessTreatmentAudioFile
    access_treatment_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* accessTreatmentVideoFile
    access_treatment_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkTreatmentAudioFile
    network_treatment_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkTreatmentVideoFile
    network_treatment_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* cdrTerminationCause
    cdr_termination_cause = Field(type=str, required=False, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* internalReleaseCause
    internal_release_cause = Field(type=str, required=False, mutable=False)
    #: bool: *Required* accessSendReasonHeader
    access_send_reason_header = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* networkSendReasonHeader
    network_send_reason_header = Field(type=bool, required=True, mutable=False)


class SystemConfigurableTreatmentGetResponse16(OCIResponse):
    """
    Response to the ``SystemConfigurableTreatmentGetRequest16()``.

    The response contains the treatment configurable information.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("charge_indicator", "chargeIndicator", str, is_required=True),
        E("access_sip_status_code", "accessSIPStatusCode", int),
        E("access_sip_status_message", "accessSIPStatusMessage", str),
        E("network_sip_status_code", "networkSIPStatusCode", int),
        E("network_sip_status_message", "networkSIPStatusMessage", str),
        E("q850_cause_value", "q850CauseValue", int),
        E("q850_text", "q850Text", str),
        E("access_treatment_audio_file", "accessTreatmentAudioFile", str),
        E("access_treatment_video_file", "accessTreatmentVideoFile", str),
        E("network_treatment_audio_file", "networkTreatmentAudioFile", str),
        E("network_treatment_video_file", "networkTreatmentVideoFile", str),
        E("cdr_termination_cause", "cdrTerminationCause", str),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("internal_release_cause", "internalReleaseCause", str),
        E("access_send_reason_header", "accessSendReasonHeader", bool, is_required=True),
        E("network_send_reason_header", "networkSendReasonHeader", bool, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* chargeIndicator
    charge_indicator = Field(type=str, required=True, mutable=False)
    #: int: *Optional* accessSIPStatusCode
    access_sip_status_code = Field(type=int, required=False, mutable=False)
    #: str: *Optional* accessSIPStatusMessage
    access_sip_status_message = Field(type=str, required=False, mutable=False)
    #: int: *Optional* networkSIPStatusCode
    network_sip_status_code = Field(type=int, required=False, mutable=False)
    #: str: *Optional* networkSIPStatusMessage
    network_sip_status_message = Field(type=str, required=False, mutable=False)
    #: int: *Optional* q850CauseValue
    q850_cause_value = Field(type=int, required=False, mutable=False)
    #: str: *Optional* q850Text
    q850_text = Field(type=str, required=False, mutable=False)
    #: str: *Optional* accessTreatmentAudioFile
    access_treatment_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* accessTreatmentVideoFile
    access_treatment_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkTreatmentAudioFile
    network_treatment_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkTreatmentVideoFile
    network_treatment_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* cdrTerminationCause
    cdr_termination_cause = Field(type=str, required=False, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* internalReleaseCause
    internal_release_cause = Field(type=str, required=False, mutable=False)
    #: bool: *Required* accessSendReasonHeader
    access_send_reason_header = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* networkSendReasonHeader
    network_send_reason_header = Field(type=bool, required=True, mutable=False)


class SystemConnectedLineIdentificationPresentationGetResponse(OCIResponse):
    """
    Response to ``SystemConnectedLineIdentificationPresentationGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "enforce_user_service_assignment", "enforceUserServiceAssignment", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* enforceUserServiceAssignment
    enforce_user_service_assignment = Field(type=bool, required=True, mutable=False)


class SystemCountryCodeGetListResponse(OCIResponse):
    """
    Response to a ``SystemCountryCodeGetListRequest()``.

    Contains the default country code and a table with one row per country code.  The
    table columns are "Country Code", "Country Name", "Off Hook Warning Seconds", "Ring
    Period Milliseconds", "National Prefix", "Use Prefix", "Maximum Call Waiting Tones",
    "Time Between Call Waiting Tones Milliseconds" and "Disable National Prefix for OffNet
    Calls".
    """

    _ELEMENTS = (
        E("default_country_code", "defaultCountryCode", str, is_required=True),
        E(
            "country_code_table", "countryCodeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Required* defaultCountryCode
    default_country_code = Field(type=str, required=True, mutable=False)
    #: list: *Required* countryCodeTable  *Tabular*
    country_code_table = Field(type=list, required=True, mutable=False)


class SystemCrInterfaceGetResponse(OCIResponse):
    """
    Response to the ``SystemCrInterfaceGetRequest()``.

    """

    _ELEMENTS = (
        E("cr_audit_enabled", "crAuditEnabled", bool, is_required=True),
        E(
            "cr_audit_interval_milliseconds", "crAuditIntervalMilliseconds", int,
            is_required=True,
        ),
        E(
            "cr_audit_timeout_milliseconds", "crAuditTimeoutMilliseconds", int,
            is_required=True,
        ),
        E("cr_connection_enabled", "crConnectionEnabled", bool, is_required=True),
        E(
            "cr_connection_timeout_milliseconds", "crConnectionTimeoutMilliseconds", int,
            is_required=True,
        ),
    )

    #: bool: *Required* crAuditEnabled
    cr_audit_enabled = Field(type=bool, required=True, mutable=False)
    #: int: *Required* crAuditIntervalMilliseconds
    cr_audit_interval_milliseconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* crAuditTimeoutMilliseconds
    cr_audit_timeout_milliseconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* crConnectionEnabled
    cr_connection_enabled = Field(type=bool, required=True, mutable=False)
    #: int: *Required* crConnectionTimeoutMilliseconds
    cr_connection_timeout_milliseconds = Field(type=int, required=True, mutable=False)


class SystemCustomerOriginatedTraceGetResponse(OCIResponse):
    """
    Response to ``SystemCustomerOriginatedTraceGetRequest()``.

    """

    _ELEMENTS = (
        E("screen_malicious_callers", "screenMaliciousCallers", bool, is_required=True),
    )

    #: bool: *Required* screenMaliciousCallers
    screen_malicious_callers = Field(type=bool, required=True, mutable=False)


class SystemDTMFTransmissionGetResponse(OCIResponse):
    """
    Response to the ``SystemDTMFTransmissionGetRequest()``.

    """

    _ELEMENTS = (
        E("transmission_method", "transmissionMethod", str, is_required=True),
        E("signaling_content_type", "signalingContentType", str),
    )

    #: str: *Required* transmissionMethod
    transmission_method = Field(type=str, required=True, mutable=False)
    #: str: *Optional* signalingContentType
    signaling_content_type = Field(type=str, required=False, mutable=False)


class SystemDeviceManagementAutoRebuildConfigGetListResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementAutoRebuildConfigGetListRequest()``.

    Contains a table with column headings: "OCI Request Prefix", "Auto Rebuild Enabled".
    "OCI Request Prefix" is the prefix of the OCI request name.  It does not include the
    request's version '17.sp4, 18...' since the disabled flag applies to the whole series
    of requests, independent of the version.  "Auto Rebuild Enabled": 'True' if the
    request prefix triggers DM events automatically.  Otherwise, automatic DM events are
    not generated.
    """

    _ELEMENTS = (
        E(
            "auto_rebuild_config_table", "autoRebuildConfigTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* autoRebuildConfigTable  *Tabular*
    auto_rebuild_config_table = Field(type=list, required=True, mutable=False)


class SystemDeviceManagementEventGetListResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementEventGetListRequest()``.

    Contains a table with column headings: "Event Id", "Status", "Action", "Level",
    "Type", "Additional Info", "Is Local", "Completion %", "Pushed/ Same Hash/ Not
    Pushed", "Login Id", "Start Time", "Process Time". "Event Id" is a unique identifer
    for the event.  "Status" can be: Pending, Queued, In Progress, Process On Other Host,
    Stale, Completed, Canceled.  "Action" can be: Delete, Download, Rebuild, Reset,
    Upload.  "Level" can be: Device, Device Type, Device Type Group, Group, User.  "Type"
    can be: Automatic, Manual.  "Additional Info" includes the affected device type,
    device or group.  It depends on the level of the event: Device Profile: "Device Name"
    "Service Provider Id" "Group Id" Device Type: "Device Type Name" Device Type Group:
    "Service Provider Id" "Group Id" "Device Type Name" Group: "Service Provider Id"
    "Group Id" User: "User Id" "Is Local" is set to "yes" if the event is processed on the
    server who received the request, "no" otherwise meaning that the event is processed on
    another server.  "Completion %" provides an estimate of the completion of the event.
    A percentage is given, the current number of completed expanded event, and the total
    number of expanded event.  "Pushed/ Same Hash/ Not Pushed" gives the total number of
    files that were pushed, not pushed because of same hash, and not pushed when
    processing the event.  "LoginId" is the user or admin id who triggered the event.
    "Start Time" is the date when the event was started.  The display shows the month,
    days, hours, and minutes (MM-dd hh:mm). "Process Time" is the time taken to process
    the event in hours, minutes, seconds, and milliseconds (hhhh:mm:ss.SSS). Each row
    represents an event sorted by priority of processing.  The first row in the table is
    an event that has an associated expanded event currently being processed or next in
    line to be processed.
    """

    _ELEMENTS = (
        E(
            "event_table", "eventTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* eventTable  *Tabular*
    event_table = Field(type=list, required=True, mutable=False)


class SystemDeviceManagementGetAccessDeviceCountForDeviceTypeResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementGetAccessDeviceCountForDeviceTypeRequest()``.

    """

    _ELEMENTS = (
        E("access_device_count", "accessDeviceCount", int, is_required=True),
    )

    #: int: *Required* accessDeviceCount
    access_device_count = Field(type=int, required=True, mutable=False)


class SystemDeviceManagementGetEventStatusSummaryCountResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementGetEventStatusSummaryCountRequest()``.

    The column headings are "Action, "Pending", "Queued Internally", and "Completed"
    """

    _ELEMENTS = (
        E(
            "status_count_table", "statusCountTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* statusCountTable  *Tabular*
    status_count_table = Field(type=list, required=True, mutable=False)


class SystemDeviceManagementTagGetListResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementTagGetListRequest()``.

    Contains a table of custom configuration tags managed by the Device Management System.
    The column headings are: "Tag Name", "Tag Value".
    """

    _ELEMENTS = (
        E("tags_table", "tagsTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* tagsTable  *Tabular*
    tags_table = Field(type=list, required=True, mutable=False)


class SystemDeviceManagementTagSetGetListResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementTagSetGetListRequest()``.

    The response includes an array of tag set names defined in the system.  The system
    default tag set name is not part of this response.
    """

    _ELEMENTS = (
        E("tag_set_name", "tagSetName", str, is_array=True),
    )

    #: list(str): *Optional* tagSetName  *Array*
    tag_set_name = Field(type=list, required=False, mutable=False)


class SystemDeviceProfileAuthenticationLockoutGetResponse(OCIResponse):
    """
    Response to ``SystemDeviceProfileAuthenticationLockoutGetRequest()``.

    The column headings for the lockoutTable are: "Organization Id", "Organization Type",
    "Group Id", "Identity/Device Profile Name", " Identity/Device Profile Type", "Lockout
    Started", "Lockout Expires", "Lockout Count". Lockout times are shown in the system
    GMT time.  When a permanent lockout is shown, the "Lockout Expires" column is empty
    and the "Lockout Count" column contains the word Permanent.
    """

    _ELEMENTS = (
        E(
            "lockout_table", "lockoutTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* lockoutTable  *Tabular*
    lockout_table = Field(type=list, required=True, mutable=False)


class SystemDeviceProfileAuthenticationPasswordRulesGetResponse(OCIResponse):
    """
    Response to ``SystemDeviceProfileAuthenticationPasswordRulesGetRequest()``.

    Contains the device profile authentication password rules for the system.
    """

    _ELEMENTS = (
        E(
            "disallow_authentication_name", "disallowAuthenticationName", bool,
            is_required=True,
        ),
        E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
        E(
            "disallow_reversed_old_password", "disallowReversedOldPassword", bool,
            is_required=True,
        ),
        E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
        E("min_digits", "minDigits", int, is_required=True),
        E(
            "restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool,
            is_required=True,
        ),
        E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
        E(
            "restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool,
            is_required=True,
        ),
        E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
        E(
            "restrict_min_non_alphanumeric_characters",
            "restrictMinNonAlphanumericCharacters", bool, is_required=True,
        ),
        E(
            "min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int,
            is_required=True,
        ),
        E("min_length", "minLength", int, is_required=True),
        E(
            "send_permanent_lockout_notification", "sendPermanentLockoutNotification",
            bool, is_required=True,
        ),
        E(
            "permanent_lockout_notify_email_address",
            "permanentLockoutNotifyEmailAddress", str,
        ),
        E(
            "device_profile_authentication_lockout_type",
            "deviceProfileAuthenticationLockoutType", str, is_required=True,
        ),
        E(
            "device_profile_temporary_lockout_threshold",
            "deviceProfileTemporaryLockoutThreshold", int, is_required=True,
        ),
        E(
            "device_profile_wait_algorithm", "deviceProfileWaitAlgorithm", str,
            is_required=True,
        ),
        E(
            "device_profile_lockout_fixed_minutes", "deviceProfileLockoutFixedMinutes",
            str, is_required=True,
        ),
        E(
            "device_profile_permanent_lockout_threshold",
            "deviceProfilePermanentLockoutThreshold", int, is_required=True,
        ),
    )

    #: bool: *Required* disallowAuthenticationName
    disallow_authentication_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPassword
    disallow_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPassword
    disallow_reversed_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* restrictMinDigits
    restrict_min_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minDigits
    min_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinUpperCaseLetters
    restrict_min_upper_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minUpperCaseLetters
    min_upper_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinLowerCaseLetters
    restrict_min_lower_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minLowerCaseLetters
    min_lower_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinNonAlphanumericCharacters
    restrict_min_non_alphanumeric_characters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minNonAlphanumericCharacters
    min_non_alphanumeric_characters = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLength
    min_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendPermanentLockoutNotification
    send_permanent_lockout_notification = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* permanentLockoutNotifyEmailAddress
    permanent_lockout_notify_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* deviceProfileAuthenticationLockoutType
    device_profile_authentication_lockout_type = Field(type=str, required=True, mutable=False)
    #: int: *Required* deviceProfileTemporaryLockoutThreshold
    device_profile_temporary_lockout_threshold = Field(type=int, required=True, mutable=False)
    #: str: *Required* deviceProfileWaitAlgorithm
    device_profile_wait_algorithm = Field(type=str, required=True, mutable=False)
    #: str: *Required* deviceProfileLockoutFixedMinutes
    device_profile_lockout_fixed_minutes = Field(type=str, required=True, mutable=False)
    #: int: *Required* deviceProfilePermanentLockoutThreshold
    device_profile_permanent_lockout_threshold = Field(type=int, required=True, mutable=False)


class SystemDeviceTypeExportResponse(OCIResponse):
    """
    Response to ``SystemDeviceTypeExportRequest()``.

    """

    _ELEMENTS = (
        E("file", "file", str, is_required=True),
    )

    #: str: *Required* file
    file = Field(type=str, required=True, mutable=False)


class SystemDeviceTypeGetAvailableListResponse(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetAvailableListRequest()``.

    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_array=True),
        E("type_info", "typeInfo", str, is_complex=True, is_array=True),  # unknown
    )

    #: list(str): *Optional* deviceType  *Array*
    device_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* typeInfo  *Array*
    type_info = Field(type=list, required=False, mutable=False)


class SystemDeviceTypeGetAvailableListResponse14sp1(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetAvailableListRequest14sp1()``.

    Replaced By: ``SystemDeviceTypeGetAvailableListResponse14sp3()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_array=True),
        E("type_info", "typeInfo", str, is_complex=True, is_array=True),  # unknown
    )

    #: list(str): *Optional* deviceType  *Array*
    device_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* typeInfo  *Array*
    type_info = Field(type=list, required=False, mutable=False)


class SystemDeviceTypeGetAvailableListResponse14sp3(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetAvailableListRequest14sp3()``.

    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_array=True),
        E("type_info", "typeInfo", str, is_complex=True, is_array=True),  # unknown
    )

    #: list(str): *Optional* deviceType  *Array*
    device_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* typeInfo  *Array*
    type_info = Field(type=list, required=False, mutable=False)


class SystemDeviceTypeGetAvailableListResponse19(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetAvailableListRequest19()``.

    Note: element numberOfPorts is only used by devices types with static line ordering
    enabled
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_array=True),
        E("type_info", "typeInfo", str, is_complex=True, is_array=True),  # unknown
    )

    #: list(str): *Optional* deviceType  *Array*
    device_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* typeInfo  *Array*
    type_info = Field(type=list, required=False, mutable=False)


class SystemDialPlanPolicyGetAccessCodeListResponse(OCIResponse):
    """
    Response to ``SystemDialPlanPolicyGetAccessCodeListRequest()``.

    Contains a table with column headings: "Access Code", "Enable Secondary Dial Tone",
    "Description"
    """

    _ELEMENTS = (
        E(
            "access_code_table", "accessCodeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* accessCodeTable  *Tabular*
    access_code_table = Field(type=list, required=True, mutable=False)


class SystemDialPlanPolicyGetAccessCodeResponse(OCIResponse):
    """
    Response to ``SystemDialPlanPolicyGetAccessCodeRequest()``
    """

    _ELEMENTS = (
        E(
            "include_code_for_network_translations_and_routing",
            "includeCodeForNetworkTranslationsAndRouting", bool, is_required=True,
        ),
        E(
            "include_code_for_screening_services", "includeCodeForScreeningServices",
            bool, is_required=True,
        ),
        E("enable_secondary_dial_tone", "enableSecondaryDialTone", bool, is_required=True),
        E("description", "description", str),
    )

    #: bool: *Required* includeCodeForNetworkTranslationsAndRouting
    include_code_for_network_translations_and_routing = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeCodeForScreeningServices
    include_code_for_screening_services = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableSecondaryDialTone
    enable_secondary_dial_tone = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class SystemDialPlanPolicyGetResponse(OCIResponse):
    """
    Response to ``SystemDialPlanPolicyGetRequest()`` Replaced by:
    ``SystemDialPlanPolicyGetResponse17()``
    """

    _ELEMENTS = (
        E(
            "requires_access_code_for_public_calls", "requiresAccessCodeForPublicCalls",
            bool, is_required=True,
        ),
        E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
        E("public_digit_map", "publicDigitMap", str, is_required=True),
        E("private_digit_map", "privateDigitMap", str),
    )

    #: bool: *Required* requiresAccessCodeForPublicCalls
    requires_access_code_for_public_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowE164PublicCalls
    allow_e164_public_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* publicDigitMap
    public_digit_map = Field(type=str, required=True, mutable=False)
    #: str: *Optional* privateDigitMap
    private_digit_map = Field(type=str, required=False, mutable=False)


class SystemDialPlanPolicyGetResponse17(OCIResponse):
    """
    Response to ``SystemDialPlanPolicyGetRequest17()``
    """

    _ELEMENTS = (
        E(
            "requires_access_code_for_public_calls", "requiresAccessCodeForPublicCalls",
            bool, is_required=True,
        ),
        E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
        E(
            "prefer_e164_number_format_for_callback_services",
            "preferE164NumberFormatForCallbackServices", bool, is_required=True,
        ),
        E("public_digit_map", "publicDigitMap", str, is_required=True),
        E("private_digit_map", "privateDigitMap", str),
    )

    #: bool: *Required* requiresAccessCodeForPublicCalls
    requires_access_code_for_public_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowE164PublicCalls
    allow_e164_public_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* preferE164NumberFormatForCallbackServices
    prefer_e164_number_format_for_callback_services = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* publicDigitMap
    public_digit_map = Field(type=str, required=True, mutable=False)
    #: str: *Optional* privateDigitMap
    private_digit_map = Field(type=str, required=False, mutable=False)


class SystemDialableCallerIDCriteriaGetResponse(OCIResponse):
    """
    Response to the ``SystemDialableCallerIDCriteriaGetRequest()``.

    The response contains the Dialable Caller ID Criteria information.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("prefix_digits", "prefixDigits", str),
        E("match_call_type", "matchCallType", str, is_array=True),
        E(
            "match_alternate_call_indicator", "matchAlternateCallIndicator", str,
            is_array=True,
        ),
        E("match_local_category", "matchLocalCategory", bool, is_required=True),
        E("match_national_category", "matchNationalCategory", bool, is_required=True),
        E("match_interlata_category", "matchInterlataCategory", bool, is_required=True),
        E("match_intralata_category", "matchIntralataCategory", bool, is_required=True),
        E(
            "match_international_category", "matchInternationalCategory", bool,
            is_required=True,
        ),
        E("match_private_category", "matchPrivateCategory", bool, is_required=True),
        E("match_emergency_category", "matchEmergencyCategory", bool, is_required=True),
        E("match_other_category", "matchOtherCategory", bool, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* prefixDigits
    prefix_digits = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* matchCallType  *Array*
    match_call_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* matchAlternateCallIndicator  *Array*
    match_alternate_call_indicator = Field(type=list, required=False, mutable=False)
    #: bool: *Required* matchLocalCategory
    match_local_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchNationalCategory
    match_national_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInterlataCategory
    match_interlata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchIntralataCategory
    match_intralata_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchInternationalCategory
    match_international_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchPrivateCategory
    match_private_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchEmergencyCategory
    match_emergency_category = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* matchOtherCategory
    match_other_category = Field(type=bool, required=True, mutable=False)


class SystemDialableCallerIDGetResponse(OCIResponse):
    """
    Response to the ``SystemDialableCallerIDGetRequest()``.

    The criteria table?s column headings are ?Active?, "Name", "Description", ?Prefix
    Digits?, and ?Priority?.
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class SystemDigitCollectionGetResponse13mp4(OCIResponse):
    """
    Response to ``SystemDigitCollectionGetRequest13mp4()``.

    """

    _ELEMENTS = (
        E("access_code", "accessCode", str),
        E("public_digit_map", "publicDigitMap", str, is_required=True),
        E("private_digit_map", "privateDigitMap", str),
    )

    #: str: *Optional* accessCode
    access_code = Field(type=str, required=False, mutable=False)
    #: str: *Required* publicDigitMap
    public_digit_map = Field(type=str, required=True, mutable=False)
    #: str: *Optional* privateDigitMap
    private_digit_map = Field(type=str, required=False, mutable=False)


class SystemDnGetSummaryListResponse(OCIResponse):
    """
    Response to ``SystemDnGetSummaryListRequest()``.

    The column headings are "Phone Numbers, "Service Provider Id" and "Is Enterprise"
    """

    _ELEMENTS = (
        E(
            "dn_summary_table", "dnSummaryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* dnSummaryTable  *Tabular*
    dn_summary_table = Field(type=list, required=True, mutable=False)


class SystemDnGetUtilizationListResponse(OCIResponse):
    """
    Response to ``SystemDnUtilizationGetListRequest()``.

    The table columns are: "Service Provider Id", "Phone Numbers", "Assigned to Groups",
    "Percentage Assigned", "Is Enterprise" and "Activated on Groups".
    """

    _ELEMENTS = (
        E(
            "dn_utilization_table", "dnUtilizationTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* dnUtilizationTable  *Tabular*
    dn_utilization_table = Field(type=list, required=True, mutable=False)


class SystemDnGetUtilizationResponse(OCIResponse):
    """
    Response to ``SystemDnGetUtilizationRequest()``.

    Replaced By: ``SystemDnGetUtilizationResponse14sp3()``
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str),
        E("user_id", "userId", str),
        E("user_type", "userType", str),
        E("is_group_calling_line_id", "isGroupCallingLineId", bool, is_required=True),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Optional* groupId
    group_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* userId
    user_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* userType
    user_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isGroupCallingLineId
    is_group_calling_line_id = Field(type=bool, required=True, mutable=False)


class SystemDnGetUtilizationResponse14sp3(OCIResponse):
    """
    Response to ``SystemDnGetUtilizationRequest14sp3()``.

    The isActivated element is only included when the DN is assigned to a user.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str),
        E("user_id", "userId", str),
        E("user_type", "userType", str),
        E("is_group_calling_line_id", "isGroupCallingLineId", bool, is_required=True),
        E("is_activated", "isActivated", bool),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Optional* groupId
    group_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* userId
    user_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* userType
    user_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isGroupCallingLineId
    is_group_calling_line_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* isActivated
    is_activated = Field(type=bool, required=False, mutable=False)


class SystemDomainGetAssignedServiceProviderListResponse(OCIResponse):
    """
    Response to ``SystemDomainGetAssignedServiceProviderListRequest()``.

    The table columns are: "Service Provider Id", "Service Provider Name" and "Is
    Enterprise".
    """

    _ELEMENTS = (
        E(
            "service_provider_table", "serviceProviderTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceProviderTable  *Tabular*
    service_provider_table = Field(type=list, required=True, mutable=False)


class SystemDomainGetListResponse(OCIResponse):
    """
    Contains a simple list of all system-level domain names.

    """

    _ELEMENTS = (
        E("system_default_domain", "systemDefaultDomain", str, is_required=True),
        E("domain", "domain", str, is_array=True),
    )

    #: str: *Required* systemDefaultDomain
    system_default_domain = Field(type=str, required=True, mutable=False)
    #: list(str): *Optional* domain  *Array*
    domain = Field(type=list, required=False, mutable=False)


class SystemDomainParametersGetResponse(OCIResponse):
    """
    Response to ``SystemDomainParametersGetRequest()``.

    Contains the system Domain parameters.
    """

    _ELEMENTS = (
        E("use_alias_for_domain", "useAliasForDomain", bool, is_required=True),
        E("default_domain", "defaultDomain", str, is_required=True),
    )

    #: bool: *Required* useAliasForDomain
    use_alias_for_domain = Field(type=bool, required=True, mutable=False)
    #: str: *Required* defaultDomain
    default_domain = Field(type=str, required=True, mutable=False)


class SystemEmergencyZonesGetResponse(OCIResponse):
    """
    Response to ``SystemEmergencyZonesGetRequest()``.

    """

    _ELEMENTS = (
        E("default_from_address", "defaultFromAddress", str, is_required=True),
    )

    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)


class SystemEndpointGetListResponse(OCIResponse):
    """
    Response to ``SystemEndpointGetListRequest()``.

    The column headings for the endpointTable are: "Organization Id", "Organization Type",
    "Group Id", "Line/Port", "Last Name","First Name", "User Id", "User Type", "Phone
    Number", "Extension", "Device Type", "Device Name", "Net Address", "MAC Address",
    "Department", "Email Address". Possible values for User Type are ‘User’, ‘CCBasic’,
    ‘CCStandard’, ‘CCPremium’, ‘RP’, ‘MOH’, ‘MOHVideo’.
    """

    _ELEMENTS = (
        E(
            "endpoint_table", "endpointTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* endpointTable  *Tabular*
    endpoint_table = Field(type=list, required=True, mutable=False)


class SystemEnhancedCallLogsGetResponse(OCIResponse):
    """
    Response to ``SystemEnhancedCallLogsGetRequest()``.

    """

    _ELEMENTS = (
        E("is_send_enabled", "isSendEnabled", bool, is_required=True),
        E("server1_net_address", "server1NetAddress", str),
        E("server1_send_port", "server1SendPort", int, is_required=True),
        E("server1_retrieve_port", "server1RetrievePort", int, is_required=True),
        E("server2_net_address", "server2NetAddress", str),
        E("server2_send_port", "server2SendPort", int, is_required=True),
        E("server2_retrieve_port", "server2RetrievePort", int, is_required=True),
        E("shared_secret", "sharedSecret", str),
        E(
            "retransmission_delay_milli_seconds", "retransmissionDelayMilliSeconds", int,
            is_required=True,
        ),
        E("max_transmissions", "maxTransmissions", int, is_required=True),
        E("soap_timeout_seconds", "soapTimeoutSeconds", int, is_required=True),
    )

    #: bool: *Required* isSendEnabled
    is_send_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* server1NetAddress
    server1_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* server1SendPort
    server1_send_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* server1RetrievePort
    server1_retrieve_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* server2NetAddress
    server2_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* server2SendPort
    server2_send_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* server2RetrievePort
    server2_retrieve_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* sharedSecret
    shared_secret = Field(type=str, required=False, mutable=False)
    #: int: *Required* retransmissionDelayMilliSeconds
    retransmission_delay_milli_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxTransmissions
    max_transmissions = Field(type=int, required=True, mutable=False)
    #: int: *Required* soapTimeoutSeconds
    soap_timeout_seconds = Field(type=int, required=True, mutable=False)


class SystemEnhancedCallLogsGetResponse17sp4(OCIResponse):
    """
    Response to ``SystemEnhancedCallLogsGetRequest17sp4()``.

    The following elements are only used in AS data mode: isSendEnabled server1NetAddress
    server1SendPort server1RetrievePort server2NetAddress server2SendPort
    server2RetrievePort sharedSecret retransmissionDelayMilliSeconds maxTransmissions
    soapTimeoutSeconds useDBS Replaced by:``SystemEnhancedCallLogsGetResponse20sp1()``
    """

    _ELEMENTS = (
        E("is_send_enabled", "isSendEnabled", bool, is_required=True),
        E("server1_net_address", "server1NetAddress", str),
        E("server1_send_port", "server1SendPort", int, is_required=True),
        E("server1_retrieve_port", "server1RetrievePort", int, is_required=True),
        E("server2_net_address", "server2NetAddress", str),
        E("server2_send_port", "server2SendPort", int, is_required=True),
        E("server2_retrieve_port", "server2RetrievePort", int, is_required=True),
        E("shared_secret", "sharedSecret", str),
        E(
            "retransmission_delay_milli_seconds", "retransmissionDelayMilliSeconds", int,
            is_required=True,
        ),
        E("max_transmissions", "maxTransmissions", int, is_required=True),
        E("soap_timeout_seconds", "soapTimeoutSeconds", int, is_required=True),
        E("use_dbs", "useDBS", bool, is_required=True),
        E("max_non_paged_response_size", "maxNonPagedResponseSize", int, is_required=True),
    )

    #: bool: *Required* isSendEnabled
    is_send_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* server1NetAddress
    server1_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* server1SendPort
    server1_send_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* server1RetrievePort
    server1_retrieve_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* server2NetAddress
    server2_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* server2SendPort
    server2_send_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* server2RetrievePort
    server2_retrieve_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* sharedSecret
    shared_secret = Field(type=str, required=False, mutable=False)
    #: int: *Required* retransmissionDelayMilliSeconds
    retransmission_delay_milli_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxTransmissions
    max_transmissions = Field(type=int, required=True, mutable=False)
    #: int: *Required* soapTimeoutSeconds
    soap_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useDBS
    use_dbs = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxNonPagedResponseSize
    max_non_paged_response_size = Field(type=int, required=True, mutable=False)


class SystemEnhancedCallLogsGetResponse20sp1(OCIResponse):
    """
    Response to ``SystemEnhancedCallLogsGetRequest20sp1()``.

    The following elements are only used in AS data mode: isSendEnabled server1NetAddress
    server1SendPort server1RetrievePort server2NetAddress server2SendPort
    server2RetrievePort sharedSecret retransmissionDelayMilliSeconds maxTransmissions
    soapTimeoutSeconds useDBS eclQueryApplicationURL eclQueryDataRepositoryURL
    """

    _ELEMENTS = (
        E("is_send_enabled", "isSendEnabled", bool, is_required=True),
        E("server1_net_address", "server1NetAddress", str),
        E("server1_send_port", "server1SendPort", int, is_required=True),
        E("server1_retrieve_port", "server1RetrievePort", int, is_required=True),
        E("server2_net_address", "server2NetAddress", str),
        E("server2_send_port", "server2SendPort", int, is_required=True),
        E("server2_retrieve_port", "server2RetrievePort", int, is_required=True),
        E("shared_secret", "sharedSecret", str),
        E(
            "retransmission_delay_milli_seconds", "retransmissionDelayMilliSeconds", int,
            is_required=True,
        ),
        E("max_transmissions", "maxTransmissions", int, is_required=True),
        E("soap_timeout_seconds", "soapTimeoutSeconds", int, is_required=True),
        E("use_dbs", "useDBS", bool, is_required=True),
        E("max_non_paged_response_size", "maxNonPagedResponseSize", int, is_required=True),
        E("ecl_query_application_url", "eclQueryApplicationURL", str),
        E("ecl_query_data_repository_url", "eclQueryDataRepositoryURL", str),
    )

    #: bool: *Required* isSendEnabled
    is_send_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* server1NetAddress
    server1_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* server1SendPort
    server1_send_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* server1RetrievePort
    server1_retrieve_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* server2NetAddress
    server2_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* server2SendPort
    server2_send_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* server2RetrievePort
    server2_retrieve_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* sharedSecret
    shared_secret = Field(type=str, required=False, mutable=False)
    #: int: *Required* retransmissionDelayMilliSeconds
    retransmission_delay_milli_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxTransmissions
    max_transmissions = Field(type=int, required=True, mutable=False)
    #: int: *Required* soapTimeoutSeconds
    soap_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useDBS
    use_dbs = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxNonPagedResponseSize
    max_non_paged_response_size = Field(type=int, required=True, mutable=False)
    #: str: *Optional* eclQueryApplicationURL
    ecl_query_application_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* eclQueryDataRepositoryURL
    ecl_query_data_repository_url = Field(type=str, required=False, mutable=False)


class SystemEnhancedCallLogsSchemaInstanceGetListResponse(OCIResponse):
    """
    Response to ``SystemEnhancedCallLogsSchemaInstanceGetListRequest()``.

    Contains a table with column headings: "Instance Name", "Actual Users", "Potential
    Users".
    """

    _ELEMENTS = (
        E(
            "schema_instance_usage_table", "schemaInstanceUsageTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* schemaInstanceUsageTable  *Tabular*
    schema_instance_usage_table = Field(type=list, required=True, mutable=False)


class SystemExecutiveGetResponse(OCIResponse):
    """
    Response to ``SystemExecutiveGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "treat_virtual_on_net_calls_as_internal", "treatVirtualOnNetCallsAsInternal",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* treatVirtualOnNetCallsAsInternal
    treat_virtual_on_net_calls_as_internal = Field(type=bool, required=True, mutable=False)


class SystemExpensiveCallNotificationGetResponse(OCIResponse):
    """
    Response to ``SystemExpensiveCallNotificationGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "enable_post_announcement_delay_timer", "enablePostAnnouncementDelayTimer",
            bool, is_required=True,
        ),
        E(
            "post_announcement_delay_seconds", "postAnnouncementDelaySeconds", int,
            is_required=True,
        ),
    )

    #: bool: *Required* enablePostAnnouncementDelayTimer
    enable_post_announcement_delay_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* postAnnouncementDelaySeconds
    post_announcement_delay_seconds = Field(type=int, required=True, mutable=False)


class SystemExpensiveCallTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemExpensiveCallTypeGetListRequest()``.

    Replaced by: ``SystemExpensiveCallTypeGetListResponse16sp1()``
    """

    _ELEMENTS = (
        E("alternate_call_indicator", "alternateCallIndicator", str, is_array=True),
    )

    #: list(str): *Optional* alternateCallIndicator  *Array*
    alternate_call_indicator = Field(type=list, required=False, mutable=False)


class SystemExpensiveCallTypeGetListResponse16sp1(OCIResponse):
    """
    Response to ``SystemExpensiveCallTypeGetListRequest16sp1()``.

    The column headings are: "Alternate Call Indicator", "Treatment Audio File".
    """

    _ELEMENTS = (
        E(
            "alternate_call_indicator_table", "alternateCallIndicatorTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* alternateCallIndicatorTable  *Tabular*
    alternate_call_indicator_table = Field(type=list, required=True, mutable=False)


class SystemExtensionLengthGetResponse(OCIResponse):
    """
    Response to ``SystemExtensionLengthGetRequest()``.

    """

    _ELEMENTS = (
        E("min_extension_length", "minExtensionLength", int, is_required=True),
        E("max_extension_length", "maxExtensionLength", int, is_required=True),
    )

    #: int: *Required* minExtensionLength
    min_extension_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxExtensionLength
    max_extension_length = Field(type=int, required=True, mutable=False)


class SystemExternalAuthenticationGetACLListResponse(OCIResponse):
    """
    Response to ``SystemExternalAuthenticationGetACLListRequest()``.

    The table columns are: "Net Address" and "Description".
    """

    _ELEMENTS = (
        E("acl_table", "aclTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* aclTable  *Tabular*
    acl_table = Field(type=list, required=True, mutable=False)


class SystemExternalEmergencyRoutingParametersGetResponse13mp13(OCIResponse):
    """
    Response to ``SystemExternalEmergencyRoutingParametersGetRequest13mp13()``.

    Contains a list of system External Emergency Routing parameters.
    """

    _ELEMENTS = (
        E("service_uri", "serviceURI", str),
        E("default_emergency_number", "defaultEmergencyNumber", str),
        E("is_active", "isActive", bool, is_required=True),
        E("supports_dnssrv", "supportsDNSSRV", bool, is_required=True),
        E("connection_timeout_seconds", "connectionTimeoutSeconds", int, is_required=True),
    )

    #: str: *Optional* serviceURI
    service_uri = Field(type=str, required=False, mutable=False)
    #: str: *Optional* defaultEmergencyNumber
    default_emergency_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportsDNSSRV
    supports_dnssrv = Field(type=bool, required=True, mutable=False)
    #: int: *Required* connectionTimeoutSeconds
    connection_timeout_seconds = Field(type=int, required=True, mutable=False)


class SystemFileGetContentResponse(OCIResponse):
    """
    Response to a ``SystemFileGetContentRequest()``.

    The fileContent length returned is limited to 128KBytes.
    """

    _ELEMENTS = (
        E("file_content", "fileContent", str, is_required=True),
    )

    #: str: *Required* fileContent
    file_content = Field(type=str, required=True, mutable=False)


class SystemFileRepositoryDeviceGetListResponse(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceGetListRequest()``.

    Contains a table with column headings : "Name","Protocol", "Root Directory" in a row
    for each file repository.
    """

    _ELEMENTS = (
        E(
            "file_repository_table", "fileRepositoryTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* fileRepositoryTable  *Tabular*
    file_repository_table = Field(type=list, required=True, mutable=False)


class SystemFileRepositoryDeviceUserGetListResponse(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceUserGetListRequest()``.

    Contains a table with column headings : "User Name","Allow Get","Allow Delete","Allow
    Put" in a row for each file repository user.
    """

    _ELEMENTS = (
        E(
            "file_repository_user_table", "fileRepositoryUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* fileRepositoryUserTable  *Tabular*
    file_repository_user_table = Field(type=list, required=True, mutable=False)


class SystemFileRepositoryDeviceUserGetResponse(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceUserGetRequest()``.

    """

    _ELEMENTS = (
        E("allow_put", "allowPut", bool, is_required=True),
        E("allow_delete", "allowDelete", bool, is_required=True),
        E("allow_get", "allowGet", bool, is_required=True),
    )

    #: bool: *Required* allowPut
    allow_put = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowDelete
    allow_delete = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowGet
    allow_get = Field(type=bool, required=True, mutable=False)


class SystemGeographicRedundancyPeerSipConnectionMonitoringGetResponse(OCIResponse):
    """
    Response to ``SystemGeographicRedundancyPeerSipConnectionMonitoringGetRequest()``.

    Contains a list of Peer SIP Connection Monitoring system parameters.
    """

    _ELEMENTS = (
        E("enabled", "enabled", bool, is_required=True),
        E("heartbeat_interval", "heartbeatInterval", int, is_required=True),
        E("heartbeat_timeout", "heartbeatTimeout", int, is_required=True),
    )

    #: bool: *Required* enabled
    enabled = Field(type=bool, required=True, mutable=False)
    #: int: *Required* heartbeatInterval
    heartbeat_interval = Field(type=int, required=True, mutable=False)
    #: int: *Required* heartbeatTimeout
    heartbeat_timeout = Field(type=int, required=True, mutable=False)


class SystemGeographicRedundancyProxyGetResponse(OCIResponse):
    """
    Response to ``SystemGeographicRedundancyProxyGetRequest()``.

    Contains a list of Geographic Redundancy Proxy system parameters.
    """

    _ELEMENTS = (
        E("enabled", "enabled", bool, is_required=True),
    )

    #: bool: *Required* enabled
    enabled = Field(type=bool, required=True, mutable=False)


class SystemGeographicRedundancyUnreachableFromPrimaryGetUserListResponse(OCIResponse):
    """
    Response to ``SystemGeographicRedundancyUnreachableFromPrimaryGetUserListRequest()``.

    The Unreachable From Primary User table column headings are: "User ID", "Lineport".
    """

    _ELEMENTS = (
        E(
            "unreachable_from_primary_user_table", "unreachableFromPrimaryUserTable",
            list, is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* unreachableFromPrimaryUserTable  *Tabular*
    unreachable_from_primary_user_table = Field(type=list, required=True, mutable=False)


class SystemGetRegistrationContactListResponse(OCIResponse):
    """
    Response to ``SystemGetRegistrationContactListRequest()``.

    The table columns are: "Service Provider Id", "Group Id", "User Id", "Line/Port",
    "Endpoint Type", "Order", "URI", "Expiration", "Contact", "Device Level", "Device
    Name", "Public Net Address", "Public Port", "Private Net Address", "Private Port",
    "User Agent".
    """

    _ELEMENTS = (
        E(
            "registration_table", "registrationTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* registrationTable  *Tabular*
    registration_table = Field(type=list, required=True, mutable=False)


class SystemGroupNightForwardingGetResponse(OCIResponse):
    """
    Response to ``SystemGroupNightForwardingGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "night_forward_inter_group_calls_within_enterprise",
            "nightForwardInterGroupCallsWithinEnterprise", bool, is_required=True,
        ),
    )

    #: bool: *Required* nightForwardInterGroupCallsWithinEnterprise
    night_forward_inter_group_calls_within_enterprise = Field(
        type=bool, required=True, mutable=False,
    )


class SystemHolidayScheduleGetListResponse(OCIResponse):
    """
    Response to the ``SystemHolidayScheduleGetListRequest()``.

    The response contains all the system holiday schedule names.
    """

    _ELEMENTS = (
        E("holiday_schedule_name", "holidayScheduleName", str, is_array=True),
    )

    #: list(str): *Optional* holidayScheduleName  *Array*
    holiday_schedule_name = Field(type=list, required=False, mutable=False)


class SystemHomeNetworkGetListResponse(OCIResponse):
    """
    Response to the ``SystemHomeNetworkGetListRequest()``.

    """

    _ELEMENTS = (
        E("msc_address", "mscAddress", str, is_array=True),
    )

    #: list(str): *Optional* mscAddress  *Array*
    msc_address = Field(type=list, required=False, mutable=False)


class SystemHuntGroupGetResponse(OCIResponse):
    """
    Response to ``SystemHuntGroupGetRequest()``.

    Replaced by: ``SystemHuntGroupGetResponse17()``
    """

    _ELEMENTS = (
        E(
            "anonymous_instead_of_private_clid", "anonymousInsteadOfPrivateCLID", bool,
            is_required=True,
        ),
        E(
            "remove_hunt_group_name_from_clid", "removeHuntGroupNameFromCLID", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* anonymousInsteadOfPrivateCLID
    anonymous_instead_of_private_clid = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* removeHuntGroupNameFromCLID
    remove_hunt_group_name_from_clid = Field(type=bool, required=True, mutable=False)


class SystemHuntGroupGetResponse17(OCIResponse):
    """
    Response to ``SystemHuntGroupGetRequest()``.

    Replaced by ``SystemHuntGroupGetResponse21()``.
    """

    _ELEMENTS = (
        E(
            "anonymous_instead_of_private_clid", "anonymousInsteadOfPrivateCLID", bool,
            is_required=True,
        ),
        E(
            "remove_hunt_group_name_from_clid", "removeHuntGroupNameFromCLID", bool,
            is_required=True,
        ),
        E(
            "uniform_call_distribution_policy_scope",
            "uniformCallDistributionPolicyScope", str, is_required=True,
        ),
    )

    #: bool: *Required* anonymousInsteadOfPrivateCLID
    anonymous_instead_of_private_clid = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* removeHuntGroupNameFromCLID
    remove_hunt_group_name_from_clid = Field(type=bool, required=True, mutable=False)
    #: str: *Required* uniformCallDistributionPolicyScope
    uniform_call_distribution_policy_scope = Field(type=str, required=True, mutable=False)


class SystemHuntGroupGetResponse21(OCIResponse):
    """
    Response to ``SystemHuntGroupGetRequest21()``.

    """

    _ELEMENTS = (
        E(
            "remove_hunt_group_name_from_clid", "removeHuntGroupNameFromCLID", bool,
            is_required=True,
        ),
        E(
            "uniform_call_distribution_policy_scope",
            "uniformCallDistributionPolicyScope", str, is_required=True,
        ),
        E(
            "allow_agent_device_initiated_forward", "allowAgentDeviceInitiatedForward",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* removeHuntGroupNameFromCLID
    remove_hunt_group_name_from_clid = Field(type=bool, required=True, mutable=False)
    #: str: *Required* uniformCallDistributionPolicyScope
    uniform_call_distribution_policy_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAgentDeviceInitiatedForward
    allow_agent_device_initiated_forward = Field(type=bool, required=True, mutable=False)


class SystemInCallServiceActivationGetResponse(OCIResponse):
    """
    Response to ``SystemInCallServiceActivationGetRequest()``.

    Replaced by: ``SystemInCallServiceActivationGetResponse17()``
    """

    _ELEMENTS = (
        E("default_activation_digits", "defaultActivationDigits", str, is_required=True),
    )

    #: str: *Required* defaultActivationDigits
    default_activation_digits = Field(type=str, required=True, mutable=False)


class SystemInCallServiceActivationGetResponse17(OCIResponse):
    """
    Response to ``SystemInCallServiceActivationGetRequest17()``.

    """

    _ELEMENTS = (
        E(
            "default_flash_activation_digits", "defaultFlashActivationDigits", str,
            is_required=True,
        ),
        E(
            "default_call_transfer_activation_digits",
            "defaultCallTransferActivationDigits", str, is_required=True,
        ),
    )

    #: str: *Required* defaultFlashActivationDigits
    default_flash_activation_digits = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultCallTransferActivationDigits
    default_call_transfer_activation_digits = Field(type=str, required=True, mutable=False)


class SystemIntegratedIMPGetResponse(OCIResponse):
    """
    Response to the ``SystemIntegratedIMPGetRequest()``.

    The response contains the system Integrated IMP service attributes.  Replaced by
    ``SystemIntegratedIMPGetResponse19()``.
    """

    _ELEMENTS = (
        E("service_domain", "serviceDomain", str),
        E("service_port", "servicePort", int),
        E(
            "add_service_provider_in_imp_user_id", "addServiceProviderInIMPUserId", bool,
            is_required=True,
        ),
    )

    #: str: *Optional* serviceDomain
    service_domain = Field(type=str, required=False, mutable=False)
    #: int: *Optional* servicePort
    service_port = Field(type=int, required=False, mutable=False)
    #: bool: *Required* addServiceProviderInIMPUserId
    add_service_provider_in_imp_user_id = Field(type=bool, required=True, mutable=False)


class SystemIntegratedIMPGetResponse19(OCIResponse):
    """
    Response to the ``SystemIntegratedIMPGetRequest19()``.

    The response contains the system Integrated IMP service attributes.  The following
    elements are only used in AS data mode: boshURL
    """

    _ELEMENTS = (
        E("service_domain", "serviceDomain", str),
        E("service_port", "servicePort", int),
        E(
            "add_service_provider_in_imp_user_id", "addServiceProviderInIMPUserId", bool,
            is_required=True,
        ),
        E("bosh_url", "boshURL", str),
    )

    #: str: *Optional* serviceDomain
    service_domain = Field(type=str, required=False, mutable=False)
    #: int: *Optional* servicePort
    service_port = Field(type=int, required=False, mutable=False)
    #: bool: *Required* addServiceProviderInIMPUserId
    add_service_provider_in_imp_user_id = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* boshURL
    bosh_url = Field(type=str, required=False, mutable=False)


class SystemIntegratedIMPGetResponse21(OCIResponse):
    """
    Response to the ``SystemIntegratedIMPGetRequest21()``.

    The response contains the system Integrated IMP service attributes.  The following
    elements are only used in AS data mode: boshURL
    """

    _ELEMENTS = (
        E("service_domain", "serviceDomain", str),
        E("service_port", "servicePort", int),
        E(
            "add_service_provider_in_imp_user_id", "addServiceProviderInIMPUserId", bool,
            is_required=True,
        ),
        E("bosh_url", "boshURL", str),
        E(
            "allow_imp_password_retrieval", "allowImpPasswordRetrieval", bool,
            is_required=True,
        ),
    )

    #: str: *Optional* serviceDomain
    service_domain = Field(type=str, required=False, mutable=False)
    #: int: *Optional* servicePort
    service_port = Field(type=int, required=False, mutable=False)
    #: bool: *Required* addServiceProviderInIMPUserId
    add_service_provider_in_imp_user_id = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* boshURL
    bosh_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowImpPasswordRetrieval
    allow_imp_password_retrieval = Field(type=bool, required=True, mutable=False)


class SystemIntelligentNetworkServiceControlGetResponse14(OCIResponse):
    """
    Response to ``SystemIntelligentNetworkServiceControlGetRequest14()``.

    """

    _ELEMENTS = (
        E(
            "pre_answer_action_timeout_seconds", "preAnswerActionTimeoutSeconds", int,
            is_required=True,
        ),
        E("msg_reject_no_voice_mail", "msgRejectNoVoiceMail", str, is_required=True),
        E("msg_reject_voice_mail", "msgRejectVoiceMail", str, is_required=True),
        E("msg_pre_answer_wait", "msgPreAnswerWait", str, is_required=True),
        E("msg_busy", "msgBusy", str, is_required=True),
        E("msg_release", "msgRelease", str, is_required=True),
        E("msg_no_answer", "msgNoAnswer", str, is_required=True),
        E("msg_ocp_reject", "msgOCPReject", str, is_required=True),
        E("msg_forward_loop", "msgForwardLoop", str, is_required=True),
        E("msg_temporarily_unavailable", "msgTemporarilyUnavailable", str, is_required=True),
    )

    #: int: *Required* preAnswerActionTimeoutSeconds
    pre_answer_action_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* msgRejectNoVoiceMail
    msg_reject_no_voice_mail = Field(type=str, required=True, mutable=False)
    #: str: *Required* msgRejectVoiceMail
    msg_reject_voice_mail = Field(type=str, required=True, mutable=False)
    #: str: *Required* msgPreAnswerWait
    msg_pre_answer_wait = Field(type=str, required=True, mutable=False)
    #: str: *Required* msgBusy
    msg_busy = Field(type=str, required=True, mutable=False)
    #: str: *Required* msgRelease
    msg_release = Field(type=str, required=True, mutable=False)
    #: str: *Required* msgNoAnswer
    msg_no_answer = Field(type=str, required=True, mutable=False)
    #: str: *Required* msgOCPReject
    msg_ocp_reject = Field(type=str, required=True, mutable=False)
    #: str: *Required* msgForwardLoop
    msg_forward_loop = Field(type=str, required=True, mutable=False)
    #: str: *Required* msgTemporarilyUnavailable
    msg_temporarily_unavailable = Field(type=str, required=True, mutable=False)


class SystemInterceptUserGetResponse(OCIResponse):
    """
    Response to the ``SystemInterceptUserGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "emergency_and_repair_intercept", "emergencyAndRepairIntercept", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* emergencyAndRepairIntercept
    emergency_and_repair_intercept = Field(type=bool, required=True, mutable=False)


class SystemInventoryReportGetResponse(OCIResponse):
    """
    Response to ``SystemInventoryReportGetRequest()``.

    """

    _ELEMENTS = (
        E("default_from_address", "defaultFromAddress", str, is_required=True),
    )

    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)


class SystemLDAPIntegrationGetDirectoryResponse(OCIResponse):
    """
    Response to ``SystemLDAPIntegrationGetDirectoryRequest()``.

    """

    _ELEMENTS = (
        E("server_net_address", "serverNetAddress", str),
        E("server_port", "serverPort", int),
        E("search_base", "searchBase", str),
        E("use_ssl", "useSSL", bool, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("authenticated_dn", "authenticatedDN", str),
        E("authenticated_password", "authenticatedPassword", str),
        E("is_sort_enabled", "isSortEnabled", bool, is_required=True),
        E("is_paged_result_enabled", "isPagedResultEnabled", bool, is_required=True),
        E("search_filter", "searchFilter", str),
        E(
            "include_search_attribute_in_search_filter",
            "includeSearchAttributeInSearchFilter", bool, is_required=True,
        ),
        E("column1_attribute_name", "column1AttributeName", str, is_required=True),
        E("column2_attribute_name", "column2AttributeName", str),
        E("column3_attribute_name", "column3AttributeName", str),
        E("column4_attribute_name", "column4AttributeName", str),
        E("column1_label", "column1Label", str),
        E("column2_label", "column2Label", str),
        E("column3_label", "column3Label", str),
        E("column4_label", "column4Label", str),
        E("search_column", "searchColumn", int, is_required=True),
    )

    #: str: *Optional* serverNetAddress
    server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* serverPort
    server_port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* searchBase
    search_base = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useSSL
    use_ssl = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* authenticatedDN
    authenticated_dn = Field(type=str, required=False, mutable=False)
    #: str: *Optional* authenticatedPassword
    authenticated_password = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isSortEnabled
    is_sort_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isPagedResultEnabled
    is_paged_result_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* searchFilter
    search_filter = Field(type=str, required=False, mutable=False)
    #: bool: *Required* includeSearchAttributeInSearchFilter
    include_search_attribute_in_search_filter = Field(type=bool, required=True, mutable=False)
    #: str: *Required* column1AttributeName
    column1_attribute_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* column2AttributeName
    column2_attribute_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column3AttributeName
    column3_attribute_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column4AttributeName
    column4_attribute_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column1Label
    column1_label = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column2Label
    column2_label = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column3Label
    column3_label = Field(type=str, required=False, mutable=False)
    #: str: *Optional* column4Label
    column4_label = Field(type=str, required=False, mutable=False)
    #: int: *Required* searchColumn
    search_column = Field(type=int, required=True, mutable=False)


class SystemLanguageGetListResponse(OCIResponse):
    """
    Response to ``SystemLanguageGetListRequest()``.

    The language table column headings are: "Language", "Locale" and "Encoding".
    """

    _ELEMENTS = (
        E("default_language", "defaultLanguage", str, is_required=True),
        E(
            "language_table", "languageTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Required* defaultLanguage
    default_language = Field(type=str, required=True, mutable=False)
    #: list: *Required* languageTable  *Tabular*
    language_table = Field(type=list, required=True, mutable=False)


class SystemLegacyAutomaticCallbackGetLineTypeListResponse(OCIResponse):
    """
    Response to ``SystemLegacyAutomaticCallbackGetLineTypeListRequest()``.

    Returns a 3 column table with column headings: "Line Type", "Match" and "No Match".
    The possible values for the "Match" and "No Match" columns are "Accept" and "Deny".
    """

    _ELEMENTS = (
        E(
            "line_type_table", "lineTypeTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* lineTypeTable  *Tabular*
    line_type_table = Field(type=list, required=True, mutable=False)


class SystemLegacyAutomaticCallbackGetResponse(OCIResponse):
    """
    Response to ``SystemLegacyAutomaticCallbackGetRequest()``.

    """

    _ELEMENTS = (
        E("max_monitors_per_originator", "maxMonitorsPerOriginator", int, is_required=True),
        E("max_monitors_per_terminator", "maxMonitorsPerTerminator", int, is_required=True),
        E("t2_minutes", "t2Minutes", int, is_required=True),
        E("t4_seconds", "t4Seconds", int, is_required=True),
        E("t5_seconds", "t5Seconds", int, is_required=True),
        E("t6_minutes", "t6Minutes", int, is_required=True),
        E("t7_minutes", "t7Minutes", int, is_required=True),
        E("t8_seconds", "t8Seconds", int, is_required=True),
        E("t_ring_seconds", "tRingSeconds", int, is_required=True),
        E("t10_o_minutes", "t10OMinutes", int, is_required=True),
        E("t10_t_minutes", "t10TMinutes", int, is_required=True),
    )

    #: int: *Required* maxMonitorsPerOriginator
    max_monitors_per_originator = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMonitorsPerTerminator
    max_monitors_per_terminator = Field(type=int, required=True, mutable=False)
    #: int: *Required* t2Minutes
    t2_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* t4Seconds
    t4_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* t5Seconds
    t5_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* t6Minutes
    t6_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* t7Minutes
    t7_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* t8Seconds
    t8_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* tRingSeconds
    t_ring_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* t10OMinutes
    t10_o_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* t10TMinutes
    t10_t_minutes = Field(type=int, required=True, mutable=False)


class SystemLicensingGetResponse(OCIResponse):
    """
    Response to ``SystemLicensingGetRequest()``.

    The license table columns are: "Name", "Licensed", "Used", "Available" and "Expiration
    Date".

    Replaced By: ``SystemLicensingGetResponse14sp3()``
    """

    _ELEMENTS = (
        E("license_strictness", "licenseStrictness", str, is_required=True),
        E("group_userlimit", "groupUserlimit", int, is_required=True),
        E("expiration_date", "expirationDate", str),
        E("host_id", "hostId", str, is_array=True),
        E("license_name", "licenseName", str, is_array=True),
        E(
            "license_table", "licenseTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Required* licenseStrictness
    license_strictness = Field(type=str, required=True, mutable=False)
    #: int: *Required* groupUserlimit
    group_userlimit = Field(type=int, required=True, mutable=False)
    #: str: *Optional* expirationDate
    expiration_date = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* hostId  *Array*
    host_id = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* licenseName  *Array*
    license_name = Field(type=list, required=False, mutable=False)
    #: list: *Required* licenseTable  *Tabular*
    license_table = Field(type=list, required=True, mutable=False)


class SystemLicensingGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemLicensingGetRequest14sp3()``.

    The subscriber license table columns are: "Name", "Licensed", "Used" and "Available".
    The group service license table columns are: "Name", "Licensed", "Used" and
    "Available". The virtual service license table columns are: "Name", "Licensed", "Used"
    and "Available". The user service license table columns are: "Name", "Licensed",
    "Used", "Used By Hosted Users", "Used By Trunk Users", "Available" and "Expiration
    Date". The system param license table columns are: "Name", "Licensed", "Used",
    Available".
    """

    _ELEMENTS = (
        E("license_strictness", "licenseStrictness", str, is_required=True),
        E("group_userlimit", "groupUserlimit", int, is_required=True),
        E("expiration_date", "expirationDate", str),
        E("host_id", "hostId", str, is_array=True),
        E("license_name", "licenseName", str, is_array=True),
        E("number_of_trunk_users", "numberOfTrunkUsers", int, is_required=True),
        E(
            "subscriber_license_table", "subscriberLicenseTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
        E(
            "group_service_license_table", "groupServiceLicenseTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E(
            "virtual_service_license_table", "virtualServiceLicenseTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E(
            "user_service_license_table", "userServiceLicenseTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E(
            "system_param_license_table", "systemParamLicenseTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: str: *Required* licenseStrictness
    license_strictness = Field(type=str, required=True, mutable=False)
    #: int: *Required* groupUserlimit
    group_userlimit = Field(type=int, required=True, mutable=False)
    #: str: *Optional* expirationDate
    expiration_date = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* hostId  *Array*
    host_id = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* licenseName  *Array*
    license_name = Field(type=list, required=False, mutable=False)
    #: int: *Required* numberOfTrunkUsers
    number_of_trunk_users = Field(type=int, required=True, mutable=False)
    #: list: *Required* subscriberLicenseTable  *Tabular*
    subscriber_license_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* groupServiceLicenseTable  *Tabular*
    group_service_license_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* virtualServiceLicenseTable  *Tabular*
    virtual_service_license_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* userServiceLicenseTable  *Tabular*
    user_service_license_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* systemParamLicenseTable  *Tabular*
    system_param_license_table = Field(type=list, required=True, mutable=False)


class SystemLicensingGetSystemLicenseListResponse(OCIResponse):
    """
    Response to ``SystemLicensingGetSystemLicenseListRequest()``.

    Replaced by ``SystemLicensingGetSystemLicenseListResponse21()``
    """

    _ELEMENTS = (
        E("license", "license", str, is_array=True),
    )

    #: list(str): *Optional* license  *Array*
    license = Field(type=list, required=False, mutable=False)


class SystemLicensingGetSystemLicenseListResponse21(OCIResponse):
    """
    Response to ``SystemLicensingGetSystemLicenseListRequest21()``.

    """

    _ELEMENTS = (
        E("license", "license", str, is_array=True),
    )

    #: list(str): *Optional* license  *Array*
    license = Field(type=list, required=False, mutable=False)


class SystemLocationBasedCallingRestrictionsGetResponse(OCIResponse):
    """
    Response to ``SystemLocationBasedCallingRestrictionsGetRequest()``.

    """

    _ELEMENTS = (
        E("physical_location_indicator", "physicalLocationIndicator", str, is_required=True),
        E("enforce_msc_validation", "enforceMscValidation", bool, is_required=True),
        E(
            "enable_office_zone_announcement", "enableOfficeZoneAnnouncement", bool,
            is_required=True,
        ),
    )

    #: str: *Required* physicalLocationIndicator
    physical_location_indicator = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceMscValidation
    enforce_msc_validation = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableOfficeZoneAnnouncement
    enable_office_zone_announcement = Field(type=bool, required=True, mutable=False)


class SystemLocationBasedCallingRestrictionsGetResponse17sp3(OCIResponse):
    """
    Response to ``SystemLocationBasedCallingRestrictionsGetRequest17sp3()``.

    """

    _ELEMENTS = (
        E("physical_location_indicator", "physicalLocationIndicator", str, is_required=True),
        E("enforce_msc_validation", "enforceMscValidation", bool, is_required=True),
        E(
            "enable_office_zone_announcement", "enableOfficeZoneAnnouncement", bool,
            is_required=True,
        ),
        E("enhance_office_zone", "enhanceOfficeZone", bool, is_required=True),
    )

    #: str: *Required* physicalLocationIndicator
    physical_location_indicator = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceMscValidation
    enforce_msc_validation = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableOfficeZoneAnnouncement
    enable_office_zone_announcement = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enhanceOfficeZone
    enhance_office_zone = Field(type=bool, required=True, mutable=False)


class SystemMGCPDeviceTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemMGCPDeviceTypeGetListRequest()``.

    Contains a table of identity/ device profile types configured in the system.  The
    column headings are: "Device Type", "Profile", "Is Obsolete".
    """

    _ELEMENTS = (
        E(
            "device_type_table", "deviceTypeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceTypeTable  *Tabular*
    device_type_table = Field(type=list, required=True, mutable=False)


class SystemMailParametersGetResponse(OCIResponse):
    """
    Response to ``SystemMailParametersGetListRequest()``.

    Contains a list of system Mail parameters.
    """

    _ELEMENTS = (
        E("primary_server_net_address", "primaryServerNetAddress", str),
        E("secondary_server_net_address", "secondaryServerNetAddress", str),
        E("default_from_address", "defaultFromAddress", str, is_required=True),
        E("default_subject", "defaultSubject", str),
        E(
            "support_dnssrv_for_mail_server_access", "supportDNSSRVForMailServerAccess",
            bool, is_required=True,
        ),
    )

    #: str: *Optional* primaryServerNetAddress
    primary_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* secondaryServerNetAddress
    secondary_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* defaultFromAddress
    default_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Optional* defaultSubject
    default_subject = Field(type=str, required=False, mutable=False)
    #: bool: *Required* supportDNSSRVForMailServerAccess
    support_dnssrv_for_mail_server_access = Field(type=bool, required=True, mutable=False)


class SystemMaliciousCallTraceGetResponse(OCIResponse):
    """
    Response to the ``SystemMaliciousCallTraceGetRequest()``.

    The response contains the Malicious Call Trace system parameters and the list of users
    that use the Malicious Call Trace feature.  The column headings are "Service Provider
    Id", "Group Id", "User Id", "Last Name", "First Name", "Phone Number", "Trace Type",
    "Status", "Hiragana Last Name" and "Hiragana First Name", "Extension", "Department",
    "Email Address".
    """

    _ELEMENTS = (
        E(
            "play_mct_warning_announcement", "playMCTWarningAnnouncement", bool,
            is_required=True,
        ),
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: bool: *Required* playMCTWarningAnnouncement
    play_mct_warning_announcement = Field(type=bool, required=True, mutable=False)
    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class SystemMaliciousCallTraceGetUserListResponse(OCIResponse):
    """
    Response to ``SystemMaliciousCallTraceGetUserListRequest()``.

    The column headings are "Service Provider Id", "Group Id", "User Id", "Last Name",
    "First Name", "Phone Number", "Trace Type", "Status", "Hiragana Last Name" and
    "Hiragana First Name".

    Replaced By: ``SystemMaliciousCallTraceGetResponse()``
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class SystemMediaGetListResponse(OCIResponse):
    """
    Response to ``SystemMediaGetListRequest()``.

    The column headings are "Media Name", "Codec", "Media Type", "Bandwidth Enforcement
    Type" and "Bandwidth".
    """

    _ELEMENTS = (
        E(
            "media_table", "mediaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* mediaTable  *Tabular*
    media_table = Field(type=list, required=True, mutable=False)


class SystemMediaServerGetListResponse(OCIResponse):
    """
    Response to ``SystemMediaServerGetListRequest()``.

    The Media Server table column headings are: "Net Address", "Port", "Transport",
    "Description".
    """

    _ELEMENTS = (
        E(
            "media_server_table", "mediaServerTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* mediaServerTable  *Tabular*
    media_server_table = Field(type=list, required=True, mutable=False)


class SystemMediaServerParametersGetResponse(OCIResponse):
    """
    Response to ``SystemMediaServerParametersGetListRequest()``.

    Contains a list of system Media Server parameters.
    """

    _ELEMENTS = (
        E(
            "media_server_response_timer_milliseconds",
            "mediaServerResponseTimerMilliseconds", int, is_required=True,
        ),
        E(
            "media_server_selection_route_timer_milliseconds",
            "mediaServerSelectionRouteTimerMilliseconds", int, is_required=True,
        ),
        E(
            "use_static_media_server_device", "useStaticMediaServerDevice", bool,
            is_required=True,
        ),
    )

    #: int: *Required* mediaServerResponseTimerMilliseconds
    media_server_response_timer_milliseconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* mediaServerSelectionRouteTimerMilliseconds
    media_server_selection_route_timer_milliseconds = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* useStaticMediaServerDevice
    use_static_media_server_device = Field(type=bool, required=True, mutable=False)


class SystemMediaSetGetListResponse(OCIResponse):
    """
    Response to ``SystemMediaSetGetRequest()``.

    """

    _ELEMENTS = (
        E("media_set_name", "mediaSetName", str, is_array=True),
    )

    #: list(str): *Optional* mediaSetName  *Array*
    media_set_name = Field(type=list, required=False, mutable=False)


class SystemMediaSetGetResponse(OCIResponse):
    """
    Response to ``SystemMediaSetGetRequest()``.

    Returns a list of media names in the set.
    """

    _ELEMENTS = (
        E("media_name", "mediaName", str, is_required=True),
    )

    #: str: *Required* mediaName
    media_name = Field(type=str, required=True, mutable=False)


class SystemMeetMeConferencingGetResponse(OCIResponse):
    """
    Response to ``SystemMeetMeConferencingGetRequest()``.

    """

    _ELEMENTS = (
        E("conference_id_length", "conferenceIdLength", int, is_required=True),
        E("moderator_pin_length", "moderatorPinLength", int, is_required=True),
        E(
            "enable_conference_end_date_restriction",
            "enableConferenceEndDateRestriction", bool, is_required=True,
        ),
        E(
            "conference_end_date_restriction_months",
            "conferenceEndDateRestrictionMonths", int, is_required=True,
        ),
        E(
            "delete_expired_conferences_after_hold_period",
            "deleteExpiredConferencesAfterHoldPeriod", bool, is_required=True,
        ),
        E(
            "expired_conference_hold_period_days", "expiredConferenceHoldPeriodDays", int,
            is_required=True,
        ),
        E("recording_web_app_url", "recordingWebAppURL", str),
    )

    #: int: *Required* conferenceIdLength
    conference_id_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* moderatorPinLength
    moderator_pin_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConferenceEndDateRestriction
    enable_conference_end_date_restriction = Field(type=bool, required=True, mutable=False)
    #: int: *Required* conferenceEndDateRestrictionMonths
    conference_end_date_restriction_months = Field(type=int, required=True, mutable=False)
    #: bool: *Required* deleteExpiredConferencesAfterHoldPeriod
    delete_expired_conferences_after_hold_period = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* expiredConferenceHoldPeriodDays
    expired_conference_hold_period_days = Field(type=int, required=True, mutable=False)
    #: str: *Optional* recordingWebAppURL
    recording_web_app_url = Field(type=str, required=False, mutable=False)


class SystemMeetMeConferencingGetResponse17sp3(OCIResponse):
    """
    Response to ``SystemMeetMeConferencingGetRequest17sp3()``.

    """

    _ELEMENTS = (
        E("conference_id_length", "conferenceIdLength", int, is_required=True),
        E("moderator_pin_length", "moderatorPinLength", int, is_required=True),
        E(
            "enable_conference_end_date_restriction",
            "enableConferenceEndDateRestriction", bool, is_required=True,
        ),
        E(
            "conference_end_date_restriction_months",
            "conferenceEndDateRestrictionMonths", int, is_required=True,
        ),
        E(
            "delete_expired_conferences_after_hold_period",
            "deleteExpiredConferencesAfterHoldPeriod", bool, is_required=True,
        ),
        E(
            "expired_conference_hold_period_days", "expiredConferenceHoldPeriodDays", int,
            is_required=True,
        ),
        E("recording_web_app_url", "recordingWebAppURL", str),
        E("recording_file_format", "recordingFileFormat", str, is_required=True),
    )

    #: int: *Required* conferenceIdLength
    conference_id_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* moderatorPinLength
    moderator_pin_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConferenceEndDateRestriction
    enable_conference_end_date_restriction = Field(type=bool, required=True, mutable=False)
    #: int: *Required* conferenceEndDateRestrictionMonths
    conference_end_date_restriction_months = Field(type=int, required=True, mutable=False)
    #: bool: *Required* deleteExpiredConferencesAfterHoldPeriod
    delete_expired_conferences_after_hold_period = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* expiredConferenceHoldPeriodDays
    expired_conference_hold_period_days = Field(type=int, required=True, mutable=False)
    #: str: *Optional* recordingWebAppURL
    recording_web_app_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* recordingFileFormat
    recording_file_format = Field(type=str, required=True, mutable=False)


class SystemMigratedUsersGetListResponse(OCIResponse):
    """
    Response to ``SystemMigratedUsersGetListRequest()``.

    """

    _ELEMENTS = (
        E("user_id", "userId", str, is_array=True),
    )

    #: list(str): *Optional* userId  *Array*
    user_id = Field(type=list, required=False, mutable=False)


class SystemMultimediaPolicyGetResponse(OCIResponse):
    """
    Response to ``SystemMultimediaPolicyGetRequest()``
    """

    _ELEMENTS = (
        E(
            "restrict_non_audio_video_media_types", "restrictNonAudioVideoMediaTypes",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* restrictNonAudioVideoMediaTypes
    restrict_non_audio_video_media_types = Field(type=bool, required=True, mutable=False)


class SystemMusicOnHoldGetResponse(OCIResponse):
    """
    Response to ``SystemMusicOnHoldGetRequest()``.

    """

    _ELEMENTS = (
        E("delay_milliseconds", "delayMilliseconds", int, is_required=True),
    )

    #: int: *Required* delayMilliseconds
    delay_milliseconds = Field(type=int, required=True, mutable=False)


class SystemNetworkClassOfServiceGetAssignedServiceProviderListResponse(OCIResponse):
    """
    Response to the
    ``SystemNetworkClassOfServiceGetAssignedServiceProviderListRequest()``.

    The response contains a table of all Service Providers that have the given Network
    Class of Service assigned.  The column headings are "Service Provider Id", "Service
    Provider Name" and "Is Enterprise".
    """

    _ELEMENTS = (
        E(
            "service_provider_table", "serviceProviderTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceProviderTable  *Tabular*
    service_provider_table = Field(type=list, required=True, mutable=False)


class SystemNetworkClassOfServiceGetCommunicationBarringProfileUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemNetworkClassOfServiceGetCommunicationBarringProfileUsageListRequest()``.

    The response contains a table of all Network Classes of Service that contain the
    specific Communication Barring Profile.  The column headings are "Name" and
    "Description"
    """

    _ELEMENTS = (
        E(
            "network_class_of_service_table", "networkClassOfServiceTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* networkClassOfServiceTable  *Tabular*
    network_class_of_service_table = Field(type=list, required=True, mutable=False)


class SystemNetworkClassOfServiceGetListResponse(OCIResponse):
    """
    Response to the ``SystemNetworkClassOfServiceGetListRequest()``.

    The response contains a table of all Network Classes of Service in the system.  The
    column headings are "Name" and "Description"
    """

    _ELEMENTS = (
        E(
            "network_class_of_service_table", "networkClassOfServiceTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* networkClassOfServiceTable  *Tabular*
    network_class_of_service_table = Field(type=list, required=True, mutable=False)


class SystemNetworkDeviceMonitorParametersGetResponse(OCIResponse):
    """
    Response to ``SystemNetworkDeviceMonitorParametersGetListRequest()``.

    Contains a list of system Network Device Polling parameters.
    """

    _ELEMENTS = (
        E("polling_interval_minutes", "pollingIntervalMinutes", int, is_required=True),
        E(
            "failed_polling_interval_minutes", "failedPollingIntervalMinutes", int,
            is_required=True,
        ),
    )

    #: int: *Required* pollingIntervalMinutes
    polling_interval_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* failedPollingIntervalMinutes
    failed_polling_interval_minutes = Field(type=int, required=True, mutable=False)


class SystemNetworkProgressionGetResponse(OCIResponse):
    """
    Response to ``SystemNetworkProgressionGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("wait_period_seconds", "waitPeriodSeconds", int, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* waitPeriodSeconds
    wait_period_seconds = Field(type=int, required=True, mutable=False)


class SystemNetworkRoutingServerGetListResponse(OCIResponse):
    """
    Response to ``SystemNetworkRoutingServerGetListRequest()``.

    The routing Network Server table column headings are: "Net Address", "Port",
    "Transport", "Poll", "OpState", "Description".
    """

    _ELEMENTS = (
        E(
            "network_routing_server_table", "networkRoutingServerTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* networkRoutingServerTable  *Tabular*
    network_routing_server_table = Field(type=list, required=True, mutable=False)


class SystemNetworkServerSyncParametersGetResponse(OCIResponse):
    """
    Response to ``SystemNetworkServerSyncParametersGetListRequest()``.

    Contains a list of system Network Server Sync parameters.
    """

    _ELEMENTS = (
        E("enable_sync", "enableSync", bool, is_required=True),
    )

    #: bool: *Required* enableSync
    enable_sync = Field(type=bool, required=True, mutable=False)


class SystemNetworkServerSyncParametersGetResponse14sp2(OCIResponse):
    """
    Response to ``SystemNetworkServerSyncParametersGetRequest14sp2()``.

    Contains a list of system Network Server Sync parameters.

    Replaced By: ``SystemNetworkServerSyncParametersGetResponse16()``
    """

    _ELEMENTS = (
        E("enable_sync", "enableSync", bool, is_required=True),
        E("sync_line_ports", "syncLinePorts", bool, is_required=True),
    )

    #: bool: *Required* enableSync
    enable_sync = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* syncLinePorts
    sync_line_ports = Field(type=bool, required=True, mutable=False)


class SystemNetworkServerSyncParametersGetResponse16(OCIResponse):
    """
    Response to ``SystemNetworkServerSyncParametersGetRequest16()``.

    Contains a list of system Network Server Sync parameters.

    Replaced By: ``SystemNetworkServerSyncParametersGetResponse17sp4()``
    """

    _ELEMENTS = (
        E("enable_sync", "enableSync", bool, is_required=True),
        E("sync_line_ports", "syncLinePorts", bool, is_required=True),
        E("sync_device_management_info", "syncDeviceManagementInfo", bool, is_required=True),
    )

    #: bool: *Required* enableSync
    enable_sync = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* syncLinePorts
    sync_line_ports = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* syncDeviceManagementInfo
    sync_device_management_info = Field(type=bool, required=True, mutable=False)


class SystemNetworkServerSyncParametersGetResponse17sp4(OCIResponse):
    """
    Response to ``SystemNetworkServerSyncParametersGetRequest17sp4()``.

    Contains a list of system Network Server Sync parameters.  The following elements are
    only used in AS data mode: syncTrunkGroups
    """

    _ELEMENTS = (
        E("enable_sync", "enableSync", bool, is_required=True),
        E("sync_line_ports", "syncLinePorts", bool, is_required=True),
        E("sync_device_management_info", "syncDeviceManagementInfo", bool, is_required=True),
        E("sync_trunk_groups", "syncTrunkGroups", bool, is_required=True),
    )

    #: bool: *Required* enableSync
    enable_sync = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* syncLinePorts
    sync_line_ports = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* syncDeviceManagementInfo
    sync_device_management_info = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* syncTrunkGroups
    sync_trunk_groups = Field(type=bool, required=True, mutable=False)


class SystemNetworkSynchingServerGetListResponse(OCIResponse):
    """
    Response to ``SystemNetworkSynchingServerGetListRequest()``.

    The Network Server table column headings are: "Net Address", "Port", "Description".
    """

    _ELEMENTS = (
        E("preferred_network_server_net_address", "preferredNetworkServerNetAddress", str),
        E(
            "network_synching_server_table", "networkSynchingServerTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: str: *Optional* preferredNetworkServerNetAddress
    preferred_network_server_net_address = Field(type=str, required=False, mutable=False)
    #: list: *Required* networkSynchingServerTable  *Tabular*
    network_synching_server_table = Field(type=list, required=True, mutable=False)


class SystemNumberActivationGetResponse(OCIResponse):
    """
    Response to ``SystemNumberActivationGetRequest()``.

    Contains the system number activation setting.
    """

    _ELEMENTS = (
        E("use_number_activation", "useNumberActivation", bool, is_required=True),
    )

    #: bool: *Required* useNumberActivation
    use_number_activation = Field(type=bool, required=True, mutable=False)


class SystemNumberActivationGetResponse18sp1(OCIResponse):
    """
    Response to ``SystemNumberActivationGetRequest18sp1()``.

    Contains the system number activation setting.
    """

    _ELEMENTS = (
        E("number_activation_mode", "numberActivationMode", str, is_required=True),
    )

    #: str: *Required* numberActivationMode
    number_activation_mode = Field(type=str, required=True, mutable=False)


class SystemNumberActivationGetResponse21(OCIResponse):
    """
    Response to ``SystemNumberActivationGetRequest21()``.

    Contains the system number activation and enterprise trunk number range activation
    setting.
    """

    _ELEMENTS = (
        E("number_activation_mode", "numberActivationMode", str, is_required=True),
        E(
            "enable_enterprise_trunk_number_range_activation",
            "enableEnterpriseTrunkNumberRangeActivation", bool, is_required=True,
        ),
    )

    #: str: *Required* numberActivationMode
    number_activation_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEnterpriseTrunkNumberRangeActivation
    enable_enterprise_trunk_number_range_activation = Field(
        type=bool, required=True, mutable=False,
    )


class SystemNumberPortabilityQueryDigitPatternGetListResponse(OCIResponse):
    """
    Response to the ``SystemNumberPortabilityQueryDigitPatternGetListRequest()``.

    Contains a table with column headings: "Digit Pattern", "Status".
    """

    _ELEMENTS = (
        E(
            "status_digit_pattern_table", "statusDigitPatternTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* statusDigitPatternTable  *Tabular*
    status_digit_pattern_table = Field(type=list, required=True, mutable=False)


class SystemNumberPortabilityQueryDigitPatternGetResponse(OCIResponse):
    """
    Response to the ``SystemNumberPortabilityQueryDigitPatternGetRequest()``.

    """

    _ELEMENTS = (
        E("status", "status", str, is_required=True),
    )

    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)


class SystemNumberPortabilityQueryGetResponse(OCIResponse):
    """
    Response to the ``SystemNumberPortabilityQueryGetRequest()``.

    Returns system Number Portability Query Parameters.
    """

    _ELEMENTS = (
        E(
            "continue_call_as_dialed_on_timeout_or_error",
            "continueCallAsDialedOnTimeoutOrError", bool, is_required=True,
        ),
        E(
            "number_portability_name_lookup_timeout_milliseconds",
            "numberPortabilityNameLookupTimeoutMilliseconds", int, is_required=True,
        ),
    )

    #: bool: *Required* continueCallAsDialedOnTimeoutOrError
    continue_call_as_dialed_on_timeout_or_error = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* numberPortabilityNameLookupTimeoutMilliseconds
    number_portability_name_lookup_timeout_milliseconds = Field(
        type=int, required=True, mutable=False,
    )


class SystemNumberPortabilityQueryStatusGetListResponse(OCIResponse):
    """
    Response to the ``SystemNumberPortabilityQueryStatusGetListRequest()``.

    Contains a table with column headings: "Status and Treatment File Name".
    """

    _ELEMENTS = (
        E(
            "status_table", "statusTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* statusTable  *Tabular*
    status_table = Field(type=list, required=True, mutable=False)


class SystemNumberPortabilityQueryStatusGetResponse(OCIResponse):
    """
    Response to the ``SystemNumberPortabilityQueryStatusGetRequest()``.

    """

    _ELEMENTS = (
        E("treatment_file_name", "treatmentFileName", str),
    )

    #: str: *Optional* treatmentFileName
    treatment_file_name = Field(type=str, required=False, mutable=False)


class SystemOCICallControlApplicationGetACLListResponse(OCIResponse):
    """
    Response to ``SystemOCICallControlApplicationGetACLListRequest()``.

    The table columns are: "Net Address" and "Description".
    """

    _ELEMENTS = (
        E("acl_table", "aclTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* aclTable  *Tabular*
    acl_table = Field(type=list, required=True, mutable=False)


class SystemOCICallControlApplicationGetListResponse(OCIResponse):
    """
    Response to ``SystemOCICallControlApplicationGetListRequest()``.

    The table columns are: "Application Id", "Enabled System Wide", "Description"
    "Notification Timeout Seconds" and "Max Event Channels Per Set".
    """

    _ELEMENTS = (
        E("app_table", "appTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* appTable  *Tabular*
    app_table = Field(type=list, required=True, mutable=False)


class SystemOCICallControlGetACLListResponse(OCIResponse):
    """
    Response to ``SystemOCICallControlGetACLListRequest()``.

    The table columns are: "Net Address" and "Description".
    """

    _ELEMENTS = (
        E("acl_table", "aclTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* aclTable  *Tabular*
    acl_table = Field(type=list, required=True, mutable=False)


class SystemOCIGetACLListResponse(OCIResponse):
    """
    Response to ``SystemOCIGetACLListRequest()``.

    Returns a 2 coulmn table with column headings: "Net Address" and "Description".
    """

    _ELEMENTS = (
        E("acl_table", "aclTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* aclTable  *Tabular*
    acl_table = Field(type=list, required=True, mutable=False)


class SystemOCIReportingGetACLListResponse(OCIResponse):
    """
    Response to ``SystemOCIReportingACLListGetRequest()``.

    Contains a table with one row per access control list entry.  The table columns are
    "Net Address", "Description" and "Restrict Messages".
    """

    _ELEMENTS = (
        E(
            "oci_reporting_acl_table", "ociReportingACLTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* ociReportingACLTable  *Tabular*
    oci_reporting_acl_table = Field(type=list, required=True, mutable=False)


class SystemOCIReportingGetMessageNameListResponse(OCIResponse):
    """
    Response to ``SystemOCIReportingGetMessageNameListRequest()``.

    """

    _ELEMENTS = (
        E("message_name_starts_with", "messageNameStartsWith", str, is_array=True),
    )

    #: list(str): *Optional* messageNameStartsWith  *Array*
    message_name_starts_with = Field(type=list, required=False, mutable=False)


class SystemOCIReportingParametersGetResponse(OCIResponse):
    """
    Response to ``SystemOCIReportingParametersGetListRequest()``.

    Contains a list of system OCI Reporting parameters.
    """

    _ELEMENTS = (
        E("server_port", "serverPort", int, is_required=True),
        E("enable_connection_ping", "enableConnectionPing", bool, is_required=True),
        E(
            "connection_ping_interval_seconds", "connectionPingIntervalSeconds", int,
            is_required=True,
        ),
        E("alter_passwords", "alterPasswords", bool, is_required=True),
    )

    #: int: *Required* serverPort
    server_port = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConnectionPing
    enable_connection_ping = Field(type=bool, required=True, mutable=False)
    #: int: *Required* connectionPingIntervalSeconds
    connection_ping_interval_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* alterPasswords
    alter_passwords = Field(type=bool, required=True, mutable=False)


class SystemOCIReportingParametersGetResponse14sp1(OCIResponse):
    """
    Response to ``SystemOCIReportingParametersGetRequest14sp1()``.

    Contains a list of system OCI Reporting parameters.
    """

    _ELEMENTS = (
        E("server_port", "serverPort", int, is_required=True),
        E("enable_connection_ping", "enableConnectionPing", bool, is_required=True),
        E(
            "connection_ping_interval_seconds", "connectionPingIntervalSeconds", int,
            is_required=True,
        ),
        E("alter_passwords", "alterPasswords", bool, is_required=True),
        E(
            "enable_public_identity_reporting", "enablePublicIdentityReporting", bool,
            is_required=True,
        ),
    )

    #: int: *Required* serverPort
    server_port = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConnectionPing
    enable_connection_ping = Field(type=bool, required=True, mutable=False)
    #: int: *Required* connectionPingIntervalSeconds
    connection_ping_interval_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* alterPasswords
    alter_passwords = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enablePublicIdentityReporting
    enable_public_identity_reporting = Field(type=bool, required=True, mutable=False)


class SystemOfficeZoneGetAssignedServiceProviderListResponse(OCIResponse):
    """
    Response to the ``SystemOfficeZoneGetAssignedServiceProviderListRequest()``.

    The response contains a table of all Service Providers that have the given Office Zone
    assigned.  The column headings are "Service Provider Id", "Service Provider Name" and
    "Is Enterprise".
    """

    _ELEMENTS = (
        E(
            "service_provider_table", "serviceProviderTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceProviderTable  *Tabular*
    service_provider_table = Field(type=list, required=True, mutable=False)


class SystemOfficeZoneGetListResponse(OCIResponse):
    """
    Response to the ``SystemOfficeZoneGetListRequest()``.

    The response contains a table of all Office Zones in the system.  The column headings
    are "Name" and "Description"
    """

    _ELEMENTS = (
        E(
            "office_zone_table", "officeZoneTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* officeZoneTable  *Tabular*
    office_zone_table = Field(type=list, required=True, mutable=False)


class SystemOfficeZoneGetResponse(OCIResponse):
    """
    Response to the ``SystemOfficeZoneGetRequest()``.

    The response contains the Office Zone information.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("zone_name", "zoneName", str, is_required=True),
        E("primary_zone_name", "primaryZoneName", str, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* zoneName
    zone_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* primaryZoneName
    primary_zone_name = Field(type=str, required=True, mutable=False)


class SystemOfficeZoneGetZoneUsageListResponse(OCIResponse):
    """
    Response to the ``SystemOfficeZoneGetZoneUsageListRequest()``.

    The response contains a table of all Office Zones that contain the specific Zone.  The
    column headings are "Name" and "Description"
    """

    _ELEMENTS = (
        E(
            "office_zone_table", "officeZoneTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* officeZoneTable  *Tabular*
    office_zone_table = Field(type=list, required=True, mutable=False)


class SystemOutgoingCallingPlanCallTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemOutgoingCallingPlanCallTypeGetListRequest()``.

    """

    _ELEMENTS = (
        E("call_type", "callType", str, is_required=True),
    )

    #: str: *Required* callType
    call_type = Field(type=str, required=True, mutable=False)


class SystemOutgoingCallingPlanCallTypeGetMappingListResponse(OCIResponse):
    """
    Response to ``SystemOutgoingCallingPlanCallTypeGetMappingListRequest()``.

    The table columns are: "Country Code", "Digit Map" and "Call Type".
    """

    _ELEMENTS = (
        E(
            "call_type_mapping", "callTypeMapping", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callTypeMapping  *Tabular*
    call_type_mapping = Field(type=list, required=True, mutable=False)


class SystemOutgoingCallingPlanGetResponse(OCIResponse):
    """
    Response to ``SystemOutgoingCallingPlanGetRequest()``.

    """

    _ELEMENTS = (
        E("direct_transfer_screening", "directTransferScreening", bool, is_required=True),
    )

    #: bool: *Required* directTransferScreening
    direct_transfer_screening = Field(type=bool, required=True, mutable=False)


class SystemOutgoingCallingPlanGetResponse17sp3(OCIResponse):
    """
    Response to ``SystemOutgoingCallingPlanGetRequest17sp3()``.

    """

    _ELEMENTS = (
        E("direct_transfer_screening", "directTransferScreening", bool, is_required=True),
        E(
            "enable_enhanced_toll_call_typing", "enableEnhancedTollCallTyping", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* directTransferScreening
    direct_transfer_screening = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableEnhancedTollCallTyping
    enable_enhanced_toll_call_typing = Field(type=bool, required=True, mutable=False)


class SystemPasswordRulesGetResponse13mp2(OCIResponse):
    """
    Response to ``SystemPasswordRulesGetRequest13mp2()``.

    Contains the password rules for System administrator, Provisioning Administrator,
    and/or Service Provider Administrator, Group Administrator, Department Administrator,
    user.

    Replaced By : ``SystemPasswordRulesGetResponse16()``
    """

    _ELEMENTS = (
        E("rules_apply_to", "rulesApplyTo", str, is_required=True),
        E(
            "allow_web_add_external_authentication_users",
            "allowWebAddExternalAuthenticationUsers", bool, is_required=True,
        ),
        E("disallow_user_id", "disallowUserId", bool, is_required=True),
        E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
        E(
            "disallow_reversed_old_password", "disallowReversedOldPassword", bool,
            is_required=True,
        ),
        E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
        E("min_digits", "minDigits", int, is_required=True),
        E(
            "restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool,
            is_required=True,
        ),
        E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
        E(
            "restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool,
            is_required=True,
        ),
        E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
        E(
            "restrict_min_non_alphanumeric_characters",
            "restrictMinNonAlphanumericCharacters", bool, is_required=True,
        ),
        E(
            "min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int,
            is_required=True,
        ),
        E("min_length", "minLength", int, is_required=True),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int, is_required=True),
        E("password_expires_days", "passwordExpiresDays", int, is_required=True),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
        E("disallow_rules_modification", "disallowRulesModification", bool, is_required=True),
    )

    #: str: *Required* rulesApplyTo
    rules_apply_to = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowWebAddExternalAuthenticationUsers
    allow_web_add_external_authentication_users = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* disallowUserId
    disallow_user_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPassword
    disallow_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPassword
    disallow_reversed_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* restrictMinDigits
    restrict_min_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minDigits
    min_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinUpperCaseLetters
    restrict_min_upper_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minUpperCaseLetters
    min_upper_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinLowerCaseLetters
    restrict_min_lower_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minLowerCaseLetters
    min_lower_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinNonAlphanumericCharacters
    restrict_min_non_alphanumeric_characters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minNonAlphanumericCharacters
    min_non_alphanumeric_characters = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLength
    min_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=True, mutable=False)
    #: int: *Required* passwordExpiresDays
    password_expires_days = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* disallowRulesModification
    disallow_rules_modification = Field(type=bool, required=True, mutable=False)


class SystemPasswordRulesGetResponse16(OCIResponse):
    """
    Response to ``SystemPasswordRulesGetRequest16()``.

    Contains the password rules for System administrator, Provisioning Administrator,
    and/or Service Provider Administrator, Group Administrator, Department Administrator,
    user.
    """

    _ELEMENTS = (
        E("rules_apply_to", "rulesApplyTo", str, is_required=True),
        E(
            "allow_web_add_external_authentication_users",
            "allowWebAddExternalAuthenticationUsers", bool, is_required=True,
        ),
        E("disallow_user_id", "disallowUserId", bool, is_required=True),
        E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
        E(
            "disallow_reversed_old_password", "disallowReversedOldPassword", bool,
            is_required=True,
        ),
        E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
        E("min_digits", "minDigits", int, is_required=True),
        E(
            "restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool,
            is_required=True,
        ),
        E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
        E(
            "restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool,
            is_required=True,
        ),
        E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
        E(
            "restrict_min_non_alphanumeric_characters",
            "restrictMinNonAlphanumericCharacters", bool, is_required=True,
        ),
        E(
            "min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int,
            is_required=True,
        ),
        E("min_length", "minLength", int, is_required=True),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int, is_required=True),
        E("password_expires_days", "passwordExpiresDays", int, is_required=True),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
        E("disallow_rules_modification", "disallowRulesModification", bool, is_required=True),
        E("disallow_previous_passwords", "disallowPreviousPasswords", bool, is_required=True),
        E("number_of_previous_passwords", "numberOfPreviousPasswords", int, is_required=True),
    )

    #: str: *Required* rulesApplyTo
    rules_apply_to = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowWebAddExternalAuthenticationUsers
    allow_web_add_external_authentication_users = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* disallowUserId
    disallow_user_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPassword
    disallow_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPassword
    disallow_reversed_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* restrictMinDigits
    restrict_min_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minDigits
    min_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinUpperCaseLetters
    restrict_min_upper_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minUpperCaseLetters
    min_upper_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinLowerCaseLetters
    restrict_min_lower_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minLowerCaseLetters
    min_lower_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinNonAlphanumericCharacters
    restrict_min_non_alphanumeric_characters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minNonAlphanumericCharacters
    min_non_alphanumeric_characters = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLength
    min_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=True, mutable=False)
    #: int: *Required* passwordExpiresDays
    password_expires_days = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* disallowRulesModification
    disallow_rules_modification = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowPreviousPasswords
    disallow_previous_passwords = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfPreviousPasswords
    number_of_previous_passwords = Field(type=int, required=True, mutable=False)


class SystemPerformanceMeasurementReportingGetFileServerListResponse(OCIResponse):
    """
    Response to ``SystemPerformanceMeasurementReportingGetFileServerListRequest()``.

    The table columns are: "FTP Host Net Address", "FTP User Id", "Passive FTP".
    """

    _ELEMENTS = (
        E(
            "file_server_table", "fileServerTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* fileServerTable  *Tabular*
    file_server_table = Field(type=list, required=True, mutable=False)


class SystemPerformanceMeasurementReportingGetResponse(OCIResponse):
    """
    Response to ``SystemPerformanceMeasurementReportingGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("reporting_interval", "reportingInterval", int, is_required=True),
        E(
            "reset_measurements_after_each_report", "resetMeasurementsAfterEachReport",
            bool, is_required=True,
        ),
        E("report_enterprise", "reportEnterprise", bool, is_required=True),
        E("report_service_provider", "reportServiceProvider", bool, is_required=True),
        E("report_device", "reportDevice", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* reportingInterval
    reporting_interval = Field(type=int, required=True, mutable=False)
    #: bool: *Required* resetMeasurementsAfterEachReport
    reset_measurements_after_each_report = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* reportEnterprise
    report_enterprise = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* reportServiceProvider
    report_service_provider = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* reportDevice
    report_device = Field(type=bool, required=True, mutable=False)


class SystemPersonalAssistantGetResponse(OCIResponse):
    """
    Response to the ``SystemPersonalAssistantGetRequest()``.

    Returns system Personal Assistant Parameters.
    """

    _ELEMENTS = (
        E("transfer_to_attendant_key", "transferToAttendantKey", str, is_required=True),
        E(
            "transfer_to_voice_messaging_key", "transferToVoiceMessagingKey", str,
            is_required=True,
        ),
    )

    #: str: *Required* transferToAttendantKey
    transfer_to_attendant_key = Field(type=str, required=True, mutable=False)
    #: str: *Required* transferToVoiceMessagingKey
    transfer_to_voice_messaging_key = Field(type=str, required=True, mutable=False)


class SystemPhysicalLocationGetResponse(OCIResponse):
    """
    Response to ``SystemPhysicalLocationGetRequest()``.

    Contains a list of system Physical Location parameters.
    """

    _ELEMENTS = (
        E(
            "always_allow_emergency_calls", "alwaysAllowEmergencyCalls", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* alwaysAllowEmergencyCalls
    always_allow_emergency_calls = Field(type=bool, required=True, mutable=False)


class SystemPolicyGetDefaultResponse14(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest14()``.

    Contains the default policy settings for the system.
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)


class SystemPolicyGetDefaultResponse14sp1(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest14sp1()``.

    Contains the default policy settings for the system.
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_department_admin_trunk_group_access",
            "groupDepartmentAdminTrunkGroupAccess", str, is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminTrunkGroupAccess
    group_department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminTrunkGroupAccess
    group_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)


class SystemPolicyGetDefaultResponse14sp4(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest14sp4()``.

    Contains the default policy settings for the system.
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_department_admin_trunk_group_access",
            "groupDepartmentAdminTrunkGroupAccess", str, is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E(
            "group_user_enhanced_call_logs_access", "groupUserEnhancedCallLogsAccess",
            str, is_required=True,
        ),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminTrunkGroupAccess
    group_department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserEnhancedCallLogsAccess
    group_user_enhanced_call_logs_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminTrunkGroupAccess
    group_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)


class SystemPolicyGetDefaultResponse16sp1(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest16sp1()``.

    Contains the default policy settings for the system.
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_department_admin_trunk_group_access",
            "groupDepartmentAdminTrunkGroupAccess", str, is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E(
            "group_user_enhanced_call_logs_access", "groupUserEnhancedCallLogsAccess",
            str, is_required=True,
        ),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_session_admission_control_access",
            "groupAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_session_admission_control_access",
            "serviceProviderAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminTrunkGroupAccess
    group_department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserEnhancedCallLogsAccess
    group_user_enhanced_call_logs_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminTrunkGroupAccess
    group_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminSessionAdmissionControlAccess
    group_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminSessionAdmissionControlAccess
    service_provider_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)


class SystemPolicyGetDefaultResponse16sp2(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest16sp2()``.

    Contains the default policy settings for the system.
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_department_admin_trunk_group_access",
            "groupDepartmentAdminTrunkGroupAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_phone_number_extension_access",
            "groupDepartmentAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_calling_line_id_number_access",
            "groupDepartmentAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E(
            "group_user_enhanced_call_logs_access", "groupUserEnhancedCallLogsAccess",
            str, is_required=True,
        ),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_admin_calling_line_id_number_access",
            "groupAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_session_admission_control_access",
            "groupAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "group_admin_dialable_caller_id_access", "groupAdminDialableCallerIDAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_office_zone_access", "groupAdminOfficeZoneAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_number_activation_access", "groupAdminNumberActivationAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_calling_line_id_number_access",
            "serviceProviderAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_session_admission_control_access",
            "serviceProviderAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_office_zone_access",
            "serviceProviderAdminOfficeZoneAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_dialable_caller_id_access",
            "serviceProviderAdminDialableCallerIDAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_number_activation_access",
            "enterpriseAdminNumberActivationAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminTrunkGroupAccess
    group_department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminPhoneNumberExtensionAccess
    group_department_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupDepartmentAdminCallingLineIdNumberAccess
    group_department_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserEnhancedCallLogsAccess
    group_user_enhanced_call_logs_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminCallingLineIdNumberAccess
    group_admin_calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminTrunkGroupAccess
    group_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminSessionAdmissionControlAccess
    group_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminDialableCallerIDAccess
    group_admin_dialable_caller_id_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminOfficeZoneAccess
    group_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminNumberActivationAccess
    group_admin_number_activation_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminCallingLineIdNumberAccess
    service_provider_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminSessionAdmissionControlAccess
    service_provider_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminOfficeZoneAccess
    service_provider_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDialableCallerIDAccess
    service_provider_admin_dialable_caller_id_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* enterpriseAdminNumberActivationAccess
    enterprise_admin_number_activation_access = Field(type=str, required=True, mutable=False)


class SystemPolicyGetDefaultResponse17(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest17()``.

    Contains the default policy settings for the system.
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_department_admin_trunk_group_access",
            "groupDepartmentAdminTrunkGroupAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_phone_number_extension_access",
            "groupDepartmentAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_calling_line_id_number_access",
            "groupDepartmentAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E(
            "group_user_enhanced_call_logs_access", "groupUserEnhancedCallLogsAccess",
            str, is_required=True,
        ),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_admin_calling_line_id_number_access",
            "groupAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_session_admission_control_access",
            "groupAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "group_admin_office_zone_access", "groupAdminOfficeZoneAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_calling_line_id_number_access",
            "serviceProviderAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_session_admission_control_access",
            "serviceProviderAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_office_zone_access",
            "serviceProviderAdminOfficeZoneAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminTrunkGroupAccess
    group_department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminPhoneNumberExtensionAccess
    group_department_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupDepartmentAdminCallingLineIdNumberAccess
    group_department_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserEnhancedCallLogsAccess
    group_user_enhanced_call_logs_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminCallingLineIdNumberAccess
    group_admin_calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminTrunkGroupAccess
    group_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminSessionAdmissionControlAccess
    group_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminOfficeZoneAccess
    group_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminCallingLineIdNumberAccess
    service_provider_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminSessionAdmissionControlAccess
    service_provider_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminOfficeZoneAccess
    service_provider_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)


class SystemPolicyGetDefaultResponse17sp1(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest17sp1()``.

    Contains the default policy settings for the system.  The following elements are only
    used in HSS data mode: serviceProviderAdminCommunicationBarringAccess
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_department_admin_trunk_group_access",
            "groupDepartmentAdminTrunkGroupAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_phone_number_extension_access",
            "groupDepartmentAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_calling_line_id_number_access",
            "groupDepartmentAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E(
            "group_user_enhanced_call_logs_access", "groupUserEnhancedCallLogsAccess",
            str, is_required=True,
        ),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_admin_calling_line_id_number_access",
            "groupAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_session_admission_control_access",
            "groupAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "group_admin_office_zone_access", "groupAdminOfficeZoneAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_calling_line_id_number_access",
            "serviceProviderAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_session_admission_control_access",
            "serviceProviderAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_office_zone_access",
            "serviceProviderAdminOfficeZoneAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_communication_barring_access",
            "serviceProviderAdminCommunicationBarringAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminTrunkGroupAccess
    group_department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminPhoneNumberExtensionAccess
    group_department_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupDepartmentAdminCallingLineIdNumberAccess
    group_department_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserEnhancedCallLogsAccess
    group_user_enhanced_call_logs_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminCallingLineIdNumberAccess
    group_admin_calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminTrunkGroupAccess
    group_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminSessionAdmissionControlAccess
    group_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminOfficeZoneAccess
    group_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminCallingLineIdNumberAccess
    service_provider_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminSessionAdmissionControlAccess
    service_provider_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminOfficeZoneAccess
    service_provider_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminCommunicationBarringAccess
    service_provider_admin_communication_barring_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)


class SystemPolicyGetDefaultResponse17sp3(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest17sp3()``.

    Contains the default policy settings for the system.
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_department_admin_trunk_group_access",
            "groupDepartmentAdminTrunkGroupAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_phone_number_extension_access",
            "groupDepartmentAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_calling_line_id_number_access",
            "groupDepartmentAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E(
            "group_user_enhanced_call_logs_access", "groupUserEnhancedCallLogsAccess",
            str, is_required=True,
        ),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_admin_calling_line_id_number_access",
            "groupAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_session_admission_control_access",
            "groupAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "group_admin_office_zone_access", "groupAdminOfficeZoneAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_dialable_caller_id_access", "groupAdminDialableCallerIDAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_calling_line_id_number_access",
            "serviceProviderAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_session_admission_control_access",
            "serviceProviderAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_office_zone_access",
            "serviceProviderAdminOfficeZoneAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_dialable_caller_id_access",
            "serviceProviderAdminDialableCallerIDAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminTrunkGroupAccess
    group_department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminPhoneNumberExtensionAccess
    group_department_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupDepartmentAdminCallingLineIdNumberAccess
    group_department_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserEnhancedCallLogsAccess
    group_user_enhanced_call_logs_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminCallingLineIdNumberAccess
    group_admin_calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminTrunkGroupAccess
    group_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminSessionAdmissionControlAccess
    group_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminOfficeZoneAccess
    group_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDialableCallerIDAccess
    group_admin_dialable_caller_id_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminCallingLineIdNumberAccess
    service_provider_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminSessionAdmissionControlAccess
    service_provider_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminOfficeZoneAccess
    service_provider_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDialableCallerIDAccess
    service_provider_admin_dialable_caller_id_access = Field(
        type=str, required=True, mutable=False,
    )


class SystemPolicyGetDefaultResponse18(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest18()``.

    Contains the default policy settings for the system.  The following elements are only
    used in AS data mode: GroupAdminDialableCallerIDAccess
    ServiceProviderAdminDialableCallerIDAccess The following elements are only used in HSS
    data mode: serviceProviderAdminCommunicationBarringAccess
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_department_admin_trunk_group_access",
            "groupDepartmentAdminTrunkGroupAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_phone_number_extension_access",
            "groupDepartmentAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_calling_line_id_number_access",
            "groupDepartmentAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E(
            "group_user_enhanced_call_logs_access", "groupUserEnhancedCallLogsAccess",
            str, is_required=True,
        ),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_admin_calling_line_id_number_access",
            "groupAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_session_admission_control_access",
            "groupAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "group_admin_office_zone_access", "groupAdminOfficeZoneAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_number_activation_access", "groupAdminNumberActivationAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_dialable_caller_id_access", "groupAdminDialableCallerIDAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_calling_line_id_number_access",
            "serviceProviderAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_session_admission_control_access",
            "serviceProviderAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_office_zone_access",
            "serviceProviderAdminOfficeZoneAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_communication_barring_access",
            "serviceProviderAdminCommunicationBarringAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_number_activation_access",
            "enterpriseAdminNumberActivationAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_dialable_caller_id_access",
            "serviceProviderAdminDialableCallerIDAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminTrunkGroupAccess
    group_department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminPhoneNumberExtensionAccess
    group_department_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupDepartmentAdminCallingLineIdNumberAccess
    group_department_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserEnhancedCallLogsAccess
    group_user_enhanced_call_logs_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminCallingLineIdNumberAccess
    group_admin_calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminTrunkGroupAccess
    group_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminSessionAdmissionControlAccess
    group_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminOfficeZoneAccess
    group_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminNumberActivationAccess
    group_admin_number_activation_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDialableCallerIDAccess
    group_admin_dialable_caller_id_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminCallingLineIdNumberAccess
    service_provider_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminSessionAdmissionControlAccess
    service_provider_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminOfficeZoneAccess
    service_provider_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminCommunicationBarringAccess
    service_provider_admin_communication_barring_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseAdminNumberActivationAccess
    enterprise_admin_number_activation_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDialableCallerIDAccess
    service_provider_admin_dialable_caller_id_access = Field(
        type=str, required=True, mutable=False,
    )


class SystemPolicyGetDefaultResponse19sp1(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest19sp1()``.

    Contains the default policy settings for the system.  The following elements are only
    used in AS data mode: GroupAdminDialableCallerIDAccess
    ServiceProviderAdminDialableCallerIDAccess
    GroupAdminCommunicationBarringUserProfileAccess (This element is only used for groups
    in an Enterprise) The following elements are only used in HSS data mode:
    serviceProviderAdminCommunicationBarringAccess
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_department_admin_trunk_group_access",
            "groupDepartmentAdminTrunkGroupAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_phone_number_extension_access",
            "groupDepartmentAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_calling_line_id_number_access",
            "groupDepartmentAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E(
            "group_user_enhanced_call_logs_access", "groupUserEnhancedCallLogsAccess",
            str, is_required=True,
        ),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_admin_calling_line_id_number_access",
            "groupAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_session_admission_control_access",
            "groupAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "group_admin_office_zone_access", "groupAdminOfficeZoneAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_number_activation_access", "groupAdminNumberActivationAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_dialable_caller_id_access", "groupAdminDialableCallerIDAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_communication_barring_user_profile_access",
            "groupAdminCommunicationBarringUserProfileAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_calling_line_id_number_access",
            "serviceProviderAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_session_admission_control_access",
            "serviceProviderAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_office_zone_access",
            "serviceProviderAdminOfficeZoneAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_communication_barring_access",
            "serviceProviderAdminCommunicationBarringAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_number_activation_access",
            "enterpriseAdminNumberActivationAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_dialable_caller_id_access",
            "serviceProviderAdminDialableCallerIDAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminTrunkGroupAccess
    group_department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminPhoneNumberExtensionAccess
    group_department_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupDepartmentAdminCallingLineIdNumberAccess
    group_department_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserEnhancedCallLogsAccess
    group_user_enhanced_call_logs_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminCallingLineIdNumberAccess
    group_admin_calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminTrunkGroupAccess
    group_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminSessionAdmissionControlAccess
    group_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminOfficeZoneAccess
    group_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminNumberActivationAccess
    group_admin_number_activation_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDialableCallerIDAccess
    group_admin_dialable_caller_id_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminCommunicationBarringUserProfileAccess
    group_admin_communication_barring_user_profile_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminCallingLineIdNumberAccess
    service_provider_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminSessionAdmissionControlAccess
    service_provider_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminOfficeZoneAccess
    service_provider_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminCommunicationBarringAccess
    service_provider_admin_communication_barring_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseAdminNumberActivationAccess
    enterprise_admin_number_activation_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDialableCallerIDAccess
    service_provider_admin_dialable_caller_id_access = Field(
        type=str, required=True, mutable=False,
    )


class SystemPolicyGetDefaultResponse20(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest20()``.

    Contains the default policy settings for the system.  The following elements are only
    used in AS data mode: GroupAdminDialableCallerIDAccess
    ServiceProviderAdminDialableCallerIDAccess
    GroupAdminCommunicationBarringUserProfileAccess (This element is only used for groups
    in an Enterprise) GroupAdminVerifyTranslationAndRoutingAccess
    ServiceProviderAdminVerifyTranslationAndRoutingAccess The following elements are only
    used in HSS data mode: serviceProviderAdminCommunicationBarringAccess
    """

    _ELEMENTS = (
        E("group_calling_plan_access", "groupCallingPlanAccess", str, is_required=True),
        E("group_extension_access", "groupExtensionAccess", str, is_required=True),
        E(
            "group_ldap_integration_access", "groupLDAPIntegrationAccess", str,
            is_required=True,
        ),
        E("group_voice_messaging_access", "groupVoiceMessagingAccess", str, is_required=True),
        E(
            "group_department_admin_user_access", "groupDepartmentAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "group_department_admin_trunk_group_access",
            "groupDepartmentAdminTrunkGroupAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_phone_number_extension_access",
            "groupDepartmentAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_department_admin_calling_line_id_number_access",
            "groupDepartmentAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "group_user_authentication_access", "groupUserAuthenticationAccess", str,
            is_required=True,
        ),
        E(
            "group_user_group_directory_access", "groupUserGroupDirectoryAccess", str,
            is_required=True,
        ),
        E("group_user_profile_access", "groupUserProfileAccess", str, is_required=True),
        E(
            "group_user_enhanced_call_logs_access", "groupUserEnhancedCallLogsAccess",
            str, is_required=True,
        ),
        E(
            "group_user_auto_attendant_name_dialing_access",
            "groupUserAutoAttendantNameDialingAccess", str, is_required=True,
        ),
        E("group_admin_profile_access", "groupAdminProfileAccess", str, is_required=True),
        E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
        E("group_admin_admin_access", "groupAdminAdminAccess", str, is_required=True),
        E(
            "group_admin_department_access", "groupAdminDepartmentAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_access_device_access", "groupAdminAccessDeviceAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_enhanced_service_instance_access",
            "groupAdminEnhancedServiceInstanceAccess", str, is_required=True,
        ),
        E(
            "group_admin_feature_access_code_access", "groupAdminFeatureAccessCodeAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_phone_number_extension_access",
            "groupAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "group_admin_calling_line_id_number_access",
            "groupAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E("group_admin_service_access", "groupAdminServiceAccess", str, is_required=True),
        E(
            "group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_verify_translation_and_routing_access",
            "groupAdminVerifyTranslationAndRoutingAccess", str, is_required=True,
        ),
        E(
            "group_admin_session_admission_control_access",
            "groupAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "group_admin_office_zone_access", "groupAdminOfficeZoneAccess", str,
            is_required=True,
        ),
        E(
            "group_admin_number_activation_access", "groupAdminNumberActivationAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_dialable_caller_id_access", "groupAdminDialableCallerIDAccess",
            str, is_required=True,
        ),
        E(
            "group_admin_communication_barring_user_profile_access",
            "groupAdminCommunicationBarringUserProfileAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_profile_access", "serviceProviderAdminProfileAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_group_access", "serviceProviderAdminGroupAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_user_access", "serviceProviderAdminUserAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_admin_access", "serviceProviderAdminAdminAccess", str,
            is_required=True,
        ),
        E(
            "service_provider_admin_department_access",
            "serviceProviderAdminDepartmentAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_access_device_access",
            "serviceProviderAdminAccessDeviceAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_phone_number_extension_access",
            "serviceProviderAdminPhoneNumberExtensionAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_calling_line_id_number_access",
            "serviceProviderAdminCallingLineIdNumberAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_service_access", "serviceProviderAdminServiceAccess",
            str, is_required=True,
        ),
        E(
            "service_provider_admin_service_pack_access",
            "serviceProviderAdminServicePackAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_session_admission_control_access",
            "serviceProviderAdminSessionAdmissionControlAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_verify_translation_and_routing_access",
            "serviceProviderAdminVerifyTranslationAndRoutingAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_web_branding_access",
            "serviceProviderAdminWebBrandingAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_office_zone_access",
            "serviceProviderAdminOfficeZoneAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_communication_barring_access",
            "serviceProviderAdminCommunicationBarringAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_network_policy_access",
            "enterpriseAdminNetworkPolicyAccess", str, is_required=True,
        ),
        E(
            "enterprise_admin_number_activation_access",
            "enterpriseAdminNumberActivationAccess", str, is_required=True,
        ),
        E(
            "service_provider_admin_dialable_caller_id_access",
            "serviceProviderAdminDialableCallerIDAccess", str, is_required=True,
        ),
    )

    #: str: *Required* groupCallingPlanAccess
    group_calling_plan_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupExtensionAccess
    group_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupLDAPIntegrationAccess
    group_ldap_integration_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupVoiceMessagingAccess
    group_voice_messaging_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminUserAccess
    group_department_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminTrunkGroupAccess
    group_department_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupDepartmentAdminPhoneNumberExtensionAccess
    group_department_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupDepartmentAdminCallingLineIdNumberAccess
    group_department_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupUserAuthenticationAccess
    group_user_authentication_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserGroupDirectoryAccess
    group_user_group_directory_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserProfileAccess
    group_user_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserEnhancedCallLogsAccess
    group_user_enhanced_call_logs_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupUserAutoAttendantNameDialingAccess
    group_user_auto_attendant_name_dialing_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminProfileAccess
    group_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminUserAccess
    group_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAdminAccess
    group_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDepartmentAccess
    group_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminAccessDeviceAccess
    group_admin_access_device_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminEnhancedServiceInstanceAccess
    group_admin_enhanced_service_instance_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminFeatureAccessCodeAccess
    group_admin_feature_access_code_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminPhoneNumberExtensionAccess
    group_admin_phone_number_extension_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminCallingLineIdNumberAccess
    group_admin_calling_line_id_number_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminServiceAccess
    group_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminTrunkGroupAccess
    group_admin_trunk_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminVerifyTranslationAndRoutingAccess
    group_admin_verify_translation_and_routing_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminSessionAdmissionControlAccess
    group_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* groupAdminOfficeZoneAccess
    group_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminNumberActivationAccess
    group_admin_number_activation_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminDialableCallerIDAccess
    group_admin_dialable_caller_id_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupAdminCommunicationBarringUserProfileAccess
    group_admin_communication_barring_user_profile_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminProfileAccess
    service_provider_admin_profile_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminGroupAccess
    service_provider_admin_group_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminUserAccess
    service_provider_admin_user_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAdminAccess
    service_provider_admin_admin_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDepartmentAccess
    service_provider_admin_department_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminAccessDeviceAccess
    service_provider_admin_access_device_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminPhoneNumberExtensionAccess
    service_provider_admin_phone_number_extension_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminCallingLineIdNumberAccess
    service_provider_admin_calling_line_id_number_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminServiceAccess
    service_provider_admin_service_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminServicePackAccess
    service_provider_admin_service_pack_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminSessionAdmissionControlAccess
    service_provider_admin_session_admission_control_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminVerifyTranslationAndRoutingAccess
    service_provider_admin_verify_translation_and_routing_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* serviceProviderAdminWebBrandingAccess
    service_provider_admin_web_branding_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminOfficeZoneAccess
    service_provider_admin_office_zone_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminCommunicationBarringAccess
    service_provider_admin_communication_barring_access = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* enterpriseAdminNetworkPolicyAccess
    enterprise_admin_network_policy_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* enterpriseAdminNumberActivationAccess
    enterprise_admin_number_activation_access = Field(type=str, required=True, mutable=False)
    #: str: *Required* serviceProviderAdminDialableCallerIDAccess
    service_provider_admin_dialable_caller_id_access = Field(
        type=str, required=True, mutable=False,
    )


class SystemPortalAPIGetACLListResponse(OCIResponse):
    """
    Response to ``SystemPortalAPIGetACLListRequest()``.

    Returns a table with column headings: "Net Address" and "Description".
    """

    _ELEMENTS = (
        E("acl_table", "aclTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* aclTable  *Tabular*
    acl_table = Field(type=list, required=True, mutable=False)


class SystemPortalPasscodeRulesGetResponse(OCIResponse):
    """
    Response to ``SystemPortalPasscodeRulesGetRequest()``.

    Contains the system passcode rules setting.
    """

    _ELEMENTS = (
        E("disallow_repeated_digits", "disallowRepeatedDigits", bool, is_required=True),
        E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
        E(
            "disallow_reversed_user_number", "disallowReversedUserNumber", bool,
            is_required=True,
        ),
        E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
        E(
            "disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool,
            is_required=True,
        ),
        E("min_code_length", "minCodeLength", int, is_required=True),
        E("max_code_length", "maxCodeLength", int, is_required=True),
        E(
            "disable_login_after_max_failed_login_attempts",
            "disableLoginAfterMaxFailedLoginAttempts", bool, is_required=True,
        ),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
        E("expire_password", "expirePassword", bool, is_required=True),
        E("passcode_expires_days", "passcodeExpiresDays", int),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
        E("default_password", "defaultPassword", str, is_required=True),
    )

    #: bool: *Required* disallowRepeatedDigits
    disallow_repeated_digits = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowUserNumber
    disallow_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedUserNumber
    disallow_reversed_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPasscode
    disallow_old_passcode = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPasscode
    disallow_reversed_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minCodeLength
    min_code_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCodeLength
    max_code_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableLoginAfterMaxFailedLoginAttempts
    disable_login_after_max_failed_login_attempts = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=False, mutable=False)
    #: bool: *Required* expirePassword
    expire_password = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passcodeExpiresDays
    passcode_expires_days = Field(type=int, required=False, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* defaultPassword
    default_password = Field(type=str, required=True, mutable=False)


class SystemPortalPasscodeRulesGetResponse19(OCIResponse):
    """
    Response to ``SystemPortalPasscodeRulesGetRequest()``.

    Contains the system passcode rules setting.  The following elements are only used in
    AS data mode: numberOfRepeatedDigits disallowRepeatedPatterns
    disallowContiguousSequences numberOfAscendingDigits numberOfDescendingDigits
    numberOfPreviousPasscodes
    """

    _ELEMENTS = (
        E("disallow_repeated_digits", "disallowRepeatedDigits", bool, is_required=True),
        E("number_of_repeated_digits", "numberOfRepeatedDigits", int, is_required=True),
        E("disallow_repeated_patterns", "disallowRepeatedPatterns", bool, is_required=True),
        E(
            "disallow_contiguous_sequences", "disallowContiguousSequences", bool,
            is_required=True,
        ),
        E("number_of_ascending_digits", "numberOfAscendingDigits", int, is_required=True),
        E("number_of_descending_digits", "numberOfDescendingDigits", int, is_required=True),
        E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
        E(
            "disallow_reversed_user_number", "disallowReversedUserNumber", bool,
            is_required=True,
        ),
        E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
        E("number_of_previous_passcodes", "numberOfPreviousPasscodes", int, is_required=True),
        E(
            "disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool,
            is_required=True,
        ),
        E("min_code_length", "minCodeLength", int, is_required=True),
        E("max_code_length", "maxCodeLength", int, is_required=True),
        E(
            "disable_login_after_max_failed_login_attempts",
            "disableLoginAfterMaxFailedLoginAttempts", bool, is_required=True,
        ),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
        E("expire_password", "expirePassword", bool, is_required=True),
        E("passcode_expires_days", "passcodeExpiresDays", int),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
        E("default_password", "defaultPassword", str, is_required=True),
    )

    #: bool: *Required* disallowRepeatedDigits
    disallow_repeated_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfRepeatedDigits
    number_of_repeated_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disallowRepeatedPatterns
    disallow_repeated_patterns = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowContiguousSequences
    disallow_contiguous_sequences = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfAscendingDigits
    number_of_ascending_digits = Field(type=int, required=True, mutable=False)
    #: int: *Required* numberOfDescendingDigits
    number_of_descending_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disallowUserNumber
    disallow_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedUserNumber
    disallow_reversed_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPasscode
    disallow_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* numberOfPreviousPasscodes
    number_of_previous_passcodes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPasscode
    disallow_reversed_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minCodeLength
    min_code_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCodeLength
    max_code_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableLoginAfterMaxFailedLoginAttempts
    disable_login_after_max_failed_login_attempts = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=False, mutable=False)
    #: bool: *Required* expirePassword
    expire_password = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passcodeExpiresDays
    passcode_expires_days = Field(type=int, required=False, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* defaultPassword
    default_password = Field(type=str, required=True, mutable=False)


class SystemPreferredCarrierGetGroupListResponse(OCIResponse):
    """
    Response to a ``SystemPreferredCarrierGetGroupListRequest()``.

    Contains a table with one row per group.  The table columns are: "Group Id", "Group
    Name", "Organization Id", "Organization Type". The "Organization Id" column is
    populated with either a service provider Id or an enterprise Id.  The "Organization
    Type" column is populated with one of the enumerated strings defined in the
    OrganizationType OCI data type.  Please see OCISchemaDataTypes.xsd for details on
    OrganizationType.
    """

    _ELEMENTS = (
        E(
            "groups_using_carrier_table", "groupsUsingCarrierTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* groupsUsingCarrierTable  *Tabular*
    groups_using_carrier_table = Field(type=list, required=True, mutable=False)


class SystemPreferredCarrierGetListResponse(OCIResponse):
    """
    Response to a ``SystemPreferredCarrierGetListRequest()``.

    Contains a table with one row per carrier.  The table columns are: "Carrier", "Country
    Code", "CIC", "Is Intra-Lata", "Is Inter-Lata", "Is International". The value in the
    "Is Intra-Lata", "Is Inter-Lata", and "Is International" columns is one of "true" or
    "false".
    """

    _ELEMENTS = (
        E(
            "system_carrier_table", "systemCarrierTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* systemCarrierTable  *Tabular*
    system_carrier_table = Field(type=list, required=True, mutable=False)


class SystemPreferredCarrierGetResponse(OCIResponse):
    """
    Response to a ``SystemPreferredCarrierGetRequest()``.

    Contains the attributes of a carrier.
    """

    _ELEMENTS = (
        E("cic", "cic", str, is_required=True),
        E("country_code", "countryCode", str, is_required=True),
        E("is_intra_lata", "isIntraLata", bool, is_required=True),
        E("is_inter_lata", "isInterLata", bool, is_required=True),
        E("is_international", "isInternational", bool, is_required=True),
    )

    #: str: *Required* cic
    cic = Field(type=str, required=True, mutable=False)
    #: str: *Required* countryCode
    country_code = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isIntraLata
    is_intra_lata = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isInterLata
    is_inter_lata = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isInternational
    is_international = Field(type=bool, required=True, mutable=False)


class SystemPreferredCarrierGetUserListResponse(OCIResponse):
    """
    Response to a ``SystemPreferredCarrierGetUserListRequest()``.

    Contains a table with one row per user.  The table columns are: "User Id", "Service
    Provider Id", "Group Id", "Last Name", "First Name", "Phone Number", "Email Address",
    "Hiragana Last Name", and "Hiragana First Name", "Extension", "Department".
    """

    _ELEMENTS = (
        E(
            "users_using_carrier_table", "usersUsingCarrierTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* usersUsingCarrierTable  *Tabular*
    users_using_carrier_table = Field(type=list, required=True, mutable=False)


class SystemProvisioningValidationGetResponse(OCIResponse):
    """
    Response to the ``SystemProvisioningValidationGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class SystemProvisioningValidationGetResponse14sp2(OCIResponse):
    """
    Response to the ``SystemProvisioningValidationGetRequest14sp2()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "is_network_server_query_active", "isNetworkServerQueryActive", bool,
            is_required=True,
        ),
        E("timeout_seconds", "timeoutSeconds", int, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isNetworkServerQueryActive
    is_network_server_query_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeoutSeconds
    timeout_seconds = Field(type=int, required=True, mutable=False)


class SystemRedundancyParametersGetResponse(OCIResponse):
    """
    Replaced By ``SystemRedundancyParametersGetResponse16sp2()`` Response to
    ``SystemRedundancyParametersGetRequest()``.

    Contains a list of system Redundancy parameters.
    """

    _ELEMENTS = (
        E("roll_back_timer_minutes", "rollBackTimerMinutes", int, is_required=True),
    )

    #: int: *Required* rollBackTimerMinutes
    roll_back_timer_minutes = Field(type=int, required=True, mutable=False)


class SystemRedundancyParametersGetResponse16sp2(OCIResponse):
    """
    Response to ``SystemRedundancyParametersGetRequest16sp2()``.

    Contains a list of system Redundancy parameters.
    """

    _ELEMENTS = (
        E("roll_back_timer_minutes", "rollBackTimerMinutes", int, is_required=True),
        E(
            "send_sip_option_message_upon_migration", "sendSipOptionMessageUponMigration",
            bool, is_required=True,
        ),
    )

    #: int: *Required* rollBackTimerMinutes
    roll_back_timer_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendSipOptionMessageUponMigration
    send_sip_option_message_upon_migration = Field(type=bool, required=True, mutable=False)


class SystemRoamingNetworkGetListResponse(OCIResponse):
    """
    Response to the ``SystemRoamingNetworkGetListRequest()``.

    Contains a table with columns: "MSC Address", "Network Translation Index".
    """

    _ELEMENTS = (
        E(
            "roaming_network_table", "roamingNetworkTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* roamingNetworkTable  *Tabular*
    roaming_network_table = Field(type=list, required=True, mutable=False)


class SystemRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse(OCIResponse):
    """
    Response to ``SystemRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest()``.

    The column headings are "Number Range Start", "Number Range End", "Service Provider
    Id", "Is Enterprise", "User Id", "Enterprise Trunk" and "Is Active".
    """

    _ELEMENTS = (
        E(
            "number_range_summary_table", "numberRangeSummaryTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* numberRangeSummaryTable  *Tabular*
    number_range_summary_table = Field(type=list, required=True, mutable=False)


class SystemRoutePointExternalSystemApplicationControllerGetResponse(OCIResponse):
    """
    Response to the ``SystemRoutePointExternalSystemApplicationControllerGetRequest()``.

    """

    _ELEMENTS = (
        E("application_controller", "applicationController", str, is_array=True),
    )

    #: list(str): *Optional* applicationController  *Array*
    application_controller = Field(type=list, required=False, mutable=False)


class SystemRoutePointExternalSystemGetListResponse(OCIResponse):
    """
    Response to the ``SystemRoutePointExternalSystemGetListRequest()``.

    Contains a table with column headings: "External System", "Description".
    """

    _ELEMENTS = (
        E(
            "external_system_table", "externalSystemTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* externalSystemTable  *Tabular*
    external_system_table = Field(type=list, required=True, mutable=False)


class SystemRoutePointExternalSystemGetRoutePointListResponse(OCIResponse):
    """
    Response to the ``SystemRoutePointExternalSystemGetRoutePointListRequest()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_array=True),
    )

    #: list(str): *Optional* serviceUserId  *Array*
    service_user_id = Field(type=list, required=False, mutable=False)


class SystemRoutingGetResponse(OCIResponse):
    """
    Response to ``SystemRoutingGetRequest()``.

    """

    _ELEMENTS = (
        E("is_route_round_robin", "isRouteRoundRobin", bool, is_required=True),
        E("route_timer_seconds", "routeTimerSeconds", int, is_required=True),
        E(
            "dns_resolved_address_selection_policy", "dnsResolvedAddressSelectionPolicy",
            str, is_required=True,
        ),
        E("stateful_expiration_minutes", "statefulExpirationMinutes", int, is_required=True),
        E("max_addresses_per_hostname", "maxAddressesPerHostname", int, is_required=True),
        E("max_addresses_during_setup", "maxAddressesDuringSetup", int, is_required=True),
    )

    #: bool: *Required* isRouteRoundRobin
    is_route_round_robin = Field(type=bool, required=True, mutable=False)
    #: int: *Required* routeTimerSeconds
    route_timer_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* dnsResolvedAddressSelectionPolicy
    dns_resolved_address_selection_policy = Field(type=str, required=True, mutable=False)
    #: int: *Required* statefulExpirationMinutes
    stateful_expiration_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxAddressesPerHostname
    max_addresses_per_hostname = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxAddressesDuringSetup
    max_addresses_during_setup = Field(type=int, required=True, mutable=False)


class SystemRoutingGetRouteDeviceListResponse(OCIResponse):
    """
    Response to ``SystemRoutingGetRouteDeviceListRequest()``.

    The column headings are "Net Address", "Port", "Transport" and "Description".
    """

    _ELEMENTS = (
        E(
            "route_device_table", "routeDeviceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* routeDeviceTable  *Tabular*
    route_device_table = Field(type=list, required=True, mutable=False)


class SystemRoutingGetRouteListResponse(OCIResponse):
    """
    Response to ``SystemRoutingGetRouteListRequest()``.

    """

    _ELEMENTS = (
        E("route_name", "routeName", str, is_array=True),
    )

    #: list(str): *Optional* routeName  *Array*
    route_name = Field(type=list, required=False, mutable=False)


class SystemRoutingGetTranslationListResponse(OCIResponse):
    """
    Response to ``SystemRoutingGetTranslationListRequest()``.

    The column headings are "Routing Digits" and "Route".
    """

    _ELEMENTS = (
        E(
            "routing_table", "routingTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* routingTable  *Tabular*
    routing_table = Field(type=list, required=True, mutable=False)


class SystemRoutingProfileGetListResponse(OCIResponse):
    """
    Response to ``SystemRoutingProfileGetListRequest()``.

    Returns a list of routing profiles defined in the system.
    """

    _ELEMENTS = (
        E("routing_profile", "routingProfile", str, is_required=True),
    )

    #: str: *Required* routingProfile
    routing_profile = Field(type=str, required=True, mutable=False)


class SystemSIPAuthenticationEndpointLockoutGetResponse(OCIResponse):
    """
    Response to ``SystemSIPAuthenticationEndpointLockoutGetRequest()``.

    The column headings for the lockoutTable are: "Organization Id", "Organization Type",
    "Group Id", "Line/Port", "User ID", "First Name", "Last Name", "Lockout Started",
    "Lockout Expires", "Lockout Count". Lockout times are shown in the system GMT time.
    When a permanent lockout is shown, the "Lockout Expires" column is empty and the
    "Lockout Count" column contains the word Permanent.
    """

    _ELEMENTS = (
        E(
            "lockout_table", "lockoutTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* lockoutTable  *Tabular*
    lockout_table = Field(type=list, required=True, mutable=False)


class SystemSIPAuthenticationPasswordRulesGetResponse(OCIResponse):
    """
    Response to ``SystemSIPAuthenticationPasswordRulesGetRequest()``.

    Contains the SIP authentication password rules for the system.
    """

    _ELEMENTS = (
        E(
            "disallow_authentication_name", "disallowAuthenticationName", bool,
            is_required=True,
        ),
        E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
        E(
            "disallow_reversed_old_password", "disallowReversedOldPassword", bool,
            is_required=True,
        ),
        E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
        E("min_digits", "minDigits", int, is_required=True),
        E(
            "restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool,
            is_required=True,
        ),
        E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
        E(
            "restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool,
            is_required=True,
        ),
        E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
        E(
            "restrict_min_non_alphanumeric_characters",
            "restrictMinNonAlphanumericCharacters", bool, is_required=True,
        ),
        E(
            "min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int,
            is_required=True,
        ),
        E("min_length", "minLength", int, is_required=True),
        E(
            "send_permanent_lockout_notification", "sendPermanentLockoutNotification",
            bool, is_required=True,
        ),
        E(
            "permanent_lockout_notify_email_address",
            "permanentLockoutNotifyEmailAddress", str,
        ),
        E(
            "endpoint_authentication_lockout_type", "endpointAuthenticationLockoutType",
            str, is_required=True,
        ),
        E(
            "endpoint_temporary_lockout_threshold", "endpointTemporaryLockoutThreshold",
            int, is_required=True,
        ),
        E("endpoint_wait_algorithm", "endpointWaitAlgorithm", str, is_required=True),
        E(
            "endpoint_lockout_fixed_minutes", "endpointLockoutFixedMinutes", str,
            is_required=True,
        ),
        E(
            "endpoint_permanent_lockout_threshold", "endpointPermanentLockoutThreshold",
            int, is_required=True,
        ),
        E(
            "trunk_group_authentication_lockout_type",
            "trunkGroupAuthenticationLockoutType", str, is_required=True,
        ),
        E(
            "trunk_group_temporary_lockout_threshold",
            "trunkGroupTemporaryLockoutThreshold", int, is_required=True,
        ),
        E("trunk_group_wait_algorithm", "trunkGroupWaitAlgorithm", str, is_required=True),
        E(
            "trunk_group_lockout_fixed_minutes", "trunkGroupLockoutFixedMinutes", str,
            is_required=True,
        ),
        E(
            "trunk_group_permanent_lockout_threshold",
            "trunkGroupPermanentLockoutThreshold", int, is_required=True,
        ),
    )

    #: bool: *Required* disallowAuthenticationName
    disallow_authentication_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPassword
    disallow_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPassword
    disallow_reversed_old_password = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* restrictMinDigits
    restrict_min_digits = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minDigits
    min_digits = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinUpperCaseLetters
    restrict_min_upper_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minUpperCaseLetters
    min_upper_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinLowerCaseLetters
    restrict_min_lower_case_letters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minLowerCaseLetters
    min_lower_case_letters = Field(type=int, required=True, mutable=False)
    #: bool: *Required* restrictMinNonAlphanumericCharacters
    restrict_min_non_alphanumeric_characters = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minNonAlphanumericCharacters
    min_non_alphanumeric_characters = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLength
    min_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* sendPermanentLockoutNotification
    send_permanent_lockout_notification = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* permanentLockoutNotifyEmailAddress
    permanent_lockout_notify_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* endpointAuthenticationLockoutType
    endpoint_authentication_lockout_type = Field(type=str, required=True, mutable=False)
    #: int: *Required* endpointTemporaryLockoutThreshold
    endpoint_temporary_lockout_threshold = Field(type=int, required=True, mutable=False)
    #: str: *Required* endpointWaitAlgorithm
    endpoint_wait_algorithm = Field(type=str, required=True, mutable=False)
    #: str: *Required* endpointLockoutFixedMinutes
    endpoint_lockout_fixed_minutes = Field(type=str, required=True, mutable=False)
    #: int: *Required* endpointPermanentLockoutThreshold
    endpoint_permanent_lockout_threshold = Field(type=int, required=True, mutable=False)
    #: str: *Required* trunkGroupAuthenticationLockoutType
    trunk_group_authentication_lockout_type = Field(type=str, required=True, mutable=False)
    #: int: *Required* trunkGroupTemporaryLockoutThreshold
    trunk_group_temporary_lockout_threshold = Field(type=int, required=True, mutable=False)
    #: str: *Required* trunkGroupWaitAlgorithm
    trunk_group_wait_algorithm = Field(type=str, required=True, mutable=False)
    #: str: *Required* trunkGroupLockoutFixedMinutes
    trunk_group_lockout_fixed_minutes = Field(type=str, required=True, mutable=False)
    #: int: *Required* trunkGroupPermanentLockoutThreshold
    trunk_group_permanent_lockout_threshold = Field(type=int, required=True, mutable=False)


class SystemSIPAuthenticationTrunkGroupLockoutGetResponse(OCIResponse):
    """
    Response to ``SystemSIPAuthenticationTrunkGroupLockoutGetRequest()``.

    The column headings for the lockoutTable are: "Organization Id", "Organization Type",
    "Group Id", "Trunk Group Name", "Lockout Started", "Lockout Expires", "Lockout Count".
    Lockout times are shown in the system GMT time.  When a permanent lockout is shown,
    the "Lockout Expires" column is empty and the "Lockout Count" column contains the word
    Permanent.
    """

    _ELEMENTS = (
        E(
            "lockout_table", "lockoutTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* lockoutTable  *Tabular*
    lockout_table = Field(type=list, required=True, mutable=False)


class SystemSIPDeviceTypeFileGetListResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetListRequest()``.

    Contains a table of device files managed by the Device Management System on a per-
    device type basis.  The column headings are: "File Type", "File Format", "Is
    Authenticated".

    Replaced By: ``SystemSIPDeviceTypeFileGetListResponse14sp8()``
    """

    _ELEMENTS = (
        E(
            "device_type_files_table", "deviceTypeFilesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceTypeFilesTable  *Tabular*
    device_type_files_table = Field(type=list, required=True, mutable=False)


class SystemSIPDeviceTypeFileGetListResponse14sp8(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetListRequest14sp8()``.

    Contains a table of device files managed by the Device Management System on a per-
    device type basis.  The column headings are: "File Format", "Is Authenticated",
    "Access URL", "Repository URL", "Template URL".
    """

    _ELEMENTS = (
        E(
            "device_type_files_table", "deviceTypeFilesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceTypeFilesTable  *Tabular*
    device_type_files_table = Field(type=list, required=True, mutable=False)


class SystemSIPDeviceTypeFileGetResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetRequest()``.

    Replaced By: ``SystemSIPDeviceTypeFileGetResponse14sp8()``
    """

    _ELEMENTS = (
        E("file_format", "fileFormat", str, is_required=True),
        E("remote_file_format", "remoteFileFormat", str, is_required=True),
        E("file_category", "fileCategory", str, is_required=True),
        E("allow_file_customization", "allowFileCustomization", bool, is_required=True),
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E(
            "use_http_digest_authentication", "useHttpDigestAuthentication", bool,
            is_required=True,
        ),
        E(
            "mac_based_file_authentication", "macBasedFileAuthentication", bool,
            is_required=True,
        ),
        E(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication", bool, is_required=True,
        ),
        E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
        E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
    )

    #: str: *Required* fileFormat
    file_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* remoteFileFormat
    remote_file_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileCategory
    file_category = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowFileCustomization
    allow_file_customization = Field(type=bool, required=True, mutable=False)
    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useHttpDigestAuthentication
    use_http_digest_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macBasedFileAuthentication
    mac_based_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* userNamePasswordFileAuthentication
    user_name_password_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macInNonRequestURI
    mac_in_non_request_uri = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* macFormatInNonRequestURI
    mac_format_in_non_request_uri = Field(type=str, required=False, mutable=False)


class SystemSIPDeviceTypeFileGetResponse14sp8(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetRequest14sp8()``.

    """

    _ELEMENTS = (
        E("remote_file_format", "remoteFileFormat", str, is_required=True),
        E("file_category", "fileCategory", str, is_required=True),
        E("allow_file_customization", "allowFileCustomization", bool, is_required=True),
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E(
            "use_http_digest_authentication", "useHttpDigestAuthentication", bool,
            is_required=True,
        ),
        E(
            "mac_based_file_authentication", "macBasedFileAuthentication", bool,
            is_required=True,
        ),
        E(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication", bool, is_required=True,
        ),
        E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
        E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
    )

    #: str: *Required* remoteFileFormat
    remote_file_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileCategory
    file_category = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowFileCustomization
    allow_file_customization = Field(type=bool, required=True, mutable=False)
    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useHttpDigestAuthentication
    use_http_digest_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macBasedFileAuthentication
    mac_based_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* userNamePasswordFileAuthentication
    user_name_password_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macInNonRequestURI
    mac_in_non_request_uri = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* macFormatInNonRequestURI
    mac_format_in_non_request_uri = Field(type=str, required=False, mutable=False)


class SystemSIPDeviceTypeFileGetResponse16sp1(OCIResponse):
    """
    Replaced By ``SystemSIPDeviceTypeFileGetResponse18()``.

    Response to ``SystemSIPDeviceTypeFileGetRequest16sp1()``.
    """

    _ELEMENTS = (
        E("remote_file_format", "remoteFileFormat", str, is_required=True),
        E("file_category", "fileCategory", str, is_required=True),
        E("file_customization", "fileCustomization", str, is_required=True),
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E(
            "use_http_digest_authentication", "useHttpDigestAuthentication", bool,
            is_required=True,
        ),
        E(
            "mac_based_file_authentication", "macBasedFileAuthentication", bool,
            is_required=True,
        ),
        E(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication", bool, is_required=True,
        ),
        E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
        E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
    )

    #: str: *Required* remoteFileFormat
    remote_file_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileCategory
    file_category = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileCustomization
    file_customization = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useHttpDigestAuthentication
    use_http_digest_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macBasedFileAuthentication
    mac_based_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* userNamePasswordFileAuthentication
    user_name_password_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macInNonRequestURI
    mac_in_non_request_uri = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* macFormatInNonRequestURI
    mac_format_in_non_request_uri = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)


class SystemSIPDeviceTypeFileGetResponse18(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetRequest18()``.

    Take note: 1. accessUrl may have undefined content.  When it is the case, undefined
    content is put between []. It may also be set to "Error Access FQDN Not Provisioned"
    when the access FQDN is not set, or "Error Access Context Name Not Provisioned" when
    the context name is not set.  2. repositoryUrl may be set to
    "DEVICE_CONFIGURATION_FILE_REPOSITORY_MISSING", if there is no file repository
    defined.
    """

    _ELEMENTS = (
        E("remote_file_format", "remoteFileFormat", str, is_required=True),
        E("file_category", "fileCategory", str, is_required=True),
        E("file_customization", "fileCustomization", str, is_required=True),
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E(
            "use_http_digest_authentication", "useHttpDigestAuthentication", bool,
            is_required=True,
        ),
        E(
            "mac_based_file_authentication", "macBasedFileAuthentication", bool,
            is_required=True,
        ),
        E(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication", bool, is_required=True,
        ),
        E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
        E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
        E("allow_http", "allowHttp", bool, is_required=True),
        E("allow_https", "allowHttps", bool, is_required=True),
        E("allow_tftp", "allowTftp", bool, is_required=True),
        E("enable_caching", "enableCaching", bool, is_required=True),
    )

    #: str: *Required* remoteFileFormat
    remote_file_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileCategory
    file_category = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileCustomization
    file_customization = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useHttpDigestAuthentication
    use_http_digest_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macBasedFileAuthentication
    mac_based_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* userNamePasswordFileAuthentication
    user_name_password_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macInNonRequestURI
    mac_in_non_request_uri = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* macFormatInNonRequestURI
    mac_format_in_non_request_uri = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowHttp
    allow_http = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowHttps
    allow_https = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTftp
    allow_tftp = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCaching
    enable_caching = Field(type=bool, required=True, mutable=False)


class SystemSIPDeviceTypeFileGetResponse19(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetRequest19()``.

    Take note: 1. accessUrl may have undefined content.  When it is the case, undefined
    content is put between []. It may also be set to "Error Access FQDN Not Provisioned"
    when the access FQDN is not set, or "Error Access Context Name Not Provisioned" when
    the context name is not set.  2. repositoryUrl may be set to
    "DEVICE_CONFIGURATION_FILE_REPOSITORY_MISSING", if there is no file repository
    defined.
    """

    _ELEMENTS = (
        E("remote_file_format", "remoteFileFormat", str, is_required=True),
        E("file_category", "fileCategory", str, is_required=True),
        E("file_customization", "fileCustomization", str, is_required=True),
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E(
            "use_http_digest_authentication", "useHttpDigestAuthentication", bool,
            is_required=True,
        ),
        E(
            "mac_based_file_authentication", "macBasedFileAuthentication", bool,
            is_required=True,
        ),
        E(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication", bool, is_required=True,
        ),
        E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
        E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
        E("allow_http", "allowHttp", bool, is_required=True),
        E("allow_https", "allowHttps", bool, is_required=True),
        E("allow_tftp", "allowTftp", bool, is_required=True),
        E("enable_caching", "enableCaching", bool, is_required=True),
        E("allow_upload_from_device", "allowUploadFromDevice", bool, is_required=True),
    )

    #: str: *Required* remoteFileFormat
    remote_file_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileCategory
    file_category = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileCustomization
    file_customization = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useHttpDigestAuthentication
    use_http_digest_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macBasedFileAuthentication
    mac_based_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* userNamePasswordFileAuthentication
    user_name_password_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macInNonRequestURI
    mac_in_non_request_uri = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* macFormatInNonRequestURI
    mac_format_in_non_request_uri = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowHttp
    allow_http = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowHttps
    allow_https = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTftp
    allow_tftp = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCaching
    enable_caching = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUploadFromDevice
    allow_upload_from_device = Field(type=bool, required=True, mutable=False)


class SystemSIPDeviceTypeFileGetResponse20(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetRequest20()``.

    Take note: 1. accessUrl may have undefined content.  When it is the case, undefined
    content is put between []. It may also be set to "Error Access FQDN Not Provisioned"
    when the access FQDN is not set, or "Error Access Context Name Not Provisioned" when
    the context name is not set.  2. repositoryUrl may be set to
    "DEVICE_CONFIGURATION_FILE_REPOSITORY_MISSING", if there is no file repository
    defined.
    """

    _ELEMENTS = (
        E("remote_file_format", "remoteFileFormat", str, is_required=True),
        E("file_category", "fileCategory", str, is_required=True),
        E("file_customization", "fileCustomization", str, is_required=True),
        E("file_source", "fileSource", str, is_required=True),
        E("configuration_file_name", "configurationFileName", str),
        E(
            "use_http_digest_authentication", "useHttpDigestAuthentication", bool,
            is_required=True,
        ),
        E(
            "mac_based_file_authentication", "macBasedFileAuthentication", bool,
            is_required=True,
        ),
        E(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication", bool, is_required=True,
        ),
        E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
        E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        E("access_url", "accessUrl", str, is_required=True),
        E("repository_url", "repositoryUrl", str),
        E("template_url", "templateUrl", str),
        E("allow_http", "allowHttp", bool, is_required=True),
        E("allow_https", "allowHttps", bool, is_required=True),
        E("allow_tftp", "allowTftp", bool, is_required=True),
        E("enable_caching", "enableCaching", bool, is_required=True),
        E("allow_upload_from_device", "allowUploadFromDevice", bool, is_required=True),
        E("default_extended_file_capture_mode", "defaultExtendedFileCaptureMode", bool),
    )

    #: str: *Required* remoteFileFormat
    remote_file_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileCategory
    file_category = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileCustomization
    file_customization = Field(type=str, required=True, mutable=False)
    #: str: *Required* fileSource
    file_source = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useHttpDigestAuthentication
    use_http_digest_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macBasedFileAuthentication
    mac_based_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* userNamePasswordFileAuthentication
    user_name_password_file_authentication = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* macInNonRequestURI
    mac_in_non_request_uri = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* macFormatInNonRequestURI
    mac_format_in_non_request_uri = Field(type=str, required=False, mutable=False)
    #: str: *Required* accessUrl
    access_url = Field(type=str, required=True, mutable=False)
    #: str: *Optional* repositoryUrl
    repository_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowHttp
    allow_http = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowHttps
    allow_https = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTftp
    allow_tftp = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCaching
    enable_caching = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUploadFromDevice
    allow_upload_from_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* defaultExtendedFileCaptureMode
    default_extended_file_capture_mode = Field(type=bool, required=False, mutable=False)


class SystemSIPDeviceTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetListRequest()``.

    Contains a table of identity/ device profile types configured in the system.  The
    column headings are: "Device Type", "Profile", "Is Obsolete".
    """

    _ELEMENTS = (
        E(
            "device_type_table", "deviceTypeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceTypeTable  *Tabular*
    device_type_table = Field(type=list, required=True, mutable=False)


class SystemSIPDeviceTypeLanguageMappingGetListResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeLanguageMappingGetListRequest()``.

    Contains a table of device type languages mapped to equivalent BroadWorks languages.
    The column headings are: "BroadWorks Language", "Device Language".
    """

    _ELEMENTS = (
        E(
            "device_type_languages_table", "deviceTypeLanguagesTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceTypeLanguagesTable  *Tabular*
    device_type_languages_table = Field(type=list, required=True, mutable=False)


class SystemSIPDeviceTypeServiceGetResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeServiceGetRequest()``.

    Contains the list of device type services integrated to BroadWorks.
    """

    _ELEMENTS = (
        E(
            "supports_polycom_phone_services", "supportsPolycomPhoneServices", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* supportsPolycomPhoneServices
    supports_polycom_phone_services = Field(type=bool, required=True, mutable=False)


class SystemSIPDiversionReasonGetResponse(OCIResponse):
    """
    Response to ``SystemSIPDiversionReasonGetRequest()``.

    Contains a table containing a list of diversion reasons and associated cause values.
    The column headings are: "Diversion Reaon", "Cause Value".
    """

    _ELEMENTS = (
        E(
            "diversion_reason_table", "diversionReasonTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* diversionReasonTable  *Tabular*
    diversion_reason_table = Field(type=list, required=True, mutable=False)


class SystemSIPGetACLListResponse(OCIResponse):
    """
    Response to ``SystemSIPGetACLListRequest()``.

    The table columns are: "Net Address", "Transport" and "Description".
    """

    _ELEMENTS = (
        E("acl_table", "aclTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* aclTable  *Tabular*
    acl_table = Field(type=list, required=True, mutable=False)


class SystemSIPGetContentTypeListResponse(OCIResponse):
    """
    Response to ``SystemSIPGetContentTypeListRequest()``.

    Returns a 2 column table with column headings: "Content Type" and "Supported
    Interface".
    """

    _ELEMENTS = (
        E(
            "content_type_table", "contentTypeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* contentTypeTable  *Tabular*
    content_type_table = Field(type=list, required=True, mutable=False)


class SystemSMDIGetACLListResponse(OCIResponse):
    """
    Response to ``SystemSMDIGetACLListRequest()``.

    The table columns are: "Net Address" and "Description".
    """

    _ELEMENTS = (
        E("acl_table", "aclTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* aclTable  *Tabular*
    acl_table = Field(type=list, required=True, mutable=False)


class SystemSMDIMessageDeskGetServerListResponse(OCIResponse):
    """
    Response to ``SystemMediaServerGetListRequest()``.

    The SMDI Server table column headings are: "Device Name", "Net Address", "Port" and
    "Description".
    """

    _ELEMENTS = (
        E(
            "smdi_server_table", "smdiServerTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* smdiServerTable  *Tabular*
    smdi_server_table = Field(type=list, required=True, mutable=False)


class SystemSMDIMessageDeskGetServerRouteListResponse(OCIResponse):
    """
    Response to ``SystemSMDIMessageDeskGetServerRouteListRequest()``.

    The SMDI Server route table column headings are: "Destination" and "SMDI Servers".
    """

    _ELEMENTS = (
        E(
            "smdi_server_route_table", "smdiServerRouteTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* smdiServerRouteTable  *Tabular*
    smdi_server_route_table = Field(type=list, required=True, mutable=False)


class SystemSMDIParametersGetResponse(OCIResponse):
    """
    Response to ``SystemSMDIParametersGetListRequest()``.

    Contains a list of system SMDI parameters.
    """

    _ELEMENTS = (
        E("enable_smdi", "enableSMDI", bool, is_required=True),
        E("listening_port", "listeningPort", int, is_required=True),
        E("max_connections", "maxConnections", int, is_required=True),
    )

    #: bool: *Required* enableSMDI
    enable_smdi = Field(type=bool, required=True, mutable=False)
    #: int: *Required* listeningPort
    listening_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxConnections
    max_connections = Field(type=int, required=True, mutable=False)


class SystemSMPPGetResponse(OCIResponse):
    """
    Response to ``SystemSMPPGetRequest()``.

    """

    _ELEMENTS = (
        E("primary_smpp_server_net_address", "primarySMPPServerNetAddress", str),
        E("primary_smpp_port", "primarySMPPPort", int, is_required=True),
        E("secondary_smpp_server_net_address", "secondarySMPPServerNetAddress", str),
        E("secondary_smpp_port", "secondarySMPPPort", int, is_required=True),
        E("system_id", "systemId", str),
        E("password", "password", str),
        E("version", "version", str, is_required=True),
    )

    #: str: *Optional* primarySMPPServerNetAddress
    primary_smpp_server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* primarySMPPPort
    primary_smpp_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* secondarySMPPServerNetAddress
    secondary_smpp_server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* secondarySMPPPort
    secondary_smpp_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* systemId
    system_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* password
    password = Field(type=str, required=False, mutable=False)
    #: str: *Required* version
    version = Field(type=str, required=True, mutable=False)


class SystemSMPPGetResponse14sp5(OCIResponse):
    """
    Response to ``SystemSMPPGetRequest14sp5()``.

    Replaced by: ``SystemSMPPGetResponse21()``
    """

    _ELEMENTS = (
        E("primary_smpp_server_net_address", "primarySMPPServerNetAddress", str),
        E("primary_smpp_port", "primarySMPPPort", int, is_required=True),
        E("secondary_smpp_server_net_address", "secondarySMPPServerNetAddress", str),
        E("secondary_smpp_port", "secondarySMPPPort", int, is_required=True),
        E("system_id", "systemId", str),
        E("password", "password", str),
        E("version", "version", str, is_required=True),
        E("system_type", "systemType", str),
    )

    #: str: *Optional* primarySMPPServerNetAddress
    primary_smpp_server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* primarySMPPPort
    primary_smpp_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* secondarySMPPServerNetAddress
    secondary_smpp_server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* secondarySMPPPort
    secondary_smpp_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* systemId
    system_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* password
    password = Field(type=str, required=False, mutable=False)
    #: str: *Required* version
    version = Field(type=str, required=True, mutable=False)
    #: str: *Optional* systemType
    system_type = Field(type=str, required=False, mutable=False)


class SystemSMPPGetResponse21(OCIResponse):
    """
    Response to ``SystemSMPPGetRequest21()``.

    """

    _ELEMENTS = (
        E("primary_smpp_server_net_address", "primarySMPPServerNetAddress", str),
        E("primary_smpp_port", "primarySMPPPort", int, is_required=True),
        E("secondary_smpp_server_net_address", "secondarySMPPServerNetAddress", str),
        E("secondary_smpp_port", "secondarySMPPPort", int, is_required=True),
        E("system_id", "systemId", str),
        E("password", "password", str),
        E("version", "version", str, is_required=True),
        E("system_type", "systemType", str),
        E(
            "enable_mwi_customized_message", "enableMWICustomizedMessage", bool,
            is_required=True,
        ),
        E("support_message_payload", "supportMessagePayload", bool, is_required=True),
        E("max_short_message_length", "maxShortMessageLength", int, is_required=True),
        E("use_gsm_mwi_ucs2_encoding", "useGsmMwiUcs2Encoding", bool, is_required=True),
    )

    #: str: *Optional* primarySMPPServerNetAddress
    primary_smpp_server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* primarySMPPPort
    primary_smpp_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* secondarySMPPServerNetAddress
    secondary_smpp_server_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Required* secondarySMPPPort
    secondary_smpp_port = Field(type=int, required=True, mutable=False)
    #: str: *Optional* systemId
    system_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* password
    password = Field(type=str, required=False, mutable=False)
    #: str: *Required* version
    version = Field(type=str, required=True, mutable=False)
    #: str: *Optional* systemType
    system_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableMWICustomizedMessage
    enable_mwi_customized_message = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportMessagePayload
    support_message_payload = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxShortMessageLength
    max_short_message_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useGsmMwiUcs2Encoding
    use_gsm_mwi_ucs2_encoding = Field(type=bool, required=True, mutable=False)


class SystemScheduleGetEventListResponse(OCIResponse):
    """
    Response to ``SystemScheduleGetEventListRequest()``.

    The response contains a list of events.
    """

    _ELEMENTS = (
        E("event_name", "eventName", str, is_array=True),
    )

    #: list(str): *Optional* eventName  *Array*
    event_name = Field(type=list, required=False, mutable=False)


class SystemScheduleGetListResponse(OCIResponse):
    """
    Response to ``SystemScheduleGetListRequest()``.

    The response contains a list of system schedules.
    """

    _ELEMENTS = (
        E("schedule_name", "scheduleName", str, is_array=True),
        E("schedule_type", "scheduleType", str, is_array=True),
    )

    #: list(str): *Optional* scheduleName  *Array*
    schedule_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* scheduleType  *Array*
    schedule_type = Field(type=list, required=False, mutable=False)


class SystemSecurityClassificationGetClassificationResponse(OCIResponse):
    """
    Response to the ``SystemSecurityClassificationGetClassificationRequest()``.

    """

    _ELEMENTS = (
        E(
            "audio_announcement_file_description", "audioAnnouncementFileDescription",
            str, is_required=True,
        ),
        E("audio_announcement_file_type", "audioAnnouncementFileType", str, is_required=True),
    )

    #: str: *Required* audioAnnouncementFileDescription
    audio_announcement_file_description = Field(type=str, required=True, mutable=False)
    #: str: *Required* audioAnnouncementFileType
    audio_announcement_file_type = Field(type=str, required=True, mutable=False)


class SystemSecurityClassificationGetClassificationTrunkGroupUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemSecurityClassificationGetClassificationTrunkGroupUsageListRequest()``.

    Contains a table with column headings: "Trunk Group Name","Group ID","Organization ID"
    and "Organization Type"
    """

    _ELEMENTS = (
        E(
            "usage_table", "usageTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* usageTable  *Tabular*
    usage_table = Field(type=list, required=True, mutable=False)


class SystemSecurityClassificationGetClassificationUserUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemSecurityClassificationGetClassificationUserUsageListRequest()``.

    Contains a table with column headings: "User ID", "Last Name", "First Name", "Phone
    Number", "Extension", "Service Provider Id", "Group Id".
    """

    _ELEMENTS = (
        E(
            "usage_table", "usageTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* usageTable  *Tabular*
    usage_table = Field(type=list, required=True, mutable=False)


class SystemSecurityClassificationGetResponse(OCIResponse):
    """
    Response to the ``SystemSecurityClassificationGetRequest()``.

    Contains a table with column headings: "Name", "Priority".
    """

    _ELEMENTS = (
        E("meet_me_annc_threshold", "meetMeAnncThreshold", int, is_required=True),
        E(
            "security_classification_table", "SecurityClassificationTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: int: *Required* meetMeAnncThreshold
    meet_me_annc_threshold = Field(type=int, required=True, mutable=False)
    #: list: *Required* SecurityClassificationTable  *Tabular*
    security_classification_table = Field(type=list, required=True, mutable=False)


class SystemSecurityClassificationGetResponse21(OCIResponse):
    """
    Response to the ``SystemSecurityClassificationGetRequest21()``.

    Contains a table with column headings: "Name", "Priority".
    """

    _ELEMENTS = (
        E("meet_me_annc_threshold", "meetMeAnncThreshold", int, is_required=True),
        E(
            "play_trunk_user_security_classification_announcement",
            "playTrunkUserSecurityClassificationAnnouncement", bool, is_required=True,
        ),
        E(
            "security_classification_table", "SecurityClassificationTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: int: *Required* meetMeAnncThreshold
    meet_me_annc_threshold = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playTrunkUserSecurityClassificationAnnouncement
    play_trunk_user_security_classification_announcement = Field(
        type=bool, required=True, mutable=False,
    )
    #: list: *Required* SecurityClassificationTable  *Tabular*
    security_classification_table = Field(type=list, required=True, mutable=False)


class SystemSelectiveServicesGetResponse(OCIResponse):
    """
    Response to ``SystemSelectiveServicesGetRequest()``.

    """

    _ELEMENTS = (
        E("schedule_combination", "scheduleCombination", str, is_required=True),
    )

    #: str: *Required* scheduleCombination
    schedule_combination = Field(type=str, required=True, mutable=False)


class SystemSelectiveServicesGetResponse18sp1(OCIResponse):
    """
    Response to ``SystemSelectiveServicesGetRequest18sp1()``.

    """

    _ELEMENTS = (
        E("schedule_combination", "scheduleCombination", str, is_required=True),
        E("screen_private_number", "screenPrivateNumber", bool, is_required=True),
    )

    #: str: *Required* scheduleCombination
    schedule_combination = Field(type=str, required=True, mutable=False)
    #: bool: *Required* screenPrivateNumber
    screen_private_number = Field(type=bool, required=True, mutable=False)


class SystemServerAddressesGetResponse(OCIResponse):
    """
    Response to ``SystemServerAddressesGetRequest()``.

    Contains a list of system Server Addresses.  See also: ``PrimaryInfoGetResponse()``
    ``PublicClusterGetFullyQualifiedDomainNameResponse()`` ``ServingInfoGetResponse()``
    """

    _ELEMENTS = (
        E("web_server_cluster_public_fqdn", "webServerClusterPublicFQDN", str),
        E(
            "application_server_cluster_primary_public_fqdn",
            "applicationServerClusterPrimaryPublicFQDN", str,
        ),
        E(
            "application_server_cluster_secondary_public_fqdn",
            "applicationServerClusterSecondaryPublicFQDN", str,
        ),
        E(
            "application_server_cluster_primary_private_fqdn",
            "applicationServerClusterPrimaryPrivateFQDN", str,
        ),
        E(
            "application_server_cluster_secondary_private_fqdn",
            "applicationServerClusterSecondaryPrivateFQDN", str,
        ),
    )

    #: str: *Optional* webServerClusterPublicFQDN
    web_server_cluster_public_fqdn = Field(type=str, required=False, mutable=False)
    #: str: *Optional* applicationServerClusterPrimaryPublicFQDN
    application_server_cluster_primary_public_fqdn = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* applicationServerClusterSecondaryPublicFQDN
    application_server_cluster_secondary_public_fqdn = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* applicationServerClusterPrimaryPrivateFQDN
    application_server_cluster_primary_private_fqdn = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* applicationServerClusterSecondaryPrivateFQDN
    application_server_cluster_secondary_private_fqdn = Field(
        type=str, required=False, mutable=False,
    )


class SystemServiceActivationAccessCodeGetResponse(OCIResponse):
    """
    Response to ``SystemServiceActivationAccessCodeGetRequest()``.

    Contains Service Activation Access Code system parameters.
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("terminating_access_code", "terminatingAccessCode", str),
        E("redirecting_access_code", "redirectingAccessCode", str),
        E("click_to_dial_access_code", "clickToDialAccessCode", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* terminatingAccessCode
    terminating_access_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* redirectingAccessCode
    redirecting_access_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* clickToDialAccessCode
    click_to_dial_access_code = Field(type=str, required=False, mutable=False)


class SystemServiceCodeGetListResponse(OCIResponse):
    """
    Response to ``SystemServiceCodeGetListRequest()``.

    Contains a table of defined service codes The column headings are: "Service Code", and
    "Description".
    """

    _ELEMENTS = (
        E(
            "service_code_table", "serviceCodeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceCodeTable  *Tabular*
    service_code_table = Field(type=list, required=True, mutable=False)


class SystemServiceControlParametersGetResponse(OCIResponse):
    """
    Response to ``SystemServiceControlParametersGetListRequest()``.

    Contains a list of system Service Control parameters.
    """

    _ELEMENTS = (
        E("server_port", "serverPort", int, is_required=True),
        E("max_client_connections", "maxClientConnections", int, is_required=True),
    )

    #: int: *Required* serverPort
    server_port = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxClientConnections
    max_client_connections = Field(type=int, required=True, mutable=False)


class SystemServicePackMigrationGetResponse(OCIResponse):
    """
    Response to the ``SystemServicePackMigrationGetRequest()``.

    The response contains the Service Pack Migration system level settings.
    """

    _ELEMENTS = (
        E(
            "max_simultaneous_migration_tasks", "maxSimultaneousMigrationTasks", int,
            is_required=True,
        ),
    )

    #: int: *Required* maxSimultaneousMigrationTasks
    max_simultaneous_migration_tasks = Field(type=int, required=True, mutable=False)


class SystemServicePhoneNumberLookupResponse(OCIResponse):
    """
    Response to the ``SystemServicePhoneNumberLookupRequest()``.

    The column headings for the userTable are: "Service Provider Id", "Is Enterprise",
    "Group Id", "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Phone Number" and "Extension".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class SystemSessionAdmissionControlGetResponse(OCIResponse):
    """
    Response to the ``SystemSessionAdmissionControlGetRequest()``.

    The response contains the session admission control settings for the system.
    """

    _ELEMENTS = (
        E(
            "count_long_connections_to_media_server", "countLongConnectionsToMediaServer",
            bool, is_required=True,
        ),
        E("sac_handling_for_mo_h", "sacHandlingForMoH", str, is_required=True),
        E(
            "block_vm_deposit_due_to_sac_limits", "blockVMDepositDueToSACLimits", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* countLongConnectionsToMediaServer
    count_long_connections_to_media_server = Field(type=bool, required=True, mutable=False)
    #: str: *Required* sacHandlingForMoH
    sac_handling_for_mo_h = Field(type=str, required=True, mutable=False)
    #: bool: *Required* blockVMDepositDueToSACLimits
    block_vm_deposit_due_to_sac_limits = Field(type=bool, required=True, mutable=False)


class SystemSessionAuditGetResponse(OCIResponse):
    """
    Response to ``SystemSessionAuditGetRequest()``.

    Replaced By: ``SystemSessionAuditGetResponse14sp3()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("interval_seconds", "intervalSeconds", int, is_required=True),
        E("timeout_period_seconds", "timeoutPeriodSeconds", int, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* intervalSeconds
    interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* timeoutPeriodSeconds
    timeout_period_seconds = Field(type=int, required=True, mutable=False)


class SystemSessionAuditGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemSessionAuditGetRequest14sp3()``.

    """

    _ELEMENTS = (
        E("is_audit_active", "isAuditActive", bool, is_required=True),
        E("audit_interval_seconds", "auditIntervalSeconds", int, is_required=True),
        E("audit_timeout_seconds", "auditTimeoutSeconds", int, is_required=True),
        E(
            "release_call_on_audit_failure", "releaseCallOnAuditFailure", bool,
            is_required=True,
        ),
        E(
            "is_sip_refresh_allowed_on_audit", "isSIPRefreshAllowedOnAudit", bool,
            is_required=True,
        ),
        E("allow_update_for_sip_refresh", "allowUpdateForSIPRefresh", bool, is_required=True),
        E("is_sip_session_timer_active", "isSIPSessionTimerActive", bool, is_required=True),
        E(
            "sip_session_expires_minimum_seconds", "sipSessionExpiresMinimumSeconds", int,
            is_required=True,
        ),
        E(
            "enforce_sip_session_expires_maximum", "enforceSIPSessionExpiresMaximum",
            bool, is_required=True,
        ),
        E(
            "sip_session_expires_maximum_seconds", "sipSessionExpiresMaximumSeconds", int,
            is_required=True,
        ),
        E(
            "sip_session_expires_timer_seconds", "sipSessionExpiresTimerSeconds", int,
            is_required=True,
        ),
        E(
            "always_use_session_timer_when_supported",
            "alwaysUseSessionTimerWhenSupported", bool, is_required=True,
        ),
        E(
            "preferred_session_timer_refresher", "preferredSessionTimerRefresher", str,
            is_required=True,
        ),
    )

    #: bool: *Required* isAuditActive
    is_audit_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* auditIntervalSeconds
    audit_interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* auditTimeoutSeconds
    audit_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* releaseCallOnAuditFailure
    release_call_on_audit_failure = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isSIPRefreshAllowedOnAudit
    is_sip_refresh_allowed_on_audit = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUpdateForSIPRefresh
    allow_update_for_sip_refresh = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isSIPSessionTimerActive
    is_sip_session_timer_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* sipSessionExpiresMinimumSeconds
    sip_session_expires_minimum_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enforceSIPSessionExpiresMaximum
    enforce_sip_session_expires_maximum = Field(type=bool, required=True, mutable=False)
    #: int: *Required* sipSessionExpiresMaximumSeconds
    sip_session_expires_maximum_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* sipSessionExpiresTimerSeconds
    sip_session_expires_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* alwaysUseSessionTimerWhenSupported
    always_use_session_timer_when_supported = Field(type=bool, required=True, mutable=False)
    #: str: *Required* preferredSessionTimerRefresher
    preferred_session_timer_refresher = Field(type=str, required=True, mutable=False)


class SystemSessionAuditGetResponse17sp3(OCIResponse):
    """
    Response to ``SystemSessionAuditGetRequest17sp3()``.

    """

    _ELEMENTS = (
        E("is_audit_active", "isAuditActive", bool, is_required=True),
        E("audit_interval_seconds", "auditIntervalSeconds", int, is_required=True),
        E("audit_timeout_seconds", "auditTimeoutSeconds", int, is_required=True),
        E(
            "release_call_on_audit_failure", "releaseCallOnAuditFailure", bool,
            is_required=True,
        ),
        E(
            "is_sip_refresh_allowed_on_audit", "isSIPRefreshAllowedOnAudit", bool,
            is_required=True,
        ),
        E("allow_update_for_sip_refresh", "allowUpdateForSIPRefresh", bool, is_required=True),
        E("is_sip_session_timer_active", "isSIPSessionTimerActive", bool, is_required=True),
        E(
            "sip_session_expires_minimum_seconds", "sipSessionExpiresMinimumSeconds", int,
            is_required=True,
        ),
        E(
            "enforce_sip_session_expires_maximum", "enforceSIPSessionExpiresMaximum",
            bool, is_required=True,
        ),
        E(
            "sip_session_expires_maximum_seconds", "sipSessionExpiresMaximumSeconds", int,
            is_required=True,
        ),
        E(
            "sip_session_expires_timer_seconds", "sipSessionExpiresTimerSeconds", int,
            is_required=True,
        ),
        E(
            "always_use_session_timer_when_supported",
            "alwaysUseSessionTimerWhenSupported", bool, is_required=True,
        ),
        E(
            "preferred_session_timer_refresher", "preferredSessionTimerRefresher", str,
            is_required=True,
        ),
        E(
            "enable_emergency_call_alarm_timer", "enableEmergencyCallAlarmTimer", bool,
            is_required=True,
        ),
        E("emergency_call_alarm_minutes", "emergencyCallAlarmMinutes", int, is_required=True),
        E(
            "enable_emergency_call_cleanup_timer", "enableEmergencyCallCleanupTimer",
            bool, is_required=True,
        ),
        E(
            "emergency_call_cleanup_minutes", "emergencyCallCleanupMinutes", int,
            is_required=True,
        ),
    )

    #: bool: *Required* isAuditActive
    is_audit_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* auditIntervalSeconds
    audit_interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* auditTimeoutSeconds
    audit_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* releaseCallOnAuditFailure
    release_call_on_audit_failure = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isSIPRefreshAllowedOnAudit
    is_sip_refresh_allowed_on_audit = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUpdateForSIPRefresh
    allow_update_for_sip_refresh = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isSIPSessionTimerActive
    is_sip_session_timer_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* sipSessionExpiresMinimumSeconds
    sip_session_expires_minimum_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enforceSIPSessionExpiresMaximum
    enforce_sip_session_expires_maximum = Field(type=bool, required=True, mutable=False)
    #: int: *Required* sipSessionExpiresMaximumSeconds
    sip_session_expires_maximum_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* sipSessionExpiresTimerSeconds
    sip_session_expires_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* alwaysUseSessionTimerWhenSupported
    always_use_session_timer_when_supported = Field(type=bool, required=True, mutable=False)
    #: str: *Required* preferredSessionTimerRefresher
    preferred_session_timer_refresher = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableEmergencyCallAlarmTimer
    enable_emergency_call_alarm_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* emergencyCallAlarmMinutes
    emergency_call_alarm_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableEmergencyCallCleanupTimer
    enable_emergency_call_cleanup_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* emergencyCallCleanupMinutes
    emergency_call_cleanup_minutes = Field(type=int, required=True, mutable=False)


class SystemShInterfaceParametersGetResponse(OCIResponse):
    """
    Response to ``SystemShInterfaceParametersGetRequest()``.

    Contains the Sh Interface system parameters.
    """

    _ELEMENTS = (
        E("hss_realm", "hssRealm", str),
        E("request_timeout_seconds", "requestTimeoutSeconds", int, is_required=True),
        E(
            "public_identity_refresh_delay_seconds", "publicIdentityRefreshDelaySeconds",
            int, is_required=True,
        ),
    )

    #: str: *Optional* hssRealm
    hss_realm = Field(type=str, required=False, mutable=False)
    #: int: *Required* requestTimeoutSeconds
    request_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* publicIdentityRefreshDelaySeconds
    public_identity_refresh_delay_seconds = Field(type=int, required=True, mutable=False)


class SystemShInterfaceParametersGetResponse17(OCIResponse):
    """
    Response to ``SystemShInterfaceParametersGetRequest()``.

    Contains the Sh Interface system parameters.
    """

    _ELEMENTS = (
        E("hss_realm", "hssRealm", str),
        E(
            "public_identity_refresh_delay_seconds", "publicIdentityRefreshDelaySeconds",
            int, is_required=True,
        ),
    )

    #: str: *Optional* hssRealm
    hss_realm = Field(type=str, required=False, mutable=False)
    #: int: *Required* publicIdentityRefreshDelaySeconds
    public_identity_refresh_delay_seconds = Field(type=int, required=True, mutable=False)


class SystemShInterfaceRefreshTaskGetResponse(OCIResponse):
    """
    Response to ``SystemShInterfaceRefreshTaskGetRequest()``.

    Provides the status of the system refresh task.  If isRunning is false,
    numberPublicIdentityRefreshStarted and numberPublicIdentities are omitted.  If
    isRunning is true, numberPublicIdentities indicates the total number of public
    identities in the system that will be refreshed by the system refresh task;
    numberPublicIdentityRefreshesStarted indicates the total number of public identities
    for which a refresh has been started.
    """

    _ELEMENTS = (
        E("is_running", "isRunning", bool, is_required=True),
        E(
            "number_public_identity_refreshes_started",
            "numberPublicIdentityRefreshesStarted", int,
        ),
        E("number_public_identities", "numberPublicIdentities", int),
    )

    #: bool: *Required* isRunning
    is_running = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* numberPublicIdentityRefreshesStarted
    number_public_identity_refreshes_started = Field(type=int, required=False, mutable=False)
    #: int: *Optional* numberPublicIdentities
    number_public_identities = Field(type=int, required=False, mutable=False)


class SystemSoftwareVersionGetResponse(OCIResponse):
    """
    Response to the ``SystemSoftwareVersionGetRequest()``.

    """

    _ELEMENTS = (
        E("version", "version", str, is_required=True),
    )

    #: str: *Required* version
    version = Field(type=str, required=True, mutable=False)


class SystemSpeedDial100GetResponse(OCIResponse):
    """
    Response to the ``SystemSpeedDial100GetRequest()``.

    """

    _ELEMENTS = (
        E("prefix", "prefix", str, is_required=True),
    )

    #: str: *Required* prefix
    prefix = Field(type=str, required=True, mutable=False)


class SystemSpeedDial100GetResponse17sp1(OCIResponse):
    """
    Response to the ``SystemSpeedDial100GetRequest17sp1()``.

    """

    _ELEMENTS = (
        E("prefix", "prefix", str),
    )

    #: str: *Optional* prefix
    prefix = Field(type=str, required=False, mutable=False)


class SystemStateOrProvinceGetListResponse(OCIResponse):
    """
    Contains a 2 column table with column headings 'Key' and 'Display Name' and a row for
    each state or province.

    """

    _ELEMENTS = (
        E(
            "state_or_province_table", "stateOrProvinceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* stateOrProvinceTable  *Tabular*
    state_or_province_table = Field(type=list, required=True, mutable=False)


class SystemSubscriberGetCallProcessingParametersResponse(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest()``.

    Replaced By: ``SystemSubscriberGetCallProcessingParametersResponse14sp3()``
    """

    _ELEMENTS = (
        E(
            "user_calling_line_id_selection", "userCallingLineIdSelection", str,
            is_required=True,
        ),
        E(
            "is_extended_calling_line_id_active", "isExtendedCallingLineIdActive", bool,
            is_required=True,
        ),
        E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
        E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
    )

    #: str: *Required* userCallingLineIdSelection
    user_calling_line_id_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isExtendedCallingLineIdActive
    is_extended_calling_line_id_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isRingTimeOutActive
    is_ring_time_out_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeoutSeconds
    ring_timeout_seconds = Field(type=int, required=True, mutable=False)


class SystemSubscriberGetCallProcessingParametersResponse14sp3(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest14sp3()``.

    """

    _ELEMENTS = (
        E(
            "user_calling_line_id_selection", "userCallingLineIdSelection", str,
            is_required=True,
        ),
        E(
            "is_extended_calling_line_id_active", "isExtendedCallingLineIdActive", bool,
            is_required=True,
        ),
        E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
        E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
        E(
            "allow_emergency_remote_office_originations",
            "allowEmergencyRemoteOfficeOriginations", bool, is_required=True,
        ),
    )

    #: str: *Required* userCallingLineIdSelection
    user_calling_line_id_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isExtendedCallingLineIdActive
    is_extended_calling_line_id_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isRingTimeOutActive
    is_ring_time_out_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeoutSeconds
    ring_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowEmergencyRemoteOfficeOriginations
    allow_emergency_remote_office_originations = Field(
        type=bool, required=True, mutable=False,
    )


class SystemSubscriberGetCallProcessingParametersResponse14sp7(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest14sp7()``.

    """

    _ELEMENTS = (
        E(
            "is_extended_calling_line_id_active", "isExtendedCallingLineIdActive", bool,
            is_required=True,
        ),
        E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
        E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
        E(
            "allow_emergency_remote_office_originations",
            "allowEmergencyRemoteOfficeOriginations", bool, is_required=True,
        ),
    )

    #: bool: *Required* isExtendedCallingLineIdActive
    is_extended_calling_line_id_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isRingTimeOutActive
    is_ring_time_out_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeoutSeconds
    ring_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowEmergencyRemoteOfficeOriginations
    allow_emergency_remote_office_originations = Field(
        type=bool, required=True, mutable=False,
    )


class SystemSubscriberGetCallProcessingParametersResponse15(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest15()``.

    """

    _ELEMENTS = (
        E(
            "user_calling_line_id_selection", "userCallingLineIdSelection", str,
            is_required=True,
        ),
        E(
            "is_extended_calling_line_id_active", "isExtendedCallingLineIdActive", bool,
            is_required=True,
        ),
        E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
        E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
        E(
            "allow_emergency_remote_office_originations",
            "allowEmergencyRemoteOfficeOriginations", bool, is_required=True,
        ),
        E("max_no_answer_number_of_rings", "maxNoAnswerNumberOfRings", int, is_required=True),
    )

    #: str: *Required* userCallingLineIdSelection
    user_calling_line_id_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isExtendedCallingLineIdActive
    is_extended_calling_line_id_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isRingTimeOutActive
    is_ring_time_out_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeoutSeconds
    ring_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowEmergencyRemoteOfficeOriginations
    allow_emergency_remote_office_originations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxNoAnswerNumberOfRings
    max_no_answer_number_of_rings = Field(type=int, required=True, mutable=False)


class SystemSubscriberGetCallProcessingParametersResponse15sp2(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest15sp2()``.

    Replaced by: ``SystemSubscriberGetCallProcessingParametersResponse17()``
    """

    _ELEMENTS = (
        E(
            "is_extended_calling_line_id_active", "isExtendedCallingLineIdActive", bool,
            is_required=True,
        ),
        E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
        E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
        E(
            "allow_emergency_remote_office_originations",
            "allowEmergencyRemoteOfficeOriginations", bool, is_required=True,
        ),
        E("max_no_answer_number_of_rings", "maxNoAnswerNumberOfRings", int, is_required=True),
    )

    #: bool: *Required* isExtendedCallingLineIdActive
    is_extended_calling_line_id_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isRingTimeOutActive
    is_ring_time_out_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeoutSeconds
    ring_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowEmergencyRemoteOfficeOriginations
    allow_emergency_remote_office_originations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxNoAnswerNumberOfRings
    max_no_answer_number_of_rings = Field(type=int, required=True, mutable=False)


class SystemSubscriberGetCallProcessingParametersResponse17(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest17()``.

    """

    _ELEMENTS = (
        E(
            "is_extended_calling_line_id_active", "isExtendedCallingLineIdActive", bool,
            is_required=True,
        ),
        E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
        E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
        E(
            "allow_emergency_remote_office_originations",
            "allowEmergencyRemoteOfficeOriginations", bool, is_required=True,
        ),
        E("max_no_answer_number_of_rings", "maxNoAnswerNumberOfRings", int, is_required=True),
        E(
            "incoming_call_to_user_alias_mode", "incomingCallToUserAliasMode", str,
            is_required=True,
        ),
    )

    #: bool: *Required* isExtendedCallingLineIdActive
    is_extended_calling_line_id_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isRingTimeOutActive
    is_ring_time_out_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeoutSeconds
    ring_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowEmergencyRemoteOfficeOriginations
    allow_emergency_remote_office_originations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxNoAnswerNumberOfRings
    max_no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: str: *Required* incomingCallToUserAliasMode
    incoming_call_to_user_alias_mode = Field(type=str, required=True, mutable=False)


class SystemSubscriberGetCallProcessingParametersResponse17sp3(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest17sp3()``.

    """

    _ELEMENTS = (
        E(
            "is_extended_calling_line_id_active", "isExtendedCallingLineIdActive", bool,
            is_required=True,
        ),
        E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
        E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
        E(
            "allow_emergency_remote_office_originations",
            "allowEmergencyRemoteOfficeOriginations", bool, is_required=True,
        ),
        E("max_no_answer_number_of_rings", "maxNoAnswerNumberOfRings", int, is_required=True),
        E(
            "incoming_call_to_user_alias_mode", "incomingCallToUserAliasMode", str,
            is_required=True,
        ),
        E(
            "bypass_termination_loop_detection", "bypassTerminationLoopDetection", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* isExtendedCallingLineIdActive
    is_extended_calling_line_id_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isRingTimeOutActive
    is_ring_time_out_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeoutSeconds
    ring_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowEmergencyRemoteOfficeOriginations
    allow_emergency_remote_office_originations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxNoAnswerNumberOfRings
    max_no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: str: *Required* incomingCallToUserAliasMode
    incoming_call_to_user_alias_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* bypassTerminationLoopDetection
    bypass_termination_loop_detection = Field(type=bool, required=True, mutable=False)


class SystemSubscriberGetCallProcessingParametersResponse17sp4(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest17sp4()``.

    """

    _ELEMENTS = (
        E(
            "is_extended_calling_line_id_active", "isExtendedCallingLineIdActive", bool,
            is_required=True,
        ),
        E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
        E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
        E(
            "allow_emergency_remote_office_originations",
            "allowEmergencyRemoteOfficeOriginations", bool, is_required=True,
        ),
        E("max_no_answer_number_of_rings", "maxNoAnswerNumberOfRings", int, is_required=True),
        E(
            "incoming_call_to_user_alias_mode", "incomingCallToUserAliasMode", str,
            is_required=True,
        ),
        E(
            "bypass_termination_loop_detection", "bypassTerminationLoopDetection", bool,
            is_required=True,
        ),
        E(
            "honor_clid_blocking_for_emergency_calls",
            "honorCLIDBlockingForEmergencyCalls", bool, is_required=True,
        ),
    )

    #: bool: *Required* isExtendedCallingLineIdActive
    is_extended_calling_line_id_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isRingTimeOutActive
    is_ring_time_out_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeoutSeconds
    ring_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowEmergencyRemoteOfficeOriginations
    allow_emergency_remote_office_originations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxNoAnswerNumberOfRings
    max_no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: str: *Required* incomingCallToUserAliasMode
    incoming_call_to_user_alias_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* bypassTerminationLoopDetection
    bypass_termination_loop_detection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* honorCLIDBlockingForEmergencyCalls
    honor_clid_blocking_for_emergency_calls = Field(type=bool, required=True, mutable=False)


class SystemSubscriberGetCallProcessingParametersResponse18sp1(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest18sp1()``.

    """

    _ELEMENTS = (
        E(
            "is_extended_calling_line_id_active", "isExtendedCallingLineIdActive", bool,
            is_required=True,
        ),
        E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
        E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
        E(
            "allow_emergency_remote_office_originations",
            "allowEmergencyRemoteOfficeOriginations", bool, is_required=True,
        ),
        E("max_no_answer_number_of_rings", "maxNoAnswerNumberOfRings", int, is_required=True),
        E(
            "incoming_call_to_user_alias_mode", "incomingCallToUserAliasMode", str,
            is_required=True,
        ),
        E(
            "bypass_termination_loop_detection", "bypassTerminationLoopDetection", bool,
            is_required=True,
        ),
        E(
            "honor_clid_blocking_for_emergency_calls",
            "honorCLIDBlockingForEmergencyCalls", bool, is_required=True,
        ),
        E("use_unicode_identity_name", "useUnicodeIdentityName", bool, is_required=True),
    )

    #: bool: *Required* isExtendedCallingLineIdActive
    is_extended_calling_line_id_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isRingTimeOutActive
    is_ring_time_out_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeoutSeconds
    ring_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowEmergencyRemoteOfficeOriginations
    allow_emergency_remote_office_originations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxNoAnswerNumberOfRings
    max_no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: str: *Required* incomingCallToUserAliasMode
    incoming_call_to_user_alias_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* bypassTerminationLoopDetection
    bypass_termination_loop_detection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* honorCLIDBlockingForEmergencyCalls
    honor_clid_blocking_for_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUnicodeIdentityName
    use_unicode_identity_name = Field(type=bool, required=True, mutable=False)


class SystemSubscriberGetLoginParametersResponse(OCIResponse):
    """
    Response to the ``SystemSubscriberGetLoginParametersRequest()``.

    """

    _ELEMENTS = (
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int, is_required=True),
        E("min_login_id_length", "minLoginIdLength", int, is_required=True),
    )

    #: int: *Required* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=True, mutable=False)
    #: int: *Required* minLoginIdLength
    min_login_id_length = Field(type=int, required=True, mutable=False)


class SystemSubscriberGetProvisioningParametersResponse(OCIResponse):
    """
    Response to the ``SystemSubscriberGetProvisioningParametersRequest()``.

    """

    _ELEMENTS = (
        E(
            "configurable_clid_normalization", "configurableCLIDNormalization", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* configurableCLIDNormalization
    configurable_clid_normalization = Field(type=bool, required=True, mutable=False)


class SystemSystemServiceCallProcessingPoliciesGetResponse(OCIResponse):
    """
    Response to ``SystemSystemServiceCallProcessingPoliciesGetRequest()``.

    """

    _ELEMENTS = (
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
    )

    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)


class SystemSystemServiceDnGetAvailableListResponse(OCIResponse):
    """
    Response to ``SystemSystemServiceDnGetAvailableListRequest()``.

    Contains a list of available DNs not yet assigned to any instance of system service.
    """

    _ELEMENTS = (
        E("available_dn", "availableDn", str, is_array=True),
    )

    #: list(str): *Optional* availableDn  *Array*
    available_dn = Field(type=list, required=False, mutable=False)


class SystemSystemServiceDnGetSummaryListResponse(OCIResponse):
    """
    Response to ``SystemSystemServiceDnGetSummaryListRequest()``.

    The column headings are "Phone Numbers" and "Assigned". The possible values for
    "Assigned" are true, false.
    """

    _ELEMENTS = (
        E(
            "dn_summary_table", "dnSummaryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* dnSummaryTable  *Tabular*
    dn_summary_table = Field(type=list, required=True, mutable=False)


class SystemSystemServiceDnGetUsageListResponse(OCIResponse):
    """
    Response to ``SystemSystemServiceDnGetUsageListRequest()``.

    The table columns are: "Phone Number", "Id", "Name", and "System Service". The
    possible values for "System Service" is "System Voice Portal".
    """

    _ELEMENTS = (
        E(
            "dn_utilization_table", "dnUtilizationTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* dnUtilizationTable  *Tabular*
    dn_utilization_table = Field(type=list, required=True, mutable=False)


class SystemSystemVoicePortalGetListResponse(OCIResponse):
    """
    Response to ``SystemSystemVoicePortalGetListRequest()``.

    The column headings are "Default", "System Voice Portal Id", "Name", "Network Voice
    Portal Number", "System Voice Portal Number" and "Language". The possible values for
    "Default" are true, false.
    """

    _ELEMENTS = (
        E(
            "system_voice_portals_table", "systemVoicePortalsTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* systemVoicePortalsTable  *Tabular*
    system_voice_portals_table = Field(type=list, required=True, mutable=False)


class SystemSystemVoicePortalGetResponse(OCIResponse):
    """
    Response to ``SystemSystemVoicePortalGetRequest()``.

    """

    _ELEMENTS = (
        E("name", "name", str, is_required=True),
        E("calling_line_id_name", "callingLineIdName", str, is_required=True),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("phone_number", "phoneNumber", str),
        E("public_user_identity", "publicUserIdentity", str),
        E("network_voice_portal_number", "networkVoicePortalNumber", str),
        E(
            "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
            "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin", bool,
            is_required=True,
        ),
        E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
        E("is_default", "isDefault", bool, is_required=True),
        E(
            "use_voice_portal_default_greeting", "useVoicePortalDefaultGreeting", bool,
            is_required=True,
        ),
        E(
            "voice_portal_greeting_file_description",
            "voicePortalGreetingFileDescription", str,
        ),
        E("voice_portal_greeting_media_file_type", "voicePortalGreetingMediaFileType", str),
        E(
            "use_voice_messaging_default_greeting", "useVoiceMessagingDefaultGreeting",
            bool, is_required=True,
        ),
        E(
            "voice_messaging_greeting_file_description",
            "voiceMessagingGreetingFileDescription", str,
        ),
        E(
            "voice_messaging_greeting_media_file_type",
            "voiceMessagingGreetingMediaFileType", str,
        ),
    )

    #: str: *Required* name
    name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdName
    calling_line_id_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* publicUserIdentity
    public_user_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkVoicePortalNumber
    network_voice_portal_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
    allow_identification_by_phone_number_or_voice_mail_aliases_on_login = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useVoicePortalWizard
    use_voice_portal_wizard = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isDefault
    is_default = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useVoicePortalDefaultGreeting
    use_voice_portal_default_greeting = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* voicePortalGreetingFileDescription
    voice_portal_greeting_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* voicePortalGreetingMediaFileType
    voice_portal_greeting_media_file_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useVoiceMessagingDefaultGreeting
    use_voice_messaging_default_greeting = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* voiceMessagingGreetingFileDescription
    voice_messaging_greeting_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* voiceMessagingGreetingMediaFileType
    voice_messaging_greeting_media_file_type = Field(type=str, required=False, mutable=False)


class SystemThirdPartyIMPGetResponse(OCIResponse):
    """
    Response to the ``SystemThirdPartyIMPGetRequest()``.

    The response contains the system Third-Party IMP service attributes.  Replaced by
    ``SystemThirdPartyIMPGetResponse()``.
    """

    _ELEMENTS = (
        E("service_net_address", "serviceNetAddress", str),
        E("service_port", "servicePort", int),
    )

    #: str: *Optional* serviceNetAddress
    service_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* servicePort
    service_port = Field(type=int, required=False, mutable=False)


class SystemThirdPartyIMPGetResponse19(OCIResponse):
    """
    Response to the ``SystemThirdPartyIMPGetRequest19()``.

    The response contains the system Third-Party IMP service attributes.  The following
    elements are only used in AS data mode: boshURL
    """

    _ELEMENTS = (
        E("service_net_address", "serviceNetAddress", str),
        E("service_port", "servicePort", int),
        E("bosh_url", "boshURL", str),
    )

    #: str: *Optional* serviceNetAddress
    service_net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* servicePort
    service_port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* boshURL
    bosh_url = Field(type=str, required=False, mutable=False)


class SystemThirdPartyVoiceMailSupportGetDnListResponse(OCIResponse):
    """
    Response to ``SystemThirdPartyVoiceMailSupportGetDnListRequest()``.

    Contains a table with a row for each ThirdPartyVoiceMailSupport User DN and column
    headings: "Phone Number", "Description"
    """

    _ELEMENTS = (
        E(
            "third_party_voice_mail_support_table", "thirdPartyVoiceMailSupportTable",
            list, is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* thirdPartyVoiceMailSupportTable  *Tabular*
    third_party_voice_mail_support_table = Field(type=list, required=True, mutable=False)


class SystemThirdPartyVoiceMailSupportGetResponse(OCIResponse):
    """
    Response to ``SystemThirdPartyVoiceMailSupportGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "override_alt_caller_id_for_vm_retrieval",
            "overrideAltCallerIdForVMRetrieval", bool, is_required=True,
        ),
    )

    #: bool: *Required* overrideAltCallerIdForVMRetrieval
    override_alt_caller_id_for_vm_retrieval = Field(type=bool, required=True, mutable=False)


class SystemThirdPartyVoiceMailSupportGetResponse17sp4(OCIResponse):
    """
    Response to ``SystemThirdPartyVoiceMailSupportGetRequest17sp4()``.

    """

    _ELEMENTS = (
        E(
            "override_alt_caller_id_for_vm_retrieval",
            "overrideAltCallerIdForVMRetrieval", bool, is_required=True,
        ),
        E(
            "strip_diversion_on_vm_destination_retrieval",
            "stripDiversionOnVMDestinationRetrieval", bool, is_required=True,
        ),
    )

    #: bool: *Required* overrideAltCallerIdForVMRetrieval
    override_alt_caller_id_for_vm_retrieval = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* stripDiversionOnVMDestinationRetrieval
    strip_diversion_on_vm_destination_retrieval = Field(
        type=bool, required=True, mutable=False,
    )


class SystemTimeScheduleGetListResponse(OCIResponse):
    """
    Response to the ``SystemTimeScheduleGetListRequest()``.

    The response contains all the system time schedule names.
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", str, is_array=True),
    )

    #: list(str): *Optional* timeSchedule  *Array*
    time_schedule = Field(type=list, required=False, mutable=False)


class SystemTimeZoneGetListResponse(OCIResponse):
    """
    Response to ``SystemTimeZoneGetListRequest()``.

    Contains a 2 column table with column headings 'Key' and 'Display Name' and a row for
    each time zone.  Replaced by ``SystemTimeZoneGetListResponse20()``
    """

    _ELEMENTS = (
        E(
            "time_zone_table", "timeZoneTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* timeZoneTable  *Tabular*
    time_zone_table = Field(type=list, required=True, mutable=False)


class SystemTimeZoneGetListResponse20(OCIResponse):
    """
    Response to ``SystemTimeZoneGetListRequest20()``.

    Contains the configured time zone of the server processing the request and contains a
    2 column table with column headings 'Key' and 'Display Name' and a row for each time
    zone.
    """

    _ELEMENTS = (
        E("server_time_zone", "serverTimeZone", str, is_required=True),
        E(
            "time_zone_table", "timeZoneTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Required* serverTimeZone
    server_time_zone = Field(type=str, required=True, mutable=False)
    #: list: *Required* timeZoneTable  *Tabular*
    time_zone_table = Field(type=list, required=True, mutable=False)


class SystemTreatmentMappingAccessSIPStatusGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingAccessSIPStatusGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "SIP Status Code",
    "Treatment Id".
    """

    _ELEMENTS = (
        E(
            "treatment_mapping_table", "treatmentMappingTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* treatmentMappingTable  *Tabular*
    treatment_mapping_table = Field(type=list, required=True, mutable=False)


class SystemTreatmentMappingCallBlockingServiceGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingCallBlockingServiceGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "Service",
    "Treatment Id".
    """

    _ELEMENTS = (
        E(
            "treatment_mapping_table", "treatmentMappingTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* treatmentMappingTable  *Tabular*
    treatment_mapping_table = Field(type=list, required=True, mutable=False)


class SystemTreatmentMappingCallBlockingServiceGetListResponse19sp1(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingCallBlockingServiceGetListRequest19sp1()``.

    Contains a table with one row per mapping.  The table columns are: "Service",
    "Treatment Id".
    """

    _ELEMENTS = (
        E(
            "treatment_mapping_table", "treatmentMappingTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* treatmentMappingTable  *Tabular*
    treatment_mapping_table = Field(type=list, required=True, mutable=False)


class SystemTreatmentMappingInternalReleaseCauseGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingInternalReleaseCauseGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "Internal Release
    Cause", "Treatment Id".
    """

    _ELEMENTS = (
        E(
            "treatment_mapping_table", "treatmentMappingTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* treatmentMappingTable  *Tabular*
    treatment_mapping_table = Field(type=list, required=True, mutable=False)


class SystemTreatmentMappingNetworkSIPStatusGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingNetworkSIPStatusGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "SIP Status Code",
    "Treatment Id".
    """

    _ELEMENTS = (
        E(
            "treatment_mapping_table", "treatmentMappingTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* treatmentMappingTable  *Tabular*
    treatment_mapping_table = Field(type=list, required=True, mutable=False)


class SystemTreatmentMappingNetworkServerTreatmentGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingNetworkServerTreatmentGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "NS Treatment",
    "Treatment Id".
    """

    _ELEMENTS = (
        E(
            "treatment_mapping_table", "treatmentMappingTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* treatmentMappingTable  *Tabular*
    treatment_mapping_table = Field(type=list, required=True, mutable=False)


class SystemTreatmentMappingQ850CauseGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingQ850CauseGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "Q850 Cause Value",
    "Treatment Id".
    """

    _ELEMENTS = (
        E(
            "treatment_mapping_table", "treatmentMappingTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* treatmentMappingTable  *Tabular*
    treatment_mapping_table = Field(type=list, required=True, mutable=False)


class SystemTrunkGroupGetResponse(OCIResponse):
    """
    Response to ``SystemTrunkGroupGetRequest()``.

    Replaced by ``SystemTrunkGroupGetResponse19sp1()``.
    """

    _ELEMENTS = (
        E(
            "enforce_clid_service_assignment_for_pilot_user",
            "enforceCLIDServiceAssignmentForPilotUser", bool, is_required=True,
        ),
        E(
            "terminate_unreachable_trigger_detection_on_receipt_of18x",
            "terminateUnreachableTriggerDetectionOnReceiptOf18x", bool, is_required=True,
        ),
        E(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy", str, is_required=True,
        ),
        E(
            "enforce_out_of_dialog_pbx_redirection_policies",
            "enforceOutOfDialogPBXRedirectionPolicies", bool, is_required=True,
        ),
        E(
            "unscreened_redirection_handling", "unscreenedRedirectionHandling", str,
            is_required=True,
        ),
        E(
            "enable_holdover_of_highwater_call_counts",
            "enableHoldoverOfHighwaterCallCounts", bool, is_required=True,
        ),
        E("holdover_period", "holdoverPeriod", int, is_required=True),
        E("time_zone_offset_minutes", "timeZoneOffsetMinutes", int, is_required=True),
    )

    #: bool: *Required* enforceCLIDServiceAssignmentForPilotUser
    enforce_clid_service_assignment_for_pilot_user = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* terminateUnreachableTriggerDetectionOnReceiptOf18x
    terminate_unreachable_trigger_detection_on_receipt_of18x = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* pilotUserCallingLineAssertedIdentityPolicy
    pilot_user_calling_line_asserted_identity_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: bool: *Required* enforceOutOfDialogPBXRedirectionPolicies
    enforce_out_of_dialog_pbx_redirection_policies = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* unscreenedRedirectionHandling
    unscreened_redirection_handling = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableHoldoverOfHighwaterCallCounts
    enable_holdover_of_highwater_call_counts = Field(type=bool, required=True, mutable=False)
    #: int: *Required* holdoverPeriod
    holdover_period = Field(type=int, required=True, mutable=False)
    #: int: *Required* timeZoneOffsetMinutes
    time_zone_offset_minutes = Field(type=int, required=True, mutable=False)


class SystemTrunkGroupGetResponse19sp1(OCIResponse):
    """
    Response to ``SystemTrunkGroupGetRequest19sp1()``.

    """

    _ELEMENTS = (
        E(
            "enforce_clid_service_assignment_for_pilot_user",
            "enforceCLIDServiceAssignmentForPilotUser", bool, is_required=True,
        ),
        E(
            "terminate_unreachable_trigger_detection_on_receipt_of18x",
            "terminateUnreachableTriggerDetectionOnReceiptOf18x", bool, is_required=True,
        ),
        E(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy", str, is_required=True,
        ),
        E(
            "enforce_out_of_dialog_pbx_redirection_policies",
            "enforceOutOfDialogPBXRedirectionPolicies", bool, is_required=True,
        ),
        E(
            "unscreened_redirection_handling", "unscreenedRedirectionHandling", str,
            is_required=True,
        ),
        E(
            "enable_holdover_of_highwater_call_counts",
            "enableHoldoverOfHighwaterCallCounts", bool, is_required=True,
        ),
        E("holdover_period", "holdoverPeriod", int, is_required=True),
        E("time_zone_offset_minutes", "timeZoneOffsetMinutes", int, is_required=True),
        E(
            "clid_source_for_screened_calls_policy", "clidSourceForScreenedCallsPolicy",
            str, is_required=True,
        ),
        E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
    )

    #: bool: *Required* enforceCLIDServiceAssignmentForPilotUser
    enforce_clid_service_assignment_for_pilot_user = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* terminateUnreachableTriggerDetectionOnReceiptOf18x
    terminate_unreachable_trigger_detection_on_receipt_of18x = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* pilotUserCallingLineAssertedIdentityPolicy
    pilot_user_calling_line_asserted_identity_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: bool: *Required* enforceOutOfDialogPBXRedirectionPolicies
    enforce_out_of_dialog_pbx_redirection_policies = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* unscreenedRedirectionHandling
    unscreened_redirection_handling = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableHoldoverOfHighwaterCallCounts
    enable_holdover_of_highwater_call_counts = Field(type=bool, required=True, mutable=False)
    #: int: *Required* holdoverPeriod
    holdover_period = Field(type=int, required=True, mutable=False)
    #: int: *Required* timeZoneOffsetMinutes
    time_zone_offset_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* clidSourceForScreenedCallsPolicy
    clid_source_for_screened_calls_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* userLookupPolicy
    user_lookup_policy = Field(type=str, required=True, mutable=False)


class SystemTrunkGroupGetResponse21(OCIResponse):
    """
    Response to ``SystemTrunkGroupGetRequest21()``.

    Following attributes are only used in IMS mode: implicitRegistrationSetSupportPolicy
    sipIdentityForPilotAndProxyTrunkModesPolicy
    """

    _ELEMENTS = (
        E(
            "enforce_clid_service_assignment_for_pilot_user",
            "enforceCLIDServiceAssignmentForPilotUser", bool, is_required=True,
        ),
        E(
            "terminate_unreachable_trigger_detection_on_receipt_of18x",
            "terminateUnreachableTriggerDetectionOnReceiptOf18x", bool, is_required=True,
        ),
        E(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy", str, is_required=True,
        ),
        E(
            "enforce_out_of_dialog_pbx_redirection_policies",
            "enforceOutOfDialogPBXRedirectionPolicies", bool, is_required=True,
        ),
        E(
            "unscreened_redirection_handling", "unscreenedRedirectionHandling", str,
            is_required=True,
        ),
        E(
            "enable_holdover_of_highwater_call_counts",
            "enableHoldoverOfHighwaterCallCounts", bool, is_required=True,
        ),
        E("holdover_period", "holdoverPeriod", int, is_required=True),
        E("time_zone_offset_minutes", "timeZoneOffsetMinutes", int, is_required=True),
        E(
            "clid_source_for_screened_calls_policy", "clidSourceForScreenedCallsPolicy",
            str, is_required=True,
        ),
        E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
        E(
            "out_of_dialog_pbx_redirection_clid_mapping",
            "outOfDialogPBXRedirectionCLIDMapping", str, is_required=True,
        ),
        E(
            "enforce_out_of_dialog_pbx_redirection_trunk_group_capacity",
            "enforceOutOfDialogPBXRedirectionTrunkGroupCapacity", bool, is_required=True,
        ),
        E(
            "implicit_registration_set_support_policy",
            "implicitRegistrationSetSupportPolicy", str, is_required=True,
        ),
        E(
            "sip_identity_for_pilot_and_proxy_trunk_modes_policy",
            "sipIdentityForPilotAndProxyTrunkModesPolicy", str, is_required=True,
        ),
        E(
            "support_connected_identity_policy", "supportConnectedIdentityPolicy", str,
            is_required=True,
        ),
    )

    #: bool: *Required* enforceCLIDServiceAssignmentForPilotUser
    enforce_clid_service_assignment_for_pilot_user = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* terminateUnreachableTriggerDetectionOnReceiptOf18x
    terminate_unreachable_trigger_detection_on_receipt_of18x = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* pilotUserCallingLineAssertedIdentityPolicy
    pilot_user_calling_line_asserted_identity_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: bool: *Required* enforceOutOfDialogPBXRedirectionPolicies
    enforce_out_of_dialog_pbx_redirection_policies = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* unscreenedRedirectionHandling
    unscreened_redirection_handling = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableHoldoverOfHighwaterCallCounts
    enable_holdover_of_highwater_call_counts = Field(type=bool, required=True, mutable=False)
    #: int: *Required* holdoverPeriod
    holdover_period = Field(type=int, required=True, mutable=False)
    #: int: *Required* timeZoneOffsetMinutes
    time_zone_offset_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* clidSourceForScreenedCallsPolicy
    clid_source_for_screened_calls_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* userLookupPolicy
    user_lookup_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* outOfDialogPBXRedirectionCLIDMapping
    out_of_dialog_pbx_redirection_clid_mapping = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enforceOutOfDialogPBXRedirectionTrunkGroupCapacity
    enforce_out_of_dialog_pbx_redirection_trunk_group_capacity = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* implicitRegistrationSetSupportPolicy
    implicit_registration_set_support_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* sipIdentityForPilotAndProxyTrunkModesPolicy
    sip_identity_for_pilot_and_proxy_trunk_modes_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* supportConnectedIdentityPolicy
    support_connected_identity_policy = Field(type=str, required=True, mutable=False)


class SystemTrunkGroupOptionsMessageResponseStatusCodeGetListResponse(OCIResponse):
    """
    Response to the ``SystemTrunkGroupOptionsMessageResponseStatusCodeGetListRequest()``.

    The response contains of the list of system level successful SIP OPTIONS message
    respoonse status codes.
    """

    _ELEMENTS = (
        E("status_code", "statusCode", str, is_array=True),
    )

    #: list(str): *Optional* statusCode  *Array*
    status_code = Field(type=list, required=False, mutable=False)


class SystemTrunkGroupUserCreationTaskGetListResponse(OCIResponse):
    """
    Response to ``SystemTrunkGroupUserCreationTaskGetListRequest()``.

    Contains a table with a row for each user creation task and column headings : "Service
    User Id", "Group Id", "Organization Id", "Organization Type", "Name", "Status", "Users
    Created", "Total Users To Create", "Error Count". The "Organization Id" column is
    populated with either a service provider Id or an enterprise Id.  The "Organization
    Type" column is populated with one of the enumerated strings defined in the
    OrganizationType OCI data type.  Please see OCISchemaDataTypes.xsd for details on
    OrganizationType.
    """

    _ELEMENTS = (
        E("task_table", "taskTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* taskTable  *Tabular*
    task_table = Field(type=list, required=True, mutable=False)


class SystemTrunkGroupUserCreationTaskGetListResponse14sp4(OCIResponse):
    """
    Response to ``SystemTrunkGroupUserCreationTaskGetListRequest14sp4()``.

    Contains a table with a row for each user creation task and column headings : "Trunk
    Group Name", "Group Id", "Organization Id", "Organization Type", "Name", "Status",
    "Users Created", "Total Users To Create", "Error Count". The "Organization Id" column
    is populated with either a service provider Id or an enterprise Id.  The "Organization
    Type" column is populated with one of the enumerated strings defined in the
    OrganizationType OCI data type.  Please see OCISchemaDataTypes.xsd for details on
    OrganizationType.
    """

    _ELEMENTS = (
        E("task_table", "taskTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* taskTable  *Tabular*
    task_table = Field(type=list, required=True, mutable=False)


class SystemTwoStageDialingGetDnListResponse(OCIResponse):
    """
    Response to ``SystemTwoStageDialingGetDnListRequest()``.

    The Two Stage Dialing DN List table column headings are: "Phone Number",
    "Description".
    """

    _ELEMENTS = (
        E(
            "phone_number_table", "phoneNumberTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* phoneNumberTable  *Tabular*
    phone_number_table = Field(type=list, required=True, mutable=False)


class SystemVerifyTranslationAndRoutingResponse(OCIResponse):
    """
    Represents a Verify Translation and Routing Test Call Result.

    """

    _ELEMENTS = (
        E("result", "Result", str, is_required=True),
    )

    #: str: *Required* Result
    result = Field(type=str, required=True, mutable=False)


class SystemVideoServerGetListResponse(OCIResponse):
    """
    Response to ``SystemVideoServerGetListRequest()``.

    The Video Server table column headings are: "Net Address", "Port", "Transport",
    "Description". Transport types: udp, tcp, unspecified
    """

    _ELEMENTS = (
        E(
            "video_server_table", "videoServerTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* videoServerTable  *Tabular*
    video_server_table = Field(type=list, required=True, mutable=False)


class SystemVideoServerParametersGetResponse(OCIResponse):
    """
    Response to ``SystemVideoServerParametersGetRequest()``.

    Contains a list of system video server parameters.
    """

    _ELEMENTS = (
        E(
            "video_server_response_timer_milliseconds",
            "videoServerResponseTimerMilliseconds", int, is_required=True,
        ),
        E(
            "video_server_selection_route_timer_milliseconds",
            "videoServerSelectionRouteTimerMilliseconds", int, is_required=True,
        ),
        E(
            "use_static_video_server_device", "useStaticVideoServerDevice", bool,
            is_required=True,
        ),
    )

    #: int: *Required* videoServerResponseTimerMilliseconds
    video_server_response_timer_milliseconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* videoServerSelectionRouteTimerMilliseconds
    video_server_selection_route_timer_milliseconds = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* useStaticVideoServerDevice
    use_static_video_server_device = Field(type=bool, required=True, mutable=False)


class SystemVirtualOnNetCallTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemVirtualOnNetCallTypeGetListRequest()``.

    Contains a table with column headings: "Virtual On-Net Call Type Name", "Virtual On-
    Net Call Type CDR Value" in a row for each Virtual On-Net Call Type.
    """

    _ELEMENTS = (
        E(
            "virtual_on_net_call_type_table", "virtualOnNetCallTypeTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* virtualOnNetCallTypeTable  *Tabular*
    virtual_on_net_call_type_table = Field(type=list, required=True, mutable=False)


class SystemVoiceMessageSummaryUpdateGetResponse(OCIResponse):
    """
    Response to ``SystemVoiceMessageSummaryUpdateGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "send_saved_and_urgent_mwi_on_notification",
            "sendSavedAndUrgentMWIOnNotification", bool, is_required=True,
        ),
        E(
            "send_message_summary_update_on_register",
            "sendMessageSummaryUpdateOnRegister", bool, is_required=True,
        ),
        E(
            "min_time_between_mwi_on_register", "minTimeBetweenMWIOnRegister", int,
            is_required=True,
        ),
    )

    #: bool: *Required* sendSavedAndUrgentMWIOnNotification
    send_saved_and_urgent_mwi_on_notification = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* sendMessageSummaryUpdateOnRegister
    send_message_summary_update_on_register = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minTimeBetweenMWIOnRegister
    min_time_between_mwi_on_register = Field(type=int, required=True, mutable=False)


class SystemVoiceMessagingGroupGetPasscodeRulesResponse14(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetPasscodeRulesRequest14()``.

    Contains the system voice portal passcode rules setting.

    Replaced By: ``SystemPortalPasscodeRulesGetResponse()``
    """

    _ELEMENTS = (
        E("disallow_repeated_digits", "disallowRepeatedDigits", bool, is_required=True),
        E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
        E(
            "disallow_reversed_user_number", "disallowReversedUserNumber", bool,
            is_required=True,
        ),
        E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
        E(
            "disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool,
            is_required=True,
        ),
        E("min_code_length", "minCodeLength", int, is_required=True),
        E("max_code_length", "maxCodeLength", int, is_required=True),
        E(
            "disable_login_after_max_failed_login_attempts",
            "disableLoginAfterMaxFailedLoginAttempts", bool, is_required=True,
        ),
        E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
        E("expire_password", "expirePassword", bool, is_required=True),
        E("passcode_expires_days", "passcodeExpiresDays", int),
        E(
            "send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool,
            is_required=True,
        ),
        E("login_disabled_notify_email_address", "loginDisabledNotifyEmailAddress", str),
        E("default_password", "defaultPassword", str, is_required=True),
    )

    #: bool: *Required* disallowRepeatedDigits
    disallow_repeated_digits = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowUserNumber
    disallow_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedUserNumber
    disallow_reversed_user_number = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowOldPasscode
    disallow_old_passcode = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disallowReversedOldPasscode
    disallow_reversed_old_passcode = Field(type=bool, required=True, mutable=False)
    #: int: *Required* minCodeLength
    min_code_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxCodeLength
    max_code_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableLoginAfterMaxFailedLoginAttempts
    disable_login_after_max_failed_login_attempts = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* maxFailedLoginAttempts
    max_failed_login_attempts = Field(type=int, required=False, mutable=False)
    #: bool: *Required* expirePassword
    expire_password = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passcodeExpiresDays
    passcode_expires_days = Field(type=int, required=False, mutable=False)
    #: bool: *Required* sendLoginDisabledNotifyEmail
    send_login_disabled_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* loginDisabledNotifyEmailAddress
    login_disabled_notify_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* defaultPassword
    default_password = Field(type=str, required=True, mutable=False)


class SystemVoiceMessagingGroupGetResponse14(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetRequest14()``.

    """

    _ELEMENTS = (
        E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
        E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
        E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
        E("max_greeting_length_minutes", "maxGreetingLengthMinutes", int, is_required=True),
        E("max_message_length_minutes", "maxMessageLengthMinutes", int, is_required=True),
        E("max_mailbox_length_minutes", "maxMailboxLengthMinutes", int, is_required=True),
        E("does_message_age", "doesMessageAge", bool, is_required=True),
        E("hold_period_days", "holdPeriodDays", int, is_required=True),
        E("mail_server_net_address", "mailServerNetAddress", str),
        E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
        E(
            "default_delivery_from_address", "defaultDeliveryFromAddress", str,
            is_required=True,
        ),
        E(
            "default_notification_from_address", "defaultNotificationFromAddress", str,
            is_required=True,
        ),
        E(
            "default_voice_portal_lockout_from_address",
            "defaultVoicePortalLockoutFromAddress", str, is_required=True,
        ),
        E("use_outgoing_mwi_on_smdi", "useOutgoingMWIOnSMDI", bool, is_required=True),
        E("mwi_delay_in_seconds", "mwiDelayInSeconds", int, is_required=True),
        E("voice_portal_scope", "voicePortalScope", str, is_required=True),
        E(
            "enterprise_voice_portal_licensed", "enterpriseVoicePortalLicensed", bool,
            is_required=True,
        ),
        E("network_wide_messaging", "networkWideMessaging", bool, is_required=True),
        E("use_external_routing", "useExternalRouting", bool, is_required=True),
        E("default_external_routing_address", "defaultExternalRoutingAddress", str),
    )

    #: bool: *Required* realDeleteForImap
    real_delete_for_imap = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDnInMailBody
    use_dn_in_mail_body = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useShortSubjectLine
    use_short_subject_line = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxGreetingLengthMinutes
    max_greeting_length_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMessageLengthMinutes
    max_message_length_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMailboxLengthMinutes
    max_mailbox_length_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* doesMessageAge
    does_message_age = Field(type=bool, required=True, mutable=False)
    #: int: *Required* holdPeriodDays
    hold_period_days = Field(type=int, required=True, mutable=False)
    #: str: *Optional* mailServerNetAddress
    mail_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* mailServerProtocol
    mail_server_protocol = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultDeliveryFromAddress
    default_delivery_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultNotificationFromAddress
    default_notification_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultVoicePortalLockoutFromAddress
    default_voice_portal_lockout_from_address = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useOutgoingMWIOnSMDI
    use_outgoing_mwi_on_smdi = Field(type=bool, required=True, mutable=False)
    #: int: *Required* mwiDelayInSeconds
    mwi_delay_in_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* voicePortalScope
    voice_portal_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enterpriseVoicePortalLicensed
    enterprise_voice_portal_licensed = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* networkWideMessaging
    network_wide_messaging = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useExternalRouting
    use_external_routing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultExternalRoutingAddress
    default_external_routing_address = Field(type=str, required=False, mutable=False)


class SystemVoiceMessagingGroupGetResponse16(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetRequest16()``.

    """

    _ELEMENTS = (
        E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
        E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
        E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
        E("max_message_length_minutes", "maxMessageLengthMinutes", int, is_required=True),
        E("max_mailbox_length_minutes", "maxMailboxLengthMinutes", int, is_required=True),
        E("does_message_age", "doesMessageAge", bool, is_required=True),
        E("hold_period_days", "holdPeriodDays", int, is_required=True),
        E("mail_server_net_address", "mailServerNetAddress", str),
        E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
        E(
            "default_delivery_from_address", "defaultDeliveryFromAddress", str,
            is_required=True,
        ),
        E(
            "default_notification_from_address", "defaultNotificationFromAddress", str,
            is_required=True,
        ),
        E(
            "default_voice_portal_lockout_from_address",
            "defaultVoicePortalLockoutFromAddress", str, is_required=True,
        ),
        E("use_outgoing_mwi_on_smdi", "useOutgoingMWIOnSMDI", bool, is_required=True),
        E("mwi_delay_in_seconds", "mwiDelayInSeconds", int, is_required=True),
        E("voice_portal_scope", "voicePortalScope", str, is_required=True),
        E(
            "enterprise_voice_portal_licensed", "enterpriseVoicePortalLicensed", bool,
            is_required=True,
        ),
        E("network_wide_messaging", "networkWideMessaging", bool, is_required=True),
        E("use_external_routing", "useExternalRouting", bool, is_required=True),
        E("default_external_routing_address", "defaultExternalRoutingAddress", str),
    )

    #: bool: *Required* realDeleteForImap
    real_delete_for_imap = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDnInMailBody
    use_dn_in_mail_body = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useShortSubjectLine
    use_short_subject_line = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxMessageLengthMinutes
    max_message_length_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMailboxLengthMinutes
    max_mailbox_length_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* doesMessageAge
    does_message_age = Field(type=bool, required=True, mutable=False)
    #: int: *Required* holdPeriodDays
    hold_period_days = Field(type=int, required=True, mutable=False)
    #: str: *Optional* mailServerNetAddress
    mail_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* mailServerProtocol
    mail_server_protocol = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultDeliveryFromAddress
    default_delivery_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultNotificationFromAddress
    default_notification_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultVoicePortalLockoutFromAddress
    default_voice_portal_lockout_from_address = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useOutgoingMWIOnSMDI
    use_outgoing_mwi_on_smdi = Field(type=bool, required=True, mutable=False)
    #: int: *Required* mwiDelayInSeconds
    mwi_delay_in_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* voicePortalScope
    voice_portal_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enterpriseVoicePortalLicensed
    enterprise_voice_portal_licensed = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* networkWideMessaging
    network_wide_messaging = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useExternalRouting
    use_external_routing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultExternalRoutingAddress
    default_external_routing_address = Field(type=str, required=False, mutable=False)


class SystemVoiceMessagingGroupGetResponse16sp2(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetRequest16sp2()``.

    The following elements are only used in AS data mode: realDeleteForImap
    useDnInMailBody useShortSubjectLine maxMessageLengthMinutes maxMailboxLengthMinutes
    doesMessageAge holdPeriodDays mailServerNetAddress mailServerProtocol
    defaultDeliveryFromAddress defaultNotificationFromAddress useOutgoingMWIOnSMDI
    mwiDelayInSeconds voicePortalScope enterpriseVoicePortalLicensed networkWideMessaging
    useExternalRouting defaultExternalRoutingAddress vmOnlySystem
    """

    _ELEMENTS = (
        E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
        E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
        E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
        E("max_message_length_minutes", "maxMessageLengthMinutes", int, is_required=True),
        E("max_mailbox_length_minutes", "maxMailboxLengthMinutes", int, is_required=True),
        E("does_message_age", "doesMessageAge", bool, is_required=True),
        E("hold_period_days", "holdPeriodDays", int, is_required=True),
        E("mail_server_net_address", "mailServerNetAddress", str),
        E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
        E(
            "default_delivery_from_address", "defaultDeliveryFromAddress", str,
            is_required=True,
        ),
        E(
            "default_notification_from_address", "defaultNotificationFromAddress", str,
            is_required=True,
        ),
        E(
            "default_voice_portal_lockout_from_address",
            "defaultVoicePortalLockoutFromAddress", str, is_required=True,
        ),
        E("use_outgoing_mwi_on_smdi", "useOutgoingMWIOnSMDI", bool, is_required=True),
        E("mwi_delay_in_seconds", "mwiDelayInSeconds", int, is_required=True),
        E("voice_portal_scope", "voicePortalScope", str, is_required=True),
        E(
            "enterprise_voice_portal_licensed", "enterpriseVoicePortalLicensed", bool,
            is_required=True,
        ),
        E("network_wide_messaging", "networkWideMessaging", bool, is_required=True),
        E("use_external_routing", "useExternalRouting", bool, is_required=True),
        E("default_external_routing_address", "defaultExternalRoutingAddress", str),
        E("vm_only_system", "vmOnlySystem", bool, is_required=True),
    )

    #: bool: *Required* realDeleteForImap
    real_delete_for_imap = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDnInMailBody
    use_dn_in_mail_body = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useShortSubjectLine
    use_short_subject_line = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxMessageLengthMinutes
    max_message_length_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMailboxLengthMinutes
    max_mailbox_length_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* doesMessageAge
    does_message_age = Field(type=bool, required=True, mutable=False)
    #: int: *Required* holdPeriodDays
    hold_period_days = Field(type=int, required=True, mutable=False)
    #: str: *Optional* mailServerNetAddress
    mail_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* mailServerProtocol
    mail_server_protocol = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultDeliveryFromAddress
    default_delivery_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultNotificationFromAddress
    default_notification_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultVoicePortalLockoutFromAddress
    default_voice_portal_lockout_from_address = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useOutgoingMWIOnSMDI
    use_outgoing_mwi_on_smdi = Field(type=bool, required=True, mutable=False)
    #: int: *Required* mwiDelayInSeconds
    mwi_delay_in_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* voicePortalScope
    voice_portal_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enterpriseVoicePortalLicensed
    enterprise_voice_portal_licensed = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* networkWideMessaging
    network_wide_messaging = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useExternalRouting
    use_external_routing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultExternalRoutingAddress
    default_external_routing_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* vmOnlySystem
    vm_only_system = Field(type=bool, required=True, mutable=False)


class SystemVoiceMessagingGroupGetResponse20(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetRequest20()``.

    The following elements are only used in AS data mode: realDeleteForImap
    useDnInMailBody useShortSubjectLine maxMessageLengthMinutes maxMailboxLengthMinutes
    doesMessageAge holdPeriodDays mailServerNetAddress mailServerProtocol
    defaultDeliveryFromAddress defaultNotificationFromAddress useOutgoingMWIOnSMDI
    mwiDelayInSeconds voicePortalScope enterpriseVoicePortalLicensed networkWideMessaging
    useExternalRouting defaultExternalRoutingAddress vmOnlySystem
    clientInitiatedMailServerSessionTimeoutMinutes Replaced by:
    ``SystemVoiceMessagingGroupGetResponse21()``
    """

    _ELEMENTS = (
        E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
        E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
        E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
        E("max_message_length_minutes", "maxMessageLengthMinutes", int, is_required=True),
        E("max_mailbox_length_minutes", "maxMailboxLengthMinutes", int, is_required=True),
        E("does_message_age", "doesMessageAge", bool, is_required=True),
        E("hold_period_days", "holdPeriodDays", int, is_required=True),
        E("mail_server_net_address", "mailServerNetAddress", str),
        E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
        E(
            "default_delivery_from_address", "defaultDeliveryFromAddress", str,
            is_required=True,
        ),
        E(
            "default_notification_from_address", "defaultNotificationFromAddress", str,
            is_required=True,
        ),
        E(
            "default_voice_portal_lockout_from_address",
            "defaultVoicePortalLockoutFromAddress", str, is_required=True,
        ),
        E("use_outgoing_mwi_on_smdi", "useOutgoingMWIOnSMDI", bool, is_required=True),
        E("mwi_delay_in_seconds", "mwiDelayInSeconds", int, is_required=True),
        E("voice_portal_scope", "voicePortalScope", str, is_required=True),
        E(
            "enterprise_voice_portal_licensed", "enterpriseVoicePortalLicensed", bool,
            is_required=True,
        ),
        E("network_wide_messaging", "networkWideMessaging", bool, is_required=True),
        E("use_external_routing", "useExternalRouting", bool, is_required=True),
        E("default_external_routing_address", "defaultExternalRoutingAddress", str),
        E("vm_only_system", "vmOnlySystem", bool, is_required=True),
        E(
            "client_initiated_mail_server_session_timeout_minutes",
            "clientInitiatedMailServerSessionTimeoutMinutes", int, is_required=True,
        ),
    )

    #: bool: *Required* realDeleteForImap
    real_delete_for_imap = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDnInMailBody
    use_dn_in_mail_body = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useShortSubjectLine
    use_short_subject_line = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxMessageLengthMinutes
    max_message_length_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMailboxLengthMinutes
    max_mailbox_length_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* doesMessageAge
    does_message_age = Field(type=bool, required=True, mutable=False)
    #: int: *Required* holdPeriodDays
    hold_period_days = Field(type=int, required=True, mutable=False)
    #: str: *Optional* mailServerNetAddress
    mail_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* mailServerProtocol
    mail_server_protocol = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultDeliveryFromAddress
    default_delivery_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultNotificationFromAddress
    default_notification_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultVoicePortalLockoutFromAddress
    default_voice_portal_lockout_from_address = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useOutgoingMWIOnSMDI
    use_outgoing_mwi_on_smdi = Field(type=bool, required=True, mutable=False)
    #: int: *Required* mwiDelayInSeconds
    mwi_delay_in_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* voicePortalScope
    voice_portal_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enterpriseVoicePortalLicensed
    enterprise_voice_portal_licensed = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* networkWideMessaging
    network_wide_messaging = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useExternalRouting
    use_external_routing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultExternalRoutingAddress
    default_external_routing_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* vmOnlySystem
    vm_only_system = Field(type=bool, required=True, mutable=False)
    #: int: *Required* clientInitiatedMailServerSessionTimeoutMinutes
    client_initiated_mail_server_session_timeout_minutes = Field(
        type=int, required=True, mutable=False,
    )


class SystemVoiceMessagingGroupGetResponse21(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetRequest21()``.

    The following elements are only used in AS data mode: realDeleteForImap
    useDnInMailBody useShortSubjectLine maxMessageLengthMinutes maxMailboxLengthMinutes
    doesMessageAge holdPeriodDays mailServerNetAddress mailServerProtocol
    defaultDeliveryFromAddress defaultNotificationFromAddress useOutgoingMWIOnSMDI
    mwiDelayInSeconds voicePortalScope enterpriseVoicePortalLicensed networkWideMessaging
    useExternalRouting defaultExternalRoutingAddress vmOnlySystem
    clientInitiatedMailServerSessionTimeoutMinutes recordingAudioFileFormat
    """

    _ELEMENTS = (
        E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
        E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
        E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
        E("max_message_length_minutes", "maxMessageLengthMinutes", int, is_required=True),
        E("max_mailbox_length_minutes", "maxMailboxLengthMinutes", int, is_required=True),
        E("does_message_age", "doesMessageAge", bool, is_required=True),
        E("hold_period_days", "holdPeriodDays", int, is_required=True),
        E("mail_server_net_address", "mailServerNetAddress", str),
        E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
        E(
            "default_delivery_from_address", "defaultDeliveryFromAddress", str,
            is_required=True,
        ),
        E(
            "default_notification_from_address", "defaultNotificationFromAddress", str,
            is_required=True,
        ),
        E(
            "default_voice_portal_lockout_from_address",
            "defaultVoicePortalLockoutFromAddress", str, is_required=True,
        ),
        E("use_outgoing_mwi_on_smdi", "useOutgoingMWIOnSMDI", bool, is_required=True),
        E("mwi_delay_in_seconds", "mwiDelayInSeconds", int, is_required=True),
        E("voice_portal_scope", "voicePortalScope", str, is_required=True),
        E(
            "enterprise_voice_portal_licensed", "enterpriseVoicePortalLicensed", bool,
            is_required=True,
        ),
        E("network_wide_messaging", "networkWideMessaging", bool, is_required=True),
        E("use_external_routing", "useExternalRouting", bool, is_required=True),
        E("default_external_routing_address", "defaultExternalRoutingAddress", str),
        E("vm_only_system", "vmOnlySystem", bool, is_required=True),
        E(
            "client_initiated_mail_server_session_timeout_minutes",
            "clientInitiatedMailServerSessionTimeoutMinutes", int, is_required=True,
        ),
        E("recording_audio_file_format", "recordingAudioFileFormat", str, is_required=True),
    )

    #: bool: *Required* realDeleteForImap
    real_delete_for_imap = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDnInMailBody
    use_dn_in_mail_body = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useShortSubjectLine
    use_short_subject_line = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxMessageLengthMinutes
    max_message_length_minutes = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxMailboxLengthMinutes
    max_mailbox_length_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* doesMessageAge
    does_message_age = Field(type=bool, required=True, mutable=False)
    #: int: *Required* holdPeriodDays
    hold_period_days = Field(type=int, required=True, mutable=False)
    #: str: *Optional* mailServerNetAddress
    mail_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* mailServerProtocol
    mail_server_protocol = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultDeliveryFromAddress
    default_delivery_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultNotificationFromAddress
    default_notification_from_address = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultVoicePortalLockoutFromAddress
    default_voice_portal_lockout_from_address = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useOutgoingMWIOnSMDI
    use_outgoing_mwi_on_smdi = Field(type=bool, required=True, mutable=False)
    #: int: *Required* mwiDelayInSeconds
    mwi_delay_in_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* voicePortalScope
    voice_portal_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enterpriseVoicePortalLicensed
    enterprise_voice_portal_licensed = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* networkWideMessaging
    network_wide_messaging = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useExternalRouting
    use_external_routing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultExternalRoutingAddress
    default_external_routing_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* vmOnlySystem
    vm_only_system = Field(type=bool, required=True, mutable=False)
    #: int: *Required* clientInitiatedMailServerSessionTimeoutMinutes
    client_initiated_mail_server_session_timeout_minutes = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* recordingAudioFileFormat
    recording_audio_file_format = Field(type=str, required=True, mutable=False)


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse14(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest14()``.

    """

    _ELEMENTS = (
        E(
            "use_voice_portal_customization", "useVoicePortalCustomization", bool,
            is_required=True,
        ),
        E(
            "voice_portal_main_menu_keys", "voicePortalMainMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "voice_messaging_menu_keys", "voiceMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_busy_or_no_answer_greeting_menu_keys",
            "changeBusyOrNoAnswerGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "record_new_greeting_or_personalized_name_menu_keys",
            "recordNewGreetingOrPersonalizedNameMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "delete_all_messages_menu_keys", "deleteAllMessagesMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "comm_pilot_express_profile_menu_keys", "commPilotExpressProfileMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "personalized_name_menu_keys", "personalizedNameMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "call_forwarding_options_menu_keys", "callForwardingOptionsMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_call_forwarding_destination_menu_keys",
            "changeCallForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_calling_menu_keys", "voicePortalCallingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "hoteling_menu_keys", "hotelingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "passcode_menu_keys", "passcodeMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_messages_menu_keys", "playMessagesMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_message_menu_keys", "playMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "additional_message_options_menu_keys", "additionalMessageOptionsMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "forward_or_compose_message_menu_keys", "forwardOrComposeMessageMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "reply_message_menu_keys", "replyMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_distribution_list_menu_keys", "sendToDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "select_distribution_list_menu_keys", "selectDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "review_selected_distribution_list_menu_keys",
            "reviewSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_message_to_selected_distribution_list_menu_keys",
            "sendMessageToSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_all_group_members_menu_keys", "sendToAllGroupMembersMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "send_to_person_menu_keys", "sendToPersonMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_current_introduction_or_message_or_reply_menu_keys",
            "changeCurrentIntroductionOrMessageOrReplyMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_login_menu_keys", "voicePortalLoginMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "fax_messaging_menu_keys", "faxMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
    )

    #: bool: *Required* useVoicePortalCustomization
    use_voice_portal_customization = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalMainMenuKeys
    voice_portal_main_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingMenuKeys
    voice_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeBusyOrNoAnswerGreetingMenuKeys
    change_busy_or_no_answer_greeting_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* recordNewGreetingOrPersonalizedNameMenuKeys
    record_new_greeting_or_personalized_name_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* deleteAllMessagesMenuKeys
    delete_all_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* commPilotExpressProfileMenuKeys
    comm_pilot_express_profile_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* personalizedNameMenuKeys
    personalized_name_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* callForwardingOptionsMenuKeys
    call_forwarding_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCallForwardingDestinationMenuKeys
    change_call_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalCallingMenuKeys
    voice_portal_calling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* hotelingMenuKeys
    hoteling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* passcodeMenuKeys
    passcode_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessagesMenuKeys
    play_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessageMenuKeys
    play_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* additionalMessageOptionsMenuKeys
    additional_message_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* forwardOrComposeMessageMenuKeys
    forward_or_compose_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* replyMessageMenuKeys
    reply_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToDistributionListMenuKeys
    send_to_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* selectDistributionListMenuKeys
    select_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* reviewSelectedDistributionListMenuKeys
    review_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendMessageToSelectedDistributionListMenuKeys
    send_message_to_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendToAllGroupMembersMenuKeys
    send_to_all_group_members_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToPersonMenuKeys
    send_to_person_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCurrentIntroductionOrMessageOrReplyMenuKeys
    change_current_introduction_or_message_or_reply_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalLoginMenuKeys
    voice_portal_login_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* faxMessagingMenuKeys
    fax_messaging_menu_keys = Field(type=str, required=True, mutable=False)


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse18(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest18()``.

    Replaced by ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse19()``
    """

    _ELEMENTS = (
        E(
            "use_voice_portal_customization", "useVoicePortalCustomization", bool,
            is_required=True,
        ),
        E(
            "voice_portal_main_menu_keys", "voicePortalMainMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "voice_messaging_menu_keys", "voiceMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_greeting_menu_keys", "playGreetingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_busy_or_no_answer_greeting_menu_keys",
            "changeBusyOrNoAnswerGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "record_new_greeting_or_personalized_name_menu_keys",
            "recordNewGreetingOrPersonalizedNameMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "delete_all_messages_menu_keys", "deleteAllMessagesMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "comm_pilot_express_profile_menu_keys", "commPilotExpressProfileMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "personalized_name_menu_keys", "personalizedNameMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "call_forwarding_options_menu_keys", "callForwardingOptionsMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_call_forwarding_destination_menu_keys",
            "changeCallForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_calling_menu_keys", "voicePortalCallingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "hoteling_menu_keys", "hotelingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "passcode_menu_keys", "passcodeMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_messages_menu_keys", "playMessagesMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_message_menu_keys", "playMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "additional_message_options_menu_keys", "additionalMessageOptionsMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "forward_or_compose_message_menu_keys", "forwardOrComposeMessageMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "reply_message_menu_keys", "replyMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_distribution_list_menu_keys", "sendToDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "select_distribution_list_menu_keys", "selectDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "review_selected_distribution_list_menu_keys",
            "reviewSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_message_to_selected_distribution_list_menu_keys",
            "sendMessageToSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_all_group_members_menu_keys", "sendToAllGroupMembersMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "send_to_person_menu_keys", "sendToPersonMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_current_introduction_or_message_or_reply_menu_keys",
            "changeCurrentIntroductionOrMessageOrReplyMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_login_menu_keys", "voicePortalLoginMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "fax_messaging_menu_keys", "faxMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "message_deposit_menu_keys", "messageDepositMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "disable_message_deposit_menu_keys", "disableMessageDepositMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "greeting_only_forwarding_destination_menu_keys",
            "greetingOnlyForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
    )

    #: bool: *Required* useVoicePortalCustomization
    use_voice_portal_customization = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalMainMenuKeys
    voice_portal_main_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingMenuKeys
    voice_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playGreetingMenuKeys
    play_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeBusyOrNoAnswerGreetingMenuKeys
    change_busy_or_no_answer_greeting_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* recordNewGreetingOrPersonalizedNameMenuKeys
    record_new_greeting_or_personalized_name_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* deleteAllMessagesMenuKeys
    delete_all_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* commPilotExpressProfileMenuKeys
    comm_pilot_express_profile_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* personalizedNameMenuKeys
    personalized_name_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* callForwardingOptionsMenuKeys
    call_forwarding_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCallForwardingDestinationMenuKeys
    change_call_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalCallingMenuKeys
    voice_portal_calling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* hotelingMenuKeys
    hoteling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* passcodeMenuKeys
    passcode_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessagesMenuKeys
    play_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessageMenuKeys
    play_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* additionalMessageOptionsMenuKeys
    additional_message_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* forwardOrComposeMessageMenuKeys
    forward_or_compose_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* replyMessageMenuKeys
    reply_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToDistributionListMenuKeys
    send_to_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* selectDistributionListMenuKeys
    select_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* reviewSelectedDistributionListMenuKeys
    review_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendMessageToSelectedDistributionListMenuKeys
    send_message_to_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendToAllGroupMembersMenuKeys
    send_to_all_group_members_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToPersonMenuKeys
    send_to_person_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCurrentIntroductionOrMessageOrReplyMenuKeys
    change_current_introduction_or_message_or_reply_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalLoginMenuKeys
    voice_portal_login_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* faxMessagingMenuKeys
    fax_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* messageDepositMenuKeys
    message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* disableMessageDepositMenuKeys
    disable_message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* greetingOnlyForwardingDestinationMenuKeys
    greeting_only_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse18sp1(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest18sp1()``.

    Replaced by ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "use_voice_portal_customization", "useVoicePortalCustomization", bool,
            is_required=True,
        ),
        E(
            "voice_portal_main_menu_keys", "voicePortalMainMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "voice_messaging_menu_keys", "voiceMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_greeting_menu_keys", "playGreetingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_busy_or_no_answer_greeting_menu_keys",
            "changeBusyOrNoAnswerGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_extended_away_greeting_menu_keys",
            "changeExtendedAwayGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "record_new_greeting_or_personalized_name_menu_keys",
            "recordNewGreetingOrPersonalizedNameMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "delete_all_messages_menu_keys", "deleteAllMessagesMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "comm_pilot_express_profile_menu_keys", "commPilotExpressProfileMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "personalized_name_menu_keys", "personalizedNameMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "call_forwarding_options_menu_keys", "callForwardingOptionsMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_call_forwarding_destination_menu_keys",
            "changeCallForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_calling_menu_keys", "voicePortalCallingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "hoteling_menu_keys", "hotelingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "passcode_menu_keys", "passcodeMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_messages_menu_keys", "playMessagesMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_message_menu_keys", "playMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "additional_message_options_menu_keys", "additionalMessageOptionsMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "forward_or_compose_message_menu_keys", "forwardOrComposeMessageMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "reply_message_menu_keys", "replyMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_distribution_list_menu_keys", "sendToDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "select_distribution_list_menu_keys", "selectDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "review_selected_distribution_list_menu_keys",
            "reviewSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_message_to_selected_distribution_list_menu_keys",
            "sendMessageToSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_all_group_members_menu_keys", "sendToAllGroupMembersMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "send_to_person_menu_keys", "sendToPersonMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_current_introduction_or_message_or_reply_menu_keys",
            "changeCurrentIntroductionOrMessageOrReplyMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_login_menu_keys", "voicePortalLoginMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "fax_messaging_menu_keys", "faxMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "message_deposit_menu_keys", "messageDepositMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "disable_message_deposit_menu_keys", "disableMessageDepositMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "greeting_only_forwarding_destination_menu_keys",
            "greetingOnlyForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
    )

    #: bool: *Required* useVoicePortalCustomization
    use_voice_portal_customization = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalMainMenuKeys
    voice_portal_main_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingMenuKeys
    voice_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playGreetingMenuKeys
    play_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeBusyOrNoAnswerGreetingMenuKeys
    change_busy_or_no_answer_greeting_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* changeExtendedAwayGreetingMenuKeys
    change_extended_away_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* recordNewGreetingOrPersonalizedNameMenuKeys
    record_new_greeting_or_personalized_name_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* deleteAllMessagesMenuKeys
    delete_all_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* commPilotExpressProfileMenuKeys
    comm_pilot_express_profile_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* personalizedNameMenuKeys
    personalized_name_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* callForwardingOptionsMenuKeys
    call_forwarding_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCallForwardingDestinationMenuKeys
    change_call_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalCallingMenuKeys
    voice_portal_calling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* hotelingMenuKeys
    hoteling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* passcodeMenuKeys
    passcode_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessagesMenuKeys
    play_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessageMenuKeys
    play_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* additionalMessageOptionsMenuKeys
    additional_message_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* forwardOrComposeMessageMenuKeys
    forward_or_compose_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* replyMessageMenuKeys
    reply_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToDistributionListMenuKeys
    send_to_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* selectDistributionListMenuKeys
    select_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* reviewSelectedDistributionListMenuKeys
    review_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendMessageToSelectedDistributionListMenuKeys
    send_message_to_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendToAllGroupMembersMenuKeys
    send_to_all_group_members_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToPersonMenuKeys
    send_to_person_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCurrentIntroductionOrMessageOrReplyMenuKeys
    change_current_introduction_or_message_or_reply_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalLoginMenuKeys
    voice_portal_login_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* faxMessagingMenuKeys
    fax_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* messageDepositMenuKeys
    message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* disableMessageDepositMenuKeys
    disable_message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* greetingOnlyForwardingDestinationMenuKeys
    greeting_only_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse19(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest19()``.

    Replaced by ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "use_voice_portal_customization", "useVoicePortalCustomization", bool,
            is_required=True,
        ),
        E(
            "voice_portal_main_menu_keys", "voicePortalMainMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "greetings_menu_keys", "greetingsMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "conference_greeting_menu_keys", "conferenceGreetingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "voice_messaging_menu_keys", "voiceMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_greeting_menu_keys", "playGreetingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_busy_or_no_answer_greeting_menu_keys",
            "changeBusyOrNoAnswerGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "record_new_greeting_or_personalized_name_menu_keys",
            "recordNewGreetingOrPersonalizedNameMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "delete_all_messages_menu_keys", "deleteAllMessagesMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "comm_pilot_express_profile_menu_keys", "commPilotExpressProfileMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "personalized_name_menu_keys", "personalizedNameMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "call_forwarding_options_menu_keys", "callForwardingOptionsMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_call_forwarding_destination_menu_keys",
            "changeCallForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_calling_menu_keys", "voicePortalCallingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "hoteling_menu_keys", "hotelingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "passcode_menu_keys", "passcodeMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_messages_menu_keys", "playMessagesMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_message_menu_keys", "playMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "additional_message_options_menu_keys", "additionalMessageOptionsMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "forward_or_compose_message_menu_keys", "forwardOrComposeMessageMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "reply_message_menu_keys", "replyMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_distribution_list_menu_keys", "sendToDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "select_distribution_list_menu_keys", "selectDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "review_selected_distribution_list_menu_keys",
            "reviewSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_message_to_selected_distribution_list_menu_keys",
            "sendMessageToSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_all_group_members_menu_keys", "sendToAllGroupMembersMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "send_to_person_menu_keys", "sendToPersonMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_current_introduction_or_message_or_reply_menu_keys",
            "changeCurrentIntroductionOrMessageOrReplyMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_login_menu_keys", "voicePortalLoginMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "fax_messaging_menu_keys", "faxMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "message_deposit_menu_keys", "messageDepositMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "disable_message_deposit_menu_keys", "disableMessageDepositMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "greeting_only_forwarding_destination_menu_keys",
            "greetingOnlyForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
    )

    #: bool: *Required* useVoicePortalCustomization
    use_voice_portal_customization = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalMainMenuKeys
    voice_portal_main_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* greetingsMenuKeys
    greetings_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* conferenceGreetingMenuKeys
    conference_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingMenuKeys
    voice_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playGreetingMenuKeys
    play_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeBusyOrNoAnswerGreetingMenuKeys
    change_busy_or_no_answer_greeting_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* recordNewGreetingOrPersonalizedNameMenuKeys
    record_new_greeting_or_personalized_name_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* deleteAllMessagesMenuKeys
    delete_all_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* commPilotExpressProfileMenuKeys
    comm_pilot_express_profile_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* personalizedNameMenuKeys
    personalized_name_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* callForwardingOptionsMenuKeys
    call_forwarding_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCallForwardingDestinationMenuKeys
    change_call_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalCallingMenuKeys
    voice_portal_calling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* hotelingMenuKeys
    hoteling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* passcodeMenuKeys
    passcode_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessagesMenuKeys
    play_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessageMenuKeys
    play_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* additionalMessageOptionsMenuKeys
    additional_message_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* forwardOrComposeMessageMenuKeys
    forward_or_compose_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* replyMessageMenuKeys
    reply_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToDistributionListMenuKeys
    send_to_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* selectDistributionListMenuKeys
    select_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* reviewSelectedDistributionListMenuKeys
    review_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendMessageToSelectedDistributionListMenuKeys
    send_message_to_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendToAllGroupMembersMenuKeys
    send_to_all_group_members_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToPersonMenuKeys
    send_to_person_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCurrentIntroductionOrMessageOrReplyMenuKeys
    change_current_introduction_or_message_or_reply_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalLoginMenuKeys
    voice_portal_login_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* faxMessagingMenuKeys
    fax_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* messageDepositMenuKeys
    message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* disableMessageDepositMenuKeys
    disable_message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* greetingOnlyForwardingDestinationMenuKeys
    greeting_only_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse19sp1(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest19sp1()``.

    Replaced by ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse20()``
    """

    _ELEMENTS = (
        E(
            "use_voice_portal_customization", "useVoicePortalCustomization", bool,
            is_required=True,
        ),
        E(
            "voice_portal_main_menu_keys", "voicePortalMainMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "greetings_menu_keys", "greetingsMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "conference_greeting_menu_keys", "conferenceGreetingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "voice_messaging_menu_keys", "voiceMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_greeting_menu_keys", "playGreetingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_busy_or_no_answer_greeting_menu_keys",
            "changeBusyOrNoAnswerGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_extended_away_greeting_menu_keys",
            "changeExtendedAwayGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "record_new_greeting_or_personalized_name_menu_keys",
            "recordNewGreetingOrPersonalizedNameMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "delete_all_messages_menu_keys", "deleteAllMessagesMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "comm_pilot_express_profile_menu_keys", "commPilotExpressProfileMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "personalized_name_menu_keys", "personalizedNameMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "call_forwarding_options_menu_keys", "callForwardingOptionsMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_call_forwarding_destination_menu_keys",
            "changeCallForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_calling_menu_keys", "voicePortalCallingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "hoteling_menu_keys", "hotelingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "passcode_menu_keys", "passcodeMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_messages_menu_keys", "playMessagesMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_message_menu_keys", "playMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "additional_message_options_menu_keys", "additionalMessageOptionsMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "forward_or_compose_message_menu_keys", "forwardOrComposeMessageMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "reply_message_menu_keys", "replyMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_distribution_list_menu_keys", "sendToDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "select_distribution_list_menu_keys", "selectDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "review_selected_distribution_list_menu_keys",
            "reviewSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_message_to_selected_distribution_list_menu_keys",
            "sendMessageToSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_all_group_members_menu_keys", "sendToAllGroupMembersMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "send_to_person_menu_keys", "sendToPersonMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_current_introduction_or_message_or_reply_menu_keys",
            "changeCurrentIntroductionOrMessageOrReplyMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_login_menu_keys", "voicePortalLoginMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "fax_messaging_menu_keys", "faxMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "message_deposit_menu_keys", "messageDepositMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "disable_message_deposit_menu_keys", "disableMessageDepositMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "greeting_only_forwarding_destination_menu_keys",
            "greetingOnlyForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
    )

    #: bool: *Required* useVoicePortalCustomization
    use_voice_portal_customization = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalMainMenuKeys
    voice_portal_main_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* greetingsMenuKeys
    greetings_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* conferenceGreetingMenuKeys
    conference_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingMenuKeys
    voice_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playGreetingMenuKeys
    play_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeBusyOrNoAnswerGreetingMenuKeys
    change_busy_or_no_answer_greeting_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* changeExtendedAwayGreetingMenuKeys
    change_extended_away_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* recordNewGreetingOrPersonalizedNameMenuKeys
    record_new_greeting_or_personalized_name_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* deleteAllMessagesMenuKeys
    delete_all_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* commPilotExpressProfileMenuKeys
    comm_pilot_express_profile_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* personalizedNameMenuKeys
    personalized_name_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* callForwardingOptionsMenuKeys
    call_forwarding_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCallForwardingDestinationMenuKeys
    change_call_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalCallingMenuKeys
    voice_portal_calling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* hotelingMenuKeys
    hoteling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* passcodeMenuKeys
    passcode_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessagesMenuKeys
    play_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessageMenuKeys
    play_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* additionalMessageOptionsMenuKeys
    additional_message_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* forwardOrComposeMessageMenuKeys
    forward_or_compose_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* replyMessageMenuKeys
    reply_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToDistributionListMenuKeys
    send_to_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* selectDistributionListMenuKeys
    select_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* reviewSelectedDistributionListMenuKeys
    review_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendMessageToSelectedDistributionListMenuKeys
    send_message_to_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendToAllGroupMembersMenuKeys
    send_to_all_group_members_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToPersonMenuKeys
    send_to_person_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCurrentIntroductionOrMessageOrReplyMenuKeys
    change_current_introduction_or_message_or_reply_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalLoginMenuKeys
    voice_portal_login_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* faxMessagingMenuKeys
    fax_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* messageDepositMenuKeys
    message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* disableMessageDepositMenuKeys
    disable_message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* greetingOnlyForwardingDestinationMenuKeys
    greeting_only_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse20(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest20()``.

    """

    _ELEMENTS = (
        E(
            "use_voice_portal_customization", "useVoicePortalCustomization", bool,
            is_required=True,
        ),
        E(
            "voice_portal_main_menu_keys", "voicePortalMainMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "announcement_menu_keys", "announcementMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "announcement_recording_menu_keys", "announcementRecordingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "greetings_menu_keys", "greetingsMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "conference_greeting_menu_keys", "conferenceGreetingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "voice_messaging_menu_keys", "voiceMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_greeting_menu_keys", "playGreetingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_busy_or_no_answer_greeting_menu_keys",
            "changeBusyOrNoAnswerGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_extended_away_greeting_menu_keys",
            "changeExtendedAwayGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "record_new_greeting_or_personalized_name_menu_keys",
            "recordNewGreetingOrPersonalizedNameMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "delete_all_messages_menu_keys", "deleteAllMessagesMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "comm_pilot_express_profile_menu_keys", "commPilotExpressProfileMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "personalized_name_menu_keys", "personalizedNameMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "call_forwarding_options_menu_keys", "callForwardingOptionsMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_call_forwarding_destination_menu_keys",
            "changeCallForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_calling_menu_keys", "voicePortalCallingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "hoteling_menu_keys", "hotelingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "passcode_menu_keys", "passcodeMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_messages_menu_keys", "playMessagesMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_message_menu_keys", "playMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "additional_message_options_menu_keys", "additionalMessageOptionsMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "forward_or_compose_message_menu_keys", "forwardOrComposeMessageMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "reply_message_menu_keys", "replyMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_distribution_list_menu_keys", "sendToDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "select_distribution_list_menu_keys", "selectDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "review_selected_distribution_list_menu_keys",
            "reviewSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_message_to_selected_distribution_list_menu_keys",
            "sendMessageToSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_all_group_members_menu_keys", "sendToAllGroupMembersMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "send_to_person_menu_keys", "sendToPersonMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_current_introduction_or_message_or_reply_menu_keys",
            "changeCurrentIntroductionOrMessageOrReplyMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_login_menu_keys", "voicePortalLoginMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "fax_messaging_menu_keys", "faxMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "message_deposit_menu_keys", "messageDepositMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "disable_message_deposit_menu_keys", "disableMessageDepositMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "greeting_only_forwarding_destination_menu_keys",
            "greetingOnlyForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
    )

    #: bool: *Required* useVoicePortalCustomization
    use_voice_portal_customization = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalMainMenuKeys
    voice_portal_main_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* announcementMenuKeys
    announcement_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* announcementRecordingMenuKeys
    announcement_recording_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* greetingsMenuKeys
    greetings_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* conferenceGreetingMenuKeys
    conference_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingMenuKeys
    voice_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playGreetingMenuKeys
    play_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeBusyOrNoAnswerGreetingMenuKeys
    change_busy_or_no_answer_greeting_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* changeExtendedAwayGreetingMenuKeys
    change_extended_away_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* recordNewGreetingOrPersonalizedNameMenuKeys
    record_new_greeting_or_personalized_name_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* deleteAllMessagesMenuKeys
    delete_all_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* commPilotExpressProfileMenuKeys
    comm_pilot_express_profile_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* personalizedNameMenuKeys
    personalized_name_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* callForwardingOptionsMenuKeys
    call_forwarding_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCallForwardingDestinationMenuKeys
    change_call_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalCallingMenuKeys
    voice_portal_calling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* hotelingMenuKeys
    hoteling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* passcodeMenuKeys
    passcode_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessagesMenuKeys
    play_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessageMenuKeys
    play_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* additionalMessageOptionsMenuKeys
    additional_message_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* forwardOrComposeMessageMenuKeys
    forward_or_compose_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* replyMessageMenuKeys
    reply_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToDistributionListMenuKeys
    send_to_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* selectDistributionListMenuKeys
    select_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* reviewSelectedDistributionListMenuKeys
    review_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendMessageToSelectedDistributionListMenuKeys
    send_message_to_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendToAllGroupMembersMenuKeys
    send_to_all_group_members_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToPersonMenuKeys
    send_to_person_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCurrentIntroductionOrMessageOrReplyMenuKeys
    change_current_introduction_or_message_or_reply_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalLoginMenuKeys
    voice_portal_login_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* faxMessagingMenuKeys
    fax_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* messageDepositMenuKeys
    message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* disableMessageDepositMenuKeys
    disable_message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* greetingOnlyForwardingDestinationMenuKeys
    greeting_only_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse21(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest21()``.

    """

    _ELEMENTS = (
        E(
            "use_voice_portal_customization", "useVoicePortalCustomization", bool,
            is_required=True,
        ),
        E(
            "voice_portal_main_menu_keys", "voicePortalMainMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "announcement_menu_keys", "announcementMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "announcement_recording_menu_keys", "announcementRecordingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "greetings_menu_keys", "greetingsMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "conference_greeting_menu_keys", "conferenceGreetingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "voice_messaging_menu_keys", "voiceMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_greeting_menu_keys", "playGreetingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_busy_or_no_answer_greeting_menu_keys",
            "changeBusyOrNoAnswerGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_extended_away_greeting_menu_keys",
            "changeExtendedAwayGreetingMenuKeys", str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "record_new_greeting_or_personalized_name_menu_keys",
            "recordNewGreetingOrPersonalizedNameMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "delete_all_messages_menu_keys", "deleteAllMessagesMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "comm_pilot_express_profile_menu_keys", "commPilotExpressProfileMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "personalized_name_menu_keys", "personalizedNameMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "call_forwarding_options_menu_keys", "callForwardingOptionsMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "change_call_forwarding_destination_menu_keys",
            "changeCallForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_calling_menu_keys", "voicePortalCallingMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "hoteling_menu_keys", "hotelingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "passcode_menu_keys", "passcodeMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_messages_menu_keys", "playMessagesMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "play_message_menu_keys", "playMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "additional_message_options_menu_keys", "additionalMessageOptionsMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "forward_or_compose_message_menu_keys", "forwardOrComposeMessageMenuKeys",
            str, is_complex=True, is_required=True,
        ),  # unknown
        E(
            "reply_message_menu_keys", "replyMessageMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_distribution_list_menu_keys", "sendToDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "select_distribution_list_menu_keys", "selectDistributionListMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "review_selected_distribution_list_menu_keys",
            "reviewSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_message_to_selected_distribution_list_menu_keys",
            "sendMessageToSelectedDistributionListMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "send_to_all_group_members_menu_keys", "sendToAllGroupMembersMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "send_to_person_menu_keys", "sendToPersonMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "change_current_introduction_or_message_or_reply_menu_keys",
            "changeCurrentIntroductionOrMessageOrReplyMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "voice_portal_login_menu_keys", "voicePortalLoginMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "fax_messaging_menu_keys", "faxMessagingMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "message_deposit_menu_keys", "messageDepositMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "disable_message_deposit_menu_keys", "disableMessageDepositMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
        E(
            "greeting_only_forwarding_destination_menu_keys",
            "greetingOnlyForwardingDestinationMenuKeys", str, is_complex=True,
            is_required=True,
        ),  # unknown
        E(
            "personal_assistant_menu_keys", "personalAssistantMenuKeys", str,
            is_complex=True, is_required=True,
        ),  # unknown
    )

    #: bool: *Required* useVoicePortalCustomization
    use_voice_portal_customization = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalMainMenuKeys
    voice_portal_main_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* announcementMenuKeys
    announcement_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* announcementRecordingMenuKeys
    announcement_recording_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* greetingsMenuKeys
    greetings_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* conferenceGreetingMenuKeys
    conference_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* voiceMessagingMenuKeys
    voice_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playGreetingMenuKeys
    play_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeBusyOrNoAnswerGreetingMenuKeys
    change_busy_or_no_answer_greeting_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* changeExtendedAwayGreetingMenuKeys
    change_extended_away_greeting_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* recordNewGreetingOrPersonalizedNameMenuKeys
    record_new_greeting_or_personalized_name_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* deleteAllMessagesMenuKeys
    delete_all_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* commPilotExpressProfileMenuKeys
    comm_pilot_express_profile_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* personalizedNameMenuKeys
    personalized_name_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* callForwardingOptionsMenuKeys
    call_forwarding_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCallForwardingDestinationMenuKeys
    change_call_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalCallingMenuKeys
    voice_portal_calling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* hotelingMenuKeys
    hoteling_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* passcodeMenuKeys
    passcode_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessagesMenuKeys
    play_messages_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* playMessageMenuKeys
    play_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* additionalMessageOptionsMenuKeys
    additional_message_options_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* forwardOrComposeMessageMenuKeys
    forward_or_compose_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* replyMessageMenuKeys
    reply_message_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToDistributionListMenuKeys
    send_to_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* selectDistributionListMenuKeys
    select_distribution_list_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* reviewSelectedDistributionListMenuKeys
    review_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendMessageToSelectedDistributionListMenuKeys
    send_message_to_selected_distribution_list_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* sendToAllGroupMembersMenuKeys
    send_to_all_group_members_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* sendToPersonMenuKeys
    send_to_person_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* changeCurrentIntroductionOrMessageOrReplyMenuKeys
    change_current_introduction_or_message_or_reply_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* voicePortalLoginMenuKeys
    voice_portal_login_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* faxMessagingMenuKeys
    fax_messaging_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* messageDepositMenuKeys
    message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* disableMessageDepositMenuKeys
    disable_message_deposit_menu_keys = Field(type=str, required=True, mutable=False)
    #: str: *Required* greetingOnlyForwardingDestinationMenuKeys
    greeting_only_forwarding_destination_menu_keys = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* personalAssistantMenuKeys
    personal_assistant_menu_keys = Field(type=str, required=True, mutable=False)


class SystemZoneCallingRestrictionsZoneGetListResponse(OCIResponse):
    """
    Response to ``SystemZoneCallingRestrictionsZoneGetListRequest()``.

    Contains a table of all the zones in the system.  The column headings are "Zone Name"
    , "Physical Location". Replaced by: ``SystemZoneGetListResponse()``
    """

    _ELEMENTS = (
        E("zone_table", "zoneTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* zoneTable  *Tabular*
    zone_table = Field(type=list, required=True, mutable=False)


class SystemZoneCallingZonePhysicalLocationGetResponse(OCIResponse):
    """
    Response to ``SystemZoneCallingZonePhysicalLocationGetRequest()``.

    """

    _ELEMENTS = (
        E("physical_location", "physicalLocation", str),
    )

    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)


class SystemZoneGetListResponse(OCIResponse):
    """
    Response to the ``SystemZoneGetListRequest()``.

    """

    _ELEMENTS = (
        E("zone_name", "zoneName", str, is_array=True),
    )

    #: list(str): *Optional* zoneName  *Array*
    zone_name = Field(type=list, required=False, mutable=False)


class SystemZoneLocationBasedPhysicalLocationGetListResponse(OCIResponse):
    """
    Response to ``SystemZoneLocationBasedPhysicalLocationGetListRequest()``.

    """

    _ELEMENTS = (
        E("physical_location", "physicalLocation", str, is_array=True),
    )

    #: list(str): *Optional* physicalLocation  *Array*
    physical_location = Field(type=list, required=False, mutable=False)


class TutorialFlagGetResponse(OCIResponse):
    """
    Response to the ``TutorialFlagGetRequest()``.

    """

    _ELEMENTS = (
        E("enable_tutorial", "enableTutorial", bool, is_required=True),
    )

    #: bool: *Required* enableTutorial
    enable_tutorial = Field(type=bool, required=True, mutable=False)


class UserAccessDeviceFileGetListResponse(OCIResponse):
    """
    Response to ``UserAccessDeviceFileGetListRequest()``.

    Contains a table of user modifiable Device Management files.  The column headings are:
    "File Format", "Template URL".
    """

    _ELEMENTS = (
        E(
            "device_files_table", "deviceFilesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceFilesTable  *Tabular*
    device_files_table = Field(type=list, required=True, mutable=False)


class UserAccessDeviceFileGetResponse(OCIResponse):
    """
    Response to ``UserAccessDeviceFileGetRequest()``.

    """

    _ELEMENTS = (
        E("template_url", "templateUrl", str),
    )

    #: str: *Optional* templateUrl
    template_url = Field(type=str, required=False, mutable=False)


class UserAccessDeviceTagsGetResponse(OCIResponse):
    """
    Response to ``UserAccessDeviceTagsGetRequest()``.

    The response contains a table with columns: "Tag Name", and "Tag Value".
    """

    _ELEMENTS = (
        E(
            "device_tags_table", "deviceTagsTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceTagsTable  *Tabular*
    device_tags_table = Field(type=list, required=True, mutable=False)


class UserAdviceOfChargeGetResponse(OCIResponse):
    """
    Response to ``UserAdviceOfChargeGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("aoc_type", "aocType", str, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* aocType
    aoc_type = Field(type=str, required=True, mutable=False)


class UserAnnouncementFileGetAvailableListResponse(OCIResponse):
    """
    Response to ``UserAnnouncementFileGetAvailableListRequest()``.

    The response contains a table with columns: "Name", "Media Type", "File Size" and
    "Repository Type". The "Name" column contains the name of the announcement file.  The
    "Media Type" column contains the media type of the announcement file with the possible
    values: WMA - Windows Media Audio file WAV - A WAV file 3GP - A 3GP file MOV - A MOV
    file using a H.263 or H.264 codec.  The "File Size" is in Kilobytes.  The "Repository
    Type" column contains the type of repository for the announcement file such as "User"
    or "Group" The "File Size" column contains the file size in kB of the announcement
    file.
    """

    _ELEMENTS = (
        E(
            "announcement_table", "announcementTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* announcementTable  *Tabular*
    announcement_table = Field(type=list, required=True, mutable=False)


class UserAnnouncementFileGetListResponse(OCIResponse):
    """
    Response to ``UserAnnouncementFileGetListRequest()``.

    When requested, the response contains a table with columns: "Name", "Media Type",
    "File Size". The "Name" column contains the name of the announcement file.  The "Media
    Type" column contains the media type of the announcement file with the possible
    values: WMA - Windows Media Audio file WAV - A WAV file 3GP - A 3GP file MOV - A MOV
    file using a H.263 or H.264 codec.  The "File Size" column contains the file size in
    kB of the announcement file.

    The response also contains the current total file size (KB) for the user across all
    media types and the maximum total file size (MB) allowed for the user.
    """

    _ELEMENTS = (
        E("announcement_table", "announcementTable", list, is_complex=True, is_table=True),
        E("total_file_size", "totalFileSize", int, is_required=True),
        E("max_file_size", "maxFileSize", int, is_required=True),
    )

    #: list: *Optional* announcementTable  *Tabular*
    announcement_table = Field(type=list, required=False, mutable=False)
    #: int: *Required* totalFileSize
    total_file_size = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxFileSize
    max_file_size = Field(type=int, required=True, mutable=False)


class UserAnnouncementFileGetResponse(OCIResponse):
    """
    Response to ``UserAnnouncementFileGetRequest()``.

    The response contains the file size (KB), uploaded timestamp, description and usage
    for an announcement file in the user announcement repository.  The usage table has
    columns "Service Name", "Criteria Name" The "Service Name"" values correspond to
    string values of the UserService data types.  With the exception of the string "Voice
    Portal" which is returned when the announcement is being used by Voice Portal
    Personalized Name.  For Call Center and Route Point users the "Instance Name" column
    contains the instance id and when the announcement is being used by a DNIS, "Intance
    Name" column contans the instance id and the DNIS id.  For Auto Attendants with
    submenus and the announcement is used by a submenu the "Instance Name" column will
    contain the submenu name
    """

    _ELEMENTS = (
        E("description", "description", str, is_required=True),
        E("filesize", "filesize", int, is_required=True),
        E("last_uploaded", "lastUploaded", str, is_required=True),
        E(
            "usage_table", "usageTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Required* description
    description = Field(type=str, required=True, mutable=False)
    #: int: *Required* filesize
    filesize = Field(type=int, required=True, mutable=False)
    #: str: *Required* lastUploaded
    last_uploaded = Field(type=str, required=True, mutable=False)
    #: list: *Required* usageTable  *Tabular*
    usage_table = Field(type=list, required=True, mutable=False)


class UserAnonymousCallRejectionGetResponse(OCIResponse):
    """
    Response to ``UserAnonymousCallRejectionGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserAttendantConsoleGetAvailableUserListResponse(OCIResponse):
    """
    Response to ``UserAttendantConsoleGetAvailableUserListRequest()``.

    Returns a 10 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address", "IMP Id".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserAttendantConsoleGetResponse(OCIResponse):
    """
    Response to ``UserAttendantConsoleGetRequest()``.

    """

    _ELEMENTS = (
        E("launch_on_login", "launchOnLogin", bool, is_required=True),
        E(
            "allow_user_config_call_details", "allowUserConfigCallDetails", bool,
            is_required=True,
        ),
        E("allow_user_view_call_details", "allowUserViewCallDetails", bool, is_required=True),
        E("display_column", "displayColumn", str),
    )

    #: bool: *Required* launchOnLogin
    launch_on_login = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUserConfigCallDetails
    allow_user_config_call_details = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUserViewCallDetails
    allow_user_view_call_details = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* displayColumn
    display_column = Field(type=str, required=False, mutable=False)


class UserAttendantConsoleGetResponse14sp2(OCIResponse):
    """
    Response to ``UserAttendantConsoleGetRequest14sp2()``.

    Returns a 9 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address", "IMP Id".
    """

    _ELEMENTS = (
        E("launch_on_login", "launchOnLogin", bool, is_required=True),
        E(
            "allow_user_config_call_details", "allowUserConfigCallDetails", bool,
            is_required=True,
        ),
        E("allow_user_view_call_details", "allowUserViewCallDetails", bool, is_required=True),
        E("display_column", "displayColumn", str),
        E(
            "monitored_user_table", "monitoredUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: bool: *Required* launchOnLogin
    launch_on_login = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUserConfigCallDetails
    allow_user_config_call_details = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUserViewCallDetails
    allow_user_view_call_details = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* displayColumn
    display_column = Field(type=str, required=False, mutable=False)
    #: list: *Required* monitoredUserTable  *Tabular*
    monitored_user_table = Field(type=list, required=True, mutable=False)


class UserAuthenticationGetResponse(OCIResponse):
    """
    Response to the ``UserAuthenticationGetRequest()``.

    """

    _ELEMENTS = (
        E("user_name", "userName", str),
    )

    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)


class UserAutomaticCallbackGetResponse(OCIResponse):
    """
    Response to ``UserAutomaticCallbackGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserAutomaticHoldRetrieveGetResponse(OCIResponse):
    """
    Response to ``UserAutomaticHoldRetrieveGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("recall_timer_seconds", "recallTimerSeconds", int, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* recallTimerSeconds
    recall_timer_seconds = Field(type=int, required=True, mutable=False)


class UserBargeInExemptGetResponse(OCIResponse):
    """
    Response to ``UserBargeInExemptGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserBroadWorksAnywhereGetAvailablePortalListResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetAvailablePortalListRequest()``.

    Contains a table with column headings: "Portal Name", "Phone Number", "Extension",
    "Language".
    """

    _ELEMENTS = (
        E(
            "portal_table", "portalTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* portalTable  *Tabular*
    portal_table = Field(type=list, required=True, mutable=False)


class UserBroadWorksAnywhereGetPhoneNumberResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetPhoneNumberRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted", "Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a caombination of them separated by comma: -
    The value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no exension is available a blank space is provided
    instead.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("outbound_alternate_number", "outboundAlternateNumber", str),
        E("is_active", "isActive", bool, is_required=True),
        E("broadworks_call_control", "broadworksCallControl", bool, is_required=True),
        E("use_diversion_inhibitor", "useDiversionInhibitor", bool, is_required=True),
        E(
            "answer_confirmation_required", "answerConfirmationRequired", bool,
            is_required=True,
        ),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* outboundAlternateNumber
    outbound_alternate_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* broadworksCallControl
    broadworks_call_control = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDiversionInhibitor
    use_diversion_inhibitor = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* answerConfirmationRequired
    answer_confirmation_required = Field(type=bool, required=True, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserBroadWorksAnywhereGetResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetRequest()``.

    The phoneNumberTable contains columns: "Phone Number", "Description" Replaced by:
    ``UserBroadWorksAnywhereGetResponse16sp2()``
    """

    _ELEMENTS = (
        E(
            "alert_all_locations_for_click_to_dial_calls",
            "alertAllLocationsForClickToDialCalls", bool, is_required=True,
        ),
        E(
            "phone_number_table", "phoneNumberTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: bool: *Required* alertAllLocationsForClickToDialCalls
    alert_all_locations_for_click_to_dial_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: list: *Required* phoneNumberTable  *Tabular*
    phone_number_table = Field(type=list, required=True, mutable=False)


class UserBroadWorksAnywhereGetResponse16sp2(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetRequest16sp2()``.

    The phoneNumberTable contains columns: "Phone Number", "Description"
    """

    _ELEMENTS = (
        E(
            "alert_all_locations_for_click_to_dial_calls",
            "alertAllLocationsForClickToDialCalls", bool, is_required=True,
        ),
        E(
            "alert_all_locations_for_group_paging_calls",
            "alertAllLocationsForGroupPagingCalls", bool, is_required=True,
        ),
        E(
            "phone_number_table", "phoneNumberTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: bool: *Required* alertAllLocationsForClickToDialCalls
    alert_all_locations_for_click_to_dial_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* alertAllLocationsForGroupPagingCalls
    alert_all_locations_for_group_paging_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: list: *Required* phoneNumberTable  *Tabular*
    phone_number_table = Field(type=list, required=True, mutable=False)


class UserBroadWorksCommunicatorGetResponse(OCIResponse):
    """
    Response to ``UserBroadWorksCommunicatorGetRequest()``.

    """

    _ELEMENTS = (
        E("configuration_server_url", "configurationServerURL", str),
    )

    #: str: *Optional* configurationServerURL
    configuration_server_url = Field(type=str, required=False, mutable=False)


class UserBroadWorksMobilityGetResponse(OCIResponse):
    """
    Response to a ``UserBroadWorksMobilityGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("phones_to_ring", "phonesToRing", str, is_required=True),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("alert_click_to_dial_calls", "alertClickToDialCalls", bool, is_required=True),
        E("alert_group_paging_calls", "alertGroupPagingCalls", bool, is_required=True),
        E("enable_diversion_inhibitor", "enableDiversionInhibitor", bool, is_required=True),
        E("require_answer_confirmation", "requireAnswerConfirmation", bool, is_required=True),
        E("broadworks_call_control", "broadworksCallControl", bool, is_required=True),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
        E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* phonesToRing
    phones_to_ring = Field(type=str, required=True, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* alertClickToDialCalls
    alert_click_to_dial_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* alertGroupPagingCalls
    alert_group_paging_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDiversionInhibitor
    enable_diversion_inhibitor = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireAnswerConfirmation
    require_answer_confirmation = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* broadworksCallControl
    broadworks_call_control = Field(type=bool, required=True, mutable=False)
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: bool: *Required* denyCallOriginations
    deny_call_originations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallTerminations
    deny_call_terminations = Field(type=bool, required=True, mutable=False)


class UserBroadWorksReceptionistEnterpriseGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksReceptionistEnterpriseGetAvailableUserListRequest()``.

    Returns a 12 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserBroadWorksReceptionistEnterpriseGetResponse(OCIResponse):
    """
    Response to ``UserBroadWorksReceptionistEnterpriseGetRequest()``.

    Returns a 12 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".
    """

    _ELEMENTS = (
        E(
            "monitored_user_table", "monitoredUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* monitoredUserTable  *Tabular*
    monitored_user_table = Field(type=list, required=True, mutable=False)


class UserBroadWorksReceptionistOfficeGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksReceptionistOfficeGetAvailableUserListRequest()``.

    Returns a 12 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserBroadWorksReceptionistOfficeGetResponse(OCIResponse):
    """
    Response to ``UserBroadWorksReceptionistOfficeGetRequest()``.

    Returns a 11 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".
    """

    _ELEMENTS = (
        E(
            "monitored_user_table", "monitoredUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* monitoredUserTable  *Tabular*
    monitored_user_table = Field(type=list, required=True, mutable=False)


class UserBroadWorksReceptionistSmallBusinessGetAvailableUserListResponse(OCIResponse):
    """
    Response to the
    ``UserBroadWorksReceptionistSmallBusinessGetAvailableUserListRequest()``.

    Returns a 11 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserBroadWorksReceptionistSmallBusinessGetResponse(OCIResponse):
    """
    Response to ``UserBroadWorksReceptionistSmallBusinessGetRequest()``.

    Returns a 12 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".
    """

    _ELEMENTS = (
        E(
            "monitored_user_table", "monitoredUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* monitoredUserTable  *Tabular*
    monitored_user_table = Field(type=list, required=True, mutable=False)


class UserBusyLampFieldGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``BusyLampFieldGetAvailableUserListRequest()``.

    Returns a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "IMP Id".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserBusyLampFieldGetResponse(OCIResponse):
    """
    Replaced By ``UserBusyLampFieldGetResponse16sp2()`` Response to
    ``UserBusyLampFieldGetRequest()``.

    The table has column headings: "User Id", "Last Name", "First Name", "Hiragana Last
    Name", "Hiragana First Name".
    """

    _ELEMENTS = (
        E("list_uri", "listURI", str),
        E(
            "monitored_user_table", "monitoredUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Optional* listURI
    list_uri = Field(type=str, required=False, mutable=False)
    #: list: *Required* monitoredUserTable  *Tabular*
    monitored_user_table = Field(type=list, required=True, mutable=False)


class UserBusyLampFieldGetResponse16sp2(OCIResponse):
    """
    Response to ``UserBusyLampFieldGetRequest16sp2()``.

    The table has column headings: "User Id", "Last Name", "First Name", "Hiragana Last
    Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "IMP Id".
    """

    _ELEMENTS = (
        E("list_uri", "listURI", str),
        E(
            "enable_call_park_notification", "enableCallParkNotification", bool,
            is_required=True,
        ),
        E(
            "monitored_user_table", "monitoredUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Optional* listURI
    list_uri = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableCallParkNotification
    enable_call_park_notification = Field(type=bool, required=True, mutable=False)
    #: list: *Required* monitoredUserTable  *Tabular*
    monitored_user_table = Field(type=list, required=True, mutable=False)


class UserCallCenterAgentDetailsGetResponse(OCIResponse):
    """
    Response to the ``UserCallCenterAgentDetailsGetRequest()``.

    Contains the detail information for a Call Center Agent.
    """

    _ELEMENTS = (
        E(
            "is_call_center_basic_assigned", "isCallCenterBasicAssigned", bool,
            is_required=True,
        ),
        E(
            "is_call_center_standard_assigned", "isCallCenterStandardAssigned", bool,
            is_required=True,
        ),
        E(
            "is_call_center_premium_assigned", "isCallCenterPremiumAssigned", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* isCallCenterBasicAssigned
    is_call_center_basic_assigned = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isCallCenterStandardAssigned
    is_call_center_standard_assigned = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isCallCenterPremiumAssigned
    is_call_center_premium_assigned = Field(type=bool, required=True, mutable=False)


class UserCallCenterAgentSignOutResponse(OCIResponse):
    """
    Response to the ``UserCallCenterAgentSignOutRequest()``.

    It contains a list of call centers for which the agent is the last signed-in agent.
    Contains a table with column headings: "Service User Id" and "Call Center Name".
    """

    _ELEMENTS = (
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class UserCallCenterCallDispositionCodeGetAvailableListResponse(OCIResponse):
    """
    Response to the ``UserCallCenterCallDispositionCodeGetAvailableListRequest()``.

    This list may include Group/Enterprise level codes in addition to the Call Center
    level codes, depending on the call center disposition codes settings.  Only active
    codes are included in the list.  Contains a table with column headings: "Code",
    "Description" and "Level". Level column can be any of the values in the data type
    CallDispositionCodeLevel.
    """

    _ELEMENTS = (
        E(
            "disposition_codes_table", "dispositionCodesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* dispositionCodesTable  *Tabular*
    disposition_codes_table = Field(type=list, required=True, mutable=False)


class UserCallCenterEnhancedReportingReportTemplateParamInfoGetResponse(OCIResponse):
    """
    Response to ``UserCallCenterEnhancedReportingReportTemplateParamInfoGetRequest()``.

    """

    _ELEMENTS = (
        E("is_realtime_report", "isRealtimeReport", bool, is_required=True),
        E("require_agent_param", "requireAgentParam", bool, is_required=True),
        E("require_call_center_param", "requireCallCenterParam", bool, is_required=True),
        E(
            "require_call_center_dnis_param", "requireCallCenterDnisParam", bool,
            is_required=True,
        ),
        E(
            "require_sampling_period_param", "requireSamplingPeriodParam", bool,
            is_required=True,
        ),
        E("call_completion_threshold_param", "callCompletionThresholdParam", str),
        E("short_duration_threshold_param", "shortDurationThresholdParam", str),
        E("service_level_threshold_param", "serviceLevelThresholdParam", str),
        E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
        E(
            "service_level_objective_threshold_param",
            "serviceLevelObjectiveThresholdParam", str,
        ),
        E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
        E("service_level_threshold_param_number", "serviceLevelThresholdParamNumber", int),
        E("abandoned_call_threshold_param_number", "abandonedCallThresholdParamNumber", int),
    )

    #: bool: *Required* isRealtimeReport
    is_realtime_report = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireAgentParam
    require_agent_param = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireCallCenterParam
    require_call_center_param = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireCallCenterDnisParam
    require_call_center_dnis_param = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireSamplingPeriodParam
    require_sampling_period_param = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* callCompletionThresholdParam
    call_completion_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* shortDurationThresholdParam
    short_duration_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelThresholdParam
    service_level_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelInclusionsParam
    service_level_inclusions_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceLevelObjectiveThresholdParam
    service_level_objective_threshold_param = Field(type=str, required=False, mutable=False)
    #: str: *Optional* abandonedCallThresholdParam
    abandoned_call_threshold_param = Field(type=str, required=False, mutable=False)
    #: int: *Optional* serviceLevelThresholdParamNumber
    service_level_threshold_param_number = Field(type=int, required=False, mutable=False)
    #: int: *Optional* abandonedCallThresholdParamNumber
    abandoned_call_threshold_param_number = Field(type=int, required=False, mutable=False)


class UserCallCenterGetAgentSupervisorListResponse(OCIResponse):
    """
    Response to the ``UserCallCenterGetAgentSupervisorListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "IMP Id", "Location Code".
    """

    _ELEMENTS = (
        E(
            "supervisor_table", "supervisorTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* supervisorTable  *Tabular*
    supervisor_table = Field(type=list, required=True, mutable=False)


class UserCallCenterGetAvailableCallCenterListResponse(OCIResponse):
    """
    Response to the ``UserCallCenterGetAvailableCallCenterListRequest()``.

    Contains a table with column heading: "Service User Id".
    """

    _ELEMENTS = (
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class UserCallCenterGetListResponse(OCIResponse):
    """
    Response to the ``UserCallCentersLoginGetListRequest()``.

    Indicates whether the agent is current available (logged in) to each call center in
    the list.  Contains a table with column headings: "Service User Id", "Phone Number",
    "Extension", "Available", "Logoff Allowed". ***** NOTE: Prior to release 14sp1, the
    AppServer had a bug that caused it to emit column heading "Service User ID" with *****
    the ID capitalized.  Beginning in release 14sp1, the appserver is compliant with the
    schema and emits a ***** the column heading "Service User Id".

    Replaced By: ``UserCallCenterGetResponse()``
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserCallCenterGetResponse(OCIResponse):
    """
    Response to the ``UserCallCenterGetRequest()``.

    Contains the user's ACD state Indicates whether the agent is current available (logged
    in) to each call center in the list.  Contains a table with column headings: "Service
    User Id", "Phone Number", "Extension", "Available", "Logoff Allowed".
    """

    _ELEMENTS = (
        E("agent_acd_state", "agentACDState", str),
        E("user_table", "userTable", list, is_complex=True, is_table=True),
    )

    #: str: *Optional* agentACDState
    agent_acd_state = Field(type=str, required=False, mutable=False)
    #: list: *Optional* userTable  *Tabular*
    user_table = Field(type=list, required=False, mutable=False)


class UserCallCenterGetResponse16(OCIResponse):
    """
    Response to the ``UserCallCenterGetRequest16()``.

    Contains the user's call center settings.  Indicates whether the agent is current
    available (logged in) to each call center in the list.  Contains a table with column
    headings: "Service User Id", "Phone Number", "Extension", "Available", "Logoff
    Allowed", "Type", and "Priority".
    """

    _ELEMENTS = (
        E("agent_acd_state", "agentACDState", str),
        E("use_default_guard_timer", "useDefaultGuardTimer", bool, is_required=True),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "use_system_default_unavailable_settings",
            "useSystemDefaultUnavailableSettings", bool,
        ),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool,
        ),
        E("force_unavailable_on_personal_calls", "forceUnavailableOnPersonalCalls", bool),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int,
        ),
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Optional* agentACDState
    agent_acd_state = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useDefaultGuardTimer
    use_default_guard_timer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* useSystemDefaultUnavailableSettings
    use_system_default_unavailable_settings = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceUnavailableOnPersonalCalls
    force_unavailable_on_personal_calls = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=False, mutable=False,
    )
    #: int: *Optional* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=False, mutable=False,
    )
    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class UserCallCenterGetSupervisedAgentListResponse(OCIResponse):
    """
    Response to the ``UserCallCenterGetSupervisedAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "IMP Id", "Location Code".
    """

    _ELEMENTS = (
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)


class UserCallCenterGetSupervisorCallCenterListResponse(OCIResponse):
    """
    Response to the ``UserCallCenterGetSupervisorCallCenterListRequest()``.

    Contains a table with column headings: "Service User Id", "Phone Number", "Extension",
    "Type" and "Priority".
    """

    _ELEMENTS = (
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class UserCallCenterMonitoringGetResponse(OCIResponse):
    """
    Response to ``UserCallCenterMonitoringGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "play_tone_to_agent_for_silent_monitoring",
            "playToneToAgentForSilentMonitoring", bool, is_required=True,
        ),
    )

    #: bool: *Required* playToneToAgentForSilentMonitoring
    play_tone_to_agent_for_silent_monitoring = Field(type=bool, required=True, mutable=False)


class UserCallForwardingAlwaysGetResponse(OCIResponse):
    """
    Response to ``UserCallForwardingAlwaysGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E("is_ring_splash_active", "isRingSplashActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isRingSplashActive
    is_ring_splash_active = Field(type=bool, required=True, mutable=False)


class UserCallForwardingBusyGetResponse(OCIResponse):
    """
    Response to ``UserCallForwardingBusyGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)


class UserCallForwardingNoAnswerGetResponse13mp16(OCIResponse):
    """
    Response to ``UserCallForwardingNoAnswerGetRequest13mp16()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E("number_of_rings", "numberOfRings", int, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: int: *Required* numberOfRings
    number_of_rings = Field(type=int, required=True, mutable=False)


class UserCallForwardingNotReachableGetResponse(OCIResponse):
    """
    Response to ``UserCallForwardingNotReachableGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)


class UserCallForwardingSelectiveGetResponse(OCIResponse):
    """
    Response to the ``UserCallForwardingSelectiveGetRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From" and "Forward To".
    """

    _ELEMENTS = (
        E("default_forward_to_phone_number", "defaultForwardToPhoneNumber", str),
        E("play_ring_reminder", "playRingReminder", bool, is_required=True),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Optional* defaultForwardToPhoneNumber
    default_forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playRingReminder
    play_ring_reminder = Field(type=bool, required=True, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserCallForwardingSelectiveGetResponse16(OCIResponse):
    """
    Response to the ``UserCallForwardingSelectiveGetRequest16()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Forward To", "Blacklisted", "Holiday Schedule", "Calls To
    Type", "Calls To Number" and "Calls To Extension". The possible values for the "Calls
    To Type" column are the following or a combination of them separated by comma: -
    Primary - Alternate X (where x is a number between 1 and 10) - Mobility The possible
    values for the "Calls To Number" column are the following or a combination of them
    separated by comma: - The value of the phone number for the corresponding Calls To
    Type, when the number is available.  i.e.  Alternate 1 may have extension, but no
    number.  - When no number is available a blank space is provided instead.  The
    possible values for the "Calls To Extension" column are the following or a combination
    of them separated by comma: - The value of the extension for the corresponding Calls
    To Type, when the extension is available.  i.e.  Primary may have number, but no
    extension.  - For Mobility Calls To Type, this is always blank.  - When no extension
    is available a blank space is provided instead.
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("default_forward_to_phone_number", "defaultForwardToPhoneNumber", str),
        E("play_ring_reminder", "playRingReminder", bool, is_required=True),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* defaultForwardToPhoneNumber
    default_forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playRingReminder
    play_ring_reminder = Field(type=bool, required=True, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserCallMeNowGetResponse(OCIResponse):
    """
    Response to the ``UserCallMeNowGetRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Call To", "Reject Call" and "Holiday Schedule".
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("answer_confirmation", "answerConfirmation", str, is_required=True),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* answerConfirmation
    answer_confirmation = Field(type=str, required=True, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserCallNotifyGetResponse(OCIResponse):
    """
    Response to the ``UserCallNotifyGetRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted" ,"Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a combination of them separated by comma: - The
    value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no extension is available a blank space is
    provided instead.
    """

    _ELEMENTS = (
        E("call_notify_email_address", "callNotifyEmailAddress", str),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: str: *Optional* callNotifyEmailAddress
    call_notify_email_address = Field(type=str, required=False, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserCallParkGetResponse(OCIResponse):
    """
    Response to the ``UserCallParkGetRequest()``.

    Identifies which Call Park group the user belongs to and the list of users in the
    group.  Contains a table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name". The users are in the table in the order
    they will try to be parked on.
    """

    _ELEMENTS = (
        E("name", "name", str),
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: str: *Optional* name
    name = Field(type=str, required=False, mutable=False)
    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserCallPickupGetResponse(OCIResponse):
    """
    Response to the ``UserCallPickupGetRequest()``.

    Identifies which Call Pickup group the user belongs to and the list of users in the
    group.  Contains a table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Department", "Phone Number",
    "Extension", "Email Address".
    """

    _ELEMENTS = (
        E("name", "name", str),
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: str: *Optional* name
    name = Field(type=str, required=False, mutable=False)
    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserCallPoliciesGetResponse(OCIResponse):
    """
    Response to ``UserCallPoliciesGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "redirected_calls_colp_privacy", "redirectedCallsCOLPPrivacy", str,
            is_required=True,
        ),
    )

    #: str: *Required* redirectedCallsCOLPPrivacy
    redirected_calls_colp_privacy = Field(type=str, required=True, mutable=False)


class UserCallPoliciesGetResponse17(OCIResponse):
    """
    Response to ``UserCallPoliciesGetRequest17()``.

    Replaced by: ``UserCallPoliciesGetResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "redirected_calls_colp_privacy", "redirectedCallsCOLPPrivacy", str,
            is_required=True,
        ),
        E(
            "call_being_forwarded_response_call_type",
            "callBeingForwardedResponseCallType", str, is_required=True,
        ),
    )

    #: str: *Required* redirectedCallsCOLPPrivacy
    redirected_calls_colp_privacy = Field(type=str, required=True, mutable=False)
    #: str: *Required* callBeingForwardedResponseCallType
    call_being_forwarded_response_call_type = Field(type=str, required=True, mutable=False)


class UserCallPoliciesGetResponse19sp1(OCIResponse):
    """
    Response to ``UserCallPoliciesGetRequest19sp1()``.

    """

    _ELEMENTS = (
        E(
            "redirected_calls_colp_privacy", "redirectedCallsCOLPPrivacy", str,
            is_required=True,
        ),
        E(
            "call_being_forwarded_response_call_type",
            "callBeingForwardedResponseCallType", str, is_required=True,
        ),
        E(
            "calling_line_identity_for_redirected_calls",
            "callingLineIdentityForRedirectedCalls", str, is_required=True,
        ),
    )

    #: str: *Required* redirectedCallsCOLPPrivacy
    redirected_calls_colp_privacy = Field(type=str, required=True, mutable=False)
    #: str: *Required* callBeingForwardedResponseCallType
    call_being_forwarded_response_call_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdentityForRedirectedCalls
    calling_line_identity_for_redirected_calls = Field(type=str, required=True, mutable=False)


class UserCallProcessingGetPolicyResponse14(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest14()``.

    """

    _ELEMENTS = (
        E("use_user_setting", "useUserSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
    )

    #: bool: *Required* useUserSetting
    use_user_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)


class UserCallProcessingGetPolicyResponse14sp1(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest14sp1()``.

    Replaced By: ``UserCallProcessingGetPolicyResponse14sp7()``
    """

    _ELEMENTS = (
        E("use_user_setting", "useUserSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
    )

    #: bool: *Required* useUserSetting
    use_user_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )


class UserCallProcessingGetPolicyResponse14sp7(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest14sp7()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations)
    """

    _ELEMENTS = (
        E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
        E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
        E("use_user_call_limits_setting", "useUserCallLimitsSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
    )

    #: bool: *Required* useUserCLIDSetting
    use_user_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserMediaSetting
    use_user_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserCallLimitsSetting
    use_user_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)


class UserCallProcessingGetPolicyResponse16(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest16()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations)
    """

    _ELEMENTS = (
        E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
        E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
        E("use_user_call_limits_setting", "useUserCallLimitsSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
    )

    #: bool: *Required* useUserCLIDSetting
    use_user_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserMediaSetting
    use_user_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserCallLimitsSetting
    use_user_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)


class UserCallProcessingGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest16sp2()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useUserDCLIDSetting controls the Dialable Caller ID settings (enableDialableCallerID)
    Replaced by: ``UserCallProcessingGetPolicyResponse17sp4()``
    """

    _ELEMENTS = (
        E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
        E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
        E("use_user_call_limits_setting", "useUserCallLimitsSetting", bool, is_required=True),
        E("use_user_dclid_setting", "useUserDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useUserCLIDSetting
    use_user_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserMediaSetting
    use_user_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserCallLimitsSetting
    use_user_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserDCLIDSetting
    use_user_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class UserCallProcessingGetPolicyResponse17(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest17()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations)
    """

    _ELEMENTS = (
        E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
        E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
        E("use_user_call_limits_setting", "useUserCallLimitsSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* useUserCLIDSetting
    use_user_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserMediaSetting
    use_user_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserCallLimitsSetting
    use_user_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)


class UserCallProcessingGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest17sp3()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useUserDCLIDSetting controls the Dialable Caller ID settings (enableDialableCallerID)
    The following elements are only used in AS data mode: useUserDCLIDSetting
    enableDialableCallerID Replaced by: UserCallProcessingGetPolicyResponse17Sp4
    """

    _ELEMENTS = (
        E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
        E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
        E("use_user_call_limits_setting", "useUserCallLimitsSetting", bool, is_required=True),
        E("use_user_dclid_setting", "useUserDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
    )

    #: bool: *Required* useUserCLIDSetting
    use_user_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserMediaSetting
    use_user_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserCallLimitsSetting
    use_user_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserDCLIDSetting
    use_user_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)


class UserCallProcessingGetPolicyResponse17sp4(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest17sp4()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName,
    allowConfigurableCLIDForRedirectingIdentity) The useUserMediaSetting attribute
    controls the Media settings (medisPolicySelection, supportedMediaSetName) The
    useUserCallLimitsSetting attribute controls the Call Limits setting
    (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useUserDCLIDSetting controls the Dialable Caller ID settings (enableDialableCallerID)
    The following elements are only used in AS data mode: useUserDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity Replaced by:
    ``UserCallProcessingGetPolicyResponse18()``
    """

    _ELEMENTS = (
        E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
        E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
        E("use_user_call_limits_setting", "useUserCallLimitsSetting", bool, is_required=True),
        E("use_user_dclid_setting", "useUserDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
    )

    #: bool: *Required* useUserCLIDSetting
    use_user_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserMediaSetting
    use_user_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserCallLimitsSetting
    use_user_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserDCLIDSetting
    use_user_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )


class UserCallProcessingGetPolicyResponse18(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest18()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName,
    allowConfigurableCLIDForRedirectingIdentity, allowDepartmentCLIDNameOverride) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    following elements are only used in AS data mode: useUserDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride Replaced by:
    ``UserCallProcessingGetPolicyResponse19sp1()``
    """

    _ELEMENTS = (
        E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
        E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
        E("use_user_call_limits_setting", "useUserCallLimitsSetting", bool, is_required=True),
        E("use_user_dclid_setting", "useUserDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* useUserCLIDSetting
    use_user_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserMediaSetting
    use_user_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserCallLimitsSetting
    use_user_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserDCLIDSetting
    use_user_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)


class UserCallProcessingGetPolicyResponse19sp1(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest19sp1()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName,
    allowConfigurableCLIDForRedirectingIdentity, allowDepartmentCLIDNameOverride) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    following elements are only used in AS data mode: useUserDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride
    """

    _ELEMENTS = (
        E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
        E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
        E("use_user_call_limits_setting", "useUserCallLimitsSetting", bool, is_required=True),
        E("use_user_dclid_setting", "useUserDCLIDSetting", bool, is_required=True),
        E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool, is_required=True),
        E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
        E(
            "use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool,
            is_required=True,
        ),
        E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int, is_required=True),
        E(
            "use_max_call_time_for_answered_calls", "useMaxCallTimeForAnsweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_answered_calls_minutes",
            "maxCallTimeForAnsweredCallsMinutes", int, is_required=True,
        ),
        E(
            "use_max_call_time_for_unanswered_calls", "useMaxCallTimeForUnansweredCalls",
            bool, is_required=True,
        ),
        E(
            "max_call_time_for_unanswered_calls_minutes",
            "maxCallTimeForUnansweredCallsMinutes", int, is_required=True,
        ),
        E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
        E("supported_media_set_name", "supportedMediaSetName", str),
        E(
            "use_max_concurrent_redirected_calls", "useMaxConcurrentRedirectedCalls",
            bool, is_required=True,
        ),
        E(
            "max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int,
            is_required=True,
        ),
        E(
            "use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool,
            is_required=True,
        ),
        E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int, is_required=True),
        E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
        E(
            "use_max_concurrent_find_me_follow_me_invocations",
            "useMaxConcurrentFindMeFollowMeInvocations", bool, is_required=True,
        ),
        E(
            "max_concurrent_find_me_follow_me_invocations",
            "maxConcurrentFindMeFollowMeInvocations", int, is_required=True,
        ),
        E("clid_policy", "clidPolicy", str, is_required=True),
        E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
        E(
            "allow_alternate_numbers_for_redirecting_identity",
            "allowAlternateNumbersForRedirectingIdentity", bool, is_required=True,
        ),
        E("use_group_name", "useGroupName", bool, is_required=True),
        E(
            "block_calling_name_for_external_calls", "blockCallingNameForExternalCalls",
            bool, is_required=True,
        ),
        E("enable_dialable_caller_id", "enableDialableCallerID", bool, is_required=True),
        E(
            "allow_configurable_clid_for_redirecting_identity",
            "allowConfigurableCLIDForRedirectingIdentity", bool, is_required=True,
        ),
        E(
            "allow_department_clid_name_override", "allowDepartmentCLIDNameOverride",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* useUserCLIDSetting
    use_user_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserMediaSetting
    use_user_media_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserCallLimitsSetting
    use_user_call_limits_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useUserDCLIDSetting
    use_user_dclid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousCalls
    use_max_simultaneous_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousCalls
    max_simultaneous_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxSimultaneousVideoCalls
    use_max_simultaneous_video_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxSimultaneousVideoCalls
    max_simultaneous_video_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForAnsweredCalls
    use_max_call_time_for_answered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForAnsweredCallsMinutes
    max_call_time_for_answered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxCallTimeForUnansweredCalls
    use_max_call_time_for_unanswered_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCallTimeForUnansweredCallsMinutes
    max_call_time_for_unanswered_calls_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Required* mediaPolicySelection
    media_policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* supportedMediaSetName
    supported_media_set_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useMaxConcurrentRedirectedCalls
    use_max_concurrent_redirected_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxConcurrentRedirectedCalls
    max_concurrent_redirected_calls = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxFindMeFollowMeDepth
    use_max_find_me_follow_me_depth = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxFindMeFollowMeDepth
    max_find_me_follow_me_depth = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxRedirectionDepth
    max_redirection_depth = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useMaxConcurrentFindMeFollowMeInvocations
    use_max_concurrent_find_me_follow_me_invocations = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxConcurrentFindMeFollowMeInvocations
    max_concurrent_find_me_follow_me_invocations = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* clidPolicy
    clid_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* emergencyClidPolicy
    emergency_clid_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* allowAlternateNumbersForRedirectingIdentity
    allow_alternate_numbers_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useGroupName
    use_group_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* blockCallingNameForExternalCalls
    block_calling_name_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDialableCallerID
    enable_dialable_caller_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowConfigurableCLIDForRedirectingIdentity
    allow_configurable_clid_for_redirecting_identity = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* allowDepartmentCLIDNameOverride
    allow_department_clid_name_override = Field(type=bool, required=True, mutable=False)


class UserCallRecordingGetResponse(OCIResponse):
    """
    Response to the ``UserCallRecordingGetRequest()``.

    The response contains the user's Call Recording option information.
    """

    _ELEMENTS = (
        E("recording_option", "recordingOption", str, is_required=True),
    )

    #: str: *Required* recordingOption
    recording_option = Field(type=str, required=True, mutable=False)


class UserCallRecordingGetResponse20(OCIResponse):
    """
    Response to the ``UserCallRecordingGetRequest20()``.

    The response contains the user's Call Recording option information.  The following
    parameters are not returned for service instance: - pauseResumeNotification -
    enableCallRecordingAnnouncement - enableRecordCallRepeatWarningTone -
    recordCallRepeatWarningToneTimerSeconds The enableVoiceMailRecording parameter is only
    returned if the Voice Messaging User service is assigned to the user.  This applies to
    both users and service instances.
    """

    _ELEMENTS = (
        E("recording_option", "recordingOption", str, is_required=True),
        E("pause_resume_notification", "pauseResumeNotification", str),
        E("enable_call_recording_announcement", "enableCallRecordingAnnouncement", bool),
        E(
            "enable_record_call_repeat_warning_tone", "enableRecordCallRepeatWarningTone",
            bool,
        ),
        E(
            "record_call_repeat_warning_tone_timer_seconds",
            "recordCallRepeatWarningToneTimerSeconds", int,
        ),
        E("enable_voice_mail_recording", "enableVoiceMailRecording", bool),
    )

    #: str: *Required* recordingOption
    recording_option = Field(type=str, required=True, mutable=False)
    #: str: *Optional* pauseResumeNotification
    pause_resume_notification = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* enableCallRecordingAnnouncement
    enable_call_recording_announcement = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* enableRecordCallRepeatWarningTone
    enable_record_call_repeat_warning_tone = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* recordCallRepeatWarningToneTimerSeconds
    record_call_repeat_warning_tone_timer_seconds = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* enableVoiceMailRecording
    enable_voice_mail_recording = Field(type=bool, required=False, mutable=False)


class UserCallTransferGetResponse(OCIResponse):
    """
    Response to ``UserCallTransferGetRequest()``.

    """

    _ELEMENTS = (
        E("is_recall_active", "isRecallActive", bool, is_required=True),
        E("recall_number_of_rings", "recallNumberOfRings", int, is_required=True),
        E(
            "use_diversion_inhibitor_for_blind_transfer",
            "useDiversionInhibitorForBlindTransfer", bool, is_required=True,
        ),
        E(
            "use_diversion_inhibitor_for_consultative_calls",
            "useDiversionInhibitorForConsultativeCalls", bool, is_required=True,
        ),
    )

    #: bool: *Required* isRecallActive
    is_recall_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* recallNumberOfRings
    recall_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useDiversionInhibitorForBlindTransfer
    use_diversion_inhibitor_for_blind_transfer = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useDiversionInhibitorForConsultativeCalls
    use_diversion_inhibitor_for_consultative_calls = Field(
        type=bool, required=True, mutable=False,
    )


class UserCallTransferGetResponse14sp4(OCIResponse):
    """
    Response to ``UserCallTransferGetRequest14sp4()``.

    """

    _ELEMENTS = (
        E("is_recall_active", "isRecallActive", bool, is_required=True),
        E("recall_number_of_rings", "recallNumberOfRings", int, is_required=True),
        E(
            "use_diversion_inhibitor_for_blind_transfer",
            "useDiversionInhibitorForBlindTransfer", bool, is_required=True,
        ),
        E(
            "use_diversion_inhibitor_for_consultative_calls",
            "useDiversionInhibitorForConsultativeCalls", bool, is_required=True,
        ),
        E("enable_busy_camp_on", "enableBusyCampOn", bool, is_required=True),
        E("busy_camp_on_seconds", "busyCampOnSeconds", int, is_required=True),
    )

    #: bool: *Required* isRecallActive
    is_recall_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* recallNumberOfRings
    recall_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* useDiversionInhibitorForBlindTransfer
    use_diversion_inhibitor_for_blind_transfer = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useDiversionInhibitorForConsultativeCalls
    use_diversion_inhibitor_for_consultative_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableBusyCampOn
    enable_busy_camp_on = Field(type=bool, required=True, mutable=False)
    #: int: *Required* busyCampOnSeconds
    busy_camp_on_seconds = Field(type=int, required=True, mutable=False)


class UserCallWaitingGetResponse(OCIResponse):
    """
    Response to ``UserCallWaitingGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserCallWaitingGetResponse17sp4(OCIResponse):
    """
    Response to ``UserCallWaitingGetRequest17sp4()``.

    The following elements are only used in AS data mode: disableCallingLineIdDelivery
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "disable_calling_line_id_delivery", "disableCallingLineIdDelivery", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* disableCallingLineIdDelivery
    disable_calling_line_id_delivery = Field(type=bool, required=True, mutable=False)


class UserCallingLineIDBlockingOverrideGetResponse(OCIResponse):
    """
    Response to ``UserCallingLineIDBlockingOverrideGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserCallingLineIDDeliveryBlockingGetResponse(OCIResponse):
    """
    Response to ``UserCallingLineIDDeliveryBlockingGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserCallingNameDeliveryGetResponse(OCIResponse):
    """
    Response to ``UserCallingNameDeliveryGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active_for_external_calls", "isActiveForExternalCalls", bool, is_required=True),
        E("is_active_for_internal_calls", "isActiveForInternalCalls", bool, is_required=True),
    )

    #: bool: *Required* isActiveForExternalCalls
    is_active_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveForInternalCalls
    is_active_for_internal_calls = Field(type=bool, required=True, mutable=False)


class UserCallingNameRetrievalGetResponse(OCIResponse):
    """
    Response to ``UserCallingNameRetrievalGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserCallingNumberDeliveryGetResponse(OCIResponse):
    """
    Response to ``UserCallingNumberDeliveryGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active_for_external_calls", "isActiveForExternalCalls", bool, is_required=True),
        E("is_active_for_internal_calls", "isActiveForInternalCalls", bool, is_required=True),
    )

    #: bool: *Required* isActiveForExternalCalls
    is_active_for_external_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveForInternalCalls
    is_active_for_internal_calls = Field(type=bool, required=True, mutable=False)


class UserCallingPartyCategoryGetResponse(OCIResponse):
    """
    Response to ``UserCallingPartyCategoryGetRequest()``.

    """

    _ELEMENTS = (
        E("category", "category", str, is_required=True),
    )

    #: str: *Required* category
    category = Field(type=str, required=True, mutable=False)


class UserCallingPartyCategoryGetResponse16(OCIResponse):
    """
    Response to ``UserCallingPartyCategoryGetRequest16()``.

    """

    _ELEMENTS = (
        E("category", "category", str, is_required=True),
    )

    #: str: *Required* category
    category = Field(type=str, required=True, mutable=False)


class UserChargeNumberGetResponse(OCIResponse):
    """
    Response to ``UserChargeNumberGetRequest()``.

    """

    _ELEMENTS = (
        E("phone_number", "phoneNumber", str),
    )

    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)


class UserChargeNumberGetResponse14sp9(OCIResponse):
    """
    Response to ``UserChargeNumberGetRequest14sp9()``.

    """

    _ELEMENTS = (
        E("phone_number", "phoneNumber", str),
        E(
            "use_charge_number_for_enhanced_translations",
            "useChargeNumberForEnhancedTranslations", bool, is_required=True,
        ),
        E(
            "send_charge_number_to_network", "sendChargeNumberToNetwork", bool,
            is_required=True,
        ),
    )

    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useChargeNumberForEnhancedTranslations
    use_charge_number_for_enhanced_translations = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* sendChargeNumberToNetwork
    send_charge_number_to_network = Field(type=bool, required=True, mutable=False)


class UserClassmarkGetResponse(OCIResponse):
    """
    Response to ``UserClassmarkGetRequest()``.

    Contains the Class Mark data
    """

    _ELEMENTS = (
        E("classmark", "classmark", str),
    )

    #: str: *Optional* classmark
    classmark = Field(type=str, required=False, mutable=False)


class UserCollaborateInstantRoomAddResponse(OCIResponse):
    """
    Response to ``UserCollaborateInstantRoomAddRequest()``.

    """

    _ELEMENTS = (
        E("room_id", "roomId", str, is_required=True),
    )

    #: str: *Required* roomId
    room_id = Field(type=str, required=True, mutable=False)


class UserCollaborateInstantRoomGetResponse(OCIResponse):
    """
    Response to ``UserCollaborateInstantRoomGetRequest()``.

    """

    _ELEMENTS = (
        E("room_name", "roomName", str),
        E("instant_room_start_time", "instantRoomStartTime", str, is_required=True),
        E("instant_room_end_time", "instantRoomEndTime", str, is_required=True),
    )

    #: str: *Optional* roomName
    room_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* instantRoomStartTime
    instant_room_start_time = Field(type=str, required=True, mutable=False)
    #: str: *Required* instantRoomEndTime
    instant_room_end_time = Field(type=str, required=True, mutable=False)


class UserCollaborateInstantRoomParametersGetResponse(OCIResponse):
    """
    Response to ``UserCollaborateInstantRoomParametersGetRequest()``.

    """

    _ELEMENTS = (
        E("attendee_notification", "attendeeNotification", str, is_required=True),
        E(
            "end_collaborate_room_session_on_owner_exit",
            "endCollaborateRoomSessionOnOwnerExit", bool, is_required=True,
        ),
        E("owner_required", "ownerRequired", bool, is_required=True),
    )

    #: str: *Required* attendeeNotification
    attendee_notification = Field(type=str, required=True, mutable=False)
    #: bool: *Required* endCollaborateRoomSessionOnOwnerExit
    end_collaborate_room_session_on_owner_exit = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* ownerRequired
    owner_required = Field(type=bool, required=True, mutable=False)


class UserCollaborateMyRoomGetResponse(OCIResponse):
    """
    Response to ``UserCollaborateMyRoomGetRequest()``.

    """

    _ELEMENTS = (
        E("room_id", "roomId", str, is_required=True),
        E("room_name", "roomName", str, is_required=True),
        E("attendee_notification", "attendeeNotification", str, is_required=True),
        E(
            "end_collaborate_room_session_on_owner_exit",
            "endCollaborateRoomSessionOnOwnerExit", bool, is_required=True,
        ),
        E("owner_required", "ownerRequired", bool, is_required=True),
    )

    #: str: *Required* roomId
    room_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* roomName
    room_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* attendeeNotification
    attendee_notification = Field(type=str, required=True, mutable=False)
    #: bool: *Required* endCollaborateRoomSessionOnOwnerExit
    end_collaborate_room_session_on_owner_exit = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* ownerRequired
    owner_required = Field(type=bool, required=True, mutable=False)


class UserCollaborateProjectRoomAddResponse(OCIResponse):
    """
    Response to ``UserCollaborateProjectRoomAddRequest()``.

    """

    _ELEMENTS = (
        E("room_id", "roomId", str, is_required=True),
    )

    #: str: *Required* roomId
    room_id = Field(type=str, required=True, mutable=False)


class UserCollaborateRoomIDRegenerateResponse(OCIResponse):
    """
    Response to ``UserCollaborateRoomIDRegenerateRequest()``.

    """

    _ELEMENTS = (
        E("room_id", "roomId", str, is_required=True),
    )

    #: str: *Required* roomId
    room_id = Field(type=str, required=True, mutable=False)


class UserCollaborateRoomListGetResponse(OCIResponse):
    """
    Response to ``UserCollaborateRoomListGetRequest()``.

    Contains a table with column headings : "Room Type", "Name", "Room Id", in a row for
    each collaborate room instance.  Possible values for Room Type column are MyRoom,
    Project Room and Instant Room.
    """

    _ELEMENTS = (
        E(
            "room_instance_table", "roomInstanceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* roomInstanceTable  *Tabular*
    room_instance_table = Field(type=list, required=True, mutable=False)


class UserCommPilotCallManagerGetResponse(OCIResponse):
    """
    Response to ``UserCommPilotCallManagerGetRequest()``.

    """

    _ELEMENTS = (
        E("launch_on_login", "launchOnLogin", bool, is_required=True),
    )

    #: bool: *Required* launchOnLogin
    launch_on_login = Field(type=bool, required=True, mutable=False)


class UserCommunicationBarringGetResponse(OCIResponse):
    """
    Response to ``UserCommunicationBarringGetRequest()``.

    This command only applies to users in an Enterprise.
    """

    _ELEMENTS = (
        E("use_group_setting", "useGroupSetting", bool, is_required=True),
        E("profile_name", "profileName", str),
    )

    #: bool: *Required* useGroupSetting
    use_group_setting = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* profileName
    profile_name = Field(type=str, required=False, mutable=False)


class UserCommunicationBarringUserControlGetResponse(OCIResponse):
    """
    Response to the ``UserCommunicationBarringUserControlGetRequest()``.

    Identifies the profiles available to the user and which one if any is active as well
    as the lockout status.  Contains a table with column headings: "Name", "Code",
    "Activated" and "Primary".
    """

    _ELEMENTS = (
        E("lockout_status", "lockoutStatus", bool, is_required=True),
        E(
            "profile_table", "profileTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* lockoutStatus
    lockout_status = Field(type=bool, required=True, mutable=False)
    #: list: *Required* profileTable  *Tabular*
    profile_table = Field(type=list, required=True, mutable=False)


class UserConnectedLineIdentificationRestrictionGetResponse(OCIResponse):
    """
    Response to ``UserConnectedLineIdentificationRestrictionGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserCustomRingbackUserGetCriteriaListResponse(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaListRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted", "Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a combination of them separated by comma: - The
    value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no extension is available a blank space is
    provided instead.
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserDevicePoliciesGetResponse(OCIResponse):
    """
    Response to ``UserDevicePoliciesGetRequest()``.

    enableDeviceFeatureSynchronization is ignored by the application server in Multiple
    User Shared mode.
    """

    _ELEMENTS = (
        E("line_mode", "lineMode", str, is_required=True),
        E(
            "enable_device_feature_synchronization", "enableDeviceFeatureSynchronization",
            bool, is_required=True,
        ),
    )

    #: str: *Required* lineMode
    line_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableDeviceFeatureSynchronization
    enable_device_feature_synchronization = Field(type=bool, required=True, mutable=False)


class UserDevicePoliciesGetResponse19sp1(OCIResponse):
    """
    Response to ``UserDevicePoliciesGetRequest19sp1()``.

    enableDeviceFeatureSynchronization is ignored by the application server in Multiple
    User Shared mode.
    """

    _ELEMENTS = (
        E("line_mode", "lineMode", str, is_required=True),
        E(
            "enable_device_feature_synchronization", "enableDeviceFeatureSynchronization",
            bool, is_required=True,
        ),
        E("enable_dnd", "enableDnd", bool, is_required=True),
        E(
            "enable_call_forwarding_always", "enableCallForwardingAlways", bool,
            is_required=True,
        ),
        E("enable_call_forwarding_busy", "enableCallForwardingBusy", bool, is_required=True),
        E(
            "enable_call_forwarding_no_answer", "enableCallForwardingNoAnswer", bool,
            is_required=True,
        ),
        E("enable_acd", "enableAcd", bool, is_required=True),
        E("enable_executive", "enableExecutive", bool, is_required=True),
        E("enable_executive_assistant", "enableExecutiveAssistant", bool, is_required=True),
    )

    #: str: *Required* lineMode
    line_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableDeviceFeatureSynchronization
    enable_device_feature_synchronization = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDnd
    enable_dnd = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallForwardingAlways
    enable_call_forwarding_always = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallForwardingBusy
    enable_call_forwarding_busy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallForwardingNoAnswer
    enable_call_forwarding_no_answer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAcd
    enable_acd = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableExecutive
    enable_executive = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableExecutiveAssistant
    enable_executive_assistant = Field(type=bool, required=True, mutable=False)


class UserDevicePoliciesGetResponse20(OCIResponse):
    """
    Response to ``UserDevicePoliciesGetRequest201()``.

    enableDeviceFeatureSynchronization is ignored by the application server in Multiple
    User Shared mode.
    """

    _ELEMENTS = (
        E("line_mode", "lineMode", str, is_required=True),
        E(
            "enable_device_feature_synchronization", "enableDeviceFeatureSynchronization",
            bool, is_required=True,
        ),
        E("enable_dnd", "enableDnd", bool, is_required=True),
        E(
            "enable_call_forwarding_always", "enableCallForwardingAlways", bool,
            is_required=True,
        ),
        E("enable_call_forwarding_busy", "enableCallForwardingBusy", bool, is_required=True),
        E(
            "enable_call_forwarding_no_answer", "enableCallForwardingNoAnswer", bool,
            is_required=True,
        ),
        E("enable_acd", "enableAcd", bool, is_required=True),
        E("enable_executive", "enableExecutive", bool, is_required=True),
        E("enable_executive_assistant", "enableExecutiveAssistant", bool, is_required=True),
        E(
            "enable_security_classification", "enableSecurityClassification", bool,
            is_required=True,
        ),
        E("enable_call_recording", "enableCallRecording", bool, is_required=True),
    )

    #: str: *Required* lineMode
    line_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableDeviceFeatureSynchronization
    enable_device_feature_synchronization = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDnd
    enable_dnd = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallForwardingAlways
    enable_call_forwarding_always = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallForwardingBusy
    enable_call_forwarding_busy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallForwardingNoAnswer
    enable_call_forwarding_no_answer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAcd
    enable_acd = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableExecutive
    enable_executive = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableExecutiveAssistant
    enable_executive_assistant = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableSecurityClassification
    enable_security_classification = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallRecording
    enable_call_recording = Field(type=bool, required=True, mutable=False)


class UserDevicePoliciesGetResponse21(OCIResponse):
    """
    Response to ``UserDevicePoliciesGetRequest21()``.

    enableDeviceFeatureSynchronization is ignored by the application server in Multiple
    User Shared mode.
    """

    _ELEMENTS = (
        E("line_mode", "lineMode", str, is_required=True),
        E(
            "enable_device_feature_synchronization", "enableDeviceFeatureSynchronization",
            bool, is_required=True,
        ),
        E("enable_dnd", "enableDnd", bool, is_required=True),
        E(
            "enable_call_forwarding_always", "enableCallForwardingAlways", bool,
            is_required=True,
        ),
        E("enable_call_forwarding_busy", "enableCallForwardingBusy", bool, is_required=True),
        E(
            "enable_call_forwarding_no_answer", "enableCallForwardingNoAnswer", bool,
            is_required=True,
        ),
        E("enable_acd", "enableAcd", bool, is_required=True),
        E("enable_executive", "enableExecutive", bool, is_required=True),
        E("enable_executive_assistant", "enableExecutiveAssistant", bool, is_required=True),
        E(
            "enable_security_classification", "enableSecurityClassification", bool,
            is_required=True,
        ),
        E("enable_call_recording", "enableCallRecording", bool, is_required=True),
        E("enable_call_decline", "enableCallDecline", bool, is_required=True),
    )

    #: str: *Required* lineMode
    line_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableDeviceFeatureSynchronization
    enable_device_feature_synchronization = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDnd
    enable_dnd = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallForwardingAlways
    enable_call_forwarding_always = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallForwardingBusy
    enable_call_forwarding_busy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallForwardingNoAnswer
    enable_call_forwarding_no_answer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAcd
    enable_acd = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableExecutive
    enable_executive = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableExecutiveAssistant
    enable_executive_assistant = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableSecurityClassification
    enable_security_classification = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallRecording
    enable_call_recording = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallDecline
    enable_call_decline = Field(type=bool, required=True, mutable=False)


class UserDirectedCallPickupWithBargeInGetResponse(OCIResponse):
    """
    Response to ``UserDirectedCallPickupWithBargeInGetRequest()``.

    """

    _ELEMENTS = (
        E("enable_barge_in_warning_tone", "enableBargeInWarningTone", bool, is_required=True),
    )

    #: bool: *Required* enableBargeInWarningTone
    enable_barge_in_warning_tone = Field(type=bool, required=True, mutable=False)


class UserDirectedCallPickupWithBargeInGetResponse14sp7(OCIResponse):
    """
    Response to ``UserDirectedCallPickupWithBargeInGetRequest14sp7()``.

    """

    _ELEMENTS = (
        E("enable_barge_in_warning_tone", "enableBargeInWarningTone", bool, is_required=True),
        E(
            "enable_automatic_target_selection", "enableAutomaticTargetSelection", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* enableBargeInWarningTone
    enable_barge_in_warning_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAutomaticTargetSelection
    enable_automatic_target_selection = Field(type=bool, required=True, mutable=False)


class UserDnGetActivationListResponse(OCIResponse):
    """
    Response to ``UserDnGetActivationListRequest()``.

    The response contains a table with columns: "Phone Number", and "Activated". The
    "Phone Number" column contains a single DN. The "Activated" column indicates if the
    phone number is activated or not.
    """

    _ELEMENTS = (
        E("dn_table", "dnTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* dnTable  *Tabular*
    dn_table = Field(type=list, required=True, mutable=False)


class UserDoNotDisturbGetResponse(OCIResponse):
    """
    Response to ``UserDoNotDisturbGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("ring_splash", "ringSplash", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* ringSplash
    ring_splash = Field(type=bool, required=True, mutable=False)


class UserDualModeVCCGetResponse(OCIResponse):
    """
    Response to ``UserDualModeVCCGetRequest()``
    """

    _ELEMENTS = (
        E("subscriber_user_name", "subscriberUserName", str),
    )

    #: str: *Optional* subscriberUserName
    subscriber_user_name = Field(type=str, required=False, mutable=False)


class UserEnhancedCallLogsGetListResponse17sp4(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest17sp4()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``UserEnhancedCallLogsGetListRequest17sp4()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of MixedCallLogsEntry will be returned
    if the call logs are stored on CDS A list of ExtendedMixedCallLogsEntry will be
    returned if the call logs are stored on DBS The logs are sorted by date/time of the
    call.  Replaced by UserEnhancedCallLogsGetListResponse17sp4V2. Originally deprecated
    in release 20.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E("legacy_entry", "legacyEntry", str, is_complex=True),  # unknown
        E("extended_entry", "extendedEntry", str, is_complex=True),  # unknown
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: str: *Optional* legacyEntry
    legacy_entry = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extendedEntry
    extended_entry = Field(type=str, required=False, mutable=False)


class UserEnhancedCallLogsGetListResponse20(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest20()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``UserEnhancedCallLogsGetListRequest20()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of MixedCallLogsEntry will be returned
    if the call logs are stored on CDS A list of ExtendedMixedCallLogsEntry20 will be
    returned if the call logs are stored on DBS The logs are sorted by date/time of the
    call.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E("legacy_entry", "legacyEntry", str, is_complex=True),  # unknown
        E("extended_entry", "extendedEntry", str, is_complex=True),  # unknown
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: str: *Optional* legacyEntry
    legacy_entry = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extendedEntry
    extended_entry = Field(type=str, required=False, mutable=False)


class UserEnhancedCallLogsGetListResponse21(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest21()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``UserEnhancedCallLogsGetListRequest21()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of MixedCallLogsEntry will be returned
    if the call logs are stored on CDS A list of ExtendedMixedCallLogsEntry21 will be
    returned if the call logs are stored on DBS The logs are sorted by date/time of the
    call.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E("legacy_entry", "legacyEntry", str, is_complex=True),  # unknown
        E("extended_entry", "extendedEntry", str, is_complex=True),  # unknown
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: str: *Optional* legacyEntry
    legacy_entry = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extendedEntry
    extended_entry = Field(type=str, required=False, mutable=False)


class UserEnterpriseCommonPhoneListGetPagedSortedListResponse(OCIResponse):
    """
    Response to the ``UserEnterpriseCommonPhoneListGetPagedSortedListRequest()``.

    The response contains the enterprise's common phone list.  The response contains a
    table with column headings: "Name" and "Phone Number".
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "enterprise_common_phone_list_table", "enterpriseCommonPhoneListTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list: *Required* enterpriseCommonPhoneListTable  *Tabular*
    enterprise_common_phone_list_table = Field(type=list, required=True, mutable=False)


class UserExecutiveAssistantGetResponse(OCIResponse):
    """
    Response to the ``UserExecutiveAssistantGetRequest()``.

    Contains the executive assistant setting and a table of executives this assistant has
    been assigned to.  The criteria table's column headings are: "User Id", "Last Name",
    "First Name", ", "Hiragana Last Name", "Hiragana First Name", "Phone Number",
    "Extension", "Department", "Email Address", "Assistant Opt-in Status" and "Executive
    Allow Opt-in". The possible values for "Assistant Opt-in Status" and "Executive Allow
    Opt-in" columns are "true" and "false".
    """

    _ELEMENTS = (
        E("enable_divert", "enableDivert", bool, is_required=True),
        E("divert_to_phone_number", "divertToPhoneNumber", str),
        E(
            "executive_table", "executiveTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* enableDivert
    enable_divert = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* divertToPhoneNumber
    divert_to_phone_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* executiveTable  *Tabular*
    executive_table = Field(type=list, required=True, mutable=False)


class UserExecutiveGetAssistantResponse(OCIResponse):
    """
    Response to the ``UserExecutiveGetAssistantsRequest()``.

    Contains the assistant setting and a table of assigned assistants.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Phone Number", "Extension", "Department", "Email Address" and "Opt-in".
    The possible values for "Opt-in" column are "true" and "false".
    """

    _ELEMENTS = (
        E("allow_opt_in_out", "allowOptInOut", bool, is_required=True),
        E(
            "assistant_user_table", "assistantUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: bool: *Required* allowOptInOut
    allow_opt_in_out = Field(type=bool, required=True, mutable=False)
    #: list: *Required* assistantUserTable  *Tabular*
    assistant_user_table = Field(type=list, required=True, mutable=False)


class UserExecutiveGetAvailableAssistantListResponse(OCIResponse):
    """
    Response to the ``UserExecutiveGetAvailableAssistantListResponse()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department" and
    "Email Address".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserExecutiveGetFilteringResponse(OCIResponse):
    """
    Response to the ``UserExecutiveGetFilteringRequest()``.

    Contains the filtering setting and a table of filtering criteria.  The criteria
    table's column headings are: "Is Active", "Criteria Name", "Time Schedule", "Calls
    From", "Filter", "Holiday Schedule", "Calls To Type", "Calls To Number" and "Calls To
    Extension". The "Filter" column can contain "true" or "false". The possible values for
    the "Calls To Type" column are the following or a combination of them separated by
    comma: - Primary - Alternate X (where x is a number between 1 and 10) - Mobility The
    possible values for the "Calls To Number" column are the following or a combination of
    them separated by comma: - The value of the phone number for the corresponding Calls
    To Type, when the number is available.  i.e.  Alternate 1 may have extension, but no
    number.  - When no number is available a blank space is provided instead.  The
    possible values for the "Calls To Extension" column are the following or a combination
    of them separated by comma: - The value of the extension for the corresponding Calls
    To Type, when the extension is available.  i.e.  Primary may have number, but no
    extension.  - For Mobility Calls To Type, this is always blank.  - When no extension
    is available a blank space is provided instead.
    """

    _ELEMENTS = (
        E("enable_filtering", "enableFiltering", bool, is_required=True),
        E("filtering_mode", "filteringMode", str, is_required=True),
        E("simple_filter_type", "simpleFilterType", str, is_required=True),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* enableFiltering
    enable_filtering = Field(type=bool, required=True, mutable=False)
    #: str: *Required* filteringMode
    filtering_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* simpleFilterType
    simple_filter_type = Field(type=str, required=True, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserExecutiveGetScreeningAlertingResponse(OCIResponse):
    """
    Response to the ``UserExecutiveGetScreeningAlertingRequest()``.

    Contains the screening and alerting settings for an executive.
    """

    _ELEMENTS = (
        E("enable_screening", "enableScreening", bool, is_required=True),
        E("screening_alert_type", "screeningAlertType", str, is_required=True),
        E(
            "alert_broad_works_mobility_location", "alertBroadWorksMobilityLocation",
            bool, is_required=True,
        ),
        E(
            "alert_broad_works_anywhere_locations", "alertBroadWorksAnywhereLocations",
            bool, is_required=True,
        ),
        E(
            "alert_shared_call_appearance_locations",
            "alertSharedCallAppearanceLocations", bool, is_required=True,
        ),
        E("alerting_mode", "alertingMode", str, is_required=True),
        E(
            "alerting_calling_line_id_name_mode", "alertingCallingLineIdNameMode", str,
            is_required=True,
        ),
        E("alerting_custom_calling_line_id_name", "alertingCustomCallingLineIdName", str),
        E(
            "unicode_alerting_custom_calling_line_id_name",
            "unicodeAlertingCustomCallingLineIdName", str,
        ),
        E(
            "alerting_calling_line_id_phone_number_mode",
            "alertingCallingLineIdPhoneNumberMode", str, is_required=True,
        ),
        E(
            "alerting_custom_calling_line_id_phone_number",
            "alertingCustomCallingLineIdPhoneNumber", str,
        ),
        E(
            "call_push_recall_number_of_rings", "callPushRecallNumberOfRings", int,
            is_required=True,
        ),
        E(
            "next_assistant_number_of_rings", "nextAssistantNumberOfRings", int,
            is_required=True,
        ),
        E("enable_rollover", "enableRollover", bool, is_required=True),
        E("rollover_wait_time_seconds", "rolloverWaitTimeSeconds", int),
        E("rollover_action", "rolloverAction", str, is_required=True),
        E("rollover_forward_to_phone_number", "rolloverForwardToPhoneNumber", str),
    )

    #: bool: *Required* enableScreening
    enable_screening = Field(type=bool, required=True, mutable=False)
    #: str: *Required* screeningAlertType
    screening_alert_type = Field(type=str, required=True, mutable=False)
    #: bool: *Required* alertBroadWorksMobilityLocation
    alert_broad_works_mobility_location = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* alertBroadWorksAnywhereLocations
    alert_broad_works_anywhere_locations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* alertSharedCallAppearanceLocations
    alert_shared_call_appearance_locations = Field(type=bool, required=True, mutable=False)
    #: str: *Required* alertingMode
    alerting_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* alertingCallingLineIdNameMode
    alerting_calling_line_id_name_mode = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alertingCustomCallingLineIdName
    alerting_custom_calling_line_id_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unicodeAlertingCustomCallingLineIdName
    unicode_alerting_custom_calling_line_id_name = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Required* alertingCallingLineIdPhoneNumberMode
    alerting_calling_line_id_phone_number_mode = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alertingCustomCallingLineIdPhoneNumber
    alerting_custom_calling_line_id_phone_number = Field(
        type=str, required=False, mutable=False,
    )
    #: int: *Required* callPushRecallNumberOfRings
    call_push_recall_number_of_rings = Field(type=int, required=True, mutable=False)
    #: int: *Required* nextAssistantNumberOfRings
    next_assistant_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableRollover
    enable_rollover = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* rolloverWaitTimeSeconds
    rollover_wait_time_seconds = Field(type=int, required=False, mutable=False)
    #: str: *Required* rolloverAction
    rollover_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* rolloverForwardToPhoneNumber
    rollover_forward_to_phone_number = Field(type=str, required=False, mutable=False)


class UserExternalCallingLineIDDeliveryGetResponse(OCIResponse):
    """
    Response to ``UserExternalCallingLineIDDeliveryGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserExternalCustomRingbackGetResponse(OCIResponse):
    """
    Response to ``UserExternalCustomRingbackGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("sip_request_uri", "sipRequestURI", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* sipRequestURI
    sip_request_uri = Field(type=str, required=False, mutable=False)


class UserFaxMessagingGetResponse(OCIResponse):
    """
    Response to ``UserFaxMessagingGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)


class UserFaxMessagingGetResponse17(OCIResponse):
    """
    Response to ``UserFaxMessagingGetRequest17()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)


class UserFaxMessagingGetResponse17sp1(OCIResponse):
    """
    Response to ``UserFaxMessagingGetRequest17sp1()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("alias", "alias", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)


class UserFlexibleSeatingGuestGetAvailableHostListResponse(OCIResponse):
    """
    Response to the ``UserFlexibleSeatingGuestGetAvailableHostListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "Association Limit Hours", "Enable Association Limit",
    """

    _ELEMENTS = (
        E(
            "host_user_table", "hostUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* hostUserTable  *Tabular*
    host_user_table = Field(type=list, required=True, mutable=False)


class UserGetListInGroupResponse(OCIResponse):
    """
    Response to ``UserGetListInGroupRequest()``.

    Contains a table with column headings : "User Id", "Last Name", "First Name",
    "Department", "Phone Number", "Phone Number Activated", "Email Address", "Hiragana
    Last Name", "Hiragana First Name", "In Trunk Group", "Extension" in a row for each
    user.
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserGetListInServiceProviderResponse(OCIResponse):
    """
    Response to ``UserGetListInServiceProviderRequest()``.

    Contains a table with column headings : "User Id", "Group Id", "Last Name", "First
    Name", "Department", "Phone Number", "Phone Number Activated", "Email Address",
    "Hiragana Last Name", "Hiragana First Name", "In Trunk Group", "Extension" in a row
    for each user.
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserGetListInSystemResponse(OCIResponse):
    """
    Response to ``UserGetListInSystemRequest()``.

    Contains a table with column headings : "User Id", "Group Id", "Service Provider Id"
    "Last Name", "First Name", "Department", "Phone Number", "Phone Number Activated",
    "Email Address", "Hiragana Last Name", "Hiragana First Name", "In Trunk Group",
    "Extension" in a row for each user.
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserGetLoginInfoResponse(OCIResponse):
    """
    Response to ``UserGetLoginInfoRequest()`` If a phoneNumber is returned, it will be the
    primay DN of the user
    """

    _ELEMENTS = (
        E("login_type", "loginType", str, is_required=True),
        E("locale", "locale", str, is_required=True),
        E("encoding", "encoding", str, is_required=True),
        E("group_id", "groupId", str),
        E("service_provider_id", "serviceProviderId", str),
        E("is_enterprise", "isEnterprise", bool, is_required=True),
        E("password_expires_days", "passwordExpiresDays", int),
        E("last_name", "lastName", str),
        E("first_name", "firstName", str),
        E("user_id", "userId", str, is_required=True),
        E("phone_number", "phoneNumber", str),
    )

    #: str: *Required* loginType
    login_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* locale
    locale = Field(type=str, required=True, mutable=False)
    #: str: *Required* encoding
    encoding = Field(type=str, required=True, mutable=False)
    #: str: *Optional* groupId
    group_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serviceProviderId
    service_provider_id = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isEnterprise
    is_enterprise = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* passwordExpiresDays
    password_expires_days = Field(type=int, required=False, mutable=False)
    #: str: *Optional* lastName
    last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* firstName
    first_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* userId
    user_id = Field(type=str, required=True, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)


class UserGetRegistrationListResponse(OCIResponse):
    """
    Response to ``UserGetRegistrationListRequest()``.

    The registrationTable table column headings are: "Device Level", "Device Name",
    "Order", "URI", "Expiration", "Line/Port", "Endpoint Type"", "Public Net Address",
    "Public Port", "Private Net Address", "Private Port", "User Agent", "Lockout Started",
    "Lockout Expires", "Lockout Count". The "Device Level" column contains one of the
    AccessDeviceLevel enumerated constants.  The "Line/Port" column in IMS mode can be any
    Public User Identity which can be either a SIPURI or a TELURI. The expiration column
    will be empty when the registration is static.  The Endpoint Type column contains one
    of the enumerated EndpointType values.  The Endpoint Type is empty when the
    registration is against a TELURI. The table is sorted by: telURI (after SIPURI),
    Line/Port, static (after dynamic), order.  Lockout times are shown in GMT offset.
    When a permanent lockout is shown, the "Lockout Expires" column is empty and the
    "Lockout Count" column contains the word Permanent.
    """

    _ELEMENTS = (
        E(
            "registration_table", "registrationTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* registrationTable  *Tabular*
    registration_table = Field(type=list, required=True, mutable=False)


class UserGetServiceInstanceListInServiceProviderResponse(OCIResponse):
    """
    Response to ``UserGetServiceInstanceListInServiceProviderRequest()``.

    Contains a table with column headings : "User Id", "Group Id", "Service Type", "Name",
    "Phone Number", "Extension", "Department" in a row for each Service Instance.
    Possible values for Service Type column are ServiceType enums.
    """

    _ELEMENTS = (
        E(
            "service_instance_table", "serviceInstanceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceInstanceTable  *Tabular*
    service_instance_table = Field(type=list, required=True, mutable=False)


class UserGetServiceInstanceListInSystemResponse(OCIResponse):
    """
    Response to ``UserGetServiceInstanceListInSystemRequest()``.

    Contains a table with column headings : "User Id", "Group Id", "Serive Provider Id",
    "Service Type", "Name", "Phone Number", "Extension" in a row for each Service
    Instance.  Possible values for Service Type column are ServiceType enums.
    """

    _ELEMENTS = (
        E(
            "service_instance_table", "serviceInstanceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* serviceInstanceTable  *Tabular*
    service_instance_table = Field(type=list, required=True, mutable=False)


class UserGroupCommonPhoneListGetPagedSortedListResponse(OCIResponse):
    """
    Response to the ``UserGroupCommonPhoneListGetPagedSortedListRequest()``.

    The response contains the group's common phone list.  The response contains a table
    with column headings: "Name" and "Phone Number".
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "group_common_phone_list_table", "groupCommonPhoneListTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list: *Required* groupCommonPhoneListTable  *Tabular*
    group_common_phone_list_table = Field(type=list, required=True, mutable=False)


class UserGroupCustomContactDirectoryGetPagedSortedListResponse(OCIResponse):
    """
    Response to the ``UserGroupCustomContactDirectoryGetPagedSortedListRequest()``.

    Returns the number of entries that would be returned if the response Was not page size
    restricted.

    The response contains all the contacts in the group's given custom contact directory.
    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Virtual On-Net Phone Number", "Group Id", "Is
    Virtual On-Net User", "Department", "Phone Number", "Extension", "Mobile", "Email
    Address", "Yahoo Id", "Title", "IMP Id". If the entry represents a Virtual On-Net user
    then "User Id" is blank, the "Virtual On-Net Phone Number" contains the phone Number
    of the Virtual On-Net user, the "Group Id" contains the Virtual On-Net user's group
    and the "Is Virtual On-Net User" contains true.  If the entry represents a BroadWorks
    user then the "User Id" contains his BroadWorks userId, the "Virtual On-Net Phone
    Number" and "Group Id" fields are field is blank and the "Is Virtual On-Net User"
    contains false.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserGroupPagingGetListResponse(OCIResponse):
    """
    Response to the ``UserGroupPagingGetListRequest()``.

    The groupPagingTable contains columns: "Name", "Phone Number", "Extension" and "Is
    Active" The column value for "Is Active" can either be true, or false.
    """

    _ELEMENTS = (
        E(
            "paging_group_table", "pagingGroupTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* pagingGroupTable  *Tabular*
    paging_group_table = Field(type=list, required=True, mutable=False)


class UserHolidayScheduleGetListResponse(OCIResponse):
    """
    Response to the ``UserHolidayScheduleGetListRequest()``.

    The response contains all the user's personal and user's group holiday schedule names.
    """

    _ELEMENTS = (
        E(
            "holiday_schedule_table", "holidayScheduleTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* holidayScheduleTable  *Tabular*
    holiday_schedule_table = Field(type=list, required=True, mutable=False)


class UserHotelingGuestGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``UserHotelingGuestGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Association Limit Hours", "Enable Association
    Limit", "Phone Number", "Extension", "Department", "Email Address".
    """

    _ELEMENTS = (
        E(
            "host_user_table", "hostUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* hostUserTable  *Tabular*
    host_user_table = Field(type=list, required=True, mutable=False)


class UserHotelingGuestGetResponse14(OCIResponse):
    """
    Response to ``UserHotelingGuestGetRequest14()``.

    Replaced By: ``UserSharedCallAppearanceAddEndpointRequest14sp2()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("association_limit_hours", "associationLimitHours", int, is_required=True),
        E("host_user_id", "hostUserId", str),
        E("host_last_name", "hostLastName", str),
        E("host_first_name", "hostFirstName", str),
        E("host_association_date_time", "hostAssociationDateTime", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* associationLimitHours
    association_limit_hours = Field(type=int, required=True, mutable=False)
    #: str: *Optional* hostUserId
    host_user_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostLastName
    host_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostFirstName
    host_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostAssociationDateTime
    host_association_date_time = Field(type=str, required=False, mutable=False)


class UserHotelingGuestGetResponse14sp2(OCIResponse):
    """
    Response to ``UserHotelingGuestGetRequest14()``.

    Replaced by: ``UserHotelingGuestGetResponse14sp4()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("association_limit_hours", "associationLimitHours", int, is_required=True),
        E("host_user_id", "hostUserId", str),
        E("host_last_name", "hostLastName", str),
        E("host_first_name", "hostFirstName", str),
        E("host_association_date_time", "hostAssociationDateTime", str),
        E("host_association_limit_hours", "hostAssociationLimitHours", int),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* associationLimitHours
    association_limit_hours = Field(type=int, required=True, mutable=False)
    #: str: *Optional* hostUserId
    host_user_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostLastName
    host_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostFirstName
    host_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostAssociationDateTime
    host_association_date_time = Field(type=str, required=False, mutable=False)
    #: int: *Optional* hostAssociationLimitHours
    host_association_limit_hours = Field(type=int, required=False, mutable=False)


class UserHotelingGuestGetResponse14sp4(OCIResponse):
    """
    Response to ``UserHotelingGuestGetRequest14sp4()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("enable_association_limit", "enableAssociationLimit", bool, is_required=True),
        E("association_limit_hours", "associationLimitHours", int, is_required=True),
        E("host_user_id", "hostUserId", str),
        E("host_last_name", "hostLastName", str),
        E("host_first_name", "hostFirstName", str),
        E("host_association_date_time", "hostAssociationDateTime", str),
        E("host_enforces_association_limit", "hostEnforcesAssociationLimit", bool),
        E("host_association_limit_hours", "hostAssociationLimitHours", int),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAssociationLimit
    enable_association_limit = Field(type=bool, required=True, mutable=False)
    #: int: *Required* associationLimitHours
    association_limit_hours = Field(type=int, required=True, mutable=False)
    #: str: *Optional* hostUserId
    host_user_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostLastName
    host_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostFirstName
    host_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostAssociationDateTime
    host_association_date_time = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* hostEnforcesAssociationLimit
    host_enforces_association_limit = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* hostAssociationLimitHours
    host_association_limit_hours = Field(type=int, required=False, mutable=False)


class UserHotelingHostGetResponse14(OCIResponse):
    """
    Response to ``UserHotelingHostGetRequest14()``.

    Replaced by: ``UserHotelingHostGetResponse14sp4()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("association_limit_hours", "associationLimitHours", int, is_required=True),
        E("access_level", "accessLevel", str, is_required=True),
        E("guest_last_name", "guestLastName", str),
        E("guest_first_name", "guestFirstName", str),
        E("guest_phone_number", "guestPhoneNumber", str),
        E("guest_extension", "guestExtension", str),
        E("guest_location_dialing_code", "guestLocationDialingCode", str),
        E("guest_association_date_time", "guestAssociationDateTime", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* associationLimitHours
    association_limit_hours = Field(type=int, required=True, mutable=False)
    #: str: *Required* accessLevel
    access_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* guestLastName
    guest_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestFirstName
    guest_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestPhoneNumber
    guest_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestExtension
    guest_extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestLocationDialingCode
    guest_location_dialing_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestAssociationDateTime
    guest_association_date_time = Field(type=str, required=False, mutable=False)


class UserHotelingHostGetResponse14sp4(OCIResponse):
    """
    Response to ``UserHotelingHostGetRequest14sp4()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("enforce_association_limit", "enforceAssociationLimit", bool, is_required=True),
        E("association_limit_hours", "associationLimitHours", int, is_required=True),
        E("access_level", "accessLevel", str, is_required=True),
        E("guest_last_name", "guestLastName", str),
        E("guest_first_name", "guestFirstName", str),
        E("guest_phone_number", "guestPhoneNumber", str),
        E("guest_extension", "guestExtension", str),
        E("guest_location_dialing_code", "guestLocationDialingCode", str),
        E("guest_association_date_time", "guestAssociationDateTime", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceAssociationLimit
    enforce_association_limit = Field(type=bool, required=True, mutable=False)
    #: int: *Required* associationLimitHours
    association_limit_hours = Field(type=int, required=True, mutable=False)
    #: str: *Required* accessLevel
    access_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* guestLastName
    guest_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestFirstName
    guest_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestPhoneNumber
    guest_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestExtension
    guest_extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestLocationDialingCode
    guest_location_dialing_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestAssociationDateTime
    guest_association_date_time = Field(type=str, required=False, mutable=False)


class UserHotelingHostGetResponse17(OCIResponse):
    """
    Response to ``UserHotelingHostGetRequest17()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("enforce_association_limit", "enforceAssociationLimit", bool, is_required=True),
        E("association_limit_hours", "associationLimitHours", int, is_required=True),
        E("access_level", "accessLevel", str, is_required=True),
        E("guest_last_name", "guestLastName", str),
        E("guest_first_name", "guestFirstName", str),
        E("guest_phone_number", "guestPhoneNumber", str),
        E("guest_extension", "guestExtension", str),
        E("guest_location_dialing_code", "guestLocationDialingCode", str),
        E("guest_association_date_time", "guestAssociationDateTime", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enforceAssociationLimit
    enforce_association_limit = Field(type=bool, required=True, mutable=False)
    #: int: *Required* associationLimitHours
    association_limit_hours = Field(type=int, required=True, mutable=False)
    #: str: *Required* accessLevel
    access_level = Field(type=str, required=True, mutable=False)
    #: str: *Optional* guestLastName
    guest_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestFirstName
    guest_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestPhoneNumber
    guest_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestExtension
    guest_extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestLocationDialingCode
    guest_location_dialing_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* guestAssociationDateTime
    guest_association_date_time = Field(type=str, required=False, mutable=False)


class UserINIntegrationGetResponse(OCIResponse):
    """
    Response to ``UserINIntegrationGetRequest()``
    """

    _ELEMENTS = (
        E("originating_service_key", "originatingServiceKey", int),
        E("terminating_service_key", "terminatingServiceKey", int),
    )

    #: int: *Optional* originatingServiceKey
    originating_service_key = Field(type=int, required=False, mutable=False)
    #: int: *Optional* terminatingServiceKey
    terminating_service_key = Field(type=int, required=False, mutable=False)


class UserInCallServiceActivationGetResponse(OCIResponse):
    """
    Response to ``UserInCallServiceActivationGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserIntegratedIMPGetResponse(OCIResponse):
    """
    Response to the ``UserIntegratedIMPGetRequest()``.

    The response contains the Integrated IMP specific service attributes for the user.
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserIntelligentNetworkServiceControlGetResponse(OCIResponse):
    """
    Response to ``UserIntelligentNetworkServiceControlGetRequest()``.

    """

    _ELEMENTS = (
        E("pre_answer_actions_enabled", "preAnswerActionsEnabled", bool, is_required=True),
    )

    #: bool: *Required* preAnswerActionsEnabled
    pre_answer_actions_enabled = Field(type=bool, required=True, mutable=False)


class UserInterceptUserGetResponse(OCIResponse):
    """
    Response to the ``UserInterceptUserGetRequest()``.

    Replaced By: ``UserInterceptUserGetResponse16()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("announcement_selection", "announcementSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("video_file_description", "videoFileDescription", str),
        E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
        E("new_phone_number", "newPhoneNumber", str),
        E(
            "transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* announcementSelection
    announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playNewPhoneNumber
    play_new_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* newPhoneNumber
    new_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* transferOnZeroToPhoneNumber
    transfer_on_zero_to_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)


class UserInterceptUserGetResponse16(OCIResponse):
    """
    Response to the ``UserInterceptUserGetRequest16()``.

    Replaced By: ``UserInterceptUserGetResponse16sp1()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("announcement_selection", "announcementSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
        E("new_phone_number", "newPhoneNumber", str),
        E(
            "transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* announcementSelection
    announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playNewPhoneNumber
    play_new_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* newPhoneNumber
    new_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* transferOnZeroToPhoneNumber
    transfer_on_zero_to_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)


class UserInterceptUserGetResponse16sp1(OCIResponse):
    """
    Response to the ``UserInterceptUserGetRequest16sp1()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("announcement_selection", "announcementSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
        E("new_phone_number", "newPhoneNumber", str),
        E(
            "transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("reroute_outbound_calls", "rerouteOutboundCalls", bool, is_required=True),
        E("outbound_reroute_phone_number", "outboundReroutePhoneNumber", str),
        E("allow_outbound_local_calls", "allowOutboundLocalCalls", bool, is_required=True),
        E("inbound_call_mode", "inboundCallMode", str, is_required=True),
        E(
            "alternate_blocking_announcement", "alternateBlockingAnnouncement", bool,
            is_required=True,
        ),
        E("route_to_voice_mail", "routeToVoiceMail", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* announcementSelection
    announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playNewPhoneNumber
    play_new_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* newPhoneNumber
    new_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* transferOnZeroToPhoneNumber
    transfer_on_zero_to_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* rerouteOutboundCalls
    reroute_outbound_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* outboundReroutePhoneNumber
    outbound_reroute_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowOutboundLocalCalls
    allow_outbound_local_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* inboundCallMode
    inbound_call_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* alternateBlockingAnnouncement
    alternate_blocking_announcement = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeToVoiceMail
    route_to_voice_mail = Field(type=bool, required=True, mutable=False)


class UserInternalCallingLineIDDeliveryGetResponse(OCIResponse):
    """
    Response to ``UserInternalCallingLineIDDeliveryGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserLDAPIntegrationGetDirectoryListResponse(OCIResponse):
    """
    Response to ``UserLDAPIntegrationGetDirectoryListRequest()``.

    The table is a 4 column table.  The column headings are defined by the group's LDAP
    settings.
    """

    _ELEMENTS = (
        E(
            "ldap_entry_table", "ldapEntryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E("search_label", "searchLabel", str, is_required=True),
        E("has_more_entries", "hasMoreEntries", bool, is_required=True),
        E("last_page_number", "lastPageNumber", int),
    )

    #: list: *Required* ldapEntryTable  *Tabular*
    ldap_entry_table = Field(type=list, required=True, mutable=False)
    #: str: *Required* searchLabel
    search_label = Field(type=str, required=True, mutable=False)
    #: bool: *Required* hasMoreEntries
    has_more_entries = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* lastPageNumber
    last_page_number = Field(type=int, required=False, mutable=False)


class UserLegacyAutomaticCallbackGetResponse(OCIResponse):
    """
    Response to ``UserLegacyAutomaticCallbackGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserLinePortGetListResponse(OCIResponse):
    """
    Response to ``UserLinePortGetListRequest()``.

    Contains a table of line ports configured for a user The column headings are: "Line
    Port", "Line Port Type", "In Trunk Group", "Contact", "Contact2", "Contact3",
    "Contact4", "Contact5", " Authentication Mode ", and "Auto-Config Soft Client".
    """

    _ELEMENTS = (
        E(
            "line_port_table", "linePortTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* linePortTable  *Tabular*
    line_port_table = Field(type=list, required=True, mutable=False)


class UserMWIDeliveryToMobileEndpointGetResponse(OCIResponse):
    """
    Response to ``UserMWIDeliveryToMobileEndpointGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("mobile_phone_number", "mobilePhoneNumber", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)


class UserMeetMeConferencingAddConferenceResponse(OCIResponse):
    """
    Response to ``UserMeetMeConferencingAddConferenceRequest()``.

    """

    _ELEMENTS = (
        E("conference_id", "conferenceId", str, is_required=True),
        E("moderator_pin", "moderatorPin", str, is_required=True),
    )

    #: str: *Required* conferenceId
    conference_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* moderatorPin
    moderator_pin = Field(type=str, required=True, mutable=False)


class UserMeetMeConferencingAddConferenceResponse19(OCIResponse):
    """
    Response to ``UserMeetMeConferencingAddConferenceRequest19()``.

    Contains the information of a conference.
    """

    _ELEMENTS = (
        E("conference_id", "conferenceId", str, is_required=True),
        E("moderator_pin", "moderatorPin", str, is_required=True),
        E("security_pin", "securityPin", str),
    )

    #: str: *Required* conferenceId
    conference_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* moderatorPin
    moderator_pin = Field(type=str, required=True, mutable=False)
    #: str: *Optional* securityPin
    security_pin = Field(type=str, required=False, mutable=False)


class UserMeetMeConferencingGetAvailableDelegateListResponse(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetAvailableDelegateListRequest()``.

    Contains all hosts assigned on a bridge.  The table has column headings: "User Id",
    "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name", "Phone
    Number", "Extension", "Department" and "Email Address".
    """

    _ELEMENTS = (
        E(
            "conference_delegate_user_table", "conferenceDelegateUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* conferenceDelegateUserTable  *Tabular*
    conference_delegate_user_table = Field(type=list, required=True, mutable=False)


class UserMeetMeConferencingGetBridgeListResponse(OCIResponse):
    """
    Response to the ``UserMeetMeConferencingGetBridgeListRequest()``.

    Contains a table with column headings: "Bridge Id", "Name", "Phone Number",
    "Extension", "Ports", and "Is Active" The column values for "Is Active" can either be
    true, or false.
    """

    _ELEMENTS = (
        E(
            "conference_bridge_table", "conferenceBridgeTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* conferenceBridgeTable  *Tabular*
    conference_bridge_table = Field(type=list, required=True, mutable=False)


class UserMeetMeConferencingGetConferenceDelegateListResponse(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceDelegateListRequest()``.

    Contains a table with table heading:"User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name","Phone Number", "Extension", "Department" and "Email
    Address".
    """

    _ELEMENTS = (
        E(
            "conference_delegate_user_table", "conferenceDelegateUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* conferenceDelegateUserTable  *Tabular*
    conference_delegate_user_table = Field(type=list, required=True, mutable=False)


class UserMeetMeConferencingGetConferenceGreetingResponse(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceGreetingRequest()``.

    Contains the information of a conference custom greeting.
    """

    _ELEMENTS = (
        E("play_entrance_greeting", "playEntranceGreeting", bool, is_required=True),
        E("entrance_greeting_audio_file", "entranceGreetingAudioFile", str),
        E("entrance_greeting_media_type", "entranceGreetingMediaType", str),
    )

    #: bool: *Required* playEntranceGreeting
    play_entrance_greeting = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* entranceGreetingAudioFile
    entrance_greeting_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* entranceGreetingMediaType
    entrance_greeting_media_type = Field(type=str, required=False, mutable=False)


class UserMeetMeConferencingGetConferenceListResponse(OCIResponse):
    """
    Response to the ``UserMeetMeConferencingGetConferenceListRequest()``.

    Contains a table with column headings: "Bridge Id", "Conference Id", "Title", "Bridge
    Name", "Status", "Type", "Start Time", "Last Name", "First Name" and "Host Id". The
    column values for "Status" can be Active, Inactive, or Expired.  The column values for
    "Type" can be Reservationless, One Time, Recurring Daily, Recurring Weekly, Recurring
    Monthly, or Recurring Yearly.  Start Time is in the format "yyyy-MM-
    dd'T'HH:mm:ss:SSSZ". Example: 2010-10-01T09:30:00:000-0400.
    """

    _ELEMENTS = (
        E(
            "conference_table", "conferenceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* conferenceTable  *Tabular*
    conference_table = Field(type=list, required=True, mutable=False)


class UserMeetMeConferencingGetConferenceRecordingListResponse(OCIResponse):
    """
    Response to the ``UserMeetMeConferencingGetConferenceRecordingListRequest()``.

    Contains a table with column headings: "Bridge Id", "Conference Id", "Conference
    Title", "Bridge Name", "Start Time", "File Size", and "URL". Start Time is in the
    format "yyyy-MM-dd'T'HH:mm:ss:SSSZ". Example: 2010-10-01T09:30:00:000-0400.
    """

    _ELEMENTS = (
        E(
            "conference_recording_table", "conferenceRecordingTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* conferenceRecordingTable  *Tabular*
    conference_recording_table = Field(type=list, required=True, mutable=False)


class UserMusicOnHoldGetResponse(OCIResponse):
    """
    Response to ``UserMusicOnHoldGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserNetworkConferencingGetResponse(OCIResponse):
    """
    Response to ``UserNetworkConferencingGetRequest()``.

    """

    _ELEMENTS = (
        E("conference_uri", "conferenceURI", str),
        E("max_conference_parties", "maxConferenceParties", int, is_required=True),
    )

    #: str: *Optional* conferenceURI
    conference_uri = Field(type=str, required=False, mutable=False)
    #: int: *Required* maxConferenceParties
    max_conference_parties = Field(type=int, required=True, mutable=False)


class UserNumberPortabilityAnnouncementGetResponse(OCIResponse):
    """
    Response to the ``UserNumberPortabilityAnnouncementGetRequest()``.

    The response contains the user Number Portability attributes.
    """

    _ELEMENTS = (
        E("enable", "enable", bool, is_required=True),
    )

    #: bool: *Required* enable
    enable = Field(type=bool, required=True, mutable=False)


class UserOCICallControlApplicationGetListResponse(OCIResponse):
    """
    Response to ``UserOCICallControlApplicationGetListRequest()``.

    """

    _ELEMENTS = (
        E("application_id", "applicationId", str, is_array=True),
    )

    #: list(str): *Optional* applicationId  *Array*
    application_id = Field(type=list, required=False, mutable=False)


class UserOutgoingCallingPlanAuthorizationCodeGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanAuthorizationCodeGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)


class UserOutgoingCallingPlanSustainedAuthorizationCodeGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanAuthorizationCodeGetRequest()``.

    """

    _ELEMENTS = (
        E("code", "code", str),
    )

    #: str: *Optional* code
    code = Field(type=str, required=False, mutable=False)


class UserOutlookIntegrationGetResponse(OCIResponse):
    """
    Response to ``UserOutlookIntegrationGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("contact_retrieval_selection", "contactRetrievalSelection", str, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* contactRetrievalSelection
    contact_retrieval_selection = Field(type=str, required=True, mutable=False)


class UserPasswordInfoGetResponse(OCIResponse):
    """
    Response to ``UserPasswordInfoGetRequest()``.

    """

    _ELEMENTS = (
        E("is_login_disabled", "isLoginDisabled", bool, is_required=True),
        E("expiration_days", "expirationDays", int),
        E("does_not_expire", "doesNotExpire", bool),
    )

    #: bool: *Required* isLoginDisabled
    is_login_disabled = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* expirationDays
    expiration_days = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* doesNotExpire
    does_not_expire = Field(type=bool, required=False, mutable=False)


class UserPersonalAssistantExclusionNumberGetListResponse(OCIResponse):
    """
    Response to the ``UserPersonalAssistantExclusionNumberGetListRequest()``.

    Contains a table with column headings: "Number", "Description".
    """

    _ELEMENTS = (
        E(
            "exclusion_number_table", "exclusionNumberTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* exclusionNumberTable  *Tabular*
    exclusion_number_table = Field(type=list, required=True, mutable=False)


class UserPersonalAssistantExclusionNumberGetResponse(OCIResponse):
    """
    Response to the ``UserPersonalAssistantExclusionNumberGetRequest()``
    """

    _ELEMENTS = (
        E("description", "description", str),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class UserPersonalAssistantGetResponse(OCIResponse):
    """
    Response to the ``UserPersonalAssistantGetRequest()``.

    The response contains the user Personal Assistant information".
    """

    _ELEMENTS = (
        E("presence", "presence", str, is_required=True),
        E(
            "enable_transfer_to_attendant", "enableTransferToAttendant", bool,
            is_required=True,
        ),
        E("attendant_number", "attendantNumber", str),
        E("enable_ring_splash", "enableRingSplash", bool, is_required=True),
        E("enable_expiration_time", "enableExpirationTime", bool, is_required=True),
        E("expiration_time", "expirationTime", str),
    )

    #: str: *Required* presence
    presence = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableTransferToAttendant
    enable_transfer_to_attendant = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* attendantNumber
    attendant_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableRingSplash
    enable_ring_splash = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableExpirationTime
    enable_expiration_time = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* expirationTime
    expiration_time = Field(type=str, required=False, mutable=False)


class UserPersonalPhoneListGetPagedSortedListResponse(OCIResponse):
    """
    Response to the ``UserPersonalPhoneListGetPagedSortedListRequest()``.

    The response contains a user's personal phone list.  The response contains a table
    with column headings: "Name" and "Phone Number".
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "personal_phone_list_table", "personalPhoneListTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list: *Required* personalPhoneListTable  *Tabular*
    personal_phone_list_table = Field(type=list, required=True, mutable=False)


class UserPhoneDirectoryGetListResponse(OCIResponse):
    """
    Response to ``UserPhoneDirectoryGetListRequest()``.

    The "My Room Room Id" and "My Room Bridge Id" are only populated for users assigned
    the "Collaborate-Audio" service.  Contains a table with a row for each phone number
    and column headings : "Name", "Number", "Extension", "Mobile", "Email Address",
    "Department", "First Name", "Last Name", "User Id", "Title", "IMP Id", "My Room Room
    Id", "My Room Bridge Id".
    """

    _ELEMENTS = (
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class UserPhoneDirectoryGetPagedListResponse(OCIResponse):
    """
    Response to ``UserPhoneDirectoryGetPagedListRequest21()``.

    Returns the number of entries that would be returned if the response Was not page size
    restricted.  The "My Room Room Id" and "My Room Bridge Id" are only populated for
    users assigned the "Collaborate-Audio" service.  Contains a table with a row for each
    user and column headings: "User Id", "First Name", "Last Name", "First Name Unicode",
    "Last Name Unicode", "Hiragana First Name", "Hiragana Last Name", "Title", "Phone
    Number", "Extension", "Mobile", "Pager", "Email Address", "Yahoo Id", "Department",
    "Group Id", "Location", "Address Line 1", "Address Line 2", "City", "State", "Zip",
    "Country", "IMP Id", "Location Code", "My Room Room Id", "My Room Bridge Id".

    The response entries are sorted by "Last Name Unicode" first and "First Name unicode"
    secondarily.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class UserPhoneDirectoryGetPagedSortedListResponse(OCIResponse):
    """
    Response to ``UserPhoneDirectoryGetPagedSortedListRequest()``.

    Returns the number of entries that would be returned if the response Was not page size
    restricted.  The "My Room Room Id" and "My Room Bridge Id" are only populated for
    users assigned the "Collaborate-Audio" service.  Contains a table with a row for each
    user and column headings: "User Id", "CLID First Name", "CLID Last Name", "First
    Name", "Last Name", "Hiragana First Name", "Hiragana Last Name", "Title", "Phone
    Number", "Extension", "Mobile", "Pager", "Email Address", "Yahoo Id", "Department",
    "Group Id", "Location", "Address Line 1", "Address Line 2", "City", "State", "Zip",
    "Country", "IMP Id", "Location Code", "My Room Room Id", "My Room Bridge Id".
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class UserPhoneDirectoryGetSearchedListResponse(OCIResponse):
    """
    Response to ``UserPhoneDirectoryGetSearchedListRequest()``.

    The "My Room Room Id" and "My Room Bridge Id" are only populated for users assigned
    the "Collaborate-Audio" service.  Contains a table with a row for each phone number
    and column headings : "Name", "Number", "Extension", "Mobile", "Email Address",
    "Department", "Hiragana Name", "Group Id", "Yahoo Id", "User Id", "IMP Id", "First
    Name", "Last Name", "My Room Room Id", "My Room Bridge Id".
    """

    _ELEMENTS = (
        E(
            "directory_table", "directoryTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* directoryTable  *Tabular*
    directory_table = Field(type=list, required=True, mutable=False)


class UserPhysicalLocationGetResponse(OCIResponse):
    """
    Response to ``UserPhysicalLocationGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserPolycomPhoneServicesGetPrimaryEndpointListResponse(OCIResponse):
    """
    Response to ``UserPolycomPhoneServicesGetPrimaryEndpointListRequest()``.

    The column headings for the deviceUserTable are: "Device Level", "Device Name",
    "Line/Port", "Private Identity". The Private Identity column is empty is AS mode.
    """

    _ELEMENTS = (
        E(
            "device_user_table", "deviceUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* deviceUserTable  *Tabular*
    device_user_table = Field(type=list, required=True, mutable=False)


class UserPolycomPhoneServicesGetResponse(OCIResponse):
    """
    Response to ``UserPolycomPhoneServicesGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "integrate_phone_directory_with_broad_works",
            "integratePhoneDirectoryWithBroadWorks", bool, is_required=True,
        ),
        E(
            "include_user_personal_phone_list_in_directory",
            "includeUserPersonalPhoneListInDirectory", bool, is_required=True,
        ),
        E(
            "include_group_custom_contact_directory_in_directory",
            "includeGroupCustomContactDirectoryInDirectory", bool, is_required=True,
        ),
        E("group_custom_contact_directory", "groupCustomContactDirectory", str),
    )

    #: bool: *Required* integratePhoneDirectoryWithBroadWorks
    integrate_phone_directory_with_broad_works = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeUserPersonalPhoneListInDirectory
    include_user_personal_phone_list_in_directory = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeGroupCustomContactDirectoryInDirectory
    include_group_custom_contact_directory_in_directory = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Optional* groupCustomContactDirectory
    group_custom_contact_directory = Field(type=str, required=False, mutable=False)


class UserPortalPasscodeGetInfoResponse(OCIResponse):
    """
    Response to ``UserPortalPasscodeGetInfoRequest()``.

    """

    _ELEMENTS = (
        E("is_login_disabled", "isLoginDisabled", bool, is_required=True),
        E("expiration_days", "expirationDays", int),
        E("does_not_expire", "doesNotExpire", bool),
        E("passcode", "passcode", str, is_required=True),
    )

    #: bool: *Required* isLoginDisabled
    is_login_disabled = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* expirationDays
    expiration_days = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* doesNotExpire
    does_not_expire = Field(type=bool, required=False, mutable=False)
    #: str: *Required* passcode
    passcode = Field(type=str, required=True, mutable=False)


class UserPreAlertingAnnouncementGetResponse(OCIResponse):
    """
    Response to a ``UserPreAlertingAnnouncementGetRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Blacklisted",
    and "Calls From".
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E("video_file_url", "videoFileUrl", str),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserPrepaidGetResponse(OCIResponse):
    """
    Response to ``UserPrepaidGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserPrimaryEndpointAdvancedSettingGetResponse(OCIResponse):
    """
    Response to the ``UserPrimaryEndpointAdvancedSettingGetRequest()``.

    """

    _ELEMENTS = (
        E("allow_origination", "allowOrigination", bool, is_required=True),
        E("allow_termination", "allowTermination", bool, is_required=True),
    )

    #: bool: *Required* allowOrigination
    allow_origination = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTermination
    allow_termination = Field(type=bool, required=True, mutable=False)


class UserPriorityAlertGetCriteriaListResponse(OCIResponse):
    """
    Response to the ``UserPriorityAlertGetCriteriaListRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted", "Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a combination of them separated by comma: - The
    value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no extension is available a blank space is
    provided instead.
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserPrivacyGetAvailableMonitorsUserListResponse(OCIResponse):
    """
    Response to the ``UserPrivacyGetAvailableMonitorsUserListRequest()``.

    Returns a 10 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address", "IMP Id".
    """

    _ELEMENTS = (
        E(
            "available_monitors_table", "availableMonitorsTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* availableMonitorsTable  *Tabular*
    available_monitors_table = Field(type=list, required=True, mutable=False)


class UserPrivacyGetResponse(OCIResponse):
    """
    Response to ``UserPrivacyGetRequest()``.

    """

    _ELEMENTS = (
        E("enable_directory_privacy", "enableDirectoryPrivacy", bool, is_required=True),
    )

    #: bool: *Required* enableDirectoryPrivacy
    enable_directory_privacy = Field(type=bool, required=True, mutable=False)


class UserPrivacyGetResponse13mp17(OCIResponse):
    """
    Response to ``UserPrivacyGetRequest13mp17()``.

    The permittedMonitorUserIdTable contains the members of the enterprise or group
    allowed to monitor the phone status of the user specified in the request.  Members of
    this table are allowed to monitor the user even if enablePhoneStatusPrivacy is set to
    true.  The table contains column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address", "IMP Id".
    """

    _ELEMENTS = (
        E("enable_directory_privacy", "enableDirectoryPrivacy", bool, is_required=True),
        E(
            "enable_auto_attendant_extension_dialing_privacy",
            "enableAutoAttendantExtensionDialingPrivacy", bool, is_required=True,
        ),
        E(
            "enable_auto_attendant_name_dialing_privacy",
            "enableAutoAttendantNameDialingPrivacy", bool, is_required=True,
        ),
        E("enable_phone_status_privacy", "enablePhoneStatusPrivacy", bool, is_required=True),
        E(
            "permitted_monitor_user_id_table", "permittedMonitorUserIdTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: bool: *Required* enableDirectoryPrivacy
    enable_directory_privacy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAutoAttendantExtensionDialingPrivacy
    enable_auto_attendant_extension_dialing_privacy = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enableAutoAttendantNameDialingPrivacy
    enable_auto_attendant_name_dialing_privacy = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* enablePhoneStatusPrivacy
    enable_phone_status_privacy = Field(type=bool, required=True, mutable=False)
    #: list: *Required* permittedMonitorUserIdTable  *Tabular*
    permitted_monitor_user_id_table = Field(type=list, required=True, mutable=False)


class UserPushToTalkGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``UserPushToTalkGetAvailableUserListRequest()``.

    Returns a 10 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address", "IMP Id".
    """

    _ELEMENTS = (
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserPushToTalkGetResponse(OCIResponse):
    """
    Response to ``UserPushToTalkGetRequest()``.

    It returns the service settings and a 9 column selected user table with the following
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Phone Number", "Extension", "Department", "Email Address", "IMP Id".
    """

    _ELEMENTS = (
        E("allow_auto_answer", "allowAutoAnswer", bool, is_required=True),
        E(
            "outgoing_connection_selection", "outgoingConnectionSelection", str,
            is_required=True,
        ),
        E("access_list_selection", "accessListSelection", str, is_required=True),
        E(
            "selected_user_table", "selectedUserTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: bool: *Required* allowAutoAnswer
    allow_auto_answer = Field(type=bool, required=True, mutable=False)
    #: str: *Required* outgoingConnectionSelection
    outgoing_connection_selection = Field(type=str, required=True, mutable=False)
    #: str: *Required* accessListSelection
    access_list_selection = Field(type=str, required=True, mutable=False)
    #: list: *Required* selectedUserTable  *Tabular*
    selected_user_table = Field(type=list, required=True, mutable=False)


class UserRemoteOfficeGetResponse(OCIResponse):
    """
    Response to ``UserRemoteOfficeGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("remote_office_phone_number", "remoteOfficePhoneNumber", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* remoteOfficePhoneNumber
    remote_office_phone_number = Field(type=str, required=False, mutable=False)


class UserRouteListGetResponse(OCIResponse):
    """
    Response to ``UserRouteListGetRequest()``.

    Contains the route list setting and a list of assigned number ranges.  The column
    headings for assignedNumberRangeTable are "Number Range Start", "Number Range End" and
    "Is Active".
    """

    _ELEMENTS = (
        E(
            "treat_originations_and_pbx_redirections_as_screened",
            "treatOriginationsAndPBXRedirectionsAsScreened", bool, is_required=True,
        ),
        E(
            "use_route_list_identity_for_non_emergency_calls",
            "useRouteListIdentityForNonEmergencyCalls", bool, is_required=True,
        ),
        E(
            "use_route_list_identity_for_emergency_calls",
            "useRouteListIdentityForEmergencyCalls", bool, is_required=True,
        ),
        E(
            "assigned_number_range_table", "assignedNumberRangeTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: bool: *Required* treatOriginationsAndPBXRedirectionsAsScreened
    treat_originations_and_pbx_redirections_as_screened = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useRouteListIdentityForNonEmergencyCalls
    use_route_list_identity_for_non_emergency_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useRouteListIdentityForEmergencyCalls
    use_route_list_identity_for_emergency_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: list: *Required* assignedNumberRangeTable  *Tabular*
    assigned_number_range_table = Field(type=list, required=True, mutable=False)


class UserRoutePointCallDispositionCodeGetAvailableListResponse(OCIResponse):
    """
    Response to the ``UserRoutePointCallDispositionCodeGetAvailableListRequest()``.

    This list may include Group/Enterprise level codes in addition to the Route Point
    level codes, depending on the call center disposition codes settings.  Only active
    codes are included in the list.  Contains a table with column headings: "Code",
    "Description" and "Level". Level column can be any of the values in the data type
    CallDispositionCodeLevel.
    """

    _ELEMENTS = (
        E(
            "disposition_codes_table", "dispositionCodesTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* dispositionCodesTable  *Tabular*
    disposition_codes_table = Field(type=list, required=True, mutable=False)


class UserRoutePointSupervisorGetListResponse(OCIResponse):
    """
    Response to the ``UserRoutePointSupervisorGetListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "Location Code".
    """

    _ELEMENTS = (
        E(
            "supervisor_table", "supervisorTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* supervisorTable  *Tabular*
    supervisor_table = Field(type=list, required=True, mutable=False)


class UserSMDIMessageDeskGetResponse(OCIResponse):
    """
    Response to the ``UserSMDIMessageDeskGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("message_desk_number", "messageDeskNumber", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* messageDeskNumber
    message_desk_number = Field(type=str, required=False, mutable=False)


class UserSMDIMessageDeskGetServerListResponse(OCIResponse):
    """
    Response to the ``UserSMDIMessageDeskGetServerListRequest()``.

    The SMDI Server table column headings are: "Device Name", "Net Address", "Port".
    """

    _ELEMENTS = (
        E(
            "smdi_server_table", "smdiServerTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* smdiServerTable  *Tabular*
    smdi_server_table = Field(type=list, required=True, mutable=False)


class UserScheduleGetEventListResponse(OCIResponse):
    """
    Response to ``UserScheduleGetEventListRequest()``.

    The response contains a list of events.
    """

    _ELEMENTS = (
        E("event_name", "eventName", str, is_array=True),
    )

    #: list(str): *Optional* eventName  *Array*
    event_name = Field(type=list, required=False, mutable=False)


class UserScheduleGetListResponse(OCIResponse):
    """
    Response to ``UserScheduleGetListRequest()``.

    The response contains a list of system schedules.
    """

    _ELEMENTS = (
        E("schedule_name", "scheduleName", str, is_array=True),
        E("schedule_type", "scheduleType", str, is_array=True),
        E("schedule_level", "scheduleLevel", str, is_array=True),
    )

    #: list(str): *Optional* scheduleName  *Array*
    schedule_name = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* scheduleType  *Array*
    schedule_type = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* scheduleLevel  *Array*
    schedule_level = Field(type=list, required=False, mutable=False)


class UserSecurityClassificationGetResponse(OCIResponse):
    """
    Response to the ``UserSecurityClassificationGetRequest()``.

    """

    _ELEMENTS = (
        E("security_classification", "securityClassification", str),
    )

    #: str: *Optional* securityClassification
    security_classification = Field(type=str, required=False, mutable=False)


class UserSelectiveCallAcceptanceGetCriteriaListResponse(OCIResponse):
    """
    Response to the ``UserSelectiveCallAcceptanceGetCriteriaListRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted", "Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a combination of them separated by comma: - The
    value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no extension is available a blank space is
    provided instead.
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserSelectiveCallRejectionGetCriteriaListResponse(OCIResponse):
    """
    Response to the ``UserSelectiveCallRejectionGetCriteriaListRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted", "Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a combination of them separated by comma: - The
    value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no extension is available a blank space is
    provided instead.
    """

    _ELEMENTS = (
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserSeriesCompletionGetResponse(OCIResponse):
    """
    Response to the ``UserSeriesCompletionGetRequest()``.

    Identifies which Series Completion group the user belongs to and the list of users in
    the group.  Contains a table with column headings: "User Id", "Last Name", "First
    Name", "Hiragana Last Name", "Hiragana First Name", "Department", "Phone Number",
    "Extension", "Email Address".
    """

    _ELEMENTS = (
        E("name", "name", str),
        E("user_table", "userTable", list, is_complex=True, is_required=True, is_table=True),
    )

    #: str: *Optional* name
    name = Field(type=str, required=False, mutable=False)
    #: list: *Required* userTable  *Tabular*
    user_table = Field(type=list, required=True, mutable=False)


class UserServiceGetAssignmentListResponse(OCIResponse):
    """
    Response to ``UserServiceGetAssignmentListRequest()``.

    Contains two tables, one for the service packs, and one for the user services.  The
    user table has the column headings: "Service Name", "Assigned", The service pack
    table's column headings are: "Service Pack Name", "Assigned", "Description". The
    "Assigned" column has either a true or false value
    """

    _ELEMENTS = (
        E(
            "service_packs_assignment_table", "servicePacksAssignmentTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E(
            "user_services_assignment_table", "userServicesAssignmentTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: list: *Required* servicePacksAssignmentTable  *Tabular*
    service_packs_assignment_table = Field(type=list, required=True, mutable=False)
    #: list: *Required* userServicesAssignmentTable  *Tabular*
    user_services_assignment_table = Field(type=list, required=True, mutable=False)


class UserServiceIsAssignedResponse(OCIResponse):
    """
    Returns true if the UserService or service pack is assigned, otherwise false.

    """

    _ELEMENTS = (
        E("is_assigned", "isAssigned", bool, is_required=True),
    )

    #: bool: *Required* isAssigned
    is_assigned = Field(type=bool, required=True, mutable=False)


class UserServiceScriptsUserGetLogResponse(OCIResponse):
    """
    Response to ``UserServiceScriptsUserGetLogRequest()``.

    """

    _ELEMENTS = (
        E("log_content", "logContent", str),
    )

    #: str: *Optional* logContent
    log_content = Field(type=str, required=False, mutable=False)


class UserServiceScriptsUserGetResponse(OCIResponse):
    """
    Response to ``UserServiceScriptsUserGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("script_name", "scriptName", str),
        E("script_content", "scriptContent", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* scriptName
    script_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* scriptContent
    script_content = Field(type=str, required=False, mutable=False)


class UserShInterfaceGetPublicIdDataResponse(OCIResponse):
    """
    Response to the ``UserShInterfaceGetPublicIdDataRequest()``.

    The response contains the Sh non-transparent data for the specified Public User
    Identity.  The data also includes a userId, userType, and endpointType.
    """

    _ELEMENTS = (
        E("user_id", "userId", str, is_required=True),
        E("user_type", "userType", str, is_required=True),
        E("endpoint_type", "endpointType", str, is_required=True),
        E("scscf_name", "SCSCFName", str),
        E("ims_user_state", "IMSUserState", str, is_required=True),
    )

    #: str: *Required* userId
    user_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* userType
    user_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* endpointType
    endpoint_type = Field(type=str, required=True, mutable=False)
    #: str: *Optional* SCSCFName
    scscf_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* IMSUserState
    ims_user_state = Field(type=str, required=True, mutable=False)


class UserSharedCallAppearanceGetEndpointResponse(OCIResponse):
    """
    Response to the ``UserSharedCallAppearanceGetEndpointRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("allow_origination", "allowOrigination", bool, is_required=True),
        E("allow_termination", "allowTermination", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowOrigination
    allow_origination = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTermination
    allow_termination = Field(type=bool, required=True, mutable=False)


class UserSharedCallAppearanceGetResponse14(OCIResponse):
    """
    Response to the ``UserSharedCallAppearanceGetRequest14()``.

    The endpointTable contains columns: "Device Level", "Device Name", "Device Type",
    "Line/Port", "SIP Contact". The "Device Level" column contains one of the
    AccessDeviceLevel enumerated constants.

    Replaced By: ``UserSharedCallAppearanceGetResponse14sp2()``
    """

    _ELEMENTS = (
        E(
            "alert_all_appearances_for_click_to_dial_calls",
            "alertAllAppearancesForClickToDialCalls", bool, is_required=True,
        ),
        E("max_appearances", "maxAppearances", int, is_required=True),
        E(
            "enable_multiple_call_arrangement", "enableMultipleCallArrangement", bool,
            is_required=True,
        ),
        E(
            "multiple_call_arrangement_is_active", "multipleCallArrangementIsActive",
            bool, is_required=True,
        ),
        E(
            "endpoint_table", "endpointTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_bridging_between_locations", "allowBridgingBetweenLocations", bool,
            is_required=True,
        ),
        E("bridge_warning_tone", "bridgeWarningTone", str, is_required=True),
    )

    #: bool: *Required* alertAllAppearancesForClickToDialCalls
    alert_all_appearances_for_click_to_dial_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxAppearances
    max_appearances = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableMultipleCallArrangement
    enable_multiple_call_arrangement = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* multipleCallArrangementIsActive
    multiple_call_arrangement_is_active = Field(type=bool, required=True, mutable=False)
    #: list: *Required* endpointTable  *Tabular*
    endpoint_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowBridgingBetweenLocations
    allow_bridging_between_locations = Field(type=bool, required=True, mutable=False)
    #: str: *Required* bridgeWarningTone
    bridge_warning_tone = Field(type=str, required=True, mutable=False)


class UserSharedCallAppearanceGetResponse14sp2(OCIResponse):
    """
    Response to the ``UserSharedCallAppearanceGetRequest14sp2()``.

    The endpointTable contains columns: "Device Level", "Device Name", "Device Type",
    "Line/Port", "SIP Contact". The "Device Level" column contains one of the
    AccessDeviceLevel enumerated constants.
    """

    _ELEMENTS = (
        E(
            "alert_all_appearances_for_click_to_dial_calls",
            "alertAllAppearancesForClickToDialCalls", bool, is_required=True,
        ),
        E("max_appearances", "maxAppearances", int, is_required=True),
        E("allow_sca_call_retrieve", "allowSCACallRetrieve", bool, is_required=True),
        E(
            "enable_multiple_call_arrangement", "enableMultipleCallArrangement", bool,
            is_required=True,
        ),
        E(
            "multiple_call_arrangement_is_active", "multipleCallArrangementIsActive",
            bool, is_required=True,
        ),
        E(
            "endpoint_table", "endpointTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_bridging_between_locations", "allowBridgingBetweenLocations", bool,
            is_required=True,
        ),
        E("bridge_warning_tone", "bridgeWarningTone", str, is_required=True),
    )

    #: bool: *Required* alertAllAppearancesForClickToDialCalls
    alert_all_appearances_for_click_to_dial_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxAppearances
    max_appearances = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowSCACallRetrieve
    allow_sca_call_retrieve = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMultipleCallArrangement
    enable_multiple_call_arrangement = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* multipleCallArrangementIsActive
    multiple_call_arrangement_is_active = Field(type=bool, required=True, mutable=False)
    #: list: *Required* endpointTable  *Tabular*
    endpoint_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowBridgingBetweenLocations
    allow_bridging_between_locations = Field(type=bool, required=True, mutable=False)
    #: str: *Required* bridgeWarningTone
    bridge_warning_tone = Field(type=str, required=True, mutable=False)


class UserSharedCallAppearanceGetResponse16sp2(OCIResponse):
    """
    Response to the ``UserSharedCallAppearanceGetRequest16sp2()``.

    The endpointTable contains columns: "Device Level", "Device Name", "Device Type",
    "Line/Port", "SIP Contact", "Port Number", "Device Support Visual Device Management".
    The "Device Level" column contains one of the AccessDeviceLevel enumerated constants.
    Port numbers are only used by devices with static line ordering.  The following
    elements are only used in AS data mode: enableCallParkNotification
    """

    _ELEMENTS = (
        E(
            "alert_all_appearances_for_click_to_dial_calls",
            "alertAllAppearancesForClickToDialCalls", bool, is_required=True,
        ),
        E(
            "alert_all_appearances_for_group_paging_calls",
            "alertAllAppearancesForGroupPagingCalls", bool, is_required=True,
        ),
        E("max_appearances", "maxAppearances", int, is_required=True),
        E("allow_sca_call_retrieve", "allowSCACallRetrieve", bool, is_required=True),
        E(
            "enable_multiple_call_arrangement", "enableMultipleCallArrangement", bool,
            is_required=True,
        ),
        E(
            "multiple_call_arrangement_is_active", "multipleCallArrangementIsActive",
            bool, is_required=True,
        ),
        E(
            "endpoint_table", "endpointTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_bridging_between_locations", "allowBridgingBetweenLocations", bool,
            is_required=True,
        ),
        E("bridge_warning_tone", "bridgeWarningTone", str, is_required=True),
        E(
            "enable_call_park_notification", "enableCallParkNotification", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* alertAllAppearancesForClickToDialCalls
    alert_all_appearances_for_click_to_dial_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* alertAllAppearancesForGroupPagingCalls
    alert_all_appearances_for_group_paging_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* maxAppearances
    max_appearances = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowSCACallRetrieve
    allow_sca_call_retrieve = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableMultipleCallArrangement
    enable_multiple_call_arrangement = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* multipleCallArrangementIsActive
    multiple_call_arrangement_is_active = Field(type=bool, required=True, mutable=False)
    #: list: *Required* endpointTable  *Tabular*
    endpoint_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowBridgingBetweenLocations
    allow_bridging_between_locations = Field(type=bool, required=True, mutable=False)
    #: str: *Required* bridgeWarningTone
    bridge_warning_tone = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableCallParkNotification
    enable_call_park_notification = Field(type=bool, required=True, mutable=False)


class UserSimultaneousRingFamilyGetPhoneNumberResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingFamilyGetPhoneNumberRequest()``.

    """

    _ELEMENTS = (
        E(
            "answer_confirmation_required", "answerConfirmationRequired", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* answerConfirmationRequired
    answer_confirmation_required = Field(type=bool, required=True, mutable=False)


class UserSimultaneousRingFamilyGetResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingFamilyGetRequest()``.

    Replaced By: ``UserSimultaneousRingFamilyGetResponse14sp4()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("incoming_calls", "incomingCalls", str, is_required=True),
        E("sim_ring_phone_number", "simRingPhoneNumber", str, is_array=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* incomingCalls
    incoming_calls = Field(type=str, required=True, mutable=False)
    #: list(str): *Optional* simRingPhoneNumber  *Array*
    sim_ring_phone_number = Field(type=list, required=False, mutable=False)


class UserSimultaneousRingFamilyGetResponse14sp4(OCIResponse):
    """
    Response to the ``UserSimultaneousRingFamilyGetRequest14sp4()``.

    Contains a table with column headings: "Phone Number", "Answer Confirmation Required".
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("incoming_calls", "incomingCalls", str, is_required=True),
        E(
            "phone_number_table", "phoneNumberTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* incomingCalls
    incoming_calls = Field(type=str, required=True, mutable=False)
    #: list: *Required* phoneNumberTable  *Tabular*
    phone_number_table = Field(type=list, required=True, mutable=False)


class UserSimultaneousRingPersonalGetPhoneNumberResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingPersonalGetPhoneNumberRequest()``.

    """

    _ELEMENTS = (
        E(
            "answer_confirmation_required", "answerConfirmationRequired", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* answerConfirmationRequired
    answer_confirmation_required = Field(type=bool, required=True, mutable=False)


class UserSimultaneousRingPersonalGetResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingPersonalGetRequest()``.

    Replaced By: ``UserSimultaneousRingPersonalGetResponse14sp4()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("incoming_calls", "incomingCalls", str, is_required=True),
        E("sim_ring_phone_number", "simRingPhoneNumber", str, is_array=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* incomingCalls
    incoming_calls = Field(type=str, required=True, mutable=False)
    #: list(str): *Optional* simRingPhoneNumber  *Array*
    sim_ring_phone_number = Field(type=list, required=False, mutable=False)


class UserSimultaneousRingPersonalGetResponse14sp4(OCIResponse):
    """
    Response to the ``UserSimultaneousRingPersonalGetRequest14sp4()``.

    Contains a table with column headings: "Phone Number", "Answer Confirmation Required".
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("incoming_calls", "incomingCalls", str, is_required=True),
        E(
            "phone_number_table", "phoneNumberTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* incomingCalls
    incoming_calls = Field(type=str, required=True, mutable=False)
    #: list: *Required* phoneNumberTable  *Tabular*
    phone_number_table = Field(type=list, required=True, mutable=False)


class UserSingleSignOnCreateDeviceTokenResponse(OCIResponse):
    """
    Response to ``UserSingleSignOnCreateDeviceTokenRequest()``.

    """

    _ELEMENTS = (
        E("device_token", "deviceToken", str, is_required=True),
    )

    #: str: *Required* deviceToken
    device_token = Field(type=str, required=True, mutable=False)


class UserSpeedDial100GetResponse(OCIResponse):
    """
    Response to the ``UserSpeedDial100GetRequest()``.

    """

    _ELEMENTS = (
        E("phone_number", "phoneNumber", str, is_required=True),
        E("description", "description", str),
    )

    #: str: *Required* phoneNumber
    phone_number = Field(type=str, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)


class UserThirdPartyVoiceMailSupportGetResponse13mp16(OCIResponse):
    """
    Response to ``UserThirdPartyVoiceMailSupportGetRequest13mp16()``.

    Replaced by: ``UserThirdPartyVoiceMailSupportGetResponse17()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("busy_redirect_to_voice_mail", "busyRedirectToVoiceMail", bool, is_required=True),
        E(
            "no_answer_redirect_to_voice_mail", "noAnswerRedirectToVoiceMail", bool,
            is_required=True,
        ),
        E("server_selection", "serverSelection", str, is_required=True),
        E("user_server", "userServer", str),
        E("mailbox_id_type", "mailboxIdType", str, is_required=True),
        E("mailbox_url", "mailboxURL", str),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E(
            "always_redirect_to_voice_mail", "alwaysRedirectToVoiceMail", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* busyRedirectToVoiceMail
    busy_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* noAnswerRedirectToVoiceMail
    no_answer_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)
    #: str: *Required* serverSelection
    server_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* userServer
    user_server = Field(type=str, required=False, mutable=False)
    #: str: *Required* mailboxIdType
    mailbox_id_type = Field(type=str, required=True, mutable=False)
    #: str: *Optional* mailboxURL
    mailbox_url = Field(type=str, required=False, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* alwaysRedirectToVoiceMail
    always_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)


class UserThirdPartyVoiceMailSupportGetResponse17(OCIResponse):
    """
    Response to ``UserThirdPartyVoiceMailSupportGetRequest17()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("busy_redirect_to_voice_mail", "busyRedirectToVoiceMail", bool, is_required=True),
        E(
            "no_answer_redirect_to_voice_mail", "noAnswerRedirectToVoiceMail", bool,
            is_required=True,
        ),
        E("server_selection", "serverSelection", str, is_required=True),
        E("user_server", "userServer", str),
        E("mailbox_id_type", "mailboxIdType", str, is_required=True),
        E("mailbox_url", "mailboxURL", str),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E(
            "always_redirect_to_voice_mail", "alwaysRedirectToVoiceMail", bool,
            is_required=True,
        ),
        E(
            "out_of_primary_zone_redirect_to_voice_mail",
            "outOfPrimaryZoneRedirectToVoiceMail", bool, is_required=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* busyRedirectToVoiceMail
    busy_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* noAnswerRedirectToVoiceMail
    no_answer_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)
    #: str: *Required* serverSelection
    server_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* userServer
    user_server = Field(type=str, required=False, mutable=False)
    #: str: *Required* mailboxIdType
    mailbox_id_type = Field(type=str, required=True, mutable=False)
    #: str: *Optional* mailboxURL
    mailbox_url = Field(type=str, required=False, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* alwaysRedirectToVoiceMail
    always_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* outOfPrimaryZoneRedirectToVoiceMail
    out_of_primary_zone_redirect_to_voice_mail = Field(
        type=bool, required=True, mutable=False,
    )


class UserTimeScheduleGetListResponse(OCIResponse):
    """
    Response to the ``UserTimeScheduleGetListRequest()``.

    The column headings are "Time Schedule" and "Type".

    The response contains user's personal and user's group's schedule names.
    """

    _ELEMENTS = (
        E(
            "time_schedule_table", "timeScheduleTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: list: *Required* timeScheduleTable  *Tabular*
    time_schedule_table = Field(type=list, required=True, mutable=False)


class UserVoiceMessagingUserGetAdvancedVoiceManagementResponse(OCIResponse):
    """
    Response to the ``UserVoiceMessagingUserGetAdvancedVoiceManagementRequest()``.

    Replaced By: ``UserVoiceMessagingUserGetAdvancedVoiceManagementResponse14sp3()``
    """

    _ELEMENTS = (
        E("mail_server_selection", "mailServerSelection", str, is_required=True),
        E("group_mail_server_email_address", "groupMailServerEmailAddress", str),
        E("group_mail_server_user_id", "groupMailServerUserId", str),
        E("group_mail_server_password", "groupMailServerPassword", str),
        E(
            "use_group_default_mail_server_full_mailbox_limit",
            "useGroupDefaultMailServerFullMailboxLimit", bool,
        ),
        E("group_mail_server_full_mailbox_limit", "groupMailServerFullMailboxLimit", int),
        E("personal_mail_server_net_address", "personalMailServerNetAddress", str),
        E(
            "personal_mail_server_protocol", "personalMailServerProtocol", str,
            is_required=True,
        ),
        E(
            "personal_mail_server_real_delete_for_imap",
            "personalMailServerRealDeleteForImap", bool, is_required=True,
        ),
        E("personal_mail_server_email_address", "personalMailServerEmailAddress", str),
        E("personal_mail_server_user_id", "personalMailServerUserId", str),
        E("personal_mail_server_password", "personalMailServerPassword", str),
    )

    #: str: *Required* mailServerSelection
    mail_server_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* groupMailServerEmailAddress
    group_mail_server_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* groupMailServerUserId
    group_mail_server_user_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* groupMailServerPassword
    group_mail_server_password = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* useGroupDefaultMailServerFullMailboxLimit
    use_group_default_mail_server_full_mailbox_limit = Field(
        type=bool, required=False, mutable=False,
    )
    #: int: *Optional* groupMailServerFullMailboxLimit
    group_mail_server_full_mailbox_limit = Field(type=int, required=False, mutable=False)
    #: str: *Optional* personalMailServerNetAddress
    personal_mail_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* personalMailServerProtocol
    personal_mail_server_protocol = Field(type=str, required=True, mutable=False)
    #: bool: *Required* personalMailServerRealDeleteForImap
    personal_mail_server_real_delete_for_imap = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* personalMailServerEmailAddress
    personal_mail_server_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* personalMailServerUserId
    personal_mail_server_user_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* personalMailServerPassword
    personal_mail_server_password = Field(type=str, required=False, mutable=False)


class UserVoiceMessagingUserGetAdvancedVoiceManagementResponse14sp3(OCIResponse):
    """
    Response to the ``UserVoiceMessagingUserGetAdvancedVoiceManagementRequest14sp3()``.

    """

    _ELEMENTS = (
        E("mail_server_selection", "mailServerSelection", str, is_required=True),
        E("group_mail_server_email_address", "groupMailServerEmailAddress", str),
        E("group_mail_server_user_id", "groupMailServerUserId", str),
        E(
            "use_group_default_mail_server_full_mailbox_limit",
            "useGroupDefaultMailServerFullMailboxLimit", bool,
        ),
        E("group_mail_server_full_mailbox_limit", "groupMailServerFullMailboxLimit", int),
        E("personal_mail_server_net_address", "personalMailServerNetAddress", str),
        E(
            "personal_mail_server_protocol", "personalMailServerProtocol", str,
            is_required=True,
        ),
        E(
            "personal_mail_server_real_delete_for_imap",
            "personalMailServerRealDeleteForImap", bool, is_required=True,
        ),
        E("personal_mail_server_email_address", "personalMailServerEmailAddress", str),
        E("personal_mail_server_user_id", "personalMailServerUserId", str),
    )

    #: str: *Required* mailServerSelection
    mail_server_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* groupMailServerEmailAddress
    group_mail_server_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* groupMailServerUserId
    group_mail_server_user_id = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* useGroupDefaultMailServerFullMailboxLimit
    use_group_default_mail_server_full_mailbox_limit = Field(
        type=bool, required=False, mutable=False,
    )
    #: int: *Optional* groupMailServerFullMailboxLimit
    group_mail_server_full_mailbox_limit = Field(type=int, required=False, mutable=False)
    #: str: *Optional* personalMailServerNetAddress
    personal_mail_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Required* personalMailServerProtocol
    personal_mail_server_protocol = Field(type=str, required=True, mutable=False)
    #: bool: *Required* personalMailServerRealDeleteForImap
    personal_mail_server_real_delete_for_imap = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* personalMailServerEmailAddress
    personal_mail_server_email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* personalMailServerUserId
    personal_mail_server_user_id = Field(type=str, required=False, mutable=False)


class UserVoiceMessagingUserGetAliasListResponse(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetAliasListRequest()``.

    """

    _ELEMENTS = (
        E("phone_number", "phoneNumber", str, is_array=True),
    )

    #: list(str): *Optional* phoneNumber  *Array*
    phone_number = Field(type=list, required=False, mutable=False)


class UserVoiceMessagingUserGetDistributionListResponse(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetDistributionListRequest()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E("phone_number", "phoneNumber", str, is_array=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: list(str): *Optional* phoneNumber  *Array*
    phone_number = Field(type=list, required=False, mutable=False)


class UserVoiceMessagingUserGetOutgoingSMDIMWIResponse(OCIResponse):
    """
    Response to the ``UserVoiceMessagingUserGetOutgoingSMDIMWIRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("outgoing_smdimwi_phone_number", "outgoingSMDIMWIPhoneNumber", str, is_array=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: list(str): *Optional* outgoingSMDIMWIPhoneNumber  *Array*
    outgoing_smdimwi_phone_number = Field(type=list, required=False, mutable=False)


class UserVoiceMessagingUserGetVoiceManagementResponse13mp8(OCIResponse):
    """
    Response to the ``UserVoiceMessagingUserGetVoiceManagementRequest13mp8()``.

    Replaced by: ``UserVoiceMessagingUserGetVoiceManagementResponse17()``
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("processing", "processing", str, is_required=True),
        E("voice_message_delivery_email_address", "voiceMessageDeliveryEmailAddress", str),
        E(
            "use_phone_message_waiting_indicator", "usePhoneMessageWaitingIndicator",
            bool, is_required=True,
        ),
        E(
            "send_voice_message_notify_email", "sendVoiceMessageNotifyEmail", bool,
            is_required=True,
        ),
        E("voice_message_notify_email_address", "voiceMessageNotifyEmailAddress", str),
        E(
            "send_carbon_copy_voice_message", "sendCarbonCopyVoiceMessage", bool,
            is_required=True,
        ),
        E(
            "voice_message_carbon_copy_email_address",
            "voiceMessageCarbonCopyEmailAddress", str,
        ),
        E(
            "transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "always_redirect_to_voice_mail", "alwaysRedirectToVoiceMail", bool,
            is_required=True,
        ),
        E("busy_redirect_to_voice_mail", "busyRedirectToVoiceMail", bool, is_required=True),
        E(
            "no_answer_redirect_to_voice_mail", "noAnswerRedirectToVoiceMail", bool,
            is_required=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* processing
    processing = Field(type=str, required=True, mutable=False)
    #: str: *Optional* voiceMessageDeliveryEmailAddress
    voice_message_delivery_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* usePhoneMessageWaitingIndicator
    use_phone_message_waiting_indicator = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* sendVoiceMessageNotifyEmail
    send_voice_message_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* voiceMessageNotifyEmailAddress
    voice_message_notify_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* sendCarbonCopyVoiceMessage
    send_carbon_copy_voice_message = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* voiceMessageCarbonCopyEmailAddress
    voice_message_carbon_copy_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* transferOnZeroToPhoneNumber
    transfer_on_zero_to_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* alwaysRedirectToVoiceMail
    always_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* busyRedirectToVoiceMail
    busy_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* noAnswerRedirectToVoiceMail
    no_answer_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)


class UserVoiceMessagingUserGetVoiceManagementResponse17(OCIResponse):
    """
    Response to the ``UserVoiceMessagingUserGetVoiceManagementRequest17()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("processing", "processing", str, is_required=True),
        E("voice_message_delivery_email_address", "voiceMessageDeliveryEmailAddress", str),
        E(
            "use_phone_message_waiting_indicator", "usePhoneMessageWaitingIndicator",
            bool, is_required=True,
        ),
        E(
            "send_voice_message_notify_email", "sendVoiceMessageNotifyEmail", bool,
            is_required=True,
        ),
        E("voice_message_notify_email_address", "voiceMessageNotifyEmailAddress", str),
        E(
            "send_carbon_copy_voice_message", "sendCarbonCopyVoiceMessage", bool,
            is_required=True,
        ),
        E(
            "voice_message_carbon_copy_email_address",
            "voiceMessageCarbonCopyEmailAddress", str,
        ),
        E(
            "transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "always_redirect_to_voice_mail", "alwaysRedirectToVoiceMail", bool,
            is_required=True,
        ),
        E("busy_redirect_to_voice_mail", "busyRedirectToVoiceMail", bool, is_required=True),
        E(
            "no_answer_redirect_to_voice_mail", "noAnswerRedirectToVoiceMail", bool,
            is_required=True,
        ),
        E(
            "out_of_primary_zone_redirect_to_voice_mail",
            "outOfPrimaryZoneRedirectToVoiceMail", bool, is_required=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* processing
    processing = Field(type=str, required=True, mutable=False)
    #: str: *Optional* voiceMessageDeliveryEmailAddress
    voice_message_delivery_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* usePhoneMessageWaitingIndicator
    use_phone_message_waiting_indicator = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* sendVoiceMessageNotifyEmail
    send_voice_message_notify_email = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* voiceMessageNotifyEmailAddress
    voice_message_notify_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* sendCarbonCopyVoiceMessage
    send_carbon_copy_voice_message = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* voiceMessageCarbonCopyEmailAddress
    voice_message_carbon_copy_email_address = Field(type=str, required=False, mutable=False)
    #: bool: *Required* transferOnZeroToPhoneNumber
    transfer_on_zero_to_phone_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* alwaysRedirectToVoiceMail
    always_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* busyRedirectToVoiceMail
    busy_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* noAnswerRedirectToVoiceMail
    no_answer_redirect_to_voice_mail = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* outOfPrimaryZoneRedirectToVoiceMail
    out_of_primary_zone_redirect_to_voice_mail = Field(
        type=bool, required=True, mutable=False,
    )


class UserVoiceMessagingUserGetVoicePortalPasswordInfoResponse(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetVoicePortalPasswordInfoRequest()``.

    Replaced By: ``UserPortalPasscodeGetInfoResponse()``
    """

    _ELEMENTS = (
        E("is_login_disabled", "isLoginDisabled", bool, is_required=True),
        E("expiration_days", "expirationDays", int),
        E("does_not_expire", "doesNotExpire", bool),
        E("password", "password", str, is_required=True),
    )

    #: bool: *Required* isLoginDisabled
    is_login_disabled = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* expirationDays
    expiration_days = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* doesNotExpire
    does_not_expire = Field(type=bool, required=False, mutable=False)
    #: str: *Required* password
    password = Field(type=str, required=True, mutable=False)


class UserVoiceMessagingUserGetVoicePortalResponse(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetVoicePortalRequest()``.

    Replaced By: ``UserVoiceMessagingUserGetVoicePortalResponse16()``
    """

    _ELEMENTS = (
        E("use_personalized_name", "usePersonalizedName", bool, is_required=True),
        E("voice_portal_auto_login", "voicePortalAutoLogin", bool, is_required=True),
        E(
            "personalized_name_audio_file_description",
            "personalizedNameAudioFileDescription", str,
        ),
    )

    #: bool: *Required* usePersonalizedName
    use_personalized_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* voicePortalAutoLogin
    voice_portal_auto_login = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* personalizedNameAudioFileDescription
    personalized_name_audio_file_description = Field(type=str, required=False, mutable=False)


class UserVoiceMessagingUserGetVoicePortalResponse16(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetVoicePortalRequest16()``.

    """

    _ELEMENTS = (
        E("use_personalized_name", "usePersonalizedName", bool, is_required=True),
        E("voice_portal_auto_login", "voicePortalAutoLogin", bool, is_required=True),
        E(
            "personalized_name_audio_file_description",
            "personalizedNameAudioFileDescription", str,
        ),
        E("personalized_name_media_type", "personalizedNameMediaType", str),
    )

    #: bool: *Required* usePersonalizedName
    use_personalized_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* voicePortalAutoLogin
    voice_portal_auto_login = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* personalizedNameAudioFileDescription
    personalized_name_audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* personalizedNameMediaType
    personalized_name_media_type = Field(type=str, required=False, mutable=False)


class UserVoicePortalCallingGetResponse(OCIResponse):
    """
    Response to ``UserVoicePortalCallingGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)


class UserZoneCallingRestrictionsGetResponse(OCIResponse):
    """
    Gets the home zone for a user Response to a
    ``UserZoneCallingRestrictionsGetRequest()``
    """

    _ELEMENTS = (
        E("home_zone_name", "homeZoneName", str),
    )

    #: str: *Optional* homeZoneName
    home_zone_name = Field(type=str, required=False, mutable=False)


class EnterpriseCommonPhoneListGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCommonPhoneListGetListRequest()``.

    The response contains the enterprise's common phone list.
    """

    _ELEMENTS = (
        E("entry", "entry", OCI.PhoneListEntry, is_complex=True, is_array=True),
    )

    #: list(OCI.PhoneListEntry): *Optional* entry  *Array*
    entry = Field(type=list, required=False, mutable=False)


class EnterpriseDepartmentGetAvailableParentListResponse(OCIResponse):
    """
    Response to ``EnterpriseDepartmentGetAvailableParentListRequest()``.

    The response includes two parallel arrays of department keys and department display
    names.
    """

    _ELEMENTS = (
        E(
            "department_key", "departmentKey", OCI.DepartmentKey, is_complex=True,
            is_array=True,
        ),
        E("full_path_name", "fullPathName", str, is_array=True),
    )

    #: list(OCI.DepartmentKey): *Optional* departmentKey  *Array*
    department_key = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* fullPathName  *Array*
    full_path_name = Field(type=list, required=False, mutable=False)


class EnterpriseDepartmentGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseDepartmentGetListRequest()``.

    The response includes two parallel arrays of department keys and department display
    names.
    """

    _ELEMENTS = (
        E(
            "department_key", "departmentKey", OCI.DepartmentKey, is_complex=True,
            is_array=True,
        ),
        E("full_path_name", "fullPathName", str, is_array=True),
    )

    #: list(OCI.DepartmentKey): *Optional* departmentKey  *Array*
    department_key = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* fullPathName  *Array*
    full_path_name = Field(type=list, required=False, mutable=False)


class EnterpriseEnhancedCallLogsGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseEnhancedCallLogsGetListRequest()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``EnterpriseEnhancedCallLogsGetListRequest()``, if a call
    log type was specified in the request.  - the total number of retrievable logs, if no
    call log type was specified in the request.  A list of ExtendedMixedCallLogsEntry will
    be returned if the call logs are stored on DBS. Otherwise, an error response will be
    returned.  The result is sorted by date/time of the call.  Replaced by
    ``EnterpriseEnhancedCallLogsGetListResponse17sp4()``. Originally deprecated in release
    20.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "extended_call_log", "extendedCallLog", OCI.ExtendedMixedCallLogsEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list(OCI.ExtendedMixedCallLogsEntry): *Optional* extendedCallLog  *Array*
    extended_call_log = Field(type=list, required=False, mutable=False)


class EnterpriseEnhancedCallLogsGetListResponse17sp4(OCIResponse):
    """
    Response to ``EnterpriseEnhancedCallLogsGetListRequest17sp4()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``EnterpriseEnhancedCallLogsGetListRequest17sp4()``, if a
    call log type was specified in the request.  - the total number of retrievable logs,
    if no call log type was specified in the request.  A list of
    ExtendedMixedCallLogsEntry17sp4 will be returned if the call logs are stored on DBS.
    Otherwise, an error response will be returned.  The result is sorted by date/time of
    the call.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "extended_call_log", "extendedCallLog", OCI.ExtendedMixedCallLogsEntry17sp4,
            is_complex=True, is_array=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list(OCI.ExtendedMixedCallLogsEntry17sp4): *Optional* extendedCallLog  *Array*
    extended_call_log = Field(type=list, required=False, mutable=False)


class EnterpriseEnhancedCallLogsGetListResponse20(OCIResponse):
    """
    Response to ``EnterpriseEnhancedCallLogsGetListRequest20()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``EnterpriseEnhancedCallLogsGetListRequest20()``, if a call
    log type was specified in the request.  - the total number of retrievable logs, if no
    call log type was specified in the request.  A list of ExtendedMixedCallLogsEntry20
    will be returned if the call logs are stored on DBS. Otherwise, an error response will
    be returned.  The result is sorted by date/time of the call.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "extended_call_log", "extendedCallLog", OCI.ExtendedMixedCallLogsEntry20,
            is_complex=True, is_array=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list(OCI.ExtendedMixedCallLogsEntry20): *Optional* extendedCallLog  *Array*
    extended_call_log = Field(type=list, required=False, mutable=False)


class EnterpriseEnhancedCallLogsGetListResponse21(OCIResponse):
    """
    Response to ``EnterpriseEnhancedCallLogsGetListRequest21()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``EnterpriseEnhancedCallLogsGetListRequest21()``, if a call
    log type was specified in the request.  - the total number of retrievable logs, if no
    call log type was specified in the request.  A list of ExtendedMixedCallLogsEntry21
    will be returned if the call logs are stored on DBS. Otherwise, an error response will
    be returned.  The result is sorted by date/time of the call.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "extended_call_log", "extendedCallLog", OCI.ExtendedMixedCallLogsEntry21,
            is_complex=True, is_array=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list(OCI.ExtendedMixedCallLogsEntry21): *Optional* extendedCallLog  *Array*
    extended_call_log = Field(type=list, required=False, mutable=False)


class EnterpriseEnterpriseTrunkGetAvailableTrunkGroupListResponse(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetAvailableTrunkGroupListRequest()``.

    """

    _ELEMENTS = (
        E(
            "trunk_group", "trunkGroup", OCI.EnterpriseTrunkTrunkGroupKey,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.EnterpriseTrunkTrunkGroupKey): *Optional* trunkGroup  *Array*
    trunk_group = Field(type=list, required=False, mutable=False)


class EnterpriseVoiceVPNGetDefaultResponse(OCIResponse):
    """
    Response to ``EnterpriseVoiceVPNGetDefaultResponse()``.

    """

    _ELEMENTS = (
        E("policy_selection", "policySelection", str, is_required=True),
        E(
            "digit_manipulation_operation", "digitManipulationOperation", str,
            is_required=True,
        ),
        E("route_group_id", "routeGroupId", str, is_array=True),
        E(
            "treatment", "treatment", OCI.EnterpriseVoiceVPNTreatmentEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: str: *Required* policySelection
    policy_selection = Field(type=str, required=True, mutable=False)
    #: str: *Required* digitManipulationOperation
    digit_manipulation_operation = Field(type=str, required=True, mutable=False)
    #: list(str): *Optional* routeGroupId  *Array*
    route_group_id = Field(type=list, required=False, mutable=False)
    #: list(OCI.EnterpriseVoiceVPNTreatmentEntry): *Optional* treatment  *Array*
    treatment = Field(type=list, required=False, mutable=False)


class EnterpriseVoiceVPNGetPolicyResponse(OCIResponse):
    """
    Response to ``EnterpriseVoiceVPNGetPolicyRequest()``.

    """

    _ELEMENTS = (
        E("min_extension_length", "minExtensionLength", int, is_required=True),
        E("max_extension_length", "maxExtensionLength", int, is_required=True),
        E("description", "description", str),
        E("route_group_id", "routeGroupId", str),
        E("policy_selection", "policySelection", str, is_required=True),
        E(
            "digit_manipulation", "digitManipulation",
            OCI.EnterpriseVoiceVPNDigitManipulation, is_complex=True,
        ),
        E("treatment_id", "treatmentId", str),
    )

    #: int: *Required* minExtensionLength
    min_extension_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* maxExtensionLength
    max_extension_length = Field(type=int, required=True, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* routeGroupId
    route_group_id = Field(type=str, required=False, mutable=False)
    #: str: *Required* policySelection
    policy_selection = Field(type=str, required=True, mutable=False)
    #: OCI.EnterpriseVoiceVPNDigitManipulation: *Optional* digitManipulation
    digit_manipulation = Field(
        type=OCI.EnterpriseVoiceVPNDigitManipulation, required=False, mutable=False,
    )
    #: str: *Optional* treatmentId
    treatment_id = Field(type=str, required=False, mutable=False)


class GroupAccessDeviceGetResponse14(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetRequest14()``.

    Replaced By: ``GroupAccessDeviceGetResponse14sp3()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("configuration_mode", "configurationMode", str),
        E("configuration_file_name", "configurationFileName", str),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Optional* protocol
    protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationMode
    configuration_mode = Field(type=str, required=False, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)


class GroupAccessDeviceGetResponse14sp3(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetRequest14sp3()``.

    Replaced By: ``GroupAccessDeviceGetResponse14sp6()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("configuration_mode", "configurationMode", str),
        E("configuration_file_name", "configurationFileName", str),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Optional* protocol
    protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationMode
    configuration_mode = Field(type=str, required=False, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )


class GroupAccessDeviceGetResponse14sp6(OCIResponse):
    """
    Response to: ``GroupAccessDeviceGetRequest14sp6()`` Replaced by:
    ``GroupAccessDeviceGetResponse16()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("configuration_mode", "configurationMode", str),
        E("configuration_file_name", "configurationFileName", str),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
        E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
        E("user_name", "userName", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Optional* protocol
    protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationMode
    configuration_mode = Field(type=str, required=False, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* useCustomUserNamePassword
    use_custom_user_name_password = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)


class GroupAccessDeviceGetResponse16(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetRequest16()``.

    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("configuration_mode", "configurationMode", str),
        E("configuration_file_name", "configurationFileName", str),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
        E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
        E("user_name", "userName", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Optional* protocol
    protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationMode
    configuration_mode = Field(type=str, required=False, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* useCustomUserNamePassword
    use_custom_user_name_password = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)


class GroupAccessDeviceGetResponse18sp1(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetRequest18sp1()``.

    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("configuration_mode", "configurationMode", str),
        E("configuration_file_name", "configurationFileName", str),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
        E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
        E("user_name", "userName", str),
        E("version", "version", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Optional* protocol
    protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* configurationMode
    configuration_mode = Field(type=str, required=False, mutable=False)
    #: str: *Optional* configurationFileName
    configuration_file_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* useCustomUserNamePassword
    use_custom_user_name_password = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* version
    version = Field(type=str, required=False, mutable=False)


class GroupAccountAuthorizationCodesGetListResponse(OCIResponse):
    """
    Response to ``GroupAccountAuthorizationCodesGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "code_entry", "codeEntry", OCI.AccountAuthorizationCodeEntry, is_complex=True,
            is_array=True,
        ),
    )

    #: list(OCI.AccountAuthorizationCodeEntry): *Optional* codeEntry  *Array*
    code_entry = Field(type=list, required=False, mutable=False)


class GroupCallCenterComfortMessageBypassGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterComfortMessageBypassGetRequest17()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "call_waiting_age_threshold_seconds", "callWaitingAgeThresholdSeconds", int,
            is_required=True,
        ),
        E(
            "play_announcement_after_ringing", "playAnnouncementAfterRinging", bool,
            is_required=True,
        ),
        E(
            "ring_time_before_playing_announcement_seconds",
            "ringTimeBeforePlayingAnnouncementSeconds", int, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* callWaitingAgeThresholdSeconds
    call_waiting_age_threshold_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playAnnouncementAfterRinging
    play_announcement_after_ringing = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeBeforePlayingAnnouncementSeconds
    ring_time_before_playing_announcement_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupCallCenterForcedForwardingGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterForcedForwardingGetRequest17()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E("allow_enable_via_fac", "allowEnableViaFAC", bool, is_required=True),
        E(
            "play_announcement_before_forwarding", "playAnnouncementBeforeForwarding",
            bool, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowEnableViaFAC
    allow_enable_via_fac = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playAnnouncementBeforeForwarding
    play_announcement_before_forwarding = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupCallCenterGetAnnouncementResponse14sp6(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest14sp6()``.

    """

    _ELEMENTS = (
        E("entrance_message_selection", "entranceMessageSelection", str, is_required=True),
        E(
            "entrance_message_audio_file_description",
            "entranceMessageAudioFileDescription", str,
        ),
        E(
            "entrance_message_video_file_description",
            "entranceMessageVideoFileDescription", str,
        ),
        E(
            "periodic_comfort_message_selection", "periodicComfortMessageSelection", str,
            is_required=True,
        ),
        E(
            "periodic_comfort_message_audio_file_description",
            "periodicComfortMessageAudioFileDescription", str,
        ),
        E(
            "periodic_comfort_message_video_file_description",
            "periodicComfortMessageVideoFileDescription", str,
        ),
        E(
            "on_hold_source", "onHoldSource", OCI.CallCenterMusicOnHoldSourceRead,
            is_complex=True, is_required=True,
        ),
        E(
            "on_hold_use_alternate_source_for_internal_calls",
            "onHoldUseAlternateSourceForInternalCalls", bool, is_required=True,
        ),
        E(
            "on_hold_internal_source", "onHoldInternalSource",
            OCI.CallCenterMusicOnHoldSourceRead, is_complex=True,
        ),
    )

    #: str: *Required* entranceMessageSelection
    entrance_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* entranceMessageAudioFileDescription
    entrance_message_audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* entranceMessageVideoFileDescription
    entrance_message_video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Required* periodicComfortMessageSelection
    periodic_comfort_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* periodicComfortMessageAudioFileDescription
    periodic_comfort_message_audio_file_description = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortMessageVideoFileDescription
    periodic_comfort_message_video_file_description = Field(
        type=str, required=False, mutable=False,
    )
    #: OCI.CallCenterMusicOnHoldSourceRead: *Required* onHoldSource
    on_hold_source = Field(
        type=OCI.CallCenterMusicOnHoldSourceRead, required=True, mutable=False,
    )
    #: bool: *Required* onHoldUseAlternateSourceForInternalCalls
    on_hold_use_alternate_source_for_internal_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: OCI.CallCenterMusicOnHoldSourceRead: *Optional* onHoldInternalSource
    on_hold_internal_source = Field(
        type=OCI.CallCenterMusicOnHoldSourceRead, required=False, mutable=False,
    )


class GroupCallCenterHolidayServiceGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterHolidayServiceGetRequest17()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("holiday_schedule", "holidaySchedule", str),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* holidaySchedule
    holiday_schedule = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupCallCenterHolidayServiceGetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupCallCenterHolidayServiceGetRequest17sp1()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupCallCenterNightServiceGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterNightServiceGetRequest17()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("business_hours", "businessHours", str),
        E("force_night_service", "forceNightService", bool, is_required=True),
        E(
            "allow_manual_override_via_fac", "allowManualOverrideViaFAC", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("manual_announcement_mode", "manualAnnouncementMode", str, is_required=True),
        E(
            "manual_audio_message_selection", "manualAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_audio_url_list", "manualAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_audio_file_list", "manualAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "manual_audio_media_type_list", "manualAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "manual_video_message_selection", "manualVideoMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_video_url_list", "manualVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_video_file_list", "manualVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "manual_video_media_type_list", "manualVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* businessHours
    business_hours = Field(type=str, required=False, mutable=False)
    #: bool: *Required* forceNightService
    force_night_service = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowManualOverrideViaFAC
    allow_manual_override_via_fac = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* manualAnnouncementMode
    manual_announcement_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* manualAudioMessageSelection
    manual_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualAudioUrlList
    manual_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* manualAudioFileList
    manual_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* manualAudioMediaTypeList
    manual_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* manualVideoMessageSelection
    manual_video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualVideoUrlList
    manual_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* manualVideoFileList
    manual_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* manualVideoMediaTypeList
    manual_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupCallCenterNightServiceGetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupCallCenterNightServiceGetRequest17sp1()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
        E("force_night_service", "forceNightService", bool, is_required=True),
        E(
            "allow_manual_override_via_fac", "allowManualOverrideViaFAC", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("manual_announcement_mode", "manualAnnouncementMode", str, is_required=True),
        E(
            "manual_audio_message_selection", "manualAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_audio_url_list", "manualAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_audio_file_list", "manualAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "manual_audio_media_type_list", "manualAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "manual_video_message_selection", "manualVideoMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_video_url_list", "manualVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_video_file_list", "manualVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "manual_video_media_type_list", "manualVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: OCI.TimeSchedule: *Optional* businessHours
    business_hours = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: bool: *Required* forceNightService
    force_night_service = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowManualOverrideViaFAC
    allow_manual_override_via_fac = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* manualAnnouncementMode
    manual_announcement_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* manualAudioMessageSelection
    manual_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualAudioUrlList
    manual_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* manualAudioFileList
    manual_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* manualAudioMediaTypeList
    manual_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* manualVideoMessageSelection
    manual_video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualVideoUrlList
    manual_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* manualVideoFileList
    manual_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* manualVideoMediaTypeList
    manual_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupCallCenterOverflowGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterOverflowGetRequest17()`` .

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("overflow_after_timeout", "overflowAfterTimeout", bool, is_required=True),
        E("timeout_seconds", "timeoutSeconds", int, is_required=True),
        E(
            "play_announcement_before_overflow_processing",
            "playAnnouncementBeforeOverflowProcessing", bool, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* overflowAfterTimeout
    overflow_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeoutSeconds
    timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playAnnouncementBeforeOverflowProcessing
    play_announcement_before_overflow_processing = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* videoMessageSelection
    video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupCallCenterQueueCallDispositionCodeSettingsGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterQueueCallDispositionCodeSettingsGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "enable_call_disposition_codes", "enableCallDispositionCodes", bool,
            is_required=True,
        ),
        E("include_organization_codes", "includeOrganizationCodes", bool, is_required=True),
        E(
            "force_use_of_call_disposition_codes", "forceUseOfCallDispositionCodes", bool,
            is_required=True,
        ),
        E(
            "default_call_disposition_code", "defaultCallDispositionCode",
            OCI.CallDispositionCodeWithLevel, is_complex=True,
        ),
    )

    #: bool: *Required* enableCallDispositionCodes
    enable_call_disposition_codes = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeOrganizationCodes
    include_organization_codes = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceUseOfCallDispositionCodes
    force_use_of_call_disposition_codes = Field(type=bool, required=True, mutable=False)
    #: OCI.CallDispositionCodeWithLevel: *Optional* defaultCallDispositionCode
    default_call_disposition_code = Field(
        type=OCI.CallDispositionCodeWithLevel, required=False, mutable=False,
    )


class GroupCallCenterStrandedCallGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterStrandedCallGetRequest17()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("audio_message_selection", "audioMessageSelection", str),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMessageSelection
    audio_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* videoMessageSelection
    video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupCallCenterStrandedCallUnavailableGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterStrandedCallUnavailableGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "condition_policy_on_number_of_agents_with_specified_unavailable_code",
            "conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode", bool,
            is_required=True,
        ),
        E(
            "number_of_agents_with_specified_unavailable_code",
            "numberOfAgentsWithSpecifiedUnavailableCode", int,
        ),
        E("agents_unavailable_code", "agentsUnavailableCode", str),
        E("action", "action", str, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("audio_message_selection", "audioMessageSelection", str),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: bool: *Required* conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode
    condition_policy_on_number_of_agents_with_specified_unavailable_code = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* numberOfAgentsWithSpecifiedUnavailableCode
    number_of_agents_with_specified_unavailable_code = Field(
        type=int, required=False, mutable=False,
    )
    #: str: *Optional* agentsUnavailableCode
    agents_unavailable_code = Field(type=str, required=False, mutable=False)
    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMessageSelection
    audio_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* videoMessageSelection
    video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupCommonPhoneListGetListResponse(OCIResponse):
    """
    Response to the ``GroupCommonPhoneListGetListRequest()``.

    The response contains the group's common phone list.
    """

    _ELEMENTS = (
        E("entry", "entry", OCI.PhoneListEntry, is_complex=True, is_array=True),
    )

    #: list(OCI.PhoneListEntry): *Optional* entry  *Array*
    entry = Field(type=list, required=False, mutable=False)


class GroupCommunicationBarringAuthorizationCodeGetListResponse(OCIResponse):
    """
    Response to ``GroupCommunicationBarringAuthorizationCodeGetListRequest()``.

    Contains a list of Communication Barring Authorization Codes assigned to the group.
    """

    _ELEMENTS = (
        E(
            "code", "code", OCI.CommunicationBarringAuthorizationCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.CommunicationBarringAuthorizationCodeEntry): *Optional* code  *Array*
    code = Field(type=list, required=False, mutable=False)


class GroupCustomRingbackGroupGetResponse20(OCIResponse):
    """
    Response to the ``GroupCustomRingbackGroupGetRequest20()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file", "audioFile", OCI.AnnouncementFileKey, is_complex=True),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file", "videoFile", OCI.AnnouncementFileKey, is_complex=True),
        E("video_file_url", "videoFileUrl", str),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileKey: *Optional* audioFile
    audio_file = Field(type=OCI.AnnouncementFileKey, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileKey: *Optional* videoFile
    video_file = Field(type=OCI.AnnouncementFileKey, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)


class GroupDepartmentAdminGetResponse(OCIResponse):
    """
    Response to the ``GroupDepartmentAdminGetRequest()``.

    The response contains the group department administrators profile information.
    """

    _ELEMENTS = (
        E(
            "department_key", "departmentKey", OCI.GroupDepartmentKey, is_complex=True,
            is_required=True,
        ),
        E("department_full_path", "departmentFullPath", str, is_required=True),
        E("first_name", "firstName", str),
        E("last_name", "lastName", str),
        E("language", "language", str, is_required=True),
    )

    #: OCI.GroupDepartmentKey: *Required* departmentKey
    department_key = Field(type=OCI.GroupDepartmentKey, required=True, mutable=False)
    #: str: *Required* departmentFullPath
    department_full_path = Field(type=str, required=True, mutable=False)
    #: str: *Optional* firstName
    first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* lastName
    last_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)


class GroupDepartmentGetAvailableParentListResponse(OCIResponse):
    """
    Response to ``GroupDepartmentGetAvailableParentListRequest()``.

    The response includes two parallel arrays of department keys and department display
    names.
    """

    _ELEMENTS = (
        E(
            "department_key", "departmentKey", OCI.DepartmentKey, is_complex=True,
            is_array=True,
        ),
        E("full_path_name", "fullPathName", str, is_array=True),
    )

    #: list(OCI.DepartmentKey): *Optional* departmentKey  *Array*
    department_key = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* fullPathName  *Array*
    full_path_name = Field(type=list, required=False, mutable=False)


class GroupDepartmentGetListResponse(OCIResponse):
    """
    Response to ``GroupDepartmentGetListRequest()``.

    The response includes two parallel arrays of department keys and department display
    names.  Replaced by: ``GroupDepartmentGetListResponse18()``
    """

    _ELEMENTS = (
        E(
            "department_key", "departmentKey", OCI.DepartmentKey, is_complex=True,
            is_array=True,
        ),
        E("full_path_name", "fullPathName", str, is_array=True),
    )

    #: list(OCI.DepartmentKey): *Optional* departmentKey  *Array*
    department_key = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* fullPathName  *Array*
    full_path_name = Field(type=list, required=False, mutable=False)


class GroupDepartmentGetResponse(OCIResponse):
    """
    Response to ``GroupDepartmentGetRequest()``.

    The following elements are only used in AS data mode: callingLineIdName
    caliingLineIdPhoneNumber
    """

    _ELEMENTS = (
        E("parent_department_key", "parentDepartmentKey", OCI.DepartmentKey, is_complex=True),
        E("calling_line_id_name", "callingLineIdName", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
    )

    #: OCI.DepartmentKey: *Optional* parentDepartmentKey
    parent_department_key = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* callingLineIdName
    calling_line_id_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)


class GroupEmergencyZonesGetHomeZoneListResponse(OCIResponse):
    """
    Response to ``GroupEmergencyZonesGetHomeZoneListRequest()``.

    """

    _ELEMENTS = (
        E("home_zone_ip_address", "homeZoneIpAddress", str, is_array=True),
        E(
            "home_zone_ip_address_range", "homeZoneIpAddressRange", OCI.IPAddressRange,
            is_complex=True, is_array=True,
        ),
    )

    #: list(str): *Optional* homeZoneIpAddress  *Array*
    home_zone_ip_address = Field(type=list, required=False, mutable=False)
    #: list(OCI.IPAddressRange): *Optional* homeZoneIpAddressRange  *Array*
    home_zone_ip_address_range = Field(type=list, required=False, mutable=False)


class GroupEnhancedCallLogsGetListResponse(OCIResponse):
    """
    Response to ``GroupEnhancedCallLogsGetListRequest()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``GroupEnhancedCallLogsGetListRequest()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of ExtendedMixedCallLogsEntry will be
    returned if the call logs are stored on DBS. Otherwise, an error response will be
    returned.  The logs are sorted by date/time of the call.  Replaced by
    ``GroupEnhancedCallLogsGetListResponse17sp4()``. Originally deprecated in release 20.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "extended_call_log", "extendedCallLog", OCI.ExtendedMixedCallLogsEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list(OCI.ExtendedMixedCallLogsEntry): *Optional* extendedCallLog  *Array*
    extended_call_log = Field(type=list, required=False, mutable=False)


class GroupEnhancedCallLogsGetListResponse17sp4(OCIResponse):
    """
    Response to ``GroupEnhancedCallLogsGetListRequest17sp4()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``GroupEnhancedCallLogsGetListRequest17sp4()``, if a call
    log type was specified in the request.  - the total number of retrievable logs, if no
    call log type was specified in the request.  A list of ExtendedMixedCallLogsEntry17sp4
    will be returned if the call logs are stored on DBS. Otherwise, an error response will
    be returned.  The logs are sorted by date/time of the call.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "extended_call_log", "extendedCallLog", OCI.ExtendedMixedCallLogsEntry17sp4,
            is_complex=True, is_array=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list(OCI.ExtendedMixedCallLogsEntry17sp4): *Optional* extendedCallLog  *Array*
    extended_call_log = Field(type=list, required=False, mutable=False)


class GroupEnhancedCallLogsGetListResponse20(OCIResponse):
    """
    Response to ``GroupEnhancedCallLogsGetListRequest20()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``GroupEnhancedCallLogsGetListRequest20()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of ExtendedMixedCallLogsEntry20 will be
    returned if the call logs are stored on DBS. Otherwise, an error response will be
    returned.  The logs are sorted by date/time of the call.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "extended_call_log", "extendedCallLog", OCI.ExtendedMixedCallLogsEntry20,
            is_complex=True, is_array=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list(OCI.ExtendedMixedCallLogsEntry20): *Optional* extendedCallLog  *Array*
    extended_call_log = Field(type=list, required=False, mutable=False)


class GroupEnhancedCallLogsGetListResponse21(OCIResponse):
    """
    Response to ``GroupEnhancedCallLogsGetListRequest21()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``GroupEnhancedCallLogsGetListRequest21()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of ExtendedMixedCallLogsEntry21 will be
    returned if the call logs are stored on DBS. Otherwise, an error response will be
    returned.  The logs are sorted by date/time of the call.
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E(
            "extended_call_log", "extendedCallLog", OCI.ExtendedMixedCallLogsEntry21,
            is_complex=True, is_array=True,
        ),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list(OCI.ExtendedMixedCallLogsEntry21): *Optional* extendedCallLog  *Array*
    extended_call_log = Field(type=list, required=False, mutable=False)


class GroupFeatureAccessCodeGetListResponse(OCIResponse):
    """
    Response to the ``GroupFeatureAccessCodeGetListRequest()``.

    Replaced by: ``GroupFeatureAccessCodeGetResponse()``
    """

    _ELEMENTS = (
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.FeatureAccessCodeEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class GroupFeatureAccessCodeGetResponse(OCIResponse):
    """
    Response to the ``GroupFeatureAccessCodeGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "use_feature_access_code_level", "useFeatureAccessCodeLevel", str,
            is_required=True,
        ),
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: str: *Required* useFeatureAccessCodeLevel
    use_feature_access_code_level = Field(type=str, required=True, mutable=False)
    #: list(OCI.FeatureAccessCodeEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class GroupFeatureAccessCodeGetResponse20(OCIResponse):
    """
    Response to the ``GroupFeatureAccessCodeGetRequest20()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".
    Replaced by : ``GroupFeatureAccessCodeGetResponse21()``
    """

    _ELEMENTS = (
        E(
            "use_feature_access_code_level", "useFeatureAccessCodeLevel", str,
            is_required=True,
        ),
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: str: *Required* useFeatureAccessCodeLevel
    use_feature_access_code_level = Field(type=str, required=True, mutable=False)
    #: list(OCI.FeatureAccessCodeEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class GroupFeatureAccessCodeGetResponse21(OCIResponse):
    """
    Response to the ``GroupFeatureAccessCodeGetRequest21()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".
    """

    _ELEMENTS = (
        E(
            "use_feature_access_code_level", "useFeatureAccessCodeLevel", str,
            is_required=True,
        ),
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeReadEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: str: *Required* useFeatureAccessCodeLevel
    use_feature_access_code_level = Field(type=str, required=True, mutable=False)
    #: list(OCI.FeatureAccessCodeReadEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaResponse(OCIResponse):
    """
    Response to ``GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaRequest()``.

    Contains the alerting group selective criteria information.  Replaced by:
    ``GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaResponse21()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaResponse21(OCIResponse):
    """
    Response to ``GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaRequest21()``.

    Contains the alerting group selective criteria information.
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class GroupGetResponse(OCIResponse):
    """
    Response to the ``GroupGetRequest()``.

    The response contains the group's profile information.

    Replaced By: ``GroupGetResponse14sp7()``
    """

    _ELEMENTS = (
        E("default_domain", "defaultDomain", str, is_required=True),
        E("user_limit", "userLimit", int, is_required=True),
        E("user_count", "userCount", int, is_required=True),
        E("group_name", "groupName", str),
        E("calling_line_id_name", "callingLineIdName", str),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("location_dialing_code", "locationDialingCode", str),
        E("contact", "contact", OCI.Contact, is_complex=True),
        E("address", "address", OCI.StreetAddress, is_complex=True),
    )

    #: str: *Required* defaultDomain
    default_domain = Field(type=str, required=True, mutable=False)
    #: int: *Required* userLimit
    user_limit = Field(type=int, required=True, mutable=False)
    #: int: *Required* userCount
    user_count = Field(type=int, required=True, mutable=False)
    #: str: *Optional* groupName
    group_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdName
    calling_line_id_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* locationDialingCode
    location_dialing_code = Field(type=str, required=False, mutable=False)
    #: OCI.Contact: *Optional* contact
    contact = Field(type=OCI.Contact, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)


class GroupGetResponse14sp7(OCIResponse):
    """
    Response to the ``GroupGetRequest14sp7()``.

    The response contains the group's profile information.
    """

    _ELEMENTS = (
        E("default_domain", "defaultDomain", str, is_required=True),
        E("user_limit", "userLimit", int, is_required=True),
        E("user_count", "userCount", int, is_required=True),
        E("group_name", "groupName", str),
        E("calling_line_id_name", "callingLineIdName", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("calling_line_id_display_phone_number", "callingLineIdDisplayPhoneNumber", str),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("location_dialing_code", "locationDialingCode", str),
        E("contact", "contact", OCI.Contact, is_complex=True),
        E("address", "address", OCI.StreetAddress, is_complex=True),
    )

    #: str: *Required* defaultDomain
    default_domain = Field(type=str, required=True, mutable=False)
    #: int: *Required* userLimit
    user_limit = Field(type=int, required=True, mutable=False)
    #: int: *Required* userCount
    user_count = Field(type=int, required=True, mutable=False)
    #: str: *Optional* groupName
    group_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdName
    calling_line_id_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdDisplayPhoneNumber
    calling_line_id_display_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* locationDialingCode
    location_dialing_code = Field(type=str, required=False, mutable=False)
    #: OCI.Contact: *Optional* contact
    contact = Field(type=OCI.Contact, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)


class GroupGroupNightForwardingGetResponse(OCIResponse):
    """
    Response to ``GroupGroupNightForwardingGetRequest()``.

    """

    _ELEMENTS = (
        E("night_forwarding", "nightForwarding", str, is_required=True),
        E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
    )

    #: str: *Required* nightForwarding
    night_forwarding = Field(type=str, required=True, mutable=False)
    #: OCI.TimeSchedule: *Optional* businessHours
    business_hours = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)


class GroupHolidayScheduleGetResponse(OCIResponse):
    """
    Response to the ``GroupHolidayScheduleGetRequest()``.

    The response contains the group's holiday schedule information.
    """

    _ELEMENTS = (
        E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
        E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
        E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
        E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
        E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
        E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
        E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
        E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
        E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
        E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
        E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
        E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
        E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
        E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
        E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
        E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
        E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
        E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
        E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
        E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
        E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
    )

    #: str: *Required* holidayScheduleName
    holiday_schedule_name = Field(type=str, required=True, mutable=False)
    #: OCI.Holiday: *Optional* holiday01
    holiday01 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday02
    holiday02 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday03
    holiday03 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday04
    holiday04 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday05
    holiday05 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday06
    holiday06 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday07
    holiday07 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday08
    holiday08 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday09
    holiday09 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday10
    holiday10 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday11
    holiday11 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday12
    holiday12 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday13
    holiday13 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday14
    holiday14 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday15
    holiday15 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday16
    holiday16 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday17
    holiday17 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday18
    holiday18 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday19
    holiday19 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday20
    holiday20 = Field(type=OCI.Holiday, required=False, mutable=False)


class GroupMeetMeConferencingGetResponse(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "available_ports", "availablePorts", OCI.MeetMeConferencingConferencePorts,
            is_complex=True, is_required=True,
        ),
        E(
            "allocated_ports", "allocatedPorts", OCI.MeetMeConferencingConferencePorts,
            is_complex=True, is_required=True,
        ),
    )

    #: OCI.MeetMeConferencingConferencePorts: *Required* availablePorts
    available_ports = Field(
        type=OCI.MeetMeConferencingConferencePorts, required=True, mutable=False,
    )
    #: OCI.MeetMeConferencingConferencePorts: *Required* allocatedPorts
    allocated_ports = Field(
        type=OCI.MeetMeConferencingConferencePorts, required=True, mutable=False,
    )


class GroupMusicOnHoldGetDepartmentListResponse(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetDepartmentListRequest()``.

    """

    _ELEMENTS = (
        E("has_department", "hasDepartment", bool, is_required=True),
        E("department", "department", OCI.DepartmentKey, is_complex=True, is_array=True),
        E("department_full_path", "departmentFullPath", str, is_array=True),
    )

    #: bool: *Required* hasDepartment
    has_department = Field(type=bool, required=True, mutable=False)
    #: list(OCI.DepartmentKey): *Optional* department  *Array*
    department = Field(type=list, required=False, mutable=False)
    #: list(str): *Optional* departmentFullPath  *Array*
    department_full_path = Field(type=list, required=False, mutable=False)


class GroupMusicOnHoldGetInstanceResponse14sp6(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest14sp6()``.

    Replaced By: ``GroupMusicOnHoldGetInstanceResponse16()``
    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E("is_active_during_call_hold", "isActiveDuringCallHold", bool, is_required=True),
        E("is_active_during_call_park", "isActiveDuringCallPark", bool, is_required=True),
        E(
            "is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool,
            is_required=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("source", "source", OCI.MusicOnHoldSourceRead, is_complex=True, is_required=True),
        E(
            "use_alternate_source_for_internal_calls",
            "useAlternateSourceForInternalCalls", bool, is_required=True,
        ),
        E("internal_source", "internalSource", OCI.MusicOnHoldSourceRead, is_complex=True),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallHold
    is_active_during_call_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallPark
    is_active_during_call_park = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringBusyCampOn
    is_active_during_busy_camp_on = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldSourceRead: *Required* source
    source = Field(type=OCI.MusicOnHoldSourceRead, required=True, mutable=False)
    #: bool: *Required* useAlternateSourceForInternalCalls
    use_alternate_source_for_internal_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldSourceRead: *Optional* internalSource
    internal_source = Field(type=OCI.MusicOnHoldSourceRead, required=False, mutable=False)


class GroupMusicOnHoldGetInstanceResponse16(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest16()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E("is_active_during_call_hold", "isActiveDuringCallHold", bool, is_required=True),
        E("is_active_during_call_park", "isActiveDuringCallPark", bool, is_required=True),
        E(
            "is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool,
            is_required=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("source", "source", OCI.MusicOnHoldSourceRead16, is_complex=True, is_required=True),
        E(
            "use_alternate_source_for_internal_calls",
            "useAlternateSourceForInternalCalls", bool, is_required=True,
        ),
        E("internal_source", "internalSource", OCI.MusicOnHoldSourceRead16, is_complex=True),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallHold
    is_active_during_call_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallPark
    is_active_during_call_park = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringBusyCampOn
    is_active_during_busy_camp_on = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldSourceRead16: *Required* source
    source = Field(type=OCI.MusicOnHoldSourceRead16, required=True, mutable=False)
    #: bool: *Required* useAlternateSourceForInternalCalls
    use_alternate_source_for_internal_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldSourceRead16: *Optional* internalSource
    internal_source = Field(type=OCI.MusicOnHoldSourceRead16, required=False, mutable=False)


class GroupMusicOnHoldGetInstanceResponse19(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest19()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E("is_active_during_call_hold", "isActiveDuringCallHold", bool, is_required=True),
        E("is_active_during_call_park", "isActiveDuringCallPark", bool, is_required=True),
        E(
            "is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool,
            is_required=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("source", "source", OCI.MusicOnHoldSourceRead19, is_complex=True, is_required=True),
        E(
            "use_alternate_source_for_internal_calls",
            "useAlternateSourceForInternalCalls", bool, is_required=True,
        ),
        E(
            "internal_source", "internalSource", OCI.MusicOnHoldSourceRead19,
            is_complex=True, is_required=True,
        ),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallHold
    is_active_during_call_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallPark
    is_active_during_call_park = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringBusyCampOn
    is_active_during_busy_camp_on = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldSourceRead19: *Required* source
    source = Field(type=OCI.MusicOnHoldSourceRead19, required=True, mutable=False)
    #: bool: *Required* useAlternateSourceForInternalCalls
    use_alternate_source_for_internal_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldSourceRead19: *Required* internalSource
    internal_source = Field(type=OCI.MusicOnHoldSourceRead19, required=True, mutable=False)


class GroupMusicOnHoldGetInstanceResponse20(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest20()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E("is_active_during_call_hold", "isActiveDuringCallHold", bool, is_required=True),
        E("is_active_during_call_park", "isActiveDuringCallPark", bool, is_required=True),
        E(
            "is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool,
            is_required=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("source", "source", OCI.MusicOnHoldSourceRead20, is_complex=True, is_required=True),
        E(
            "use_alternate_source_for_internal_calls",
            "useAlternateSourceForInternalCalls", bool, is_required=True,
        ),
        E(
            "internal_source", "internalSource", OCI.MusicOnHoldSourceRead20,
            is_complex=True, is_required=True,
        ),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallHold
    is_active_during_call_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallPark
    is_active_during_call_park = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringBusyCampOn
    is_active_during_busy_camp_on = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldSourceRead20: *Required* source
    source = Field(type=OCI.MusicOnHoldSourceRead20, required=True, mutable=False)
    #: bool: *Required* useAlternateSourceForInternalCalls
    use_alternate_source_for_internal_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldSourceRead20: *Required* internalSource
    internal_source = Field(type=OCI.MusicOnHoldSourceRead20, required=True, mutable=False)


class GroupMusicOnHoldGetInstanceResponse21(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest21()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E("is_active_during_call_hold", "isActiveDuringCallHold", bool, is_required=True),
        E("is_active_during_call_park", "isActiveDuringCallPark", bool, is_required=True),
        E(
            "is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool,
            is_required=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("source", "source", OCI.MusicOnHoldSourceRead21, is_complex=True, is_required=True),
        E(
            "use_alternate_source_for_internal_calls",
            "useAlternateSourceForInternalCalls", bool, is_required=True,
        ),
        E(
            "internal_source", "internalSource", OCI.MusicOnHoldSourceRead21,
            is_complex=True, is_required=True,
        ),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallHold
    is_active_during_call_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallPark
    is_active_during_call_park = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringBusyCampOn
    is_active_during_busy_camp_on = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldSourceRead21: *Required* source
    source = Field(type=OCI.MusicOnHoldSourceRead21, required=True, mutable=False)
    #: bool: *Required* useAlternateSourceForInternalCalls
    use_alternate_source_for_internal_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldSourceRead21: *Required* internalSource
    internal_source = Field(type=OCI.MusicOnHoldSourceRead21, required=True, mutable=False)


class GroupOutgoingCallingPlanDepartmentAuthorizationCodeGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanDepartmentAuthorizationCodeGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "code_entry", "codeEntry", OCI.OutgoingCallingPlanAuthorizationCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.OutgoingCallingPlanAuthorizationCodeEntry): *Optional* codeEntry  *Array*
    code_entry = Field(type=list, required=False, mutable=False)


class GroupPreAlertingAnnouncementGetResponse20(OCIResponse):
    """
    Response to a ``GroupPreAlertingAnnouncementGetResponse20()``.

    """

    _ELEMENTS = (
        E("announcement_interruption", "announcementInterruption", str, is_required=True),
        E("interruption_digit_sequence", "interruptionDigitSequence", str),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file", "audioFile", OCI.AnnouncementFileKey, is_complex=True),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file", "videoFile", OCI.AnnouncementFileKey, is_complex=True),
        E("video_file_url", "videoFileUrl", str),
    )

    #: str: *Required* announcementInterruption
    announcement_interruption = Field(type=str, required=True, mutable=False)
    #: str: *Optional* interruptionDigitSequence
    interruption_digit_sequence = Field(type=str, required=False, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileKey: *Optional* audioFile
    audio_file = Field(type=OCI.AnnouncementFileKey, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileKey: *Optional* videoFile
    video_file = Field(type=OCI.AnnouncementFileKey, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)


class GroupPreferredCarrierGroupGetResponse(OCIResponse):
    """
    Response to a ``GroupPreferredCarrierGroupGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "intra_lata_carrier", "intraLataCarrier", OCI.GroupPreferredCarrierName,
            is_complex=True, is_required=True,
        ),
        E(
            "inter_lata_carrier", "interLataCarrier", OCI.GroupPreferredCarrierName,
            is_complex=True, is_required=True,
        ),
        E(
            "international_carrier", "internationalCarrier",
            OCI.GroupPreferredCarrierName, is_complex=True, is_required=True,
        ),
    )

    #: OCI.GroupPreferredCarrierName: *Required* intraLataCarrier
    intra_lata_carrier = Field(
        type=OCI.GroupPreferredCarrierName, required=True, mutable=False,
    )
    #: OCI.GroupPreferredCarrierName: *Required* interLataCarrier
    inter_lata_carrier = Field(
        type=OCI.GroupPreferredCarrierName, required=True, mutable=False,
    )
    #: OCI.GroupPreferredCarrierName: *Required* internationalCarrier
    international_carrier = Field(
        type=OCI.GroupPreferredCarrierName, required=True, mutable=False,
    )


class GroupRoutePointForcedForwardingGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointForcedForwardingGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "play_announcement_before_forwarding", "playAnnouncementBeforeForwarding",
            bool, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeForwarding
    play_announcement_before_forwarding = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupRoutePointHolidayServiceGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointHolidayServiceGetRequest()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("holiday_schedule", "holidaySchedule", str),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* holidaySchedule
    holiday_schedule = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupRoutePointHolidayServiceGetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupRoutePointHolidayServiceGetRequest17sp1()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupRoutePointNightServiceGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointNightServiceGetRequest()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("business_hours", "businessHours", str),
        E("force_night_service", "forceNightService", bool, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("manual_announcement_mode", "manualAnnouncementMode", str, is_required=True),
        E(
            "manual_audio_message_selection", "manualAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_audio_url_list", "manualAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_audio_file_list", "manualAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "manual_audio_media_type_list", "manualAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "manual_video_message_selection", "manualVideoMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_video_url_list", "manualVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_video_file_list", "manualVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "manual_video_media_type_list", "manualVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* businessHours
    business_hours = Field(type=str, required=False, mutable=False)
    #: bool: *Required* forceNightService
    force_night_service = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* manualAnnouncementMode
    manual_announcement_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* manualAudioMessageSelection
    manual_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualAudioUrlList
    manual_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* manualAudioFileList
    manual_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* manualAudioMediaTypeList
    manual_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* manualVideoMessageSelection
    manual_video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualVideoUrlList
    manual_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* manualVideoFileList
    manual_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* manualVideoMediaTypeList
    manual_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupRoutePointNightServiceGetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupRoutePointNightServiceGetRequest17sp1()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
        E("force_night_service", "forceNightService", bool, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("manual_announcement_mode", "manualAnnouncementMode", str, is_required=True),
        E(
            "manual_audio_message_selection", "manualAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_audio_url_list", "manualAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_audio_file_list", "manualAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "manual_audio_media_type_list", "manualAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "manual_video_message_selection", "manualVideoMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_video_url_list", "manualVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_video_file_list", "manualVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "manual_video_media_type_list", "manualVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: OCI.TimeSchedule: *Optional* businessHours
    business_hours = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: bool: *Required* forceNightService
    force_night_service = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* manualAnnouncementMode
    manual_announcement_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* manualAudioMessageSelection
    manual_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualAudioUrlList
    manual_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* manualAudioFileList
    manual_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* manualAudioMediaTypeList
    manual_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Required* manualVideoMessageSelection
    manual_video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualVideoUrlList
    manual_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* manualVideoFileList
    manual_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* manualVideoMediaTypeList
    manual_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupRoutePointOverflowGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointOverflowGetRequest()`` .

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("overflow_after_timeout", "overflowAfterTimeout", bool, is_required=True),
        E("timeout_seconds", "timeoutSeconds", int, is_required=True),
        E(
            "play_announcement_before_overflow_processing",
            "playAnnouncementBeforeOverflowProcessing", bool, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "audio_media_type_list", "audioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementDescriptionList,
            is_complex=True,
        ),
        E(
            "video_media_type_list", "videoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* overflowAfterTimeout
    overflow_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeoutSeconds
    timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playAnnouncementBeforeOverflowProcessing
    play_announcement_before_overflow_processing = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* audioMediaTypeList
    audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* videoMessageSelection
    video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional* videoMediaTypeList
    video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )


class GroupRoutePointQueueCallDispositionCodeSettingsGetResponse(OCIResponse):
    """
    Response to ``GroupRoutePointQueueCallDispositionCodeSettingsGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "enable_call_disposition_codes", "enableCallDispositionCodes", bool,
            is_required=True,
        ),
        E("include_organization_codes", "includeOrganizationCodes", bool, is_required=True),
        E(
            "force_use_of_call_disposition_codes", "forceUseOfCallDispositionCodes", bool,
            is_required=True,
        ),
        E(
            "default_call_disposition_code", "defaultCallDispositionCode",
            OCI.CallDispositionCodeWithLevel, is_complex=True,
        ),
    )

    #: bool: *Required* enableCallDispositionCodes
    enable_call_disposition_codes = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeOrganizationCodes
    include_organization_codes = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forceUseOfCallDispositionCodes
    force_use_of_call_disposition_codes = Field(type=bool, required=True, mutable=False)
    #: OCI.CallDispositionCodeWithLevel: *Optional* defaultCallDispositionCode
    default_call_disposition_code = Field(
        type=OCI.CallDispositionCodeWithLevel, required=False, mutable=False,
    )


class GroupScheduleGetEventResponse(OCIResponse):
    """
    Response to ``GroupScheduleGetEventRequest()``.

    The response contains the event of the group schedule.
    """

    _ELEMENTS = (
        E("start_date", "startDate", str, is_required=True),
        E("all_day_event", "allDayEvent", bool),
        E("start_time", "startTime", OCI.HourMinute, is_complex=True, is_required=True),
        E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
        E("end_date", "endDate", str, is_required=True),
        E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
    )

    #: str: *Required* startDate
    start_date = Field(type=str, required=True, mutable=False)
    #: bool: *Optional* allDayEvent
    all_day_event = Field(type=bool, required=False, mutable=False)
    #: OCI.HourMinute: *Required* startTime
    start_time = Field(type=OCI.HourMinute, required=True, mutable=False)
    #: OCI.HourMinute: *Required* endTime
    end_time = Field(type=OCI.HourMinute, required=True, mutable=False)
    #: str: *Required* endDate
    end_date = Field(type=str, required=True, mutable=False)
    #: OCI.Recurrence: *Optional* recurrence
    recurrence = Field(type=OCI.Recurrence, required=False, mutable=False)


class GroupSessionAdmissionControlGetAvailableDeviceListResponse(OCIResponse):
    """
    Response to ``GroupSessionAdmissionControlGetAvailableDeviceListRequest()``.

    Contains a table of devices can be assigned to session admission control group in the
    group.
    """

    _ELEMENTS = (
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True, is_array=True),
    )

    #: list(OCI.AccessDevice): *Optional* accessDevice  *Array*
    access_device = Field(type=list, required=False, mutable=False)


class GroupSessionAdmissionControlGroupGetResponse(OCIResponse):
    """
    Response to ``GroupSessionAdmissionControlGroupGetRequest()``.

    Returns the profile information for the session admission control group.
    """

    _ELEMENTS = (
        E("max_session", "maxSession", int, is_required=True),
        E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
        E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
        E("reserved_session", "reservedSession", int, is_required=True),
        E("reserved_user_originating_sessions", "reservedUserOriginatingSessions", int),
        E("reserved_user_terminating_sessions", "reservedUserTerminatingSessions", int),
        E("default_group", "defaultGroup", bool, is_required=True),
        E(
            "count_intra_sac_group_sessions", "countIntraSACGroupSessions", bool,
            is_required=True,
        ),
        E("devices", "devices", OCI.AccessDevice, is_complex=True, is_array=True),
    )

    #: int: *Required* maxSession
    max_session = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxUserOriginatingSessions
    max_user_originating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxUserTerminatingSessions
    max_user_terminating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Required* reservedSession
    reserved_session = Field(type=int, required=True, mutable=False)
    #: int: *Optional* reservedUserOriginatingSessions
    reserved_user_originating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* reservedUserTerminatingSessions
    reserved_user_terminating_sessions = Field(type=int, required=False, mutable=False)
    #: bool: *Required* defaultGroup
    default_group = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* countIntraSACGroupSessions
    count_intra_sac_group_sessions = Field(type=bool, required=True, mutable=False)
    #: list(OCI.AccessDevice): *Optional* devices  *Array*
    devices = Field(type=list, required=False, mutable=False)


class GroupSessionAdmissionControlGroupGetResponse19sp1(OCIResponse):
    """
    Response to ``GroupSessionAdmissionControlGroupGetRequest19sp1()``.

    Returns the profile information for the session admission control group.
    """

    _ELEMENTS = (
        E("max_session", "maxSession", int, is_required=True),
        E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
        E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
        E("reserved_session", "reservedSession", int, is_required=True),
        E("reserved_user_originating_sessions", "reservedUserOriginatingSessions", int),
        E("reserved_user_terminating_sessions", "reservedUserTerminatingSessions", int),
        E("default_group", "defaultGroup", bool, is_required=True),
        E(
            "count_intra_sac_group_sessions", "countIntraSACGroupSessions", bool,
            is_required=True,
        ),
        E("devices", "devices", OCI.AccessDevice, is_complex=True, is_array=True),
        E(
            "block_emergency_and_repair_calls_due_to_sac_limits",
            "blockEmergencyAndRepairCallsDueToSACLimits", bool, is_required=True,
        ),
    )

    #: int: *Required* maxSession
    max_session = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxUserOriginatingSessions
    max_user_originating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxUserTerminatingSessions
    max_user_terminating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Required* reservedSession
    reserved_session = Field(type=int, required=True, mutable=False)
    #: int: *Optional* reservedUserOriginatingSessions
    reserved_user_originating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* reservedUserTerminatingSessions
    reserved_user_terminating_sessions = Field(type=int, required=False, mutable=False)
    #: bool: *Required* defaultGroup
    default_group = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* countIntraSACGroupSessions
    count_intra_sac_group_sessions = Field(type=bool, required=True, mutable=False)
    #: list(OCI.AccessDevice): *Optional* devices  *Array*
    devices = Field(type=list, required=False, mutable=False)
    #: bool: *Required* blockEmergencyAndRepairCallsDueToSACLimits
    block_emergency_and_repair_calls_due_to_sac_limits = Field(
        type=bool, required=True, mutable=False,
    )


class GroupTimeScheduleGetResponse(OCIResponse):
    """
    Response to the ``GroupTimeScheduleGetRequest()``.

    The response contains the group's time schedule information.
    """

    _ELEMENTS = (
        E("time_schedule_name", "timeScheduleName", str, is_required=True),
        E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
        E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
        E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
        E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
        E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
        E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
        E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
        E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
        E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
        E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
        E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
        E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
        E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
        E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
        E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
        E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
        E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
        E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
        E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
        E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
    )

    #: str: *Required* timeScheduleName
    time_schedule_name = Field(type=str, required=True, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval01
    time_interval01 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval02
    time_interval02 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval03
    time_interval03 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval04
    time_interval04 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval05
    time_interval05 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval06
    time_interval06 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval07
    time_interval07 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval08
    time_interval08 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval09
    time_interval09 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval10
    time_interval10 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval11
    time_interval11 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval12
    time_interval12 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval13
    time_interval13 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval14
    time_interval14 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval15
    time_interval15 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval16
    time_interval16 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval17
    time_interval17 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval18
    time_interval18 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval19
    time_interval19 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval20
    time_interval20 = Field(type=OCI.TimeInterval, required=False, mutable=False)


class GroupTrunkGroupGetInstanceResponse14sp4(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest14sp4()``.

    Returns the profile information for the Trunk Group.
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E(
            "unreachable_destination_trap_initial_calls",
            "unreachableDestinationTrapInitialCalls", int, is_required=True,
        ),
        E(
            "unreachable_destination_trap_offset_calls",
            "unreachableDestinationTrapOffsetCalls", int, is_required=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* unreachableDestinationTrapInitialCalls
    unreachable_destination_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* unreachableDestinationTrapOffsetCalls
    unreachable_destination_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)


class GroupTrunkGroupGetInstanceResponse14sp5(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest14sp5()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E(
            "unreachable_destination_trap_initial_calls",
            "unreachableDestinationTrapInitialCalls", int, is_required=True,
        ),
        E(
            "unreachable_destination_trap_offset_calls",
            "unreachableDestinationTrapOffsetCalls", int, is_required=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* unreachableDestinationTrapInitialCalls
    unreachable_destination_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* unreachableDestinationTrapOffsetCalls
    unreachable_destination_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)


class GroupTrunkGroupGetInstanceResponse14sp9(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest14sp9()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E(
            "unreachable_destination_trap_initial_calls",
            "unreachableDestinationTrapInitialCalls", int, is_required=True,
        ),
        E(
            "unreachable_destination_trap_offset_calls",
            "unreachableDestinationTrapOffsetCalls", int, is_required=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
        E("trunk_group_identity", "trunkGroupIdentity", str),
        E("otg_dtg_identity", "otgDtgIdentity", str),
        E(
            "include_trunk_group_identity", "includeTrunkGroupIdentity", bool,
            is_required=True,
        ),
        E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
        E(
            "enable_network_address_identity", "enableNetworkAddressIdentity", bool,
            is_required=True,
        ),
        E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
        E(
            "allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool,
            is_required=True,
        ),
        E(
            "use_pilot_user_calling_line_identity", "usePilotUserCallingLineIdentity",
            bool, is_required=True,
        ),
        E("use_pilot_user_charge_number", "usePilotUserChargeNumber", bool, is_required=True),
        E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
        E(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress", str,
        ),
        E(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* unreachableDestinationTrapInitialCalls
    unreachable_destination_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* unreachableDestinationTrapOffsetCalls
    unreachable_destination_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)
    #: str: *Optional* trunkGroupIdentity
    trunk_group_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* otgDtgIdentity
    otg_dtg_identity = Field(type=str, required=False, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentity
    include_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeDtgIdentity
    include_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNetworkAddressIdentity
    enable_network_address_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedCalls
    allow_unscreened_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedEmergencyCalls
    allow_unscreened_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* usePilotUserCallingLineIdentity
    use_pilot_user_calling_line_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* usePilotUserChargeNumber
    use_pilot_user_charge_number = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* callForwardingAlwaysAction
    call_forwarding_always_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callForwardingAlwaysForwardAddress
    call_forwarding_always_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* callForwardingAlwaysRerouteTrunkGroupKey
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )


class GroupTrunkGroupGetInstanceResponse15(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest15()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)


class GroupTrunkGroupGetInstanceResponse15sp2(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest15sp2()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
        E("trunk_group_identity", "trunkGroupIdentity", str),
        E("otg_dtg_identity", "otgDtgIdentity", str),
        E(
            "include_trunk_group_identity", "includeTrunkGroupIdentity", bool,
            is_required=True,
        ),
        E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
        E(
            "enable_network_address_identity", "enableNetworkAddressIdentity", bool,
            is_required=True,
        ),
        E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
        E(
            "allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_policy",
            "pilotUserCallingLineIdentityPolicy", str, is_required=True,
        ),
        E(
            "pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str,
            is_required=True,
        ),
        E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
        E(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress", str,
        ),
        E(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)
    #: str: *Optional* trunkGroupIdentity
    trunk_group_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* otgDtgIdentity
    otg_dtg_identity = Field(type=str, required=False, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentity
    include_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeDtgIdentity
    include_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNetworkAddressIdentity
    enable_network_address_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedCalls
    allow_unscreened_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedEmergencyCalls
    allow_unscreened_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityPolicy
    pilot_user_calling_line_identity_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserChargeNumberPolicy
    pilot_user_charge_number_policy = Field(type=str, required=True, mutable=False)
    #: str: *Optional* callForwardingAlwaysAction
    call_forwarding_always_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callForwardingAlwaysForwardAddress
    call_forwarding_always_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* callForwardingAlwaysRerouteTrunkGroupKey
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )


class GroupTrunkGroupGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest17()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
        E("trunk_group_identity", "trunkGroupIdentity", str),
        E("otg_dtg_identity", "otgDtgIdentity", str),
        E(
            "include_trunk_group_identity", "includeTrunkGroupIdentity", bool,
            is_required=True,
        ),
        E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
        E(
            "enable_network_address_identity", "enableNetworkAddressIdentity", bool,
            is_required=True,
        ),
        E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
        E(
            "allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_policy",
            "pilotUserCallingLineIdentityPolicy", str, is_required=True,
        ),
        E(
            "pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str,
            is_required=True,
        ),
        E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
        E(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress", str,
        ),
        E(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E("peering_domain", "peeringDomain", str),
        E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)
    #: str: *Optional* trunkGroupIdentity
    trunk_group_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* otgDtgIdentity
    otg_dtg_identity = Field(type=str, required=False, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentity
    include_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeDtgIdentity
    include_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNetworkAddressIdentity
    enable_network_address_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedCalls
    allow_unscreened_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedEmergencyCalls
    allow_unscreened_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityPolicy
    pilot_user_calling_line_identity_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserChargeNumberPolicy
    pilot_user_charge_number_policy = Field(type=str, required=True, mutable=False)
    #: str: *Optional* callForwardingAlwaysAction
    call_forwarding_always_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callForwardingAlwaysForwardAddress
    call_forwarding_always_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* callForwardingAlwaysRerouteTrunkGroupKey
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: str: *Optional* peeringDomain
    peering_domain = Field(type=str, required=False, mutable=False)
    #: bool: *Required* routeToPeeringDomain
    route_to_peering_domain = Field(type=bool, required=True, mutable=False)


class GroupTrunkGroupGetInstanceResponse17sp3(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest17sp3()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
        E("trunk_group_identity", "trunkGroupIdentity", str),
        E("otg_dtg_identity", "otgDtgIdentity", str),
        E(
            "include_trunk_group_identity", "includeTrunkGroupIdentity", bool,
            is_required=True,
        ),
        E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
        E(
            "enable_network_address_identity", "enableNetworkAddressIdentity", bool,
            is_required=True,
        ),
        E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
        E(
            "allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_policy",
            "pilotUserCallingLineIdentityPolicy", str, is_required=True,
        ),
        E(
            "pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str,
            is_required=True,
        ),
        E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
        E(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress", str,
        ),
        E(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E("peering_domain", "peeringDomain", str),
        E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
        E("prefix_enabled", "prefixEnabled", bool, is_required=True),
        E("prefix", "prefix", str),
        E("stateful_rerouting_enabled", "statefulReroutingEnabled", bool, is_required=True),
        E(
            "send_continuous_options_message", "sendContinuousOptionsMessage", bool,
            is_required=True,
        ),
        E(
            "continuous_options_sending_interval_seconds",
            "continuousOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E(
            "failure_options_sending_interval_seconds",
            "failureOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E("failure_threshold_counter", "failureThresholdCounter", int, is_required=True),
        E("success_threshold_counter", "successThresholdCounter", int, is_required=True),
        E(
            "invite_failure_threshold_counter", "inviteFailureThresholdCounter", int,
            is_required=True,
        ),
        E(
            "invite_failure_threshold_window_seconds",
            "inviteFailureThresholdWindowSeconds", int, is_required=True,
        ),
        E("trunk_group_state", "trunkGroupState", str, is_required=True),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)
    #: str: *Optional* trunkGroupIdentity
    trunk_group_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* otgDtgIdentity
    otg_dtg_identity = Field(type=str, required=False, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentity
    include_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeDtgIdentity
    include_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNetworkAddressIdentity
    enable_network_address_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedCalls
    allow_unscreened_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedEmergencyCalls
    allow_unscreened_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityPolicy
    pilot_user_calling_line_identity_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserChargeNumberPolicy
    pilot_user_charge_number_policy = Field(type=str, required=True, mutable=False)
    #: str: *Optional* callForwardingAlwaysAction
    call_forwarding_always_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callForwardingAlwaysForwardAddress
    call_forwarding_always_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* callForwardingAlwaysRerouteTrunkGroupKey
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: str: *Optional* peeringDomain
    peering_domain = Field(type=str, required=False, mutable=False)
    #: bool: *Required* routeToPeeringDomain
    route_to_peering_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* prefixEnabled
    prefix_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* prefix
    prefix = Field(type=str, required=False, mutable=False)
    #: bool: *Required* statefulReroutingEnabled
    stateful_rerouting_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* sendContinuousOptionsMessage
    send_continuous_options_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* continuousOptionsSendingIntervalSeconds
    continuous_options_sending_interval_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: int: *Required* failureOptionsSendingIntervalSeconds
    failure_options_sending_interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* failureThresholdCounter
    failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* successThresholdCounter
    success_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdCounter
    invite_failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdWindowSeconds
    invite_failure_threshold_window_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* trunkGroupState
    trunk_group_state = Field(type=str, required=True, mutable=False)


class GroupTrunkGroupGetInstanceResponse17sp4(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest17sp4()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
        E("trunk_group_identity", "trunkGroupIdentity", str),
        E("otg_dtg_identity", "otgDtgIdentity", str),
        E(
            "allow_termination_to_trunk_group_identity",
            "allowTerminationToTrunkGroupIdentity", bool, is_required=True,
        ),
        E(
            "allow_termination_to_dtg_identity", "allowTerminationToDtgIdentity", bool,
            is_required=True,
        ),
        E(
            "include_trunk_group_identity", "includeTrunkGroupIdentity", bool,
            is_required=True,
        ),
        E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
        E(
            "include_trunk_group_identity_for_network_calls",
            "includeTrunkGroupIdentityForNetworkCalls", bool, is_required=True,
        ),
        E(
            "include_otg_identity_for_network_calls", "includeOtgIdentityForNetworkCalls",
            bool, is_required=True,
        ),
        E(
            "enable_network_address_identity", "enableNetworkAddressIdentity", bool,
            is_required=True,
        ),
        E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
        E(
            "allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_policy",
            "pilotUserCallingLineIdentityPolicy", str, is_required=True,
        ),
        E(
            "pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str,
            is_required=True,
        ),
        E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
        E(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress", str,
        ),
        E(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E("peering_domain", "peeringDomain", str),
        E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
        E("prefix_enabled", "prefixEnabled", bool, is_required=True),
        E("prefix", "prefix", str),
        E("stateful_rerouting_enabled", "statefulReroutingEnabled", bool, is_required=True),
        E(
            "send_continuous_options_message", "sendContinuousOptionsMessage", bool,
            is_required=True,
        ),
        E(
            "continuous_options_sending_interval_seconds",
            "continuousOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E(
            "failure_options_sending_interval_seconds",
            "failureOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E("failure_threshold_counter", "failureThresholdCounter", int, is_required=True),
        E("success_threshold_counter", "successThresholdCounter", int, is_required=True),
        E(
            "invite_failure_threshold_counter", "inviteFailureThresholdCounter", int,
            is_required=True,
        ),
        E(
            "invite_failure_threshold_window_seconds",
            "inviteFailureThresholdWindowSeconds", int, is_required=True,
        ),
        E("trunk_group_state", "trunkGroupState", str, is_required=True),
        E(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy", str, is_required=True,
        ),
        E(
            "use_system_calling_line_asserted_identity_policy",
            "useSystemCallingLineAssertedIdentityPolicy", bool, is_required=True,
        ),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)
    #: str: *Optional* trunkGroupIdentity
    trunk_group_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* otgDtgIdentity
    otg_dtg_identity = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowTerminationToTrunkGroupIdentity
    allow_termination_to_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTerminationToDtgIdentity
    allow_termination_to_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentity
    include_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeDtgIdentity
    include_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentityForNetworkCalls
    include_trunk_group_identity_for_network_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeOtgIdentityForNetworkCalls
    include_otg_identity_for_network_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNetworkAddressIdentity
    enable_network_address_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedCalls
    allow_unscreened_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedEmergencyCalls
    allow_unscreened_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityPolicy
    pilot_user_calling_line_identity_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserChargeNumberPolicy
    pilot_user_charge_number_policy = Field(type=str, required=True, mutable=False)
    #: str: *Optional* callForwardingAlwaysAction
    call_forwarding_always_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callForwardingAlwaysForwardAddress
    call_forwarding_always_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* callForwardingAlwaysRerouteTrunkGroupKey
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: str: *Optional* peeringDomain
    peering_domain = Field(type=str, required=False, mutable=False)
    #: bool: *Required* routeToPeeringDomain
    route_to_peering_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* prefixEnabled
    prefix_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* prefix
    prefix = Field(type=str, required=False, mutable=False)
    #: bool: *Required* statefulReroutingEnabled
    stateful_rerouting_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* sendContinuousOptionsMessage
    send_continuous_options_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* continuousOptionsSendingIntervalSeconds
    continuous_options_sending_interval_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: int: *Required* failureOptionsSendingIntervalSeconds
    failure_options_sending_interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* failureThresholdCounter
    failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* successThresholdCounter
    success_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdCounter
    invite_failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdWindowSeconds
    invite_failure_threshold_window_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* trunkGroupState
    trunk_group_state = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineAssertedIdentityPolicy
    pilot_user_calling_line_asserted_identity_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: bool: *Required* useSystemCallingLineAssertedIdentityPolicy
    use_system_calling_line_asserted_identity_policy = Field(
        type=bool, required=True, mutable=False,
    )


class GroupTrunkGroupGetInstanceResponse19(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest19()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    Replaced by ``GroupTrunkGroupGetInstanceResponse19sp1()``.
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
        E("trunk_group_identity", "trunkGroupIdentity", str),
        E("otg_dtg_identity", "otgDtgIdentity", str),
        E(
            "allow_termination_to_trunk_group_identity",
            "allowTerminationToTrunkGroupIdentity", bool, is_required=True,
        ),
        E(
            "allow_termination_to_dtg_identity", "allowTerminationToDtgIdentity", bool,
            is_required=True,
        ),
        E(
            "include_trunk_group_identity", "includeTrunkGroupIdentity", bool,
            is_required=True,
        ),
        E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
        E(
            "include_trunk_group_identity_for_network_calls",
            "includeTrunkGroupIdentityForNetworkCalls", bool, is_required=True,
        ),
        E(
            "include_otg_identity_for_network_calls", "includeOtgIdentityForNetworkCalls",
            bool, is_required=True,
        ),
        E(
            "enable_network_address_identity", "enableNetworkAddressIdentity", bool,
            is_required=True,
        ),
        E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
        E(
            "allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_policy",
            "pilotUserCallingLineIdentityPolicy", str, is_required=True,
        ),
        E(
            "pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str,
            is_required=True,
        ),
        E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
        E(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress", str,
        ),
        E(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E("peering_domain", "peeringDomain", str),
        E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
        E("prefix_enabled", "prefixEnabled", bool, is_required=True),
        E("prefix", "prefix", str),
        E("stateful_rerouting_enabled", "statefulReroutingEnabled", bool, is_required=True),
        E(
            "send_continuous_options_message", "sendContinuousOptionsMessage", bool,
            is_required=True,
        ),
        E(
            "continuous_options_sending_interval_seconds",
            "continuousOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E(
            "failure_options_sending_interval_seconds",
            "failureOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E("failure_threshold_counter", "failureThresholdCounter", int, is_required=True),
        E("success_threshold_counter", "successThresholdCounter", int, is_required=True),
        E(
            "invite_failure_threshold_counter", "inviteFailureThresholdCounter", int,
            is_required=True,
        ),
        E(
            "invite_failure_threshold_window_seconds",
            "inviteFailureThresholdWindowSeconds", int, is_required=True,
        ),
        E("trunk_group_state", "trunkGroupState", str, is_required=True),
        E(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy", str, is_required=True,
        ),
        E(
            "use_system_calling_line_asserted_identity_policy",
            "useSystemCallingLineAssertedIdentityPolicy", bool, is_required=True,
        ),
        E("total_active_incoming_calls", "totalActiveIncomingCalls", int, is_required=True),
        E("total_active_outgoing_calls", "totalActiveOutgoingCalls", int, is_required=True),
        E(
            "pilot_user_call_optimization_policy", "pilotUserCallOptimizationPolicy", str,
            is_required=True,
        ),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)
    #: str: *Optional* trunkGroupIdentity
    trunk_group_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* otgDtgIdentity
    otg_dtg_identity = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowTerminationToTrunkGroupIdentity
    allow_termination_to_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTerminationToDtgIdentity
    allow_termination_to_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentity
    include_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeDtgIdentity
    include_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentityForNetworkCalls
    include_trunk_group_identity_for_network_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeOtgIdentityForNetworkCalls
    include_otg_identity_for_network_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNetworkAddressIdentity
    enable_network_address_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedCalls
    allow_unscreened_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedEmergencyCalls
    allow_unscreened_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityPolicy
    pilot_user_calling_line_identity_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserChargeNumberPolicy
    pilot_user_charge_number_policy = Field(type=str, required=True, mutable=False)
    #: str: *Optional* callForwardingAlwaysAction
    call_forwarding_always_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callForwardingAlwaysForwardAddress
    call_forwarding_always_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* callForwardingAlwaysRerouteTrunkGroupKey
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: str: *Optional* peeringDomain
    peering_domain = Field(type=str, required=False, mutable=False)
    #: bool: *Required* routeToPeeringDomain
    route_to_peering_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* prefixEnabled
    prefix_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* prefix
    prefix = Field(type=str, required=False, mutable=False)
    #: bool: *Required* statefulReroutingEnabled
    stateful_rerouting_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* sendContinuousOptionsMessage
    send_continuous_options_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* continuousOptionsSendingIntervalSeconds
    continuous_options_sending_interval_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: int: *Required* failureOptionsSendingIntervalSeconds
    failure_options_sending_interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* failureThresholdCounter
    failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* successThresholdCounter
    success_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdCounter
    invite_failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdWindowSeconds
    invite_failure_threshold_window_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* trunkGroupState
    trunk_group_state = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineAssertedIdentityPolicy
    pilot_user_calling_line_asserted_identity_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: bool: *Required* useSystemCallingLineAssertedIdentityPolicy
    use_system_calling_line_asserted_identity_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* totalActiveIncomingCalls
    total_active_incoming_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* totalActiveOutgoingCalls
    total_active_outgoing_calls = Field(type=int, required=True, mutable=False)
    #: str: *Required* pilotUserCallOptimizationPolicy
    pilot_user_call_optimization_policy = Field(type=str, required=True, mutable=False)


class GroupTrunkGroupGetInstanceResponse19V2(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest19V2()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    Replaced by GroupTrunkGroupGetInstanceResponse19sp1V2.
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
        E("trunk_group_identity", "trunkGroupIdentity", str),
        E("otg_dtg_identity", "otgDtgIdentity", str),
        E(
            "allow_termination_to_trunk_group_identity",
            "allowTerminationToTrunkGroupIdentity", bool, is_required=True,
        ),
        E(
            "allow_termination_to_dtg_identity", "allowTerminationToDtgIdentity", bool,
            is_required=True,
        ),
        E(
            "include_trunk_group_identity", "includeTrunkGroupIdentity", bool,
            is_required=True,
        ),
        E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
        E(
            "include_trunk_group_identity_for_network_calls",
            "includeTrunkGroupIdentityForNetworkCalls", bool, is_required=True,
        ),
        E(
            "include_otg_identity_for_network_calls", "includeOtgIdentityForNetworkCalls",
            bool, is_required=True,
        ),
        E(
            "enable_network_address_identity", "enableNetworkAddressIdentity", bool,
            is_required=True,
        ),
        E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
        E(
            "allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_policy",
            "pilotUserCallingLineIdentityPolicy", str, is_required=True,
        ),
        E(
            "pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str,
            is_required=True,
        ),
        E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
        E(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress", str,
        ),
        E(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E("peering_domain", "peeringDomain", str),
        E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
        E("prefix_enabled", "prefixEnabled", bool, is_required=True),
        E("prefix", "prefix", str),
        E("stateful_rerouting_enabled", "statefulReroutingEnabled", bool, is_required=True),
        E(
            "send_continuous_options_message", "sendContinuousOptionsMessage", bool,
            is_required=True,
        ),
        E(
            "continuous_options_sending_interval_seconds",
            "continuousOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E(
            "failure_options_sending_interval_seconds",
            "failureOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E("failure_threshold_counter", "failureThresholdCounter", int, is_required=True),
        E("success_threshold_counter", "successThresholdCounter", int, is_required=True),
        E(
            "invite_failure_threshold_counter", "inviteFailureThresholdCounter", int,
            is_required=True,
        ),
        E(
            "invite_failure_threshold_window_seconds",
            "inviteFailureThresholdWindowSeconds", int, is_required=True,
        ),
        E("trunk_group_state", "trunkGroupState", str, is_required=True),
        E(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy", str, is_required=True,
        ),
        E(
            "use_system_calling_line_asserted_identity_policy",
            "useSystemCallingLineAssertedIdentityPolicy", bool, is_required=True,
        ),
        E("total_active_incoming_calls", "totalActiveIncomingCalls", int, is_required=True),
        E("total_active_outgoing_calls", "totalActiveOutgoingCalls", int, is_required=True),
        E(
            "pilot_user_call_optimization_policy", "pilotUserCallOptimizationPolicy", str,
            is_required=True,
        ),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)
    #: str: *Optional* trunkGroupIdentity
    trunk_group_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* otgDtgIdentity
    otg_dtg_identity = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowTerminationToTrunkGroupIdentity
    allow_termination_to_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTerminationToDtgIdentity
    allow_termination_to_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentity
    include_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeDtgIdentity
    include_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentityForNetworkCalls
    include_trunk_group_identity_for_network_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeOtgIdentityForNetworkCalls
    include_otg_identity_for_network_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNetworkAddressIdentity
    enable_network_address_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedCalls
    allow_unscreened_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedEmergencyCalls
    allow_unscreened_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityPolicy
    pilot_user_calling_line_identity_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserChargeNumberPolicy
    pilot_user_charge_number_policy = Field(type=str, required=True, mutable=False)
    #: str: *Optional* callForwardingAlwaysAction
    call_forwarding_always_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callForwardingAlwaysForwardAddress
    call_forwarding_always_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* callForwardingAlwaysRerouteTrunkGroupKey
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: str: *Optional* peeringDomain
    peering_domain = Field(type=str, required=False, mutable=False)
    #: bool: *Required* routeToPeeringDomain
    route_to_peering_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* prefixEnabled
    prefix_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* prefix
    prefix = Field(type=str, required=False, mutable=False)
    #: bool: *Required* statefulReroutingEnabled
    stateful_rerouting_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* sendContinuousOptionsMessage
    send_continuous_options_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* continuousOptionsSendingIntervalSeconds
    continuous_options_sending_interval_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: int: *Required* failureOptionsSendingIntervalSeconds
    failure_options_sending_interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* failureThresholdCounter
    failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* successThresholdCounter
    success_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdCounter
    invite_failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdWindowSeconds
    invite_failure_threshold_window_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* trunkGroupState
    trunk_group_state = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineAssertedIdentityPolicy
    pilot_user_calling_line_asserted_identity_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: bool: *Required* useSystemCallingLineAssertedIdentityPolicy
    use_system_calling_line_asserted_identity_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* totalActiveIncomingCalls
    total_active_incoming_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* totalActiveOutgoingCalls
    total_active_outgoing_calls = Field(type=int, required=True, mutable=False)
    #: str: *Required* pilotUserCallOptimizationPolicy
    pilot_user_call_optimization_policy = Field(type=str, required=True, mutable=False)


class GroupTrunkGroupGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest19sp1()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    Replaced by GroupTrunkGroupGetInstanceResponse19sp1V2.
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
        E("trunk_group_identity", "trunkGroupIdentity", str),
        E("otg_dtg_identity", "otgDtgIdentity", str),
        E(
            "allow_termination_to_trunk_group_identity",
            "allowTerminationToTrunkGroupIdentity", bool, is_required=True,
        ),
        E(
            "allow_termination_to_dtg_identity", "allowTerminationToDtgIdentity", bool,
            is_required=True,
        ),
        E(
            "include_trunk_group_identity", "includeTrunkGroupIdentity", bool,
            is_required=True,
        ),
        E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
        E(
            "include_trunk_group_identity_for_network_calls",
            "includeTrunkGroupIdentityForNetworkCalls", bool, is_required=True,
        ),
        E(
            "include_otg_identity_for_network_calls", "includeOtgIdentityForNetworkCalls",
            bool, is_required=True,
        ),
        E(
            "enable_network_address_identity", "enableNetworkAddressIdentity", bool,
            is_required=True,
        ),
        E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
        E(
            "allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_for_external_calls_policy",
            "pilotUserCallingLineIdentityForExternalCallsPolicy", str, is_required=True,
        ),
        E(
            "pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str,
            is_required=True,
        ),
        E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
        E(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress", str,
        ),
        E(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E("peering_domain", "peeringDomain", str),
        E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
        E("prefix_enabled", "prefixEnabled", bool, is_required=True),
        E("prefix", "prefix", str),
        E("stateful_rerouting_enabled", "statefulReroutingEnabled", bool, is_required=True),
        E(
            "send_continuous_options_message", "sendContinuousOptionsMessage", bool,
            is_required=True,
        ),
        E(
            "continuous_options_sending_interval_seconds",
            "continuousOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E(
            "failure_options_sending_interval_seconds",
            "failureOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E("failure_threshold_counter", "failureThresholdCounter", int, is_required=True),
        E("success_threshold_counter", "successThresholdCounter", int, is_required=True),
        E(
            "invite_failure_threshold_counter", "inviteFailureThresholdCounter", int,
            is_required=True,
        ),
        E(
            "invite_failure_threshold_window_seconds",
            "inviteFailureThresholdWindowSeconds", int, is_required=True,
        ),
        E("trunk_group_state", "trunkGroupState", str, is_required=True),
        E(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy", str, is_required=True,
        ),
        E(
            "use_system_calling_line_asserted_identity_policy",
            "useSystemCallingLineAssertedIdentityPolicy", bool, is_required=True,
        ),
        E("total_active_incoming_calls", "totalActiveIncomingCalls", int, is_required=True),
        E("total_active_outgoing_calls", "totalActiveOutgoingCalls", int, is_required=True),
        E(
            "pilot_user_call_optimization_policy", "pilotUserCallOptimizationPolicy", str,
            is_required=True,
        ),
        E(
            "clid_source_for_screened_calls_policy", "clidSourceForScreenedCallsPolicy",
            str, is_required=True,
        ),
        E(
            "use_system_clid_source_for_screened_calls_policy",
            "useSystemCLIDSourceForScreenedCallsPolicy", bool, is_required=True,
        ),
        E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
        E(
            "use_system_user_lookup_policy", "useSystemUserLookupPolicy", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_for_emergency_calls_policy",
            "pilotUserCallingLineIdentityForEmergencyCallsPolicy", str, is_required=True,
        ),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)
    #: str: *Optional* trunkGroupIdentity
    trunk_group_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* otgDtgIdentity
    otg_dtg_identity = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowTerminationToTrunkGroupIdentity
    allow_termination_to_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTerminationToDtgIdentity
    allow_termination_to_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentity
    include_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeDtgIdentity
    include_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentityForNetworkCalls
    include_trunk_group_identity_for_network_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeOtgIdentityForNetworkCalls
    include_otg_identity_for_network_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNetworkAddressIdentity
    enable_network_address_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedCalls
    allow_unscreened_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedEmergencyCalls
    allow_unscreened_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityForExternalCallsPolicy
    pilot_user_calling_line_identity_for_external_calls_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* pilotUserChargeNumberPolicy
    pilot_user_charge_number_policy = Field(type=str, required=True, mutable=False)
    #: str: *Optional* callForwardingAlwaysAction
    call_forwarding_always_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callForwardingAlwaysForwardAddress
    call_forwarding_always_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* callForwardingAlwaysRerouteTrunkGroupKey
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: str: *Optional* peeringDomain
    peering_domain = Field(type=str, required=False, mutable=False)
    #: bool: *Required* routeToPeeringDomain
    route_to_peering_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* prefixEnabled
    prefix_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* prefix
    prefix = Field(type=str, required=False, mutable=False)
    #: bool: *Required* statefulReroutingEnabled
    stateful_rerouting_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* sendContinuousOptionsMessage
    send_continuous_options_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* continuousOptionsSendingIntervalSeconds
    continuous_options_sending_interval_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: int: *Required* failureOptionsSendingIntervalSeconds
    failure_options_sending_interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* failureThresholdCounter
    failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* successThresholdCounter
    success_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdCounter
    invite_failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdWindowSeconds
    invite_failure_threshold_window_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* trunkGroupState
    trunk_group_state = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineAssertedIdentityPolicy
    pilot_user_calling_line_asserted_identity_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: bool: *Required* useSystemCallingLineAssertedIdentityPolicy
    use_system_calling_line_asserted_identity_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* totalActiveIncomingCalls
    total_active_incoming_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* totalActiveOutgoingCalls
    total_active_outgoing_calls = Field(type=int, required=True, mutable=False)
    #: str: *Required* pilotUserCallOptimizationPolicy
    pilot_user_call_optimization_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* clidSourceForScreenedCallsPolicy
    clid_source_for_screened_calls_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useSystemCLIDSourceForScreenedCallsPolicy
    use_system_clid_source_for_screened_calls_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* userLookupPolicy
    user_lookup_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useSystemUserLookupPolicy
    use_system_user_lookup_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityForEmergencyCallsPolicy
    pilot_user_calling_line_identity_for_emergency_calls_policy = Field(
        type=str, required=True, mutable=False,
    )


class GroupTrunkGroupGetInstanceResponse20sp1(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest20sp1()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    Replaced by: ``GroupTrunkGroupGetInstanceResponse21()``
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
        E("trunk_group_identity", "trunkGroupIdentity", str),
        E("otg_dtg_identity", "otgDtgIdentity", str),
        E(
            "allow_termination_to_trunk_group_identity",
            "allowTerminationToTrunkGroupIdentity", bool, is_required=True,
        ),
        E(
            "allow_termination_to_dtg_identity", "allowTerminationToDtgIdentity", bool,
            is_required=True,
        ),
        E(
            "include_trunk_group_identity", "includeTrunkGroupIdentity", bool,
            is_required=True,
        ),
        E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
        E(
            "include_trunk_group_identity_for_network_calls",
            "includeTrunkGroupIdentityForNetworkCalls", bool, is_required=True,
        ),
        E(
            "include_otg_identity_for_network_calls", "includeOtgIdentityForNetworkCalls",
            bool, is_required=True,
        ),
        E(
            "enable_network_address_identity", "enableNetworkAddressIdentity", bool,
            is_required=True,
        ),
        E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
        E(
            "allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_for_external_calls_policy",
            "pilotUserCallingLineIdentityForExternalCallsPolicy", str, is_required=True,
        ),
        E(
            "pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str,
            is_required=True,
        ),
        E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
        E(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress", str,
        ),
        E(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E("peering_domain", "peeringDomain", str),
        E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
        E("prefix_enabled", "prefixEnabled", bool, is_required=True),
        E("prefix", "prefix", str),
        E("stateful_rerouting_enabled", "statefulReroutingEnabled", bool, is_required=True),
        E(
            "send_continuous_options_message", "sendContinuousOptionsMessage", bool,
            is_required=True,
        ),
        E(
            "continuous_options_sending_interval_seconds",
            "continuousOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E(
            "failure_options_sending_interval_seconds",
            "failureOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E("failure_threshold_counter", "failureThresholdCounter", int, is_required=True),
        E("success_threshold_counter", "successThresholdCounter", int, is_required=True),
        E(
            "invite_failure_threshold_counter", "inviteFailureThresholdCounter", int,
            is_required=True,
        ),
        E(
            "invite_failure_threshold_window_seconds",
            "inviteFailureThresholdWindowSeconds", int, is_required=True,
        ),
        E("trunk_group_state", "trunkGroupState", str, is_required=True),
        E(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy", str, is_required=True,
        ),
        E(
            "use_system_calling_line_asserted_identity_policy",
            "useSystemCallingLineAssertedIdentityPolicy", bool, is_required=True,
        ),
        E("total_active_incoming_calls", "totalActiveIncomingCalls", int, is_required=True),
        E("total_active_outgoing_calls", "totalActiveOutgoingCalls", int, is_required=True),
        E(
            "pilot_user_call_optimization_policy", "pilotUserCallOptimizationPolicy", str,
            is_required=True,
        ),
        E(
            "clid_source_for_screened_calls_policy", "clidSourceForScreenedCallsPolicy",
            str, is_required=True,
        ),
        E(
            "use_system_clid_source_for_screened_calls_policy",
            "useSystemCLIDSourceForScreenedCallsPolicy", bool, is_required=True,
        ),
        E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
        E(
            "use_system_user_lookup_policy", "useSystemUserLookupPolicy", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_for_emergency_calls_policy",
            "pilotUserCallingLineIdentityForEmergencyCallsPolicy", str, is_required=True,
        ),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)
    #: str: *Optional* trunkGroupIdentity
    trunk_group_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* otgDtgIdentity
    otg_dtg_identity = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowTerminationToTrunkGroupIdentity
    allow_termination_to_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTerminationToDtgIdentity
    allow_termination_to_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentity
    include_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeDtgIdentity
    include_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentityForNetworkCalls
    include_trunk_group_identity_for_network_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeOtgIdentityForNetworkCalls
    include_otg_identity_for_network_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNetworkAddressIdentity
    enable_network_address_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedCalls
    allow_unscreened_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedEmergencyCalls
    allow_unscreened_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityForExternalCallsPolicy
    pilot_user_calling_line_identity_for_external_calls_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* pilotUserChargeNumberPolicy
    pilot_user_charge_number_policy = Field(type=str, required=True, mutable=False)
    #: str: *Optional* callForwardingAlwaysAction
    call_forwarding_always_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callForwardingAlwaysForwardAddress
    call_forwarding_always_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* callForwardingAlwaysRerouteTrunkGroupKey
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: str: *Optional* peeringDomain
    peering_domain = Field(type=str, required=False, mutable=False)
    #: bool: *Required* routeToPeeringDomain
    route_to_peering_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* prefixEnabled
    prefix_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* prefix
    prefix = Field(type=str, required=False, mutable=False)
    #: bool: *Required* statefulReroutingEnabled
    stateful_rerouting_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* sendContinuousOptionsMessage
    send_continuous_options_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* continuousOptionsSendingIntervalSeconds
    continuous_options_sending_interval_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: int: *Required* failureOptionsSendingIntervalSeconds
    failure_options_sending_interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* failureThresholdCounter
    failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* successThresholdCounter
    success_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdCounter
    invite_failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdWindowSeconds
    invite_failure_threshold_window_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* trunkGroupState
    trunk_group_state = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineAssertedIdentityPolicy
    pilot_user_calling_line_asserted_identity_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: bool: *Required* useSystemCallingLineAssertedIdentityPolicy
    use_system_calling_line_asserted_identity_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* totalActiveIncomingCalls
    total_active_incoming_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* totalActiveOutgoingCalls
    total_active_outgoing_calls = Field(type=int, required=True, mutable=False)
    #: str: *Required* pilotUserCallOptimizationPolicy
    pilot_user_call_optimization_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* clidSourceForScreenedCallsPolicy
    clid_source_for_screened_calls_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useSystemCLIDSourceForScreenedCallsPolicy
    use_system_clid_source_for_screened_calls_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* userLookupPolicy
    user_lookup_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useSystemUserLookupPolicy
    use_system_user_lookup_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityForEmergencyCallsPolicy
    pilot_user_calling_line_identity_for_emergency_calls_policy = Field(
        type=str, required=True, mutable=False,
    )


class GroupTrunkGroupGetInstanceResponse21(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest21()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    Following attributes are only used in IMS mode: implicitRegistrationSetSupportPolicy
    useSystemImplicitRegistrationSetSupportPolicy
    sipIdentityForPilotAndProxyTrunkModesPolicy
    useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy
    """

    _ELEMENTS = (
        E("pilot_user_id", "pilotUserId", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey", OCI.TrunkGroupKey,
            is_complex=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        E("hosted_user_table", "hostedUserTable", list, is_complex=True, is_table=True),
        E("trunk_group_identity", "trunkGroupIdentity", str),
        E("otg_dtg_identity", "otgDtgIdentity", str),
        E(
            "allow_termination_to_trunk_group_identity",
            "allowTerminationToTrunkGroupIdentity", bool, is_required=True,
        ),
        E(
            "allow_termination_to_dtg_identity", "allowTerminationToDtgIdentity", bool,
            is_required=True,
        ),
        E(
            "include_trunk_group_identity", "includeTrunkGroupIdentity", bool,
            is_required=True,
        ),
        E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
        E(
            "include_trunk_group_identity_for_network_calls",
            "includeTrunkGroupIdentityForNetworkCalls", bool, is_required=True,
        ),
        E(
            "include_otg_identity_for_network_calls", "includeOtgIdentityForNetworkCalls",
            bool, is_required=True,
        ),
        E(
            "enable_network_address_identity", "enableNetworkAddressIdentity", bool,
            is_required=True,
        ),
        E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
        E(
            "allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_for_external_calls_policy",
            "pilotUserCallingLineIdentityForExternalCallsPolicy", str, is_required=True,
        ),
        E(
            "pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str,
            is_required=True,
        ),
        E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
        E(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress", str,
        ),
        E(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey", OCI.TrunkGroupKey, is_complex=True,
        ),
        E("peering_domain", "peeringDomain", str),
        E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
        E("prefix_enabled", "prefixEnabled", bool, is_required=True),
        E("prefix", "prefix", str),
        E("stateful_rerouting_enabled", "statefulReroutingEnabled", bool, is_required=True),
        E(
            "send_continuous_options_message", "sendContinuousOptionsMessage", bool,
            is_required=True,
        ),
        E(
            "continuous_options_sending_interval_seconds",
            "continuousOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E(
            "failure_options_sending_interval_seconds",
            "failureOptionsSendingIntervalSeconds", int, is_required=True,
        ),
        E("failure_threshold_counter", "failureThresholdCounter", int, is_required=True),
        E("success_threshold_counter", "successThresholdCounter", int, is_required=True),
        E(
            "invite_failure_threshold_counter", "inviteFailureThresholdCounter", int,
            is_required=True,
        ),
        E(
            "invite_failure_threshold_window_seconds",
            "inviteFailureThresholdWindowSeconds", int, is_required=True,
        ),
        E("trunk_group_state", "trunkGroupState", str, is_required=True),
        E(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy", str, is_required=True,
        ),
        E(
            "use_system_calling_line_asserted_identity_policy",
            "useSystemCallingLineAssertedIdentityPolicy", bool, is_required=True,
        ),
        E("total_active_incoming_calls", "totalActiveIncomingCalls", int, is_required=True),
        E("total_active_outgoing_calls", "totalActiveOutgoingCalls", int, is_required=True),
        E(
            "pilot_user_call_optimization_policy", "pilotUserCallOptimizationPolicy", str,
            is_required=True,
        ),
        E(
            "clid_source_for_screened_calls_policy", "clidSourceForScreenedCallsPolicy",
            str, is_required=True,
        ),
        E(
            "use_system_clid_source_for_screened_calls_policy",
            "useSystemCLIDSourceForScreenedCallsPolicy", bool, is_required=True,
        ),
        E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
        E(
            "use_system_user_lookup_policy", "useSystemUserLookupPolicy", bool,
            is_required=True,
        ),
        E(
            "pilot_user_calling_line_identity_for_emergency_calls_policy",
            "pilotUserCallingLineIdentityForEmergencyCallsPolicy", str, is_required=True,
        ),
        E(
            "implicit_registration_set_support_policy",
            "implicitRegistrationSetSupportPolicy", str, is_required=True,
        ),
        E(
            "use_system_implicit_registration_set_support_policy",
            "useSystemImplicitRegistrationSetSupportPolicy", bool, is_required=True,
        ),
        E(
            "sip_identity_for_pilot_and_proxy_trunk_modes_policy",
            "sipIdentityForPilotAndProxyTrunkModesPolicy", str, is_required=True,
        ),
        E(
            "use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy",
            "useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy", bool, is_required=True,
        ),
        E(
            "use_system_support_connected_identity_policy",
            "useSystemSupportConnectedIdentityPolicy", bool, is_required=True,
        ),
        E(
            "support_connected_identity_policy", "supportConnectedIdentityPolicy", str,
            is_required=True,
        ),
        E(
            "use_system_options_message_response_status_codes",
            "useSystemOptionsMessageResponseStatusCodes", bool, is_required=True,
        ),
        E(
            "options_message_response_status_code", "optionsMessageResponseStatusCode",
            str, is_array=True,
        ),
    )

    #: str: *Optional* pilotUserId
    pilot_user_id = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: OCI.AccessDevice: *Optional* accessDevice
    access_device = Field(type=OCI.AccessDevice, required=False, mutable=False)
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* capacityExceededRerouteTrunkGroupKey
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* unreachableDestinationRerouteTrunkGroupKey
    unreachable_destination_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)
    #: list: *Optional* hostedUserTable  *Tabular*
    hosted_user_table = Field(type=list, required=False, mutable=False)
    #: str: *Optional* trunkGroupIdentity
    trunk_group_identity = Field(type=str, required=False, mutable=False)
    #: str: *Optional* otgDtgIdentity
    otg_dtg_identity = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowTerminationToTrunkGroupIdentity
    allow_termination_to_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowTerminationToDtgIdentity
    allow_termination_to_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentity
    include_trunk_group_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeDtgIdentity
    include_dtg_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeTrunkGroupIdentityForNetworkCalls
    include_trunk_group_identity_for_network_calls = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* includeOtgIdentityForNetworkCalls
    include_otg_identity_for_network_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNetworkAddressIdentity
    enable_network_address_identity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedCalls
    allow_unscreened_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowUnscreenedEmergencyCalls
    allow_unscreened_emergency_calls = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityForExternalCallsPolicy
    pilot_user_calling_line_identity_for_external_calls_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* pilotUserChargeNumberPolicy
    pilot_user_charge_number_policy = Field(type=str, required=True, mutable=False)
    #: str: *Optional* callForwardingAlwaysAction
    call_forwarding_always_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callForwardingAlwaysForwardAddress
    call_forwarding_always_forward_address = Field(type=str, required=False, mutable=False)
    #: OCI.TrunkGroupKey: *Optional* callForwardingAlwaysRerouteTrunkGroupKey
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=OCI.TrunkGroupKey, required=False, mutable=False,
    )
    #: str: *Optional* peeringDomain
    peering_domain = Field(type=str, required=False, mutable=False)
    #: bool: *Required* routeToPeeringDomain
    route_to_peering_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* prefixEnabled
    prefix_enabled = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* prefix
    prefix = Field(type=str, required=False, mutable=False)
    #: bool: *Required* statefulReroutingEnabled
    stateful_rerouting_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* sendContinuousOptionsMessage
    send_continuous_options_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* continuousOptionsSendingIntervalSeconds
    continuous_options_sending_interval_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: int: *Required* failureOptionsSendingIntervalSeconds
    failure_options_sending_interval_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* failureThresholdCounter
    failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* successThresholdCounter
    success_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdCounter
    invite_failure_threshold_counter = Field(type=int, required=True, mutable=False)
    #: int: *Required* inviteFailureThresholdWindowSeconds
    invite_failure_threshold_window_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* trunkGroupState
    trunk_group_state = Field(type=str, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineAssertedIdentityPolicy
    pilot_user_calling_line_asserted_identity_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: bool: *Required* useSystemCallingLineAssertedIdentityPolicy
    use_system_calling_line_asserted_identity_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* totalActiveIncomingCalls
    total_active_incoming_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* totalActiveOutgoingCalls
    total_active_outgoing_calls = Field(type=int, required=True, mutable=False)
    #: str: *Required* pilotUserCallOptimizationPolicy
    pilot_user_call_optimization_policy = Field(type=str, required=True, mutable=False)
    #: str: *Required* clidSourceForScreenedCallsPolicy
    clid_source_for_screened_calls_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useSystemCLIDSourceForScreenedCallsPolicy
    use_system_clid_source_for_screened_calls_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* userLookupPolicy
    user_lookup_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useSystemUserLookupPolicy
    use_system_user_lookup_policy = Field(type=bool, required=True, mutable=False)
    #: str: *Required* pilotUserCallingLineIdentityForEmergencyCallsPolicy
    pilot_user_calling_line_identity_for_emergency_calls_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: str: *Required* implicitRegistrationSetSupportPolicy
    implicit_registration_set_support_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useSystemImplicitRegistrationSetSupportPolicy
    use_system_implicit_registration_set_support_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* sipIdentityForPilotAndProxyTrunkModesPolicy
    sip_identity_for_pilot_and_proxy_trunk_modes_policy = Field(
        type=str, required=True, mutable=False,
    )
    #: bool: *Required* useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy
    use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useSystemSupportConnectedIdentityPolicy
    use_system_support_connected_identity_policy = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* supportConnectedIdentityPolicy
    support_connected_identity_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useSystemOptionsMessageResponseStatusCodes
    use_system_options_message_response_status_codes = Field(
        type=bool, required=True, mutable=False,
    )
    #: list(str): *Optional* optionsMessageResponseStatusCode  *Array*
    options_message_response_status_code = Field(type=list, required=False, mutable=False)


class GroupTrunkGroupGetResponse(OCIResponse):
    """
    Response to the ``GroupTrunkGroupGetRequest()``.

    The response contains the maximum permissible active trunk group calls for the group.
    """

    _ELEMENTS = (
        E(
            "max_active_calls", "maxActiveCalls", OCI.UnboundedNonNegativeInt,
            is_complex=True, is_required=True,
        ),
        E(
            "max_available_active_calls", "maxAvailableActiveCalls",
            OCI.UnboundedNonNegativeInt, is_complex=True, is_required=True,
        ),
    )

    #: OCI.UnboundedNonNegativeInt: *Required* maxActiveCalls
    max_active_calls = Field(type=OCI.UnboundedNonNegativeInt, required=True, mutable=False)
    #: OCI.UnboundedNonNegativeInt: *Required* maxAvailableActiveCalls
    max_available_active_calls = Field(
        type=OCI.UnboundedNonNegativeInt, required=True, mutable=False,
    )


class GroupTrunkGroupGetResponse14sp1(OCIResponse):
    """
    Response to the ``GroupTrunkGroupGetRequest14sp1()``.

    The response contains the maximum and bursting maximum permissible active trunk group
    calls for the group.
    """

    _ELEMENTS = (
        E(
            "max_active_calls", "maxActiveCalls", OCI.UnboundedNonNegativeInt,
            is_complex=True, is_required=True,
        ),
        E(
            "max_available_active_calls", "maxAvailableActiveCalls",
            OCI.UnboundedNonNegativeInt, is_complex=True, is_required=True,
        ),
        E(
            "bursting_max_active_calls", "burstingMaxActiveCalls",
            OCI.UnboundedNonNegativeInt, is_complex=True, is_required=True,
        ),
        E(
            "bursting_max_available_active_calls", "burstingMaxAvailableActiveCalls",
            OCI.UnboundedNonNegativeInt, is_complex=True, is_required=True,
        ),
    )

    #: OCI.UnboundedNonNegativeInt: *Required* maxActiveCalls
    max_active_calls = Field(type=OCI.UnboundedNonNegativeInt, required=True, mutable=False)
    #: OCI.UnboundedNonNegativeInt: *Required* maxAvailableActiveCalls
    max_available_active_calls = Field(
        type=OCI.UnboundedNonNegativeInt, required=True, mutable=False,
    )
    #: OCI.UnboundedNonNegativeInt: *Required* burstingMaxActiveCalls
    bursting_max_active_calls = Field(
        type=OCI.UnboundedNonNegativeInt, required=True, mutable=False,
    )
    #: OCI.UnboundedNonNegativeInt: *Required* burstingMaxAvailableActiveCalls
    bursting_max_available_active_calls = Field(
        type=OCI.UnboundedNonNegativeInt, required=True, mutable=False,
    )


class GroupTrunkGroupGetResponse14sp9(OCIResponse):
    """
    Response to the ``GroupTrunkGroupGetRequest14sp9()``.

    The response contains the maximum and bursting maximum permissible active trunk group
    calls for the group.
    """

    _ELEMENTS = (
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E(
            "max_available_active_calls", "maxAvailableActiveCalls",
            OCI.UnboundedNonNegativeInt, is_complex=True, is_required=True,
        ),
        E(
            "bursting_max_active_calls", "burstingMaxActiveCalls",
            OCI.UnboundedNonNegativeInt, is_complex=True, is_required=True,
        ),
        E(
            "bursting_max_available_active_calls", "burstingMaxAvailableActiveCalls",
            OCI.UnboundedNonNegativeInt, is_complex=True, is_required=True,
        ),
    )

    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: OCI.UnboundedNonNegativeInt: *Required* maxAvailableActiveCalls
    max_available_active_calls = Field(
        type=OCI.UnboundedNonNegativeInt, required=True, mutable=False,
    )
    #: OCI.UnboundedNonNegativeInt: *Required* burstingMaxActiveCalls
    bursting_max_active_calls = Field(
        type=OCI.UnboundedNonNegativeInt, required=True, mutable=False,
    )
    #: OCI.UnboundedNonNegativeInt: *Required* burstingMaxAvailableActiveCalls
    bursting_max_available_active_calls = Field(
        type=OCI.UnboundedNonNegativeInt, required=True, mutable=False,
    )


class GroupVoiceMessagingGroupGetVoicePortalBrandingResponse20(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalBrandingRequest20()``.

    """

    _ELEMENTS = (
        E(
            "voice_portal_greeting_selection", "voicePortalGreetingSelection", str,
            is_required=True,
        ),
        E(
            "voice_portal_greeting_file", "voicePortalGreetingFile",
            OCI.AnnouncementFileKey, is_complex=True,
        ),
        E(
            "voice_messaging_greeting_selection", "voiceMessagingGreetingSelection", str,
            is_required=True,
        ),
        E(
            "voice_messaging_greeting_file", "voiceMessagingGreetingFile",
            OCI.AnnouncementFileKey, is_complex=True,
        ),
    )

    #: str: *Required* voicePortalGreetingSelection
    voice_portal_greeting_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileKey: *Optional* voicePortalGreetingFile
    voice_portal_greeting_file = Field(
        type=OCI.AnnouncementFileKey, required=False, mutable=False,
    )
    #: str: *Required* voiceMessagingGreetingSelection
    voice_messaging_greeting_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileKey: *Optional* voiceMessagingGreetingFile
    voice_messaging_greeting_file = Field(
        type=OCI.AnnouncementFileKey, required=False, mutable=False,
    )


class ServiceProviderAccessDeviceGetResponse14(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetRequest14()``.

    Replaced By: ``ServiceProviderAccessDeviceGetResponse14sp3()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str, is_required=True),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* protocol
    protocol = Field(type=str, required=True, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)


class ServiceProviderAccessDeviceGetResponse14sp3(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetRequest14sp3()``.

    Replaced By: ``ServiceProviderAccessDeviceGetRequest14sp6()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str, is_required=True),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* protocol
    protocol = Field(type=str, required=True, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )


class ServiceProviderAccessDeviceGetResponse14sp6(OCIResponse):
    """
    Response to: ``ServiceProviderAccessDeviceGetRequest14sp6()`` Replaced by:
    ``ServiceProviderAccessDeviceGetRequest16()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str, is_required=True),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
        E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
        E("user_name", "userName", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* protocol
    protocol = Field(type=str, required=True, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* useCustomUserNamePassword
    use_custom_user_name_password = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)


class ServiceProviderAccessDeviceGetResponse16(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetRequest16()``.

    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str, is_required=True),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
        E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
        E("user_name", "userName", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* protocol
    protocol = Field(type=str, required=True, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* useCustomUserNamePassword
    use_custom_user_name_password = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)


class ServiceProviderAccessDeviceGetResponse18sp1(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetRequest18sp1()``.

    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str, is_required=True),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
        E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
        E("user_name", "userName", str),
        E("version", "version", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* protocol
    protocol = Field(type=str, required=True, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* useCustomUserNamePassword
    use_custom_user_name_password = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* version
    version = Field(type=str, required=False, mutable=False)


class ServiceProviderCommunicationBarringProfileGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderCommunicationBarringProfileGetRequest()``.

    The response contains the Communication Barring Profile information.  The incoming,
    originating and redirecting rules are returned in ascending priority order.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("originating_default_action", "originatingDefaultAction", str, is_required=True),
        E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
        E("originating_default_transfer_number", "originatingDefaultTransferNumber", str),
        E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
        E(
            "originating_rule", "originatingRule",
            OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
            is_complex=True, is_array=True,
        ),
        E("redirecting_default_action", "redirectingDefaultAction", str, is_required=True),
        E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
        E(
            "redirecting_rule", "redirectingRule",
            OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
            is_complex=True, is_array=True,
        ),
        E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
        E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
        E(
            "incoming_rule", "incomingRule", OCI.CommunicationBarringIncomingRule,
            is_complex=True, is_array=True,
        ),
        E("is_default", "isDefault", bool, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* originatingDefaultAction
    originating_default_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* originatingDefaultTreatmentId
    originating_default_treatment_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* originatingDefaultTransferNumber
    originating_default_transfer_number = Field(type=str, required=False, mutable=False)
    #: int: *Optional* originatingDefaultCallTimeout
    originating_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule):
    #: *Optional* originatingRule  *Array*
    originating_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* redirectingDefaultAction
    redirecting_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* redirectingDefaultCallTimeout
    redirecting_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule):
    #: *Optional* redirectingRule  *Array*
    redirecting_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* incomingDefaultAction
    incoming_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* incomingDefaultCallTimeout
    incoming_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringIncomingRule): *Optional* incomingRule  *Array*
    incoming_rule = Field(type=list, required=False, mutable=False)
    #: bool: *Required* isDefault
    is_default = Field(type=bool, required=True, mutable=False)


class ServiceProviderCommunicationBarringProfileGetResponse17sp3(OCIResponse):
    """
    Response to the ``ServiceProviderCommunicationBarringProfileGetRequest17sp3()``.

    The response contains the Communication Barring Profile information.  The incoming,
    originating, redirecting and call me now rules are returned in ascending priority
    order.  The following elements are only used in AS data mode: callMeNowDefaultAction
    callMeNowDefaultCallTimeout callMeNowRule
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("originating_default_action", "originatingDefaultAction", str, is_required=True),
        E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
        E("originating_default_transfer_number", "originatingDefaultTransferNumber", str),
        E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
        E(
            "originating_rule", "originatingRule",
            OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
            is_complex=True, is_array=True,
        ),
        E("redirecting_default_action", "redirectingDefaultAction", str, is_required=True),
        E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
        E(
            "redirecting_rule", "redirectingRule",
            OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
            is_complex=True, is_array=True,
        ),
        E("call_me_now_default_action", "callMeNowDefaultAction", str, is_required=True),
        E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
        E(
            "call_me_now_rule", "callMeNowRule",
            OCI.ServiceProviderCommunicationBarringHierarchicalCallMeNowRule,
            is_complex=True, is_array=True,
        ),
        E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
        E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
        E(
            "incoming_rule", "incomingRule", OCI.CommunicationBarringIncomingRule,
            is_complex=True, is_array=True,
        ),
        E("is_default", "isDefault", bool, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* originatingDefaultAction
    originating_default_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* originatingDefaultTreatmentId
    originating_default_treatment_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* originatingDefaultTransferNumber
    originating_default_transfer_number = Field(type=str, required=False, mutable=False)
    #: int: *Optional* originatingDefaultCallTimeout
    originating_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule):
    #: *Optional* originatingRule  *Array*
    originating_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* redirectingDefaultAction
    redirecting_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* redirectingDefaultCallTimeout
    redirecting_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule):
    #: *Optional* redirectingRule  *Array*
    redirecting_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* callMeNowDefaultAction
    call_me_now_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* callMeNowDefaultCallTimeout
    call_me_now_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.ServiceProviderCommunicationBarringHierarchicalCallMeNowRule): *Optional*
    #: callMeNowRule  *Array*
    call_me_now_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* incomingDefaultAction
    incoming_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* incomingDefaultCallTimeout
    incoming_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringIncomingRule): *Optional* incomingRule  *Array*
    incoming_rule = Field(type=list, required=False, mutable=False)
    #: bool: *Required* isDefault
    is_default = Field(type=bool, required=True, mutable=False)


class ServiceProviderCommunicationBarringProfileGetResponse19sp1(OCIResponse):
    """
    Response to the ``ServiceProviderCommunicationBarringProfileGetRequest19sp1()``.

    The response contains the Communication Barring Profile information.  The incoming,
    originating, redirecting and call me now rules are returned in ascending priority
    order.  The following elements are only used in AS data mode: callMeNowDefaultAction
    callMeNowDefaultCallTimeout callMeNowRule applyToAttendedCallTransfers
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("originating_default_action", "originatingDefaultAction", str, is_required=True),
        E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
        E("originating_default_transfer_number", "originatingDefaultTransferNumber", str),
        E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
        E(
            "originating_rule", "originatingRule",
            OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
            is_complex=True, is_array=True,
        ),
        E("redirecting_default_action", "redirectingDefaultAction", str, is_required=True),
        E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
        E(
            "redirecting_rule", "redirectingRule",
            OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
            is_complex=True, is_array=True,
        ),
        E("call_me_now_default_action", "callMeNowDefaultAction", str, is_required=True),
        E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
        E(
            "call_me_now_rule", "callMeNowRule",
            OCI.ServiceProviderCommunicationBarringHierarchicalCallMeNowRule,
            is_complex=True, is_array=True,
        ),
        E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
        E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
        E(
            "incoming_rule", "incomingRule", OCI.CommunicationBarringIncomingRule,
            is_complex=True, is_array=True,
        ),
        E("is_default", "isDefault", bool, is_required=True),
        E(
            "apply_to_attended_call_transfers", "applyToAttendedCallTransfers", bool,
            is_required=True,
        ),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* originatingDefaultAction
    originating_default_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* originatingDefaultTreatmentId
    originating_default_treatment_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* originatingDefaultTransferNumber
    originating_default_transfer_number = Field(type=str, required=False, mutable=False)
    #: int: *Optional* originatingDefaultCallTimeout
    originating_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule):
    #: *Optional* originatingRule  *Array*
    originating_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* redirectingDefaultAction
    redirecting_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* redirectingDefaultCallTimeout
    redirecting_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule):
    #: *Optional* redirectingRule  *Array*
    redirecting_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* callMeNowDefaultAction
    call_me_now_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* callMeNowDefaultCallTimeout
    call_me_now_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.ServiceProviderCommunicationBarringHierarchicalCallMeNowRule): *Optional*
    #: callMeNowRule  *Array*
    call_me_now_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* incomingDefaultAction
    incoming_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* incomingDefaultCallTimeout
    incoming_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringIncomingRule): *Optional* incomingRule  *Array*
    incoming_rule = Field(type=list, required=False, mutable=False)
    #: bool: *Required* isDefault
    is_default = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* applyToAttendedCallTransfers
    apply_to_attended_call_transfers = Field(type=bool, required=True, mutable=False)


class ServiceProviderFeatureAccessCodeGetListResponse(OCIResponse):
    """
    Response to the ``ServiceProviderFeatureAccessCodeGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.FeatureAccessCodeEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class ServiceProviderFeatureAccessCodeGetListResponse20(OCIResponse):
    """
    Response to the ``ServiceProviderFeatureAccessCodeGetListRequest20()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".
    Replaced by: ``ServiceProviderFeatureAccessCodeGetListResponse21()``
    """

    _ELEMENTS = (
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.FeatureAccessCodeEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class ServiceProviderFeatureAccessCodeGetListResponse21(OCIResponse):
    """
    Response to the ``ServiceProviderFeatureAccessCodeGetListRequest20()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".
    """

    _ELEMENTS = (
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeReadEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.FeatureAccessCodeReadEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class ServiceProviderGetResponse13mp2(OCIResponse):
    """
    Response to the ``ServiceProviderGetRequest13mp2()``.

    The response contains the service provider or enterprise's profile information.
    Replaced by: ``ServiceProviderGetResponse17sp1()``
    """

    _ELEMENTS = (
        E("is_enterprise", "isEnterprise", bool),
        E("use_custom_routing_profile", "useCustomRoutingProfile", bool),
        E("default_domain", "defaultDomain", str, is_required=True),
        E("service_provider_name", "serviceProviderName", str),
        E("support_email", "supportEmail", str),
        E("contact", "contact", OCI.Contact, is_complex=True),
        E("address", "address", OCI.StreetAddress, is_complex=True),
    )

    #: bool: *Optional* isEnterprise
    is_enterprise = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* useCustomRoutingProfile
    use_custom_routing_profile = Field(type=bool, required=False, mutable=False)
    #: str: *Required* defaultDomain
    default_domain = Field(type=str, required=True, mutable=False)
    #: str: *Optional* serviceProviderName
    service_provider_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* supportEmail
    support_email = Field(type=str, required=False, mutable=False)
    #: OCI.Contact: *Optional* contact
    contact = Field(type=OCI.Contact, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)


class ServiceProviderGetResponse17sp1(OCIResponse):
    """
    Response to the ``ServiceProviderGetRequest17sp1()``.

    The response contains the service provider or enterprise's profile information.
    """

    _ELEMENTS = (
        E("is_enterprise", "isEnterprise", bool),
        E("use_custom_routing_profile", "useCustomRoutingProfile", bool),
        E("default_domain", "defaultDomain", str, is_required=True),
        E("service_provider_name", "serviceProviderName", str),
        E("support_email", "supportEmail", str),
        E("contact", "contact", OCI.Contact, is_complex=True),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E(
            "use_service_provider_languages", "useServiceProviderLanguages", bool,
            is_required=True,
        ),
    )

    #: bool: *Optional* isEnterprise
    is_enterprise = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* useCustomRoutingProfile
    use_custom_routing_profile = Field(type=bool, required=False, mutable=False)
    #: str: *Required* defaultDomain
    default_domain = Field(type=str, required=True, mutable=False)
    #: str: *Optional* serviceProviderName
    service_provider_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* supportEmail
    support_email = Field(type=str, required=False, mutable=False)
    #: OCI.Contact: *Optional* contact
    contact = Field(type=OCI.Contact, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: bool: *Required* useServiceProviderLanguages
    use_service_provider_languages = Field(type=bool, required=True, mutable=False)


class ServiceProviderMeetMeConferencingGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderMeetMeConferencingGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "allocated_ports", "allocatedPorts", OCI.MeetMeConferencingConferencePorts,
            is_complex=True, is_required=True,
        ),
    )

    #: OCI.MeetMeConferencingConferencePorts: *Required* allocatedPorts
    allocated_ports = Field(
        type=OCI.MeetMeConferencingConferencePorts, required=True, mutable=False,
    )


class ServiceProviderScheduleGetEventResponse(OCIResponse):
    """
    Response to ``ServiceProviderScheduleGetEventRequest()``.

    The response contains the event of the service provider schedule.
    """

    _ELEMENTS = (
        E("start_date", "startDate", str, is_required=True),
        E("all_day_event", "allDayEvent", bool),
        E("start_time", "startTime", OCI.HourMinute, is_complex=True, is_required=True),
        E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
        E("end_date", "endDate", str, is_required=True),
        E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
    )

    #: str: *Required* startDate
    start_date = Field(type=str, required=True, mutable=False)
    #: bool: *Optional* allDayEvent
    all_day_event = Field(type=bool, required=False, mutable=False)
    #: OCI.HourMinute: *Required* startTime
    start_time = Field(type=OCI.HourMinute, required=True, mutable=False)
    #: OCI.HourMinute: *Required* endTime
    end_time = Field(type=OCI.HourMinute, required=True, mutable=False)
    #: str: *Required* endDate
    end_date = Field(type=str, required=True, mutable=False)
    #: OCI.Recurrence: *Optional* recurrence
    recurrence = Field(type=OCI.Recurrence, required=False, mutable=False)


class ServiceProviderScheduleGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderScheduleGetListRequest()``.

    The response contains a list of service provider schedules.
    """

    _ELEMENTS = (
        E("schedule_key", "scheduleKey", OCI.ScheduleKey, is_complex=True, is_array=True),
    )

    #: list(OCI.ScheduleKey): *Optional* scheduleKey  *Array*
    schedule_key = Field(type=list, required=False, mutable=False)


class ServiceProviderServicePackGetDetailListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackGetDetailListRequest()``.

    It contains the service pack details and the list of services in a table format.  The
    column headings are "Service", "Authorized" "Allocated" and "Available".
    """

    _ELEMENTS = (
        E("service_pack_name", "servicePackName", str, is_required=True),
        E("service_pack_description", "servicePackDescription", str),
        E("is_available_for_use", "isAvailableForUse", bool, is_required=True),
        E(
            "service_pack_quantity", "servicePackQuantity", OCI.UnboundedPositiveInt,
            is_complex=True, is_required=True,
        ),
        E(
            "assigned_quantity", "assignedQuantity", OCI.UnboundedNonNegativeInt,
            is_complex=True, is_required=True,
        ),
        E(
            "allowed_quantity", "allowedQuantity", OCI.UnboundedPositiveInt,
            is_complex=True, is_required=True,
        ),
        E(
            "user_service_table", "userServiceTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Required* servicePackName
    service_pack_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* servicePackDescription
    service_pack_description = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isAvailableForUse
    is_available_for_use = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* servicePackQuantity
    service_pack_quantity = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: OCI.UnboundedNonNegativeInt: *Required* assignedQuantity
    assigned_quantity = Field(type=OCI.UnboundedNonNegativeInt, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* allowedQuantity
    allowed_quantity = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: list: *Required* userServiceTable  *Tabular*
    user_service_table = Field(type=list, required=True, mutable=False)


class ServiceProviderTrunkGroupGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderTrunkGroupGetRequest()``.

    The response contains the maximum permissible active trunk group calls for the service
    provider.
    """

    _ELEMENTS = (
        E(
            "max_active_calls", "maxActiveCalls", OCI.UnboundedNonNegativeInt,
            is_complex=True, is_required=True,
        ),
    )

    #: OCI.UnboundedNonNegativeInt: *Required* maxActiveCalls
    max_active_calls = Field(type=OCI.UnboundedNonNegativeInt, required=True, mutable=False)


class ServiceProviderTrunkGroupGetResponse14sp1(OCIResponse):
    """
    Response to the ``ServiceProviderTrunkGroupGetRequest14sp1()``.

    The response contains the maximum and bursting maximum permissible active trunk group
    calls for the service provider.
    """

    _ELEMENTS = (
        E(
            "max_active_calls", "maxActiveCalls", OCI.UnboundedNonNegativeInt,
            is_complex=True, is_required=True,
        ),
        E(
            "bursting_max_active_calls", "burstingMaxActiveCalls",
            OCI.UnboundedNonNegativeInt, is_complex=True, is_required=True,
        ),
    )

    #: OCI.UnboundedNonNegativeInt: *Required* maxActiveCalls
    max_active_calls = Field(type=OCI.UnboundedNonNegativeInt, required=True, mutable=False)
    #: OCI.UnboundedNonNegativeInt: *Required* burstingMaxActiveCalls
    bursting_max_active_calls = Field(
        type=OCI.UnboundedNonNegativeInt, required=True, mutable=False,
    )


class SystemAccessDeviceGetResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetRequest()``.

    Replaced By: ``SystemAccessDeviceGetResponse14sp3()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str, is_required=True),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* protocol
    protocol = Field(type=str, required=True, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)


class SystemAccessDeviceGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetRequest14sp3()``

    Replaced By: ``SystemAccessDeviceGetResponse14sp6()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str, is_required=True),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* protocol
    protocol = Field(type=str, required=True, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )


class SystemAccessDeviceGetResponse14sp6(OCIResponse):
    """
    Response to: ``SystemAccessDeviceGetRequest14sp6()`` Replaced by:
    ``SystemAccessDeviceGetRequest16()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str, is_required=True),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
        E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
        E("user_name", "userName", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* protocol
    protocol = Field(type=str, required=True, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* useCustomUserNamePassword
    use_custom_user_name_password = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)


class SystemAccessDeviceGetResponse16(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetRequest16()``
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str, is_required=True),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
        E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
        E("user_name", "userName", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* protocol
    protocol = Field(type=str, required=True, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* useCustomUserNamePassword
    use_custom_user_name_password = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)


class SystemAccessDeviceGetResponse18sp1(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetRequest18sp1()`` The following elements are only
    used in AS data mode: version
    """

    _ELEMENTS = (
        E("device_type", "deviceType", str, is_required=True),
        E("protocol", "protocol", str, is_required=True),
        E("net_address", "netAddress", str),
        E("port", "port", int),
        E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
        E("stun_server_net_address", "stunServerNetAddress", str),
        E("mac_address", "macAddress", str),
        E("serial_number", "serialNumber", str),
        E("description", "description", str),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("number_of_assigned_ports", "numberOfAssignedPorts", int, is_required=True),
        E("status", "status", str, is_required=True),
        E("physical_location", "physicalLocation", str),
        E("transport_protocol", "transportProtocol", str),
        E("mobility_manager_provisioning_url", "mobilityManagerProvisioningURL", str),
        E(
            "mobility_manager_provisioning_user_name",
            "mobilityManagerProvisioningUserName", str,
        ),
        E(
            "mobility_manager_default_originating_service_key",
            "mobilityManagerDefaultOriginatingServiceKey", int,
        ),
        E(
            "mobility_manager_default_terminating_service_key",
            "mobilityManagerDefaultTerminatingServiceKey", int,
        ),
        E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
        E("user_name", "userName", str),
        E("version", "version", str),
    )

    #: str: *Required* deviceType
    device_type = Field(type=str, required=True, mutable=False)
    #: str: *Required* protocol
    protocol = Field(type=str, required=True, mutable=False)
    #: str: *Optional* netAddress
    net_address = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: str: *Optional* outboundProxyServerNetAddress
    outbound_proxy_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* stunServerNetAddress
    stun_server_net_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* macAddress
    mac_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* serialNumber
    serial_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: int: *Required* numberOfAssignedPorts
    number_of_assigned_ports = Field(type=int, required=True, mutable=False)
    #: str: *Required* status
    status = Field(type=str, required=True, mutable=False)
    #: str: *Optional* physicalLocation
    physical_location = Field(type=str, required=False, mutable=False)
    #: str: *Optional* transportProtocol
    transport_protocol = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningURL
    mobility_manager_provisioning_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilityManagerProvisioningUserName
    mobility_manager_provisioning_user_name = Field(type=str, required=False, mutable=False)
    #: int: *Optional* mobilityManagerDefaultOriginatingServiceKey
    mobility_manager_default_originating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: int: *Optional* mobilityManagerDefaultTerminatingServiceKey
    mobility_manager_default_terminating_service_key = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* useCustomUserNamePassword
    use_custom_user_name_password = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* userName
    user_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* version
    version = Field(type=str, required=False, mutable=False)


class SystemCallCenterEnhancedReportingDataTemplateGetListResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingDataTemplateGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "info", "info", OCI.CallCenterReportDataTemplateInfo, is_complex=True,
            is_array=True,
        ),
    )

    #: list(OCI.CallCenterReportDataTemplateInfo): *Optional* info  *Array*
    info = Field(type=list, required=False, mutable=False)


class SystemCollaborateGetResponse(OCIResponse):
    """
    Response to ``SystemCollaborateGetRequest()``.

    """

    _ELEMENTS = (
        E("collaborate_room_id_length", "collaborateRoomIdLength", int, is_required=True),
        E(
            "instant_room_idle_timeout_seconds", "instantRoomIdleTimeoutSeconds", int,
            is_required=True,
        ),
        E(
            "collaborate_room_maximum_duration_minutes",
            "collaborateRoomMaximumDurationMinutes", int, is_required=True,
        ),
        E("support_outdial", "supportOutdial", bool, is_required=True),
        E(
            "max_collaborate_room_participants", "maxCollaborateRoomParticipants", int,
            is_required=True,
        ),
        E(
            "collaborate_active_talker_refresh_interval_seconds",
            "collaborateActiveTalkerRefreshIntervalSeconds", int, is_required=True,
        ),
        E(
            "terminate_collaborate_after_grace_period",
            "terminateCollaborateAfterGracePeriod", bool, is_required=True,
        ),
        E(
            "collaborate_grace_period", "collaborateGracePeriod",
            OCI.CollaborateGracePeriodDuration, is_complex=True, is_required=True,
        ),
        E(
            "enable_active_collaborate_notification",
            "enableActiveCollaborateNotification", bool, is_required=True,
        ),
        E("collaborate_from_address", "collaborateFromAddress", str),
    )

    #: int: *Required* collaborateRoomIdLength
    collaborate_room_id_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* instantRoomIdleTimeoutSeconds
    instant_room_idle_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: int: *Required* collaborateRoomMaximumDurationMinutes
    collaborate_room_maximum_duration_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* supportOutdial
    support_outdial = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCollaborateRoomParticipants
    max_collaborate_room_participants = Field(type=int, required=True, mutable=False)
    #: int: *Required* collaborateActiveTalkerRefreshIntervalSeconds
    collaborate_active_talker_refresh_interval_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: bool: *Required* terminateCollaborateAfterGracePeriod
    terminate_collaborate_after_grace_period = Field(type=bool, required=True, mutable=False)
    #: OCI.CollaborateGracePeriodDuration: *Required* collaborateGracePeriod
    collaborate_grace_period = Field(
        type=OCI.CollaborateGracePeriodDuration, required=True, mutable=False,
    )
    #: bool: *Required* enableActiveCollaborateNotification
    enable_active_collaborate_notification = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* collaborateFromAddress
    collaborate_from_address = Field(type=str, required=False, mutable=False)


class SystemCommunicationBarringProfileGetResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetRequest()``.

    The response contains the Communication Barring Profile information.  Replaced by:
    ``SystemCommunicationBarringProfileGetResponse16()``
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("originating_default_action", "originatingDefaultAction", str, is_required=True),
        E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
        E("originating_default_transfer_number", "originatingDefaultTransferNumber", str),
        E(
            "originating_rule", "originatingRule",
            OCI.CommunicationBarringOriginatingRule15sp2, is_complex=True, is_array=True,
        ),
        E("redirecting_default_action", "redirectingDefaultAction", str, is_required=True),
        E(
            "redirecting_rule", "redirectingRule",
            OCI.CommunicationBarringRedirectingRule15sp2, is_complex=True, is_array=True,
        ),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* originatingDefaultAction
    originating_default_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* originatingDefaultTreatmentId
    originating_default_treatment_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* originatingDefaultTransferNumber
    originating_default_transfer_number = Field(type=str, required=False, mutable=False)
    #: list(OCI.CommunicationBarringOriginatingRule15sp2): *Optional* originatingRule
    #: *Array*
    originating_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* redirectingDefaultAction
    redirecting_default_action = Field(type=str, required=True, mutable=False)
    #: list(OCI.CommunicationBarringRedirectingRule15sp2): *Optional* redirectingRule
    #: *Array*
    redirecting_rule = Field(type=list, required=False, mutable=False)


class SystemCommunicationBarringProfileGetResponse16(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetRequest16()``.

    The response contains the Communication Barring Profile information.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("originating_default_action", "originatingDefaultAction", str, is_required=True),
        E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
        E("originating_default_transfer_number", "originatingDefaultTransferNumber", str),
        E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
        E(
            "originating_rule", "originatingRule",
            OCI.CommunicationBarringOriginatingRule, is_complex=True, is_array=True,
        ),
        E("redirecting_default_action", "redirectingDefaultAction", str, is_required=True),
        E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
        E(
            "redirecting_rule", "redirectingRule",
            OCI.CommunicationBarringRedirectingRule, is_complex=True, is_array=True,
        ),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* originatingDefaultAction
    originating_default_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* originatingDefaultTreatmentId
    originating_default_treatment_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* originatingDefaultTransferNumber
    originating_default_transfer_number = Field(type=str, required=False, mutable=False)
    #: int: *Optional* originatingDefaultCallTimeout
    originating_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringOriginatingRule): *Optional* originatingRule  *Array*
    originating_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* redirectingDefaultAction
    redirecting_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* redirectingDefaultCallTimeout
    redirecting_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringRedirectingRule): *Optional* redirectingRule  *Array*
    redirecting_rule = Field(type=list, required=False, mutable=False)


class SystemCommunicationBarringProfileGetResponse17sp1(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetRequest17sp1()``.

    The response contains the Communication Barring Profile information.  The incoming
    rules are returned in ascending priority order.  The following elements are only used
    in HSS data mode: incomingDefaultAction incomingDefaultCallTimeout incomingRule
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("originating_default_action", "originatingDefaultAction", str, is_required=True),
        E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
        E("originating_default_transfer_number", "originatingDefaultTransferNumber", str),
        E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
        E(
            "originating_rule", "originatingRule",
            OCI.CommunicationBarringOriginatingRule, is_complex=True, is_array=True,
        ),
        E("redirecting_default_action", "redirectingDefaultAction", str, is_required=True),
        E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
        E(
            "redirecting_rule", "redirectingRule",
            OCI.CommunicationBarringRedirectingRule, is_complex=True, is_array=True,
        ),
        E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
        E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
        E(
            "incoming_rule", "incomingRule", OCI.CommunicationBarringIncomingRule,
            is_complex=True, is_array=True,
        ),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* originatingDefaultAction
    originating_default_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* originatingDefaultTreatmentId
    originating_default_treatment_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* originatingDefaultTransferNumber
    originating_default_transfer_number = Field(type=str, required=False, mutable=False)
    #: int: *Optional* originatingDefaultCallTimeout
    originating_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringOriginatingRule): *Optional* originatingRule  *Array*
    originating_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* redirectingDefaultAction
    redirecting_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* redirectingDefaultCallTimeout
    redirecting_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringRedirectingRule): *Optional* redirectingRule  *Array*
    redirecting_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* incomingDefaultAction
    incoming_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* incomingDefaultCallTimeout
    incoming_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringIncomingRule): *Optional* incomingRule  *Array*
    incoming_rule = Field(type=list, required=False, mutable=False)


class SystemCommunicationBarringProfileGetResponse17sp3(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetRequest17sp3()``.

    The response contains the Communication Barring Profile information.  The incoming
    rules are returned in ascending priority order.  The following elements are only used
    in AS data mode: callMeNowDefaultAction callMeNowDefaultCallTimeout callMeNowRule
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("originating_default_action", "originatingDefaultAction", str, is_required=True),
        E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
        E("originating_default_transfer_number", "originatingDefaultTransferNumber", str),
        E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
        E(
            "originating_rule", "originatingRule",
            OCI.CommunicationBarringOriginatingRule, is_complex=True, is_array=True,
        ),
        E("redirecting_default_action", "redirectingDefaultAction", str, is_required=True),
        E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
        E(
            "redirecting_rule", "redirectingRule",
            OCI.CommunicationBarringRedirectingRule, is_complex=True, is_array=True,
        ),
        E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
        E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
        E(
            "incoming_rule", "incomingRule", OCI.CommunicationBarringIncomingRule,
            is_complex=True, is_array=True,
        ),
        E("call_me_now_default_action", "callMeNowDefaultAction", str, is_required=True),
        E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
        E(
            "call_me_now_rule", "callMeNowRule", OCI.CommunicationBarringCallMeNowRule,
            is_complex=True, is_array=True,
        ),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* originatingDefaultAction
    originating_default_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* originatingDefaultTreatmentId
    originating_default_treatment_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* originatingDefaultTransferNumber
    originating_default_transfer_number = Field(type=str, required=False, mutable=False)
    #: int: *Optional* originatingDefaultCallTimeout
    originating_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringOriginatingRule): *Optional* originatingRule  *Array*
    originating_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* redirectingDefaultAction
    redirecting_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* redirectingDefaultCallTimeout
    redirecting_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringRedirectingRule): *Optional* redirectingRule  *Array*
    redirecting_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* incomingDefaultAction
    incoming_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* incomingDefaultCallTimeout
    incoming_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringIncomingRule): *Optional* incomingRule  *Array*
    incoming_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* callMeNowDefaultAction
    call_me_now_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* callMeNowDefaultCallTimeout
    call_me_now_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringCallMeNowRule): *Optional* callMeNowRule  *Array*
    call_me_now_rule = Field(type=list, required=False, mutable=False)


class SystemCommunicationBarringProfileGetResponse19sp1(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetRequest19sp1()``.

    The response contains the Communication Barring Profile information.  The incoming
    rules are returned in ascending priority order.  The following elements are only used
    in AS data mode: callMeNowDefaultAction callMeNowDefaultCallTimeout callMeNowRule
    applyToAttendedCallTransfers
    """

    _ELEMENTS = (
        E("description", "description", str),
        E("originating_default_action", "originatingDefaultAction", str, is_required=True),
        E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
        E("originating_default_transfer_number", "originatingDefaultTransferNumber", str),
        E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
        E(
            "originating_rule", "originatingRule",
            OCI.CommunicationBarringOriginatingRule, is_complex=True, is_array=True,
        ),
        E("redirecting_default_action", "redirectingDefaultAction", str, is_required=True),
        E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
        E(
            "redirecting_rule", "redirectingRule",
            OCI.CommunicationBarringRedirectingRule, is_complex=True, is_array=True,
        ),
        E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
        E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
        E(
            "incoming_rule", "incomingRule", OCI.CommunicationBarringIncomingRule,
            is_complex=True, is_array=True,
        ),
        E("call_me_now_default_action", "callMeNowDefaultAction", str, is_required=True),
        E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
        E(
            "call_me_now_rule", "callMeNowRule", OCI.CommunicationBarringCallMeNowRule,
            is_complex=True, is_array=True,
        ),
        E(
            "apply_to_attended_call_transfers", "applyToAttendedCallTransfers", bool,
            is_required=True,
        ),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: str: *Required* originatingDefaultAction
    originating_default_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* originatingDefaultTreatmentId
    originating_default_treatment_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* originatingDefaultTransferNumber
    originating_default_transfer_number = Field(type=str, required=False, mutable=False)
    #: int: *Optional* originatingDefaultCallTimeout
    originating_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringOriginatingRule): *Optional* originatingRule  *Array*
    originating_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* redirectingDefaultAction
    redirecting_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* redirectingDefaultCallTimeout
    redirecting_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringRedirectingRule): *Optional* redirectingRule  *Array*
    redirecting_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* incomingDefaultAction
    incoming_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* incomingDefaultCallTimeout
    incoming_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringIncomingRule): *Optional* incomingRule  *Array*
    incoming_rule = Field(type=list, required=False, mutable=False)
    #: str: *Required* callMeNowDefaultAction
    call_me_now_default_action = Field(type=str, required=True, mutable=False)
    #: int: *Optional* callMeNowDefaultCallTimeout
    call_me_now_default_call_timeout = Field(type=int, required=False, mutable=False)
    #: list(OCI.CommunicationBarringCallMeNowRule): *Optional* callMeNowRule  *Array*
    call_me_now_rule = Field(type=list, required=False, mutable=False)
    #: bool: *Required* applyToAttendedCallTransfers
    apply_to_attended_call_transfers = Field(type=bool, required=True, mutable=False)


class SystemDeviceTypeGetResponse(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest()``.

    Replaced By: ``SystemDeviceTypeGetResponse14sp3()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E("profile", "profile", str, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E("cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptions, is_complex=True),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
        E("use_domain", "useDomain", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptions: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptions, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isIpAddressOptional
    is_ip_address_optional = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDomain
    use_domain = Field(type=bool, required=True, mutable=False)


class SystemDeviceTypeGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest14sp3()``.

    Replaced By: ``SystemDeviceTypeGetResponse14sp6()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E("profile", "profile", str, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E("cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptions, is_complex=True),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
        E("use_domain", "useDomain", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptions: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptions, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isIpAddressOptional
    is_ip_address_optional = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDomain
    use_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)


class SystemFeatureAccessCodeGetListResponse(OCIResponse):
    """
    Response to the ``SystemFeatureAccessCodeGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.FeatureAccessCodeEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class SystemFeatureAccessCodeGetListResponse20(OCIResponse):
    """
    Response to the ``SystemFeatureAccessCodeGetListRequest20()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".
    Replaced by: ``SystemFeatureAccessCodeGetListResponse21()``
    """

    _ELEMENTS = (
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.FeatureAccessCodeEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class SystemFeatureAccessCodeGetListResponse21(OCIResponse):
    """
    Response to the ``SystemFeatureAccessCodeGetListRequest21()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".
    """

    _ELEMENTS = (
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeReadEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.FeatureAccessCodeReadEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class SystemFileRepositoryDeviceGetResponse(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceGetRequest()``.

    """

    _ELEMENTS = (
        E("root_directory", "rootDirectory", str),
        E("port", "port", int),
        E(
            "protocol_web_dav", "protocolWebDAV", OCI.FileRepositoryProtocolWebDAV,
            is_complex=True,
        ),
        E("protocol_ftp", "protocolFTP", OCI.FileRepositoryProtocolFTP, is_complex=True),
    )

    #: str: *Optional* rootDirectory
    root_directory = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: OCI.FileRepositoryProtocolWebDAV: *Optional* protocolWebDAV
    protocol_web_dav = Field(
        type=OCI.FileRepositoryProtocolWebDAV, required=False, mutable=False,
    )
    #: OCI.FileRepositoryProtocolFTP: *Optional* protocolFTP
    protocol_ftp = Field(type=OCI.FileRepositoryProtocolFTP, required=False, mutable=False)


class SystemFileRepositoryDeviceGetResponse16(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceGetRequest16()``.

    """

    _ELEMENTS = (
        E("root_directory", "rootDirectory", str),
        E("port", "port", int),
        E(
            "protocol_web_dav", "protocolWebDAV", OCI.FileRepositoryProtocolWebDAV,
            is_complex=True,
        ),
        E("protocol_ftp", "protocolFTP", OCI.FileRepositoryProtocolFTP16, is_complex=True),
    )

    #: str: *Optional* rootDirectory
    root_directory = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: OCI.FileRepositoryProtocolWebDAV: *Optional* protocolWebDAV
    protocol_web_dav = Field(
        type=OCI.FileRepositoryProtocolWebDAV, required=False, mutable=False,
    )
    #: OCI.FileRepositoryProtocolFTP16: *Optional* protocolFTP
    protocol_ftp = Field(type=OCI.FileRepositoryProtocolFTP16, required=False, mutable=False)


class SystemFileRepositoryDeviceGetResponse20(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceGetRequest20()``.

    """

    _ELEMENTS = (
        E("root_directory", "rootDirectory", str),
        E("port", "port", int),
        E(
            "protocol_web_dav", "protocolWebDAV", OCI.FileRepositoryProtocolWebDAV20,
            is_complex=True,
        ),
        E("protocol_ftp", "protocolFTP", OCI.FileRepositoryProtocolFTP16, is_complex=True),
    )

    #: str: *Optional* rootDirectory
    root_directory = Field(type=str, required=False, mutable=False)
    #: int: *Optional* port
    port = Field(type=int, required=False, mutable=False)
    #: OCI.FileRepositoryProtocolWebDAV20: *Optional* protocolWebDAV
    protocol_web_dav = Field(
        type=OCI.FileRepositoryProtocolWebDAV20, required=False, mutable=False,
    )
    #: OCI.FileRepositoryProtocolFTP16: *Optional* protocolFTP
    protocol_ftp = Field(type=OCI.FileRepositoryProtocolFTP16, required=False, mutable=False)


class SystemHolidayScheduleGetResponse(OCIResponse):
    """
    Response to the ``SystemHolidayScheduleGetRequest()``.

    The response contains the system holiday schedule information.
    """

    _ELEMENTS = (
        E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
        E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
        E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
        E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
        E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
        E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
        E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
        E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
        E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
        E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
        E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
        E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
        E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
        E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
        E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
        E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
        E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
        E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
        E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
        E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
    )

    #: OCI.Holiday: *Optional* holiday01
    holiday01 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday02
    holiday02 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday03
    holiday03 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday04
    holiday04 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday05
    holiday05 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday06
    holiday06 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday07
    holiday07 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday08
    holiday08 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday09
    holiday09 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday10
    holiday10 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday11
    holiday11 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday12
    holiday12 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday13
    holiday13 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday14
    holiday14 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday15
    holiday15 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday16
    holiday16 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday17
    holiday17 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday18
    holiday18 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday19
    holiday19 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday20
    holiday20 = Field(type=OCI.Holiday, required=False, mutable=False)


class SystemInterceptUserGetDnListResponse(OCIResponse):
    """
    Response to ``SystemInterceptUserGetDnListRequest()``.

    The Intercept User DN List.
    """

    _ELEMENTS = (
        E(
            "intercept_user_list", "interceptUserList", OCI.InterceptDNListEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.InterceptDNListEntry): *Optional* interceptUserList  *Array*
    intercept_user_list = Field(type=list, required=False, mutable=False)


class SystemMGCPDeviceTypeGetResponse(OCIResponse):
    """
    Response to ``SystemMGCPDeviceTypeGetRequest()``.

    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E("profile", "profile", str, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)


class SystemMeetMeConferencingGetResponse18(OCIResponse):
    """
    Response to ``SystemMeetMeConferencingGetRequest18()``.

    """

    _ELEMENTS = (
        E("conference_id_length", "conferenceIdLength", int, is_required=True),
        E("moderator_pin_length", "moderatorPinLength", int, is_required=True),
        E(
            "enable_conference_end_date_restriction",
            "enableConferenceEndDateRestriction", bool, is_required=True,
        ),
        E(
            "conference_end_date_restriction_months",
            "conferenceEndDateRestrictionMonths", int, is_required=True,
        ),
        E(
            "delete_expired_conferences_after_hold_period",
            "deleteExpiredConferencesAfterHoldPeriod", bool, is_required=True,
        ),
        E(
            "expired_conference_hold_period_days", "expiredConferenceHoldPeriodDays", int,
            is_required=True,
        ),
        E("recording_web_app_url", "recordingWebAppURL", str),
        E("recording_file_format", "recordingFileFormat", str, is_required=True),
        E(
            "terminate_after_grace_period", "terminateAfterGracePeriod", bool,
            is_required=True,
        ),
        E(
            "conference_grace_period_minutes", "conferenceGracePeriodMinutes",
            OCI.MeetMeConferencingConferenceDuration, is_complex=True, is_required=True,
        ),
        E(
            "conference_participant_early_entry_minutes",
            "conferenceParticipantEarlyEntryMinutes", int, is_required=True,
        ),
        E(
            "enable_conference_expiry_notification", "enableConferenceExpiryNotification",
            bool, is_required=True,
        ),
        E(
            "enable_active_conference_notification", "enableActiveConferenceNotification",
            bool, is_required=True,
        ),
        E("conference_from_address", "conferenceFromAddress", str, is_required=True),
    )

    #: int: *Required* conferenceIdLength
    conference_id_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* moderatorPinLength
    moderator_pin_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConferenceEndDateRestriction
    enable_conference_end_date_restriction = Field(type=bool, required=True, mutable=False)
    #: int: *Required* conferenceEndDateRestrictionMonths
    conference_end_date_restriction_months = Field(type=int, required=True, mutable=False)
    #: bool: *Required* deleteExpiredConferencesAfterHoldPeriod
    delete_expired_conferences_after_hold_period = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* expiredConferenceHoldPeriodDays
    expired_conference_hold_period_days = Field(type=int, required=True, mutable=False)
    #: str: *Optional* recordingWebAppURL
    recording_web_app_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* recordingFileFormat
    recording_file_format = Field(type=str, required=True, mutable=False)
    #: bool: *Required* terminateAfterGracePeriod
    terminate_after_grace_period = Field(type=bool, required=True, mutable=False)
    #: OCI.MeetMeConferencingConferenceDuration: *Required* conferenceGracePeriodMinutes
    conference_grace_period_minutes = Field(
        type=OCI.MeetMeConferencingConferenceDuration, required=True, mutable=False,
    )
    #: int: *Required* conferenceParticipantEarlyEntryMinutes
    conference_participant_early_entry_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConferenceExpiryNotification
    enable_conference_expiry_notification = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableActiveConferenceNotification
    enable_active_conference_notification = Field(type=bool, required=True, mutable=False)
    #: str: *Required* conferenceFromAddress
    conference_from_address = Field(type=str, required=True, mutable=False)


class SystemMeetMeConferencingGetResponse19(OCIResponse):
    """
    Response to ``SystemMeetMeConferencingGetRequest19()``.

    """

    _ELEMENTS = (
        E("conference_id_length", "conferenceIdLength", int, is_required=True),
        E("moderator_pin_length", "moderatorPinLength", int, is_required=True),
        E(
            "enable_conference_end_date_restriction",
            "enableConferenceEndDateRestriction", bool, is_required=True,
        ),
        E(
            "conference_end_date_restriction_months",
            "conferenceEndDateRestrictionMonths", int, is_required=True,
        ),
        E(
            "delete_expired_conferences_after_hold_period",
            "deleteExpiredConferencesAfterHoldPeriod", bool, is_required=True,
        ),
        E(
            "expired_conference_hold_period_days", "expiredConferenceHoldPeriodDays", int,
            is_required=True,
        ),
        E("recording_web_app_url", "recordingWebAppURL", str),
        E("recording_file_format", "recordingFileFormat", str, is_required=True),
        E(
            "terminate_after_grace_period", "terminateAfterGracePeriod", bool,
            is_required=True,
        ),
        E(
            "conference_grace_period_minutes", "conferenceGracePeriodMinutes",
            OCI.MeetMeConferencingConferenceDuration, is_complex=True, is_required=True,
        ),
        E(
            "conference_participant_early_entry_minutes",
            "conferenceParticipantEarlyEntryMinutes", int, is_required=True,
        ),
        E(
            "enable_conference_expiry_notification", "enableConferenceExpiryNotification",
            bool, is_required=True,
        ),
        E(
            "enable_active_conference_notification", "enableActiveConferenceNotification",
            bool, is_required=True,
        ),
        E("conference_from_address", "conferenceFromAddress", str, is_required=True),
        E(
            "conference_active_talker_refresh_interval_seconds",
            "conferenceActiveTalkerRefreshIntervalSeconds", int, is_required=True,
        ),
    )

    #: int: *Required* conferenceIdLength
    conference_id_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* moderatorPinLength
    moderator_pin_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConferenceEndDateRestriction
    enable_conference_end_date_restriction = Field(type=bool, required=True, mutable=False)
    #: int: *Required* conferenceEndDateRestrictionMonths
    conference_end_date_restriction_months = Field(type=int, required=True, mutable=False)
    #: bool: *Required* deleteExpiredConferencesAfterHoldPeriod
    delete_expired_conferences_after_hold_period = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Required* expiredConferenceHoldPeriodDays
    expired_conference_hold_period_days = Field(type=int, required=True, mutable=False)
    #: str: *Optional* recordingWebAppURL
    recording_web_app_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* recordingFileFormat
    recording_file_format = Field(type=str, required=True, mutable=False)
    #: bool: *Required* terminateAfterGracePeriod
    terminate_after_grace_period = Field(type=bool, required=True, mutable=False)
    #: OCI.MeetMeConferencingConferenceDuration: *Required* conferenceGracePeriodMinutes
    conference_grace_period_minutes = Field(
        type=OCI.MeetMeConferencingConferenceDuration, required=True, mutable=False,
    )
    #: int: *Required* conferenceParticipantEarlyEntryMinutes
    conference_participant_early_entry_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableConferenceExpiryNotification
    enable_conference_expiry_notification = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableActiveConferenceNotification
    enable_active_conference_notification = Field(type=bool, required=True, mutable=False)
    #: str: *Required* conferenceFromAddress
    conference_from_address = Field(type=str, required=True, mutable=False)
    #: int: *Required* conferenceActiveTalkerRefreshIntervalSeconds
    conference_active_talker_refresh_interval_seconds = Field(
        type=int, required=True, mutable=False,
    )


class SystemNetworkClassOfServiceGetResponse(OCIResponse):
    """
    Response to the ``SystemNetworkClassOfServiceGetRequest()``.

    The response contains the Network Class of Service information.  Replaced by:
    ``SystemNetworkClassOfServiceGetResponse17()``
    """

    _ELEMENTS = (
        E("description", "description", str),
        E(
            "communication_barring_profile0", "communicationBarringProfile0",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile1", "communicationBarringProfile1",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile2", "communicationBarringProfile2",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile3", "communicationBarringProfile3",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile4", "communicationBarringProfile4",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile5", "communicationBarringProfile5",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile6", "communicationBarringProfile6",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile7", "communicationBarringProfile7",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile8", "communicationBarringProfile8",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile9", "communicationBarringProfile9",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile0
    communication_barring_profile0 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile1
    communication_barring_profile1 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile2
    communication_barring_profile2 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile3
    communication_barring_profile3 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile4
    communication_barring_profile4 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile5
    communication_barring_profile5 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile6
    communication_barring_profile6 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile7
    communication_barring_profile7 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile8
    communication_barring_profile8 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile9
    communication_barring_profile9 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )


class SystemNetworkClassOfServiceGetResponse17(OCIResponse):
    """
    Response to the ``SystemNetworkClassOfServiceGetRequest17()``.

    The response contains the Network Class of Service information.  Replaced by
    ``SystemNetworkClassOfServiceGetResponse19sp1()``
    """

    _ELEMENTS = (
        E("description", "description", str),
        E(
            "communication_barring_profile0", "communicationBarringProfile0",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile1", "communicationBarringProfile1",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile2", "communicationBarringProfile2",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile3", "communicationBarringProfile3",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile4", "communicationBarringProfile4",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile5", "communicationBarringProfile5",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile6", "communicationBarringProfile6",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile7", "communicationBarringProfile7",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile8", "communicationBarringProfile8",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile9", "communicationBarringProfile9",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E("network_translation_index", "networkTranslationIndex", str),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile0
    communication_barring_profile0 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile1
    communication_barring_profile1 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile2
    communication_barring_profile2 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile3
    communication_barring_profile3 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile4
    communication_barring_profile4 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile5
    communication_barring_profile5 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile6
    communication_barring_profile6 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile7
    communication_barring_profile7 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile8
    communication_barring_profile8 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile9
    communication_barring_profile9 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: str: *Optional* networkTranslationIndex
    network_translation_index = Field(type=str, required=False, mutable=False)


class SystemNetworkClassOfServiceGetResponse19sp1(OCIResponse):
    """
    Response to the ``SystemNetworkClassOfServiceGetRequest19sp1()``.

    The response contains the Network Class of Service information.
    """

    _ELEMENTS = (
        E("description", "description", str),
        E(
            "communication_barring_profile0", "communicationBarringProfile0",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile1", "communicationBarringProfile1",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile2", "communicationBarringProfile2",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile3", "communicationBarringProfile3",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile4", "communicationBarringProfile4",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile5", "communicationBarringProfile5",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile6", "communicationBarringProfile6",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile7", "communicationBarringProfile7",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile8", "communicationBarringProfile8",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E(
            "communication_barring_profile9", "communicationBarringProfile9",
            OCI.NetworkClassOfServiceCommunicationBarringProfile, is_complex=True,
        ),
        E("network_translation_index", "networkTranslationIndex", str),
        E("call_processing_policy_profile_name", "callProcessingPolicyProfileName", str),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile0
    communication_barring_profile0 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile1
    communication_barring_profile1 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile2
    communication_barring_profile2 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile3
    communication_barring_profile3 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile4
    communication_barring_profile4 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile5
    communication_barring_profile5 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile6
    communication_barring_profile6 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile7
    communication_barring_profile7 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile8
    communication_barring_profile8 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: OCI.NetworkClassOfServiceCommunicationBarringProfile: *Optional*
    #: communicationBarringProfile9
    communication_barring_profile9 = Field(
        type=OCI.NetworkClassOfServiceCommunicationBarringProfile, required=False,
        mutable=False,
    )
    #: str: *Optional* networkTranslationIndex
    network_translation_index = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callProcessingPolicyProfileName
    call_processing_policy_profile_name = Field(type=str, required=False, mutable=False)


class SystemSIPDeviceTypeGetResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest()``.

    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("authentication_override", "authenticationOverride", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E(
            "use_business_trunking_contact", "useBusinessTrunkingContact", bool,
            is_required=True,
        ),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E("cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptions, is_complex=True),
        E("protocol_choice", "protocolChoice", str, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* authenticationOverride
    authentication_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useBusinessTrunkingContact
    use_business_trunking_contact = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptions: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptions, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse14sp1(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest14sp1()``.

    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("authentication_override", "authenticationOverride", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E(
            "use_business_trunking_contact", "useBusinessTrunkingContact", bool,
            is_required=True,
        ),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E("cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptions, is_complex=True),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* authenticationOverride
    authentication_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useBusinessTrunkingContact
    use_business_trunking_contact = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptions: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptions, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse14sp2(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest14sp2()``.

    Replaced By: ``SystemSIPDeviceTypeGetResponse14sp3()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E(
            "use_business_trunking_contact", "useBusinessTrunkingContact", bool,
            is_required=True,
        ),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E("cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptions, is_complex=True),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useBusinessTrunkingContact
    use_business_trunking_contact = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptions: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptions, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest14sp3()``.

    Replaced by: ``SystemSIPDeviceTypeGetResponse14sp6()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E(
            "use_business_trunking_contact", "useBusinessTrunkingContact", bool,
            is_required=True,
        ),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E("cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptions, is_complex=True),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E("tdm_overlay", "tdmOverlay", bool, is_required=True),
        E(
            "supports_broad_works_info_for_call_waiting",
            "supportsBroadWorksINFOForCallWaiting", bool, is_required=True,
        ),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useBusinessTrunkingContact
    use_business_trunking_contact = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptions: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptions, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* tdmOverlay
    tdm_overlay = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportsBroadWorksINFOForCallWaiting
    supports_broad_works_info_for_call_waiting = Field(
        type=bool, required=True, mutable=False,
    )


class SystemScheduleGetEventResponse(OCIResponse):
    """
    Response to ``SystemScheduleGetEventRequest()``.

    The response contains the event of the system schedulable.
    """

    _ELEMENTS = (
        E("start_date", "startDate", str, is_required=True),
        E("all_day_event", "allDayEvent", bool),
        E("start_time", "startTime", OCI.HourMinute, is_complex=True, is_required=True),
        E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
        E("end_date", "endDate", str, is_required=True),
        E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
    )

    #: str: *Required* startDate
    start_date = Field(type=str, required=True, mutable=False)
    #: bool: *Optional* allDayEvent
    all_day_event = Field(type=bool, required=False, mutable=False)
    #: OCI.HourMinute: *Required* startTime
    start_time = Field(type=OCI.HourMinute, required=True, mutable=False)
    #: OCI.HourMinute: *Required* endTime
    end_time = Field(type=OCI.HourMinute, required=True, mutable=False)
    #: str: *Required* endDate
    end_date = Field(type=str, required=True, mutable=False)
    #: OCI.Recurrence: *Optional* recurrence
    recurrence = Field(type=OCI.Recurrence, required=False, mutable=False)


class SystemTimeScheduleGetResponse(OCIResponse):
    """
    Response to the ``SystemTimeScheduleGetRequest()``.

    The response contains the system time schedule's information.
    """

    _ELEMENTS = (
        E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
        E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
        E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
        E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
        E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
        E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
        E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
        E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
        E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
        E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
        E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
        E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
        E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
        E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
        E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
        E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
        E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
        E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
        E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
        E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
    )

    #: OCI.TimeInterval: *Optional* timeInterval01
    time_interval01 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval02
    time_interval02 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval03
    time_interval03 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval04
    time_interval04 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval05
    time_interval05 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval06
    time_interval06 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval07
    time_interval07 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval08
    time_interval08 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval09
    time_interval09 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval10
    time_interval10 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval11
    time_interval11 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval12
    time_interval12 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval13
    time_interval13 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval14
    time_interval14 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval15
    time_interval15 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval16
    time_interval16 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval17
    time_interval17 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval18
    time_interval18 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval19
    time_interval19 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval20
    time_interval20 = Field(type=OCI.TimeInterval, required=False, mutable=False)


class SystemZoneCallingRestrictionsNetAddressGetListResponse(OCIResponse):
    """
    Response to ``SystemZoneCallingRestrictionsNetAddressGetListRequest()``.

    Replaced by: ``SystemZoneNetAddressGetListResponse()``
    """

    _ELEMENTS = (
        E("net_address", "netAddress", str, is_array=True),
        E(
            "net_address_range", "netAddressRange", OCI.IPAddressRange, is_complex=True,
            is_array=True,
        ),
    )

    #: list(str): *Optional* netAddress  *Array*
    net_address = Field(type=list, required=False, mutable=False)
    #: list(OCI.IPAddressRange): *Optional* netAddressRange  *Array*
    net_address_range = Field(type=list, required=False, mutable=False)


class SystemZoneNetAddressGetListResponse(OCIResponse):
    """
    Response to ``SystemZoneNetAddressGetListRequest()``.

    """

    _ELEMENTS = (
        E("net_address", "netAddress", str, is_array=True),
        E(
            "net_address_range", "netAddressRange", OCI.IPAddressRange, is_complex=True,
            is_array=True,
        ),
    )

    #: list(str): *Optional* netAddress  *Array*
    net_address = Field(type=list, required=False, mutable=False)
    #: list(OCI.IPAddressRange): *Optional* netAddressRange  *Array*
    net_address_range = Field(type=list, required=False, mutable=False)


class UserAlternateNumbersGetResponse(OCIResponse):
    """
    Response to ``UserAlternateNumbersGetRequest()``.

    """

    _ELEMENTS = (
        E("distinctive_ring", "distinctiveRing", bool, is_required=True),
        E("alternate_entry01", "alternateEntry01", OCI.AlternateNumberEntry, is_complex=True),
        E("alternate_entry02", "alternateEntry02", OCI.AlternateNumberEntry, is_complex=True),
        E("alternate_entry03", "alternateEntry03", OCI.AlternateNumberEntry, is_complex=True),
        E("alternate_entry04", "alternateEntry04", OCI.AlternateNumberEntry, is_complex=True),
        E("alternate_entry05", "alternateEntry05", OCI.AlternateNumberEntry, is_complex=True),
        E("alternate_entry06", "alternateEntry06", OCI.AlternateNumberEntry, is_complex=True),
        E("alternate_entry07", "alternateEntry07", OCI.AlternateNumberEntry, is_complex=True),
        E("alternate_entry08", "alternateEntry08", OCI.AlternateNumberEntry, is_complex=True),
        E("alternate_entry09", "alternateEntry09", OCI.AlternateNumberEntry, is_complex=True),
        E("alternate_entry10", "alternateEntry10", OCI.AlternateNumberEntry, is_complex=True),
    )

    #: bool: *Required* distinctiveRing
    distinctive_ring = Field(type=bool, required=True, mutable=False)
    #: OCI.AlternateNumberEntry: *Optional* alternateEntry01
    alternate_entry01 = Field(type=OCI.AlternateNumberEntry, required=False, mutable=False)
    #: OCI.AlternateNumberEntry: *Optional* alternateEntry02
    alternate_entry02 = Field(type=OCI.AlternateNumberEntry, required=False, mutable=False)
    #: OCI.AlternateNumberEntry: *Optional* alternateEntry03
    alternate_entry03 = Field(type=OCI.AlternateNumberEntry, required=False, mutable=False)
    #: OCI.AlternateNumberEntry: *Optional* alternateEntry04
    alternate_entry04 = Field(type=OCI.AlternateNumberEntry, required=False, mutable=False)
    #: OCI.AlternateNumberEntry: *Optional* alternateEntry05
    alternate_entry05 = Field(type=OCI.AlternateNumberEntry, required=False, mutable=False)
    #: OCI.AlternateNumberEntry: *Optional* alternateEntry06
    alternate_entry06 = Field(type=OCI.AlternateNumberEntry, required=False, mutable=False)
    #: OCI.AlternateNumberEntry: *Optional* alternateEntry07
    alternate_entry07 = Field(type=OCI.AlternateNumberEntry, required=False, mutable=False)
    #: OCI.AlternateNumberEntry: *Optional* alternateEntry08
    alternate_entry08 = Field(type=OCI.AlternateNumberEntry, required=False, mutable=False)
    #: OCI.AlternateNumberEntry: *Optional* alternateEntry09
    alternate_entry09 = Field(type=OCI.AlternateNumberEntry, required=False, mutable=False)
    #: OCI.AlternateNumberEntry: *Optional* alternateEntry10
    alternate_entry10 = Field(type=OCI.AlternateNumberEntry, required=False, mutable=False)


class UserAlternateNumbersGetResponse17(OCIResponse):
    """
    Response to ``UserAlternateNumbersGetRequest17()``.

    Replaced by: ``UserAlternateNumbersGetResponse21()``
    """

    _ELEMENTS = (
        E("distinctive_ring", "distinctiveRing", bool, is_required=True),
        E(
            "alternate_entry01", "alternateEntry01", OCI.AlternateNumberEntry17,
            is_complex=True,
        ),
        E(
            "alternate_entry02", "alternateEntry02", OCI.AlternateNumberEntry17,
            is_complex=True,
        ),
        E(
            "alternate_entry03", "alternateEntry03", OCI.AlternateNumberEntry17,
            is_complex=True,
        ),
        E(
            "alternate_entry04", "alternateEntry04", OCI.AlternateNumberEntry17,
            is_complex=True,
        ),
        E(
            "alternate_entry05", "alternateEntry05", OCI.AlternateNumberEntry17,
            is_complex=True,
        ),
        E(
            "alternate_entry06", "alternateEntry06", OCI.AlternateNumberEntry17,
            is_complex=True,
        ),
        E(
            "alternate_entry07", "alternateEntry07", OCI.AlternateNumberEntry17,
            is_complex=True,
        ),
        E(
            "alternate_entry08", "alternateEntry08", OCI.AlternateNumberEntry17,
            is_complex=True,
        ),
        E(
            "alternate_entry09", "alternateEntry09", OCI.AlternateNumberEntry17,
            is_complex=True,
        ),
        E(
            "alternate_entry10", "alternateEntry10", OCI.AlternateNumberEntry17,
            is_complex=True,
        ),
    )

    #: bool: *Required* distinctiveRing
    distinctive_ring = Field(type=bool, required=True, mutable=False)
    #: OCI.AlternateNumberEntry17: *Optional* alternateEntry01
    alternate_entry01 = Field(type=OCI.AlternateNumberEntry17, required=False, mutable=False)
    #: OCI.AlternateNumberEntry17: *Optional* alternateEntry02
    alternate_entry02 = Field(type=OCI.AlternateNumberEntry17, required=False, mutable=False)
    #: OCI.AlternateNumberEntry17: *Optional* alternateEntry03
    alternate_entry03 = Field(type=OCI.AlternateNumberEntry17, required=False, mutable=False)
    #: OCI.AlternateNumberEntry17: *Optional* alternateEntry04
    alternate_entry04 = Field(type=OCI.AlternateNumberEntry17, required=False, mutable=False)
    #: OCI.AlternateNumberEntry17: *Optional* alternateEntry05
    alternate_entry05 = Field(type=OCI.AlternateNumberEntry17, required=False, mutable=False)
    #: OCI.AlternateNumberEntry17: *Optional* alternateEntry06
    alternate_entry06 = Field(type=OCI.AlternateNumberEntry17, required=False, mutable=False)
    #: OCI.AlternateNumberEntry17: *Optional* alternateEntry07
    alternate_entry07 = Field(type=OCI.AlternateNumberEntry17, required=False, mutable=False)
    #: OCI.AlternateNumberEntry17: *Optional* alternateEntry08
    alternate_entry08 = Field(type=OCI.AlternateNumberEntry17, required=False, mutable=False)
    #: OCI.AlternateNumberEntry17: *Optional* alternateEntry09
    alternate_entry09 = Field(type=OCI.AlternateNumberEntry17, required=False, mutable=False)
    #: OCI.AlternateNumberEntry17: *Optional* alternateEntry10
    alternate_entry10 = Field(type=OCI.AlternateNumberEntry17, required=False, mutable=False)


class UserAlternateNumbersGetResponse21(OCIResponse):
    """
    Response to ``UserAlternateNumbersGetRequest21()``.

    """

    _ELEMENTS = (
        E("distinctive_ring", "distinctiveRing", bool, is_required=True),
        E(
            "alternate_entry01", "alternateEntry01", OCI.AlternateNumberEntry21,
            is_complex=True,
        ),
        E(
            "alternate_entry02", "alternateEntry02", OCI.AlternateNumberEntry21,
            is_complex=True,
        ),
        E(
            "alternate_entry03", "alternateEntry03", OCI.AlternateNumberEntry21,
            is_complex=True,
        ),
        E(
            "alternate_entry04", "alternateEntry04", OCI.AlternateNumberEntry21,
            is_complex=True,
        ),
        E(
            "alternate_entry05", "alternateEntry05", OCI.AlternateNumberEntry21,
            is_complex=True,
        ),
        E(
            "alternate_entry06", "alternateEntry06", OCI.AlternateNumberEntry21,
            is_complex=True,
        ),
        E(
            "alternate_entry07", "alternateEntry07", OCI.AlternateNumberEntry21,
            is_complex=True,
        ),
        E(
            "alternate_entry08", "alternateEntry08", OCI.AlternateNumberEntry21,
            is_complex=True,
        ),
        E(
            "alternate_entry09", "alternateEntry09", OCI.AlternateNumberEntry21,
            is_complex=True,
        ),
        E(
            "alternate_entry10", "alternateEntry10", OCI.AlternateNumberEntry21,
            is_complex=True,
        ),
    )

    #: bool: *Required* distinctiveRing
    distinctive_ring = Field(type=bool, required=True, mutable=False)
    #: OCI.AlternateNumberEntry21: *Optional* alternateEntry01
    alternate_entry01 = Field(type=OCI.AlternateNumberEntry21, required=False, mutable=False)
    #: OCI.AlternateNumberEntry21: *Optional* alternateEntry02
    alternate_entry02 = Field(type=OCI.AlternateNumberEntry21, required=False, mutable=False)
    #: OCI.AlternateNumberEntry21: *Optional* alternateEntry03
    alternate_entry03 = Field(type=OCI.AlternateNumberEntry21, required=False, mutable=False)
    #: OCI.AlternateNumberEntry21: *Optional* alternateEntry04
    alternate_entry04 = Field(type=OCI.AlternateNumberEntry21, required=False, mutable=False)
    #: OCI.AlternateNumberEntry21: *Optional* alternateEntry05
    alternate_entry05 = Field(type=OCI.AlternateNumberEntry21, required=False, mutable=False)
    #: OCI.AlternateNumberEntry21: *Optional* alternateEntry06
    alternate_entry06 = Field(type=OCI.AlternateNumberEntry21, required=False, mutable=False)
    #: OCI.AlternateNumberEntry21: *Optional* alternateEntry07
    alternate_entry07 = Field(type=OCI.AlternateNumberEntry21, required=False, mutable=False)
    #: OCI.AlternateNumberEntry21: *Optional* alternateEntry08
    alternate_entry08 = Field(type=OCI.AlternateNumberEntry21, required=False, mutable=False)
    #: OCI.AlternateNumberEntry21: *Optional* alternateEntry09
    alternate_entry09 = Field(type=OCI.AlternateNumberEntry21, required=False, mutable=False)
    #: OCI.AlternateNumberEntry21: *Optional* alternateEntry10
    alternate_entry10 = Field(type=OCI.AlternateNumberEntry21, required=False, mutable=False)


class UserAssignedServicesGetListResponse(OCIResponse):
    """
    Response to ``UserAssignedServicesGetListRequest()``.

    A user can have both user services and group services because of music on hold.
    """

    _ELEMENTS = (
        E(
            "group_service_entry", "groupServiceEntry", OCI.AssignedGroupServicesEntry,
            is_complex=True, is_array=True,
        ),
        E(
            "user_service_entry", "userServiceEntry", OCI.AssignedUserServicesEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.AssignedGroupServicesEntry): *Optional* groupServiceEntry  *Array*
    group_service_entry = Field(type=list, required=False, mutable=False)
    #: list(OCI.AssignedUserServicesEntry): *Optional* userServiceEntry  *Array*
    user_service_entry = Field(type=list, required=False, mutable=False)


class UserBasicCallLogsGetListResponse(OCIResponse):
    """
    Response to ``UserBasicCallLogsGetListRequest()``.

    Replaced By: ``UserBasicCallLogsGetListResponse14sp4()``
    """

    _ELEMENTS = (
        E("placed", "placed", OCI.BasicCallLogsEntry, is_complex=True, is_array=True),
        E("received", "received", OCI.BasicCallLogsEntry, is_complex=True, is_array=True),
        E("missed", "missed", OCI.BasicCallLogsEntry, is_complex=True, is_array=True),
    )

    #: list(OCI.BasicCallLogsEntry): *Optional* placed  *Array*
    placed = Field(type=list, required=False, mutable=False)
    #: list(OCI.BasicCallLogsEntry): *Optional* received  *Array*
    received = Field(type=list, required=False, mutable=False)
    #: list(OCI.BasicCallLogsEntry): *Optional* missed  *Array*
    missed = Field(type=list, required=False, mutable=False)


class UserBasicCallLogsGetListResponse14sp4(OCIResponse):
    """
    Response to ``UserBasicCallLogsGetListRequest14sp4()``.

    """

    _ELEMENTS = (
        E("placed", "placed", OCI.CallLogsEntry, is_complex=True, is_array=True),
        E("received", "received", OCI.CallLogsEntry, is_complex=True, is_array=True),
        E("missed", "missed", OCI.CallLogsEntry, is_complex=True, is_array=True),
    )

    #: list(OCI.CallLogsEntry): *Optional* placed  *Array*
    placed = Field(type=list, required=False, mutable=False)
    #: list(OCI.CallLogsEntry): *Optional* received  *Array*
    received = Field(type=list, required=False, mutable=False)
    #: list(OCI.CallLogsEntry): *Optional* missed  *Array*
    missed = Field(type=list, required=False, mutable=False)


class UserBroadWorksAnywhereGetSelectiveCriteriaResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetSelectiveCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserBroadWorksAnywhereGetSelectiveCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetSelectiveCriteriaRequest16()``.

    Replaced by: ``UserBroadWorksAnywhereGetSelectiveCriteriaResponse21()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserBroadWorksAnywhereGetSelectiveCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetSelectiveCriteriaRequest21()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class UserBroadWorksMobilityGetResponse21(OCIResponse):
    """
    Response to a ``UserBroadWorksMobilityGetRequest21()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "use_mobile_identity_call_anchoring", "useMobileIdentityCallAnchoring", bool,
            is_required=True,
        ),
        E("prevent_calls_to_own_mobiles", "preventCallsToOwnMobiles", bool, is_required=True),
        E(
            "mobile_identity", "mobileIdentity",
            OCI.BroadWorksMobilityUserMobileIdentityEntry, is_complex=True, is_array=True,
        ),
        E(
            "profile_identity_devices_to_ring", "profileIdentityDevicesToRing", str,
            is_required=True,
        ),
        E(
            "profile_identity_include_shared_call_appearance",
            "profileIdentityIncludeSharedCallAppearance", bool, is_required=True,
        ),
        E(
            "profile_identity_include_broadworks_anywhere",
            "profileIdentityIncludeBroadworksAnywhere", bool, is_required=True,
        ),
        E(
            "profile_identity_include_executive_assistant",
            "profileIdentityIncludeExecutiveAssistant", bool, is_required=True,
        ),
        E(
            "profile_identity_mobile_number_alerted",
            "profileIdentityMobileNumberAlerted", str, is_array=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMobileIdentityCallAnchoring
    use_mobile_identity_call_anchoring = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* preventCallsToOwnMobiles
    prevent_calls_to_own_mobiles = Field(type=bool, required=True, mutable=False)
    #: list(OCI.BroadWorksMobilityUserMobileIdentityEntry): *Optional* mobileIdentity
    #: *Array*
    mobile_identity = Field(type=list, required=False, mutable=False)
    #: str: *Required* profileIdentityDevicesToRing
    profile_identity_devices_to_ring = Field(type=str, required=True, mutable=False)
    #: bool: *Required* profileIdentityIncludeSharedCallAppearance
    profile_identity_include_shared_call_appearance = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* profileIdentityIncludeBroadworksAnywhere
    profile_identity_include_broadworks_anywhere = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* profileIdentityIncludeExecutiveAssistant
    profile_identity_include_executive_assistant = Field(
        type=bool, required=True, mutable=False,
    )
    #: list(str): *Optional* profileIdentityMobileNumberAlerted  *Array*
    profile_identity_mobile_number_alerted = Field(type=list, required=False, mutable=False)


class UserCallCenterGetAvailableDNISListResponse(OCIResponse):
    """
    Response to ``UserCallCenterGetAvailableDNISListRequest()``.

    Contains a list of available DNIS for agent to select.
    """

    _ELEMENTS = (
        E("available_dnis", "availableDNIS", OCI.DNISKey, is_complex=True, is_array=True),
    )

    #: list(OCI.DNISKey): *Optional* availableDNIS  *Array*
    available_dnis = Field(type=list, required=False, mutable=False)


class UserCallCenterGetResponse17(OCIResponse):
    """
    Response to the ``UserCallCenterGetRequest17()``.

    Contains the user's call center settings.  Indicates whether the agent is current
    available (logged in) to each call center in the list.  Contains a table with column
    headings: "Service User Id", "Phone Number", "Extension", "Available", "Logoff
    Allowed", "Type", and "Priority". Replaced by ``UserCallCenterGetResponse17sp4()``.
    """

    _ELEMENTS = (
        E("agent_acd_state", "agentACDState", str),
        E("agent_unavailable_code", "agentUnavailableCode", str),
        E("use_default_guard_timer", "useDefaultGuardTimer", bool, is_required=True),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "use_system_default_unavailable_settings",
            "useSystemDefaultUnavailableSettings", bool,
        ),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool,
        ),
        E("force_unavailable_on_personal_calls", "forceUnavailableOnPersonalCalls", bool),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int,
        ),
        E("make_outgoing_calls_as_call_center", "makeOutgoingCallsAsCallCenter", bool),
        E("outgoing_call_dnis", "outgoingCallDNIS", OCI.DNISKey, is_complex=True),
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Optional* agentACDState
    agent_acd_state = Field(type=str, required=False, mutable=False)
    #: str: *Optional* agentUnavailableCode
    agent_unavailable_code = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useDefaultGuardTimer
    use_default_guard_timer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* useSystemDefaultUnavailableSettings
    use_system_default_unavailable_settings = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceUnavailableOnPersonalCalls
    force_unavailable_on_personal_calls = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=False, mutable=False,
    )
    #: int: *Optional* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* makeOutgoingCallsAsCallCenter
    make_outgoing_calls_as_call_center = Field(type=bool, required=False, mutable=False)
    #: OCI.DNISKey: *Optional* outgoingCallDNIS
    outgoing_call_dnis = Field(type=OCI.DNISKey, required=False, mutable=False)
    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class UserCallCenterGetResponse17sp4(OCIResponse):
    """
    Response to the ``UserCallCenterGetRequest17sp4()``.

    Contains the user's call center settings.  Indicates whether the agent is current
    available (logged in) to each call center in the list.  Contains a table with column
    headings: "Service User Id", "Phone Number", "Extension", "Available", "Logoff
    Allowed", "Type", and "Priority". Replaced by ``UserCallCenterGetResponse19()``
    """

    _ELEMENTS = (
        E("agent_acd_state", "agentACDState", str),
        E("agent_unavailable_code", "agentUnavailableCode", str),
        E("use_default_guard_timer", "useDefaultGuardTimer", bool, is_required=True),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "use_system_default_unavailable_settings",
            "useSystemDefaultUnavailableSettings", bool,
        ),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int,
        ),
        E(
            "force_agent_unavailable_on_not_reachable",
            "forceAgentUnavailableOnNotReachable", bool,
        ),
        E("make_outgoing_calls_as_call_center", "makeOutgoingCallsAsCallCenter", bool),
        E("outgoing_call_dnis", "outgoingCallDNIS", OCI.DNISKey, is_complex=True),
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Optional* agentACDState
    agent_acd_state = Field(type=str, required=False, mutable=False)
    #: str: *Optional* agentUnavailableCode
    agent_unavailable_code = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useDefaultGuardTimer
    use_default_guard_timer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* useSystemDefaultUnavailableSettings
    use_system_default_unavailable_settings = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=False, mutable=False,
    )
    #: int: *Optional* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnNotReachable
    force_agent_unavailable_on_not_reachable = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* makeOutgoingCallsAsCallCenter
    make_outgoing_calls_as_call_center = Field(type=bool, required=False, mutable=False)
    #: OCI.DNISKey: *Optional* outgoingCallDNIS
    outgoing_call_dnis = Field(type=OCI.DNISKey, required=False, mutable=False)
    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class UserCallCenterGetResponse19(OCIResponse):
    """
    Response to the ``UserCallCenterGetRequest19()``.

    Contains the user's call center settings.  Indicates whether the agent is current
    available (logged in) to each call center in the list.  Contains a table with column
    headings: "Service User Id", "Phone Number", "Extension", "Available", "Logoff
    Allowed", "Type", "Priority","Routing Policy" and "Skill Level". The valid "Routing
    Type" values are "Priority Based" and "Skill Based". This column is only populated for
    Premium Call Centers.  The valid "Skill Level" values are of from 1-20. This column is
    only populated for Premium Skill Based Call Centers.
    """

    _ELEMENTS = (
        E("agent_acd_state", "agentACDState", str),
        E("agent_threshold_profile_name", "agentThresholdProfileName", str),
        E("agent_unavailable_code", "agentUnavailableCode", str),
        E("use_default_guard_timer", "useDefaultGuardTimer", bool, is_required=True),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "use_system_default_unavailable_settings",
            "useSystemDefaultUnavailableSettings", bool,
        ),
        E(
            "force_agent_unavailable_on_dnd_activation",
            "forceAgentUnavailableOnDNDActivation", bool,
        ),
        E(
            "force_agent_unavailable_on_personal_calls",
            "forceAgentUnavailableOnPersonalCalls", bool,
        ),
        E(
            "force_agent_unavailable_on_bounced_call_limit",
            "forceAgentUnavailableOnBouncedCallLimit", bool,
        ),
        E(
            "number_consecutive_bounced_calls_to_force_agent_unavailable",
            "numberConsecutiveBouncedCallsToForceAgentUnavailable", int,
        ),
        E(
            "force_agent_unavailable_on_not_reachable",
            "forceAgentUnavailableOnNotReachable", bool,
        ),
        E("make_outgoing_calls_as_call_center", "makeOutgoingCallsAsCallCenter", bool),
        E("outgoing_call_dnis", "outgoingCallDNIS", OCI.DNISKey, is_complex=True),
        E(
            "call_center_table", "callCenterTable", list, is_complex=True,
            is_required=True, is_table=True,
        ),
    )

    #: str: *Optional* agentACDState
    agent_acd_state = Field(type=str, required=False, mutable=False)
    #: str: *Optional* agentThresholdProfileName
    agent_threshold_profile_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* agentUnavailableCode
    agent_unavailable_code = Field(type=str, required=False, mutable=False)
    #: bool: *Required* useDefaultGuardTimer
    use_default_guard_timer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* useSystemDefaultUnavailableSettings
    use_system_default_unavailable_settings = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* forceAgentUnavailableOnDNDActivation
    force_agent_unavailable_on_dnd_activation = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnPersonalCalls
    force_agent_unavailable_on_personal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnBouncedCallLimit
    force_agent_unavailable_on_bounced_call_limit = Field(
        type=bool, required=False, mutable=False,
    )
    #: int: *Optional* numberConsecutiveBouncedCallsToForceAgentUnavailable
    number_consecutive_bounced_calls_to_force_agent_unavailable = Field(
        type=int, required=False, mutable=False,
    )
    #: bool: *Optional* forceAgentUnavailableOnNotReachable
    force_agent_unavailable_on_not_reachable = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* makeOutgoingCallsAsCallCenter
    make_outgoing_calls_as_call_center = Field(type=bool, required=False, mutable=False)
    #: OCI.DNISKey: *Optional* outgoingCallDNIS
    outgoing_call_dnis = Field(type=OCI.DNISKey, required=False, mutable=False)
    #: list: *Required* callCenterTable  *Tabular*
    call_center_table = Field(type=list, required=True, mutable=False)


class UserCallForwardingSelectiveGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserCallForwardingSelectiveGetCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("forward_to_number_selection", "forwardToNumberSelection", str, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: str: *Required* forwardToNumberSelection
    forward_to_number_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserCallForwardingSelectiveGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserCallForwardingSelectiveGetCriteriaRequest16()``.

    Replaced by: ``UserCallForwardingSelectiveGetCriteriaResponse21()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("forward_to_number_selection", "forwardToNumberSelection", str, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Required* forwardToNumberSelection
    forward_to_number_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserCallForwardingSelectiveGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserCallForwardingSelectiveGetCriteriaRequest21()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("forward_to_number_selection", "forwardToNumberSelection", str, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Required* forwardToNumberSelection
    forward_to_number_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class UserCallMeNowGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserCallMeNowGetCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("reject_call", "rejectCall", bool, is_required=True),
        E(
            "to_dn_criteria", "toDnCriteria", OCI.CallMeNowToDnCriteria, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* rejectCall
    reject_call = Field(type=bool, required=True, mutable=False)
    #: OCI.CallMeNowToDnCriteria: *Required* toDnCriteria
    to_dn_criteria = Field(type=OCI.CallMeNowToDnCriteria, required=True, mutable=False)


class UserCallNotifyGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserCallNotifyGetCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserCallNotifyGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserCallNotifyGetCriteriaRequest16()``.

    Replaced by: ``UserCallNotifyGetCriteriaResponse21()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserCallNotifyGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserCallNotifyGetCriteriaRequest21()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class UserCallToNumberGetAvailableListResponse(OCIResponse):
    """
    Response to the ``UserCallToNumberGetAvailableListRequest()``.

    Contains a list of the user available Call to Numbers".
    """

    _ELEMENTS = (
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class UserCollaborateBridgeGetResponse(OCIResponse):
    """
    The system-level collaborate supportOutdial setting is returned in the response when
    the system-level collaborate supportOutdial setting is disabled.

    Response to ``UserCollaborateBridgeGetRequest()``.
    """

    _ELEMENTS = (
        E("bridge_id", "bridgeId", str, is_required=True),
        E("bridge_name", "bridgeName", str, is_required=True),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E(
            "alternate_number_entry", "alternateNumberEntry", OCI.AlternateNumberEntry21,
            is_complex=True, is_array=True,
        ),
        E("support_out_dial", "supportOutDial", bool, is_required=True),
        E(
            "max_collaborate_room_participants", "maxCollaborateRoomParticipants", int,
            is_required=True,
        ),
    )

    #: str: *Required* bridgeId
    bridge_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* bridgeName
    bridge_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: list(OCI.AlternateNumberEntry21): *Optional* alternateNumberEntry  *Array*
    alternate_number_entry = Field(type=list, required=False, mutable=False)
    #: bool: *Required* supportOutDial
    support_out_dial = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCollaborateRoomParticipants
    max_collaborate_room_participants = Field(type=int, required=True, mutable=False)


class UserCollaborateProjectRoomGetResponse(OCIResponse):
    """
    Response to ``UserCollaborateProjectRoomGetRequest()``.

    """

    _ELEMENTS = (
        E("room_name", "roomName", str, is_required=True),
        E("attendee_notification", "attendeeNotification", str, is_required=True),
        E(
            "end_collaborate_room_session_on_owner_exit",
            "endCollaborateRoomSessionOnOwnerExit", bool, is_required=True,
        ),
        E("owner_required", "ownerRequired", bool, is_required=True),
        E(
            "room_schedule", "roomSchedule", OCI.CollaborateRoomSchedule, is_complex=True,
            is_required=True,
        ),
    )

    #: str: *Required* roomName
    room_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* attendeeNotification
    attendee_notification = Field(type=str, required=True, mutable=False)
    #: bool: *Required* endCollaborateRoomSessionOnOwnerExit
    end_collaborate_room_session_on_owner_exit = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* ownerRequired
    owner_required = Field(type=bool, required=True, mutable=False)
    #: OCI.CollaborateRoomSchedule: *Required* roomSchedule
    room_schedule = Field(type=OCI.CollaborateRoomSchedule, required=True, mutable=False)


class UserCommunicationBarringAuthorizationCodeGetListResponse(OCIResponse):
    """
    Response to ``UserCommunicationBarringAuthorizationCodeGetListRequest()``.

    Contains a list of Communication Barring Authorization Codes assigned to the user.
    """

    _ELEMENTS = (
        E(
            "code", "code", OCI.CommunicationBarringAuthorizationCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.CommunicationBarringAuthorizationCodeEntry): *Optional* code  *Array*
    code = Field(type=list, required=False, mutable=False)


class UserCustomRingbackUserGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file_description", "videoFileDescription", str),
        E("video_file_url", "videoFileUrl", str),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)


class UserCustomRingbackUserGetCriteriaResponse15sp2(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaRequest15sp2()``.

    Replaced By: ``UserCustomRingbackUserAddCriteriaResponse16()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file_description", "videoFileDescription", str),
        E("video_file_url", "videoFileUrl", str),
        E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
        E("call_waiting_audio_file_description", "callWaitingAudioFileDescription", str),
        E("call_waiting_audio_file_url", "callWaitingAudioFileUrl", str),
        E("call_waiting_video_selection", "callWaitingVideoSelection", str),
        E("call_waiting_video_file_description", "callWaitingVideoFileDescription", str),
        E("call_waiting_video_file_url", "callWaitingVideoFileUrl", str),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingAudioSelection
    call_waiting_audio_selection = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingAudioFileDescription
    call_waiting_audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingAudioFileUrl
    call_waiting_audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingVideoSelection
    call_waiting_video_selection = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingVideoFileDescription
    call_waiting_video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingVideoFileUrl
    call_waiting_video_file_url = Field(type=str, required=False, mutable=False)


class UserCustomRingbackUserGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaRequest16()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E("video_file_url", "videoFileUrl", str),
        E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
        E("call_waiting_audio_file_description", "callWaitingAudioFileDescription", str),
        E("call_waiting_audio_media_type", "callWaitingAudioMediaType", str),
        E("call_waiting_audio_file_url", "callWaitingAudioFileUrl", str),
        E("call_waiting_video_selection", "callWaitingVideoSelection", str),
        E("call_waiting_video_file_description", "callWaitingVideoFileDescription", str),
        E("call_waiting_video_media_type", "callWaitingVideoMediaType", str),
        E("call_waiting_video_file_url", "callWaitingVideoFileUrl", str),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingAudioSelection
    call_waiting_audio_selection = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingAudioFileDescription
    call_waiting_audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingAudioMediaType
    call_waiting_audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingAudioFileUrl
    call_waiting_audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingVideoSelection
    call_waiting_video_selection = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingVideoFileDescription
    call_waiting_video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingVideoMediaType
    call_waiting_video_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingVideoFileUrl
    call_waiting_video_file_url = Field(type=str, required=False, mutable=False)


class UserCustomRingbackUserGetCriteriaResponse20(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaRequest20()``.

    Replaced by: ``UserCustomRingbackUserGetCriteriaResponse21()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file", "audioFile", OCI.AnnouncementFileLevelKey, is_complex=True),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file", "videoFile", OCI.AnnouncementFileLevelKey, is_complex=True),
        E("video_file_url", "videoFileUrl", str),
        E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
        E(
            "call_waiting_audio_file", "callWaitingAudioFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
        E("call_waiting_audio_file_url", "callWaitingAudioFileUrl", str),
        E("call_waiting_video_selection", "callWaitingVideoSelection", str),
        E(
            "call_waiting_video_file", "callWaitingVideoFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
        E("call_waiting_video_file_url", "callWaitingVideoFileUrl", str),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* audioFile
    audio_file = Field(type=OCI.AnnouncementFileLevelKey, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* videoFile
    video_file = Field(type=OCI.AnnouncementFileLevelKey, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingAudioSelection
    call_waiting_audio_selection = Field(type=str, required=False, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* callWaitingAudioFile
    call_waiting_audio_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )
    #: str: *Optional* callWaitingAudioFileUrl
    call_waiting_audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingVideoSelection
    call_waiting_video_selection = Field(type=str, required=False, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* callWaitingVideoFile
    call_waiting_video_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )
    #: str: *Optional* callWaitingVideoFileUrl
    call_waiting_video_file_url = Field(type=str, required=False, mutable=False)


class UserCustomRingbackUserGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaRequest21()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file", "audioFile", OCI.AnnouncementFileLevelKey, is_complex=True),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file", "videoFile", OCI.AnnouncementFileLevelKey, is_complex=True),
        E("video_file_url", "videoFileUrl", str),
        E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
        E(
            "call_waiting_audio_file", "callWaitingAudioFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
        E("call_waiting_audio_file_url", "callWaitingAudioFileUrl", str),
        E("call_waiting_video_selection", "callWaitingVideoSelection", str),
        E(
            "call_waiting_video_file", "callWaitingVideoFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
        E("call_waiting_video_file_url", "callWaitingVideoFileUrl", str),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* audioFile
    audio_file = Field(type=OCI.AnnouncementFileLevelKey, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* videoFile
    video_file = Field(type=OCI.AnnouncementFileLevelKey, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingAudioSelection
    call_waiting_audio_selection = Field(type=str, required=False, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* callWaitingAudioFile
    call_waiting_audio_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )
    #: str: *Optional* callWaitingAudioFileUrl
    call_waiting_audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callWaitingVideoSelection
    call_waiting_video_selection = Field(type=str, required=False, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* callWaitingVideoFile
    call_waiting_video_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )
    #: str: *Optional* callWaitingVideoFileUrl
    call_waiting_video_file_url = Field(type=str, required=False, mutable=False)


class UserEnhancedCallLogsGetListResponse(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest()``.

    Replaced By: ``UserEnhancedCallLogsGetListResponse14sp4()``
    """

    _ELEMENTS = (
        E("placed", "placed", OCI.EnhancedCallLogsEntry, is_complex=True, is_array=True),
        E("received", "received", OCI.EnhancedCallLogsEntry, is_complex=True, is_array=True),
        E("missed", "missed", OCI.EnhancedCallLogsEntry, is_complex=True, is_array=True),
    )

    #: list(OCI.EnhancedCallLogsEntry): *Optional* placed  *Array*
    placed = Field(type=list, required=False, mutable=False)
    #: list(OCI.EnhancedCallLogsEntry): *Optional* received  *Array*
    received = Field(type=list, required=False, mutable=False)
    #: list(OCI.EnhancedCallLogsEntry): *Optional* missed  *Array*
    missed = Field(type=list, required=False, mutable=False)


class UserEnhancedCallLogsGetListResponse14sp4(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest14sp4()``.

    Replaced by: ``UserEnhancedCallLogsGetListResponse16()``
    """

    _ELEMENTS = (
        E("placed", "placed", OCI.CallLogsEntry, is_complex=True, is_array=True),
        E("received", "received", OCI.CallLogsEntry, is_complex=True, is_array=True),
        E("missed", "missed", OCI.CallLogsEntry, is_complex=True, is_array=True),
    )

    #: list(OCI.CallLogsEntry): *Optional* placed  *Array*
    placed = Field(type=list, required=False, mutable=False)
    #: list(OCI.CallLogsEntry): *Optional* received  *Array*
    received = Field(type=list, required=False, mutable=False)
    #: list(OCI.CallLogsEntry): *Optional* missed  *Array*
    missed = Field(type=list, required=False, mutable=False)


class UserEnhancedCallLogsGetListResponse16(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest16()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``UserEnhancedCallLogsGetListRequest16()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  Replaced by
    ``UserEnhancedCallLogsGetListResponse17sp4()``
    """

    _ELEMENTS = (
        E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
        E("call_log", "callLog", OCI.MixedCallLogsEntry, is_complex=True, is_array=True),
    )

    #: int: *Required* totalNumberOfRows
    total_number_of_rows = Field(type=int, required=True, mutable=False)
    #: list(OCI.MixedCallLogsEntry): *Optional* callLog  *Array*
    call_log = Field(type=list, required=False, mutable=False)


class UserExecutiveGetFilteringSelectiveCriteriaResponse(OCIResponse):
    """
    Response to the ``UserExecutiveGetFilteringSelectiveCriteriaRequest()``.

    Replaced by: ``UserExecutiveGetFilteringSelectiveCriteriaResponse21()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("filter", "filter", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria",
            OCI.ExecutiveCallFilteringCriteriaFromDn, is_complex=True, is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* filter
    filter = Field(type=bool, required=True, mutable=False)
    #: OCI.ExecutiveCallFilteringCriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(
        type=OCI.ExecutiveCallFilteringCriteriaFromDn, required=True, mutable=False,
    )


class UserExecutiveGetFilteringSelectiveCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserExecutiveGetFilteringSelectiveCriteriaRequest21()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("filter", "filter", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria",
            OCI.ExecutiveCallFilteringCriteriaFromDn, is_complex=True, is_required=True,
        ),
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* filter
    filter = Field(type=bool, required=True, mutable=False)
    #: OCI.ExecutiveCallFilteringCriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(
        type=OCI.ExecutiveCallFilteringCriteriaFromDn, required=True, mutable=False,
    )
    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class UserFeatureAccessCodeGetListResponse(OCIResponse):
    """
    Response to the ``UserFeatureAccessCodeGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.FeatureAccessCodeEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class UserFeatureAccessCodeGetListResponse20(OCIResponse):
    """
    Response to the ``UserFeatureAccessCodeGetListRequest20()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording Start".
    Replaced by: ``UserFeatureAccessCodeGetListResponse21()``
    """

    _ELEMENTS = (
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.FeatureAccessCodeEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class UserFeatureAccessCodeGetListResponse21(OCIResponse):
    """
    Response to the ``UserFeatureAccessCodeGetListRequest21()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording Start".
    """

    _ELEMENTS = (
        E(
            "feature_access_code", "featureAccessCode", OCI.FeatureAccessCodeReadEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.FeatureAccessCodeReadEntry): *Optional* featureAccessCode  *Array*
    feature_access_code = Field(type=list, required=False, mutable=False)


class UserGroupNightForwardingGetResponse(OCIResponse):
    """
    Response to ``UserGroupNightForwardingGetRequest()``.

    businessHours and holidaySchedule are returned in the response only when
    groupNightForwarding is ‘Auto On’.
    """

    _ELEMENTS = (
        E("night_forwarding", "nightForwarding", str, is_required=True),
        E("group_night_forwarding", "groupNightForwarding", str, is_required=True),
        E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
    )

    #: str: *Required* nightForwarding
    night_forwarding = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupNightForwarding
    group_night_forwarding = Field(type=str, required=True, mutable=False)
    #: OCI.TimeSchedule: *Optional* businessHours
    business_hours = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)


class UserHolidayScheduleGetResponse(OCIResponse):
    """
    Response to the ``UserHolidayScheduleGetRequest()``.

    The response contains the user?s holiday schedule information.
    """

    _ELEMENTS = (
        E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
        E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
        E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
        E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
        E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
        E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
        E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
        E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
        E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
        E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
        E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
        E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
        E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
        E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
        E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
        E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
        E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
        E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
        E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
        E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
        E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
    )

    #: str: *Required* holidayScheduleName
    holiday_schedule_name = Field(type=str, required=True, mutable=False)
    #: OCI.Holiday: *Optional* holiday01
    holiday01 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday02
    holiday02 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday03
    holiday03 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday04
    holiday04 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday05
    holiday05 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday06
    holiday06 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday07
    holiday07 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday08
    holiday08 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday09
    holiday09 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday10
    holiday10 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday11
    holiday11 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday12
    holiday12 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday13
    holiday13 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday14
    holiday14 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday15
    holiday15 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday16
    holiday16 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday17
    holiday17 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday18
    holiday18 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday19
    holiday19 = Field(type=OCI.Holiday, required=False, mutable=False)
    #: OCI.Holiday: *Optional* holiday20
    holiday20 = Field(type=OCI.Holiday, required=False, mutable=False)


class UserLDAPIntegrationGetDirectoryEntryResponse(OCIResponse):
    """
    Response to ``UserLDAPIntegrationGetDirectoryEntryRequest()``.

    """

    _ELEMENTS = (
        E("data", "data", OCI.LDAPEntryField, is_complex=True, is_array=True),
    )

    #: list(OCI.LDAPEntryField): *Optional* data  *Array*
    data = Field(type=list, required=False, mutable=False)


class UserMaliciousCallTraceGetResponse(OCIResponse):
    """
    Response to ``UserMaliciousCallTraceGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("trace_type_selection", "traceTypeSelection", str, is_required=True),
        E("trace_for_time_period", "traceForTimePeriod", bool, is_required=True),
        E(
            "trace_time_period", "traceTimePeriod", OCI.MaliciousCallTraceTimePeriod,
            is_complex=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* traceTypeSelection
    trace_type_selection = Field(type=str, required=True, mutable=False)
    #: bool: *Required* traceForTimePeriod
    trace_for_time_period = Field(type=bool, required=True, mutable=False)
    #: OCI.MaliciousCallTraceTimePeriod: *Optional* traceTimePeriod
    trace_time_period = Field(
        type=OCI.MaliciousCallTraceTimePeriod, required=False, mutable=False,
    )


class UserMeetMeConferencingGetConferenceGreetingResponse20(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceGreetingRequest20()``.

    Contains the information of a conference custom greeting.
    """

    _ELEMENTS = (
        E("play_entrance_greeting", "playEntranceGreeting", bool, is_required=True),
        E(
            "entrance_greeting_file", "entranceGreetingFile", OCI.AnnouncementFileKey,
            is_complex=True,
        ),
    )

    #: bool: *Required* playEntranceGreeting
    play_entrance_greeting = Field(type=bool, required=True, mutable=False)
    #: OCI.AnnouncementFileKey: *Optional* entranceGreetingFile
    entrance_greeting_file = Field(
        type=OCI.AnnouncementFileKey, required=False, mutable=False,
    )


class UserMeetMeConferencingGetConferenceResponse(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceRequest()``.

    Contains the information of a conference.
    """

    _ELEMENTS = (
        E("title", "title", str, is_required=True),
        E("estimated_participants", "estimatedParticipants", int),
        E("restrict_participants", "restrictParticipants", bool),
        E("max_participants", "maxParticipants", int),
        E("account_code", "accountCode", str),
        E("mute_all_attendees_on_entry", "muteAllAttendeesOnEntry", bool, is_required=True),
        E(
            "end_conference_on_moderator_exit", "endConferenceOnModeratorExit", bool,
            is_required=True,
        ),
        E("moderator_required", "moderatorRequired", bool, is_required=True),
        E("attendee_notification", "attendeeNotification", str, is_required=True),
        E(
            "conference_schedule", "conferenceSchedule",
            OCI.MeetMeConferencingConferenceSchedule, is_complex=True, is_required=True,
        ),
        E("moderator_pin", "moderatorPin", str, is_required=True),
    )

    #: str: *Required* title
    title = Field(type=str, required=True, mutable=False)
    #: int: *Optional* estimatedParticipants
    estimated_participants = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* restrictParticipants
    restrict_participants = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* maxParticipants
    max_participants = Field(type=int, required=False, mutable=False)
    #: str: *Optional* accountCode
    account_code = Field(type=str, required=False, mutable=False)
    #: bool: *Required* muteAllAttendeesOnEntry
    mute_all_attendees_on_entry = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* endConferenceOnModeratorExit
    end_conference_on_moderator_exit = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* moderatorRequired
    moderator_required = Field(type=bool, required=True, mutable=False)
    #: str: *Required* attendeeNotification
    attendee_notification = Field(type=str, required=True, mutable=False)
    #: OCI.MeetMeConferencingConferenceSchedule: *Required* conferenceSchedule
    conference_schedule = Field(
        type=OCI.MeetMeConferencingConferenceSchedule, required=True, mutable=False,
    )
    #: str: *Required* moderatorPin
    moderator_pin = Field(type=str, required=True, mutable=False)


class UserMeetMeConferencingGetConferenceResponse19(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceRequest19()``.

    Contains the information of a conference.
    """

    _ELEMENTS = (
        E("title", "title", str, is_required=True),
        E("estimated_participants", "estimatedParticipants", int),
        E("restrict_participants", "restrictParticipants", bool),
        E("max_participants", "maxParticipants", int),
        E("account_code", "accountCode", str),
        E("mute_all_attendees_on_entry", "muteAllAttendeesOnEntry", bool, is_required=True),
        E(
            "end_conference_on_moderator_exit", "endConferenceOnModeratorExit", bool,
            is_required=True,
        ),
        E("moderator_required", "moderatorRequired", bool, is_required=True),
        E("require_security_pin", "requireSecurityPin", bool, is_required=True),
        E("security_pin", "securityPin", str),
        E("allow_unique_identifier", "allowUniqueIdentifier", bool, is_required=True),
        E("attendee_notification", "attendeeNotification", str, is_required=True),
        E(
            "conference_schedule", "conferenceSchedule",
            OCI.MeetMeConferencingConferenceSchedule, is_complex=True, is_required=True,
        ),
        E("moderator_pin", "moderatorPin", str, is_required=True),
    )

    #: str: *Required* title
    title = Field(type=str, required=True, mutable=False)
    #: int: *Optional* estimatedParticipants
    estimated_participants = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* restrictParticipants
    restrict_participants = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* maxParticipants
    max_participants = Field(type=int, required=False, mutable=False)
    #: str: *Optional* accountCode
    account_code = Field(type=str, required=False, mutable=False)
    #: bool: *Required* muteAllAttendeesOnEntry
    mute_all_attendees_on_entry = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* endConferenceOnModeratorExit
    end_conference_on_moderator_exit = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* moderatorRequired
    moderator_required = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireSecurityPin
    require_security_pin = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* securityPin
    security_pin = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowUniqueIdentifier
    allow_unique_identifier = Field(type=bool, required=True, mutable=False)
    #: str: *Required* attendeeNotification
    attendee_notification = Field(type=str, required=True, mutable=False)
    #: OCI.MeetMeConferencingConferenceSchedule: *Required* conferenceSchedule
    conference_schedule = Field(
        type=OCI.MeetMeConferencingConferenceSchedule, required=True, mutable=False,
    )
    #: str: *Required* moderatorPin
    moderator_pin = Field(type=str, required=True, mutable=False)


class UserMeetMeConferencingGetConferenceResponse20(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceRequest20()``.

    Contains the information of a conference.
    """

    _ELEMENTS = (
        E("title", "title", str, is_required=True),
        E("estimated_participants", "estimatedParticipants", int),
        E("restrict_participants", "restrictParticipants", bool),
        E("max_participants", "maxParticipants", int),
        E("account_code", "accountCode", str),
        E("mute_all_attendees_on_entry", "muteAllAttendeesOnEntry", bool, is_required=True),
        E(
            "end_conference_on_moderator_exit", "endConferenceOnModeratorExit", bool,
            is_required=True,
        ),
        E("moderator_required", "moderatorRequired", bool, is_required=True),
        E("require_security_pin", "requireSecurityPin", bool, is_required=True),
        E("security_pin", "securityPin", str),
        E("allow_unique_identifier", "allowUniqueIdentifier", bool, is_required=True),
        E("attendee_notification", "attendeeNotification", str, is_required=True),
        E(
            "conference_schedule", "conferenceSchedule",
            OCI.MeetMeConferencingConferenceSchedule, is_complex=True, is_required=True,
        ),
        E("moderator_pin", "moderatorPin", str, is_required=True),
        E("host_time_zone", "hostTimeZone", str, is_required=True),
    )

    #: str: *Required* title
    title = Field(type=str, required=True, mutable=False)
    #: int: *Optional* estimatedParticipants
    estimated_participants = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* restrictParticipants
    restrict_participants = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* maxParticipants
    max_participants = Field(type=int, required=False, mutable=False)
    #: str: *Optional* accountCode
    account_code = Field(type=str, required=False, mutable=False)
    #: bool: *Required* muteAllAttendeesOnEntry
    mute_all_attendees_on_entry = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* endConferenceOnModeratorExit
    end_conference_on_moderator_exit = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* moderatorRequired
    moderator_required = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireSecurityPin
    require_security_pin = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* securityPin
    security_pin = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowUniqueIdentifier
    allow_unique_identifier = Field(type=bool, required=True, mutable=False)
    #: str: *Required* attendeeNotification
    attendee_notification = Field(type=str, required=True, mutable=False)
    #: OCI.MeetMeConferencingConferenceSchedule: *Required* conferenceSchedule
    conference_schedule = Field(
        type=OCI.MeetMeConferencingConferenceSchedule, required=True, mutable=False,
    )
    #: str: *Required* moderatorPin
    moderator_pin = Field(type=str, required=True, mutable=False)
    #: str: *Required* hostTimeZone
    host_time_zone = Field(type=str, required=True, mutable=False)


class UserMusicOnHoldUserGetResponse(OCIResponse):
    """
    Response to ``UserMusicOnHoldUserGetRequest()``.

    Replaced By: ``UserMusicOnHoldUserGetResponse16()``
    """

    _ELEMENTS = (
        E("enable_video", "enableVideo", bool, is_required=True),
        E(
            "source", "source", OCI.MusicOnHoldUserSourceRead, is_complex=True,
            is_required=True,
        ),
        E(
            "use_alternate_source_for_internal_calls",
            "useAlternateSourceForInternalCalls", bool, is_required=True,
        ),
        E(
            "internal_source", "internalSource", OCI.MusicOnHoldUserSourceRead,
            is_complex=True,
        ),
    )

    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldUserSourceRead: *Required* source
    source = Field(type=OCI.MusicOnHoldUserSourceRead, required=True, mutable=False)
    #: bool: *Required* useAlternateSourceForInternalCalls
    use_alternate_source_for_internal_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldUserSourceRead: *Optional* internalSource
    internal_source = Field(type=OCI.MusicOnHoldUserSourceRead, required=False, mutable=False)


class UserMusicOnHoldUserGetResponse16(OCIResponse):
    """
    Response to ``UserMusicOnHoldUserGetRequest16()``.

    """

    _ELEMENTS = (
        E("enable_video", "enableVideo", bool, is_required=True),
        E(
            "source", "source", OCI.MusicOnHoldUserSourceRead16, is_complex=True,
            is_required=True,
        ),
        E(
            "use_alternate_source_for_internal_calls",
            "useAlternateSourceForInternalCalls", bool, is_required=True,
        ),
        E(
            "internal_source", "internalSource", OCI.MusicOnHoldUserSourceRead16,
            is_complex=True,
        ),
    )

    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldUserSourceRead16: *Required* source
    source = Field(type=OCI.MusicOnHoldUserSourceRead16, required=True, mutable=False)
    #: bool: *Required* useAlternateSourceForInternalCalls
    use_alternate_source_for_internal_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldUserSourceRead16: *Optional* internalSource
    internal_source = Field(
        type=OCI.MusicOnHoldUserSourceRead16, required=False, mutable=False,
    )


class UserMusicOnHoldUserGetResponse20(OCIResponse):
    """
    Response to ``UserMusicOnHoldUserGetRequest20()``.

    """

    _ELEMENTS = (
        E("enable_video", "enableVideo", bool, is_required=True),
        E(
            "source", "source", OCI.MusicOnHoldUserSourceRead20, is_complex=True,
            is_required=True,
        ),
        E(
            "use_alternate_source_for_internal_calls",
            "useAlternateSourceForInternalCalls", bool, is_required=True,
        ),
        E(
            "internal_source", "internalSource", OCI.MusicOnHoldUserSourceRead20,
            is_complex=True,
        ),
    )

    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldUserSourceRead20: *Required* source
    source = Field(type=OCI.MusicOnHoldUserSourceRead20, required=True, mutable=False)
    #: bool: *Required* useAlternateSourceForInternalCalls
    use_alternate_source_for_internal_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.MusicOnHoldUserSourceRead20: *Optional* internalSource
    internal_source = Field(
        type=OCI.MusicOnHoldUserSourceRead20, required=False, mutable=False,
    )


class UserOutgoingCallingPlanAuthorizationCodeGetListResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanAuthorizationCodeGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "code_entry", "codeEntry", OCI.OutgoingCallingPlanAuthorizationCodeEntry,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.OutgoingCallingPlanAuthorizationCodeEntry): *Optional* codeEntry  *Array*
    code_entry = Field(type=list, required=False, mutable=False)


class UserOutgoingCallingPlanCallMeNowGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanCallMeNowGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions",
            OCI.OutgoingCallingPlanCallMeNowPermissions, is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingCallingPlanCallMeNowPermissions: *Required* userPermissions
    user_permissions = Field(
        type=OCI.OutgoingCallingPlanCallMeNowPermissions, required=True, mutable=False,
    )


class UserOutgoingCallingPlanOriginatingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanOriginatingGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions",
            OCI.OutgoingCallingPlanOriginatingPermissions, is_complex=True,
            is_required=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingCallingPlanOriginatingPermissions: *Required* userPermissions
    user_permissions = Field(
        type=OCI.OutgoingCallingPlanOriginatingPermissions, required=True, mutable=False,
    )


class UserOutgoingCallingPlanRedirectedGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanRedirectedGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions",
            OCI.OutgoingCallingPlanRedirectedPermissions, is_complex=True,
            is_required=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingCallingPlanRedirectedPermissions: *Required* userPermissions
    user_permissions = Field(
        type=OCI.OutgoingCallingPlanRedirectedPermissions, required=True, mutable=False,
    )


class UserOutgoingCallingPlanRedirectingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanRedirectingGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions",
            OCI.OutgoingCallingPlanRedirectingPermissions, is_complex=True,
            is_required=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingCallingPlanRedirectingPermissions: *Required* userPermissions
    user_permissions = Field(
        type=OCI.OutgoingCallingPlanRedirectingPermissions, required=True, mutable=False,
    )


class UserOutgoingCallingPlanTransferNumbersGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanTransferNumbersGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_numbers", "userNumbers", OCI.OutgoingCallingPlanTransferNumbers,
            is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingCallingPlanTransferNumbers: *Required* userNumbers
    user_numbers = Field(
        type=OCI.OutgoingCallingPlanTransferNumbers, required=True, mutable=False,
    )


class UserPersonalAssistantCallToNumberGetListResponse(OCIResponse):
    """
    Response to the ``UserPersonalAssistantCallToNumberGetListRequest()``.

    Contains a list of assigned Call to Numbers".
    """

    _ELEMENTS = (
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class UserPersonalPhoneListGetListResponse(OCIResponse):
    """
    Response to the ``UserPersonalPhoneListGetListRequest()``.

    The response contains a user's personal phone list.
    """

    _ELEMENTS = (
        E("entry", "entry", OCI.PhoneListEntry, is_complex=True, is_array=True),
    )

    #: list(OCI.PhoneListEntry): *Optional* entry  *Array*
    entry = Field(type=list, required=False, mutable=False)


class UserPreAlertingAnnouncementGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserPreAlertingAnnouncementGetCriteriaRequest()``.

    Replaced by: ``UserPreAlertingAnnouncementGetCriteriaResponse21()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserPreAlertingAnnouncementGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserPreAlertingAnnouncementGetCriteriaRequest21()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class UserPreAlertingAnnouncementGetResponse20(OCIResponse):
    """
    Response to a ``UserPreAlertingAnnouncementGetRequest20()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Blacklisted",
    "Calls From", "Calls To Type", "Calls To Number" and "Calls To Extension". The
    possible values for the "Calls To Type" column are the following or a combination of
    them separated by comma: - Primary - Alternate X (where x is a number between 1 and
    10) - Mobility The possible values for the "Calls To Number" column are the following
    or a combination of them separated by comma: - The value of the phone number for the
    corresponding Calls To Type, when the number is available.  i.e.  Alternate 1 may have
    extension, but no number.  - When no number is available a blank space is provided
    instead.  The possible values for the "Calls To Extension" column are the following or
    a combination of them separated by comma: - The value of the extension for the
    corresponding Calls To Type, when the extension is available.  i.e.  Primary may have
    number, but no extension.  - For Mobility Calls To Type, this is always blank.  - When
    no extension is available a blank space is provided instead.
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("audio_selection", "audioSelection", str, is_required=True),
        E("audio_file", "audioFile", OCI.AnnouncementFileLevelKey, is_complex=True),
        E("audio_file_url", "audioFileUrl", str),
        E("video_selection", "videoSelection", str, is_required=True),
        E("video_file", "videoFile", OCI.AnnouncementFileLevelKey, is_complex=True),
        E("video_file_url", "videoFileUrl", str),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioSelection
    audio_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* audioFile
    audio_file = Field(type=OCI.AnnouncementFileLevelKey, required=False, mutable=False)
    #: str: *Optional* audioFileUrl
    audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Required* videoSelection
    video_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* videoFile
    video_file = Field(type=OCI.AnnouncementFileLevelKey, required=False, mutable=False)
    #: str: *Optional* videoFileUrl
    video_file_url = Field(type=str, required=False, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserPreferredCarrierUserGetResponse(OCIResponse):
    """
    Response to a ``UserPreferredCarrierUserGetRequest()``.

    """

    _ELEMENTS = (
        E(
            "intra_lata_carrier", "intraLataCarrier", OCI.UserPreferredCarrierName,
            is_complex=True, is_required=True,
        ),
        E(
            "inter_lata_carrier", "interLataCarrier", OCI.UserPreferredCarrierName,
            is_complex=True, is_required=True,
        ),
        E(
            "international_carrier", "internationalCarrier", OCI.UserPreferredCarrierName,
            is_complex=True, is_required=True,
        ),
    )

    #: OCI.UserPreferredCarrierName: *Required* intraLataCarrier
    intra_lata_carrier = Field(
        type=OCI.UserPreferredCarrierName, required=True, mutable=False,
    )
    #: OCI.UserPreferredCarrierName: *Required* interLataCarrier
    inter_lata_carrier = Field(
        type=OCI.UserPreferredCarrierName, required=True, mutable=False,
    )
    #: OCI.UserPreferredCarrierName: *Required* internationalCarrier
    international_carrier = Field(
        type=OCI.UserPreferredCarrierName, required=True, mutable=False,
    )


class UserPriorityAlertGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserPriorityAlertGetCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.PriorityAlertCriteriaFromDn,
            is_complex=True, is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.PriorityAlertCriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(
        type=OCI.PriorityAlertCriteriaFromDn, required=True, mutable=False,
    )


class UserPriorityAlertGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserPriorityAlertGetCriteriaRequest16()``.

    Replaced by: ``UserPriorityAlertGetCriteriaResponse21()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.PriorityAlertCriteriaFromDn,
            is_complex=True, is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.PriorityAlertCriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(
        type=OCI.PriorityAlertCriteriaFromDn, required=True, mutable=False,
    )


class UserPriorityAlertGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserPriorityAlertGetCriteriaRequest21()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.PriorityAlertCriteriaFromDn,
            is_complex=True, is_required=True,
        ),
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.PriorityAlertCriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(
        type=OCI.PriorityAlertCriteriaFromDn, required=True, mutable=False,
    )
    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class UserScheduleGetEventResponse(OCIResponse):
    """
    Response to ``UserScheduleGetEventRequest()``.

    The response contains the event of the user schedule.
    """

    _ELEMENTS = (
        E("start_date", "startDate", str, is_required=True),
        E("all_day_event", "allDayEvent", bool),
        E("start_time", "startTime", OCI.HourMinute, is_complex=True, is_required=True),
        E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
        E("end_date", "endDate", str, is_required=True),
        E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
    )

    #: str: *Required* startDate
    start_date = Field(type=str, required=True, mutable=False)
    #: bool: *Optional* allDayEvent
    all_day_event = Field(type=bool, required=False, mutable=False)
    #: OCI.HourMinute: *Required* startTime
    start_time = Field(type=OCI.HourMinute, required=True, mutable=False)
    #: OCI.HourMinute: *Required* endTime
    end_time = Field(type=OCI.HourMinute, required=True, mutable=False)
    #: str: *Required* endDate
    end_date = Field(type=str, required=True, mutable=False)
    #: OCI.Recurrence: *Optional* recurrence
    recurrence = Field(type=OCI.Recurrence, required=False, mutable=False)


class UserSelectiveCallAcceptanceGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserSelectiveCallAcceptanceGetCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserSelectiveCallAcceptanceGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserSelectiveCallAcceptanceGetCriteriaRequest16()``.

    Replaced by: ``UserSelectiveCallAcceptanceGetCriteriaResponse21()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserSelectiveCallAcceptanceGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserSelectiveCallAcceptanceGetCriteriaRequest21()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)
    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class UserSelectiveCallRejectionGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserSelectiveCallRejectionGetCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserSelectiveCallRejectionGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserSelectiveCallRejectionGetCriteriaRequest16()``.

    Replaced by: ``UserSelectiveCallRejectionGetCriteriaResponse16sp1()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria",
            OCI.SelectiveCallRejectionCriteriaCallType, is_complex=True, is_required=True,
        ),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.SelectiveCallRejectionCriteriaCallType: *Required* fromDnCriteria
    from_dn_criteria = Field(
        type=OCI.SelectiveCallRejectionCriteriaCallType, required=True, mutable=False,
    )
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)


class UserSelectiveCallRejectionGetCriteriaResponse16sp1(OCIResponse):
    """
    Response to the ``UserSelectiveCallRejectionGetCriteriaRequest16sp1()``.

    Private Phone Numbers are omitted from the fromDnCriteria.  Replaced by:
    ``UserSelectiveCallRejectionGetCriteriaResponse21()``
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria",
            OCI.SelectiveCallRejectionCriteriaCallType, is_complex=True, is_required=True,
        ),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("private", "private", bool, is_required=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.SelectiveCallRejectionCriteriaCallType: *Required* fromDnCriteria
    from_dn_criteria = Field(
        type=OCI.SelectiveCallRejectionCriteriaCallType, required=True, mutable=False,
    )
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* private
    private = Field(type=bool, required=True, mutable=False)


class UserSelectiveCallRejectionGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserSelectiveCallRejectionGetCriteriaRequest21()``.

    Private Phone Numbers are omitted from the fromDnCriteria.
    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria",
            OCI.SelectiveCallRejectionCriteriaCallType, is_complex=True, is_required=True,
        ),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("private", "private", bool, is_required=True),
        E("call_to_number", "callToNumber", OCI.CallToNumber, is_complex=True, is_array=True),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.SelectiveCallRejectionCriteriaCallType: *Required* fromDnCriteria
    from_dn_criteria = Field(
        type=OCI.SelectiveCallRejectionCriteriaCallType, required=True, mutable=False,
    )
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* private
    private = Field(type=bool, required=True, mutable=False)
    #: list(OCI.CallToNumber): *Optional* callToNumber  *Array*
    call_to_number = Field(type=list, required=False, mutable=False)


class UserSequentialRingGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserSequentialRingGetCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserSequentialRingGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserSequentialRingGetCriteriaRequest16()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserSequentialRingGetResponse13mp16(OCIResponse):
    """
    Response to the ``UserSequentialRingGetRequest13mp16()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule" and "Calls From".

    Replaced By: ``UserSequentialRingGetResponse14sp4()``
    """

    _ELEMENTS = (
        E("ring_base_location_first", "ringBaseLocationFirst", bool, is_required=True),
        E(
            "base_location_number_of_rings", "baseLocationNumberOfRings", int,
            is_required=True,
        ),
        E(
            "continue_if_base_location_is_busy", "continueIfBaseLocationIsBusy", bool,
            is_required=True,
        ),
        E("caller_may_stop_search", "callerMayStopSearch", bool, is_required=True),
        E(
            "location01", "Location01", OCI.SequentialRingLocation, is_complex=True,
            is_required=True,
        ),
        E(
            "location02", "Location02", OCI.SequentialRingLocation, is_complex=True,
            is_required=True,
        ),
        E(
            "location03", "Location03", OCI.SequentialRingLocation, is_complex=True,
            is_required=True,
        ),
        E(
            "location04", "Location04", OCI.SequentialRingLocation, is_complex=True,
            is_required=True,
        ),
        E(
            "location05", "Location05", OCI.SequentialRingLocation, is_complex=True,
            is_required=True,
        ),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* ringBaseLocationFirst
    ring_base_location_first = Field(type=bool, required=True, mutable=False)
    #: int: *Required* baseLocationNumberOfRings
    base_location_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* continueIfBaseLocationIsBusy
    continue_if_base_location_is_busy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* callerMayStopSearch
    caller_may_stop_search = Field(type=bool, required=True, mutable=False)
    #: OCI.SequentialRingLocation: *Required* Location01
    location01 = Field(type=OCI.SequentialRingLocation, required=True, mutable=False)
    #: OCI.SequentialRingLocation: *Required* Location02
    location02 = Field(type=OCI.SequentialRingLocation, required=True, mutable=False)
    #: OCI.SequentialRingLocation: *Required* Location03
    location03 = Field(type=OCI.SequentialRingLocation, required=True, mutable=False)
    #: OCI.SequentialRingLocation: *Required* Location04
    location04 = Field(type=OCI.SequentialRingLocation, required=True, mutable=False)
    #: OCI.SequentialRingLocation: *Required* Location05
    location05 = Field(type=OCI.SequentialRingLocation, required=True, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserSequentialRingGetResponse14sp4(OCIResponse):
    """
    Response to the ``UserSequentialRingGetRequest14sp4()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted" and "Holiday Schedule".
    """

    _ELEMENTS = (
        E("ring_base_location_first", "ringBaseLocationFirst", bool, is_required=True),
        E(
            "base_location_number_of_rings", "baseLocationNumberOfRings", int,
            is_required=True,
        ),
        E(
            "continue_if_base_location_is_busy", "continueIfBaseLocationIsBusy", bool,
            is_required=True,
        ),
        E("caller_may_stop_search", "callerMayStopSearch", bool, is_required=True),
        E(
            "location01", "Location01", OCI.SequentialRingLocation14sp4, is_complex=True,
            is_required=True,
        ),
        E(
            "location02", "Location02", OCI.SequentialRingLocation14sp4, is_complex=True,
            is_required=True,
        ),
        E(
            "location03", "Location03", OCI.SequentialRingLocation14sp4, is_complex=True,
            is_required=True,
        ),
        E(
            "location04", "Location04", OCI.SequentialRingLocation14sp4, is_complex=True,
            is_required=True,
        ),
        E(
            "location05", "Location05", OCI.SequentialRingLocation14sp4, is_complex=True,
            is_required=True,
        ),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* ringBaseLocationFirst
    ring_base_location_first = Field(type=bool, required=True, mutable=False)
    #: int: *Required* baseLocationNumberOfRings
    base_location_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* continueIfBaseLocationIsBusy
    continue_if_base_location_is_busy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* callerMayStopSearch
    caller_may_stop_search = Field(type=bool, required=True, mutable=False)
    #: OCI.SequentialRingLocation14sp4: *Required* Location01
    location01 = Field(type=OCI.SequentialRingLocation14sp4, required=True, mutable=False)
    #: OCI.SequentialRingLocation14sp4: *Required* Location02
    location02 = Field(type=OCI.SequentialRingLocation14sp4, required=True, mutable=False)
    #: OCI.SequentialRingLocation14sp4: *Required* Location03
    location03 = Field(type=OCI.SequentialRingLocation14sp4, required=True, mutable=False)
    #: OCI.SequentialRingLocation14sp4: *Required* Location04
    location04 = Field(type=OCI.SequentialRingLocation14sp4, required=True, mutable=False)
    #: OCI.SequentialRingLocation14sp4: *Required* Location05
    location05 = Field(type=OCI.SequentialRingLocation14sp4, required=True, mutable=False)
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserSimultaneousRingFamilyGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingFamilyGetCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserSimultaneousRingFamilyGetResponse17(OCIResponse):
    """
    Response to the ``UserSimultaneousRingFamilyGetRequest17()``.

    Contains a criteria table wich column heading: "Is Active", "Criteria Name", "Time
    Schedule", "Holiday Schedule", "Calls From" and "Blacklisted".
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("do_not_ring_if_on_call", "doNotRingIfOnCall", bool, is_required=True),
        E(
            "simultaneous_ring_number", "simultaneousRingNumber",
            OCI.SimultaneousRingNumber, is_complex=True,
        ),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* doNotRingIfOnCall
    do_not_ring_if_on_call = Field(type=bool, required=True, mutable=False)
    #: OCI.SimultaneousRingNumber: *Optional* simultaneousRingNumber
    simultaneous_ring_number = Field(
        type=OCI.SimultaneousRingNumber, required=False, mutable=False,
    )
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserSimultaneousRingPersonalGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingPersonalGetCriteriaRequest()``.

    """

    _ELEMENTS = (
        E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("blacklisted", "blacklisted", bool, is_required=True),
        E(
            "from_dn_criteria", "fromDnCriteria", OCI.CriteriaFromDn, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.TimeSchedule: *Optional* timeSchedule
    time_schedule = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: bool: *Required* blacklisted
    blacklisted = Field(type=bool, required=True, mutable=False)
    #: OCI.CriteriaFromDn: *Required* fromDnCriteria
    from_dn_criteria = Field(type=OCI.CriteriaFromDn, required=True, mutable=False)


class UserSimultaneousRingPersonalGetResponse17(OCIResponse):
    """
    Response to the ``UserSimultaneousRingPersonalGetRequest17()``.

    Contains a criteria table with column heading: "Is Active", "Criteria Name", "Time
    Schedule", "Holiday Schedule", "Calls From" and "Blacklisted".
    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("do_not_ring_if_on_call", "doNotRingIfOnCall", bool, is_required=True),
        E(
            "simultaneous_ring_number", "simultaneousRingNumber",
            OCI.SimultaneousRingNumber, is_complex=True,
        ),
        E(
            "criteria_table", "criteriaTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* doNotRingIfOnCall
    do_not_ring_if_on_call = Field(type=bool, required=True, mutable=False)
    #: OCI.SimultaneousRingNumber: *Optional* simultaneousRingNumber
    simultaneous_ring_number = Field(
        type=OCI.SimultaneousRingNumber, required=False, mutable=False,
    )
    #: list: *Required* criteriaTable  *Tabular*
    criteria_table = Field(type=list, required=True, mutable=False)


class UserSpeedDial100GetListResponse(OCIResponse):
    """
    Response to the ``UserSpeedDial100GetListRequest()``.

    """

    _ELEMENTS = (
        E("prefix", "prefix", str, is_required=True),
        E("speed_dial_entry", "speedDialEntry", OCI.SpeedDial100Entry, is_complex=True),
    )

    #: str: *Required* prefix
    prefix = Field(type=str, required=True, mutable=False)
    #: OCI.SpeedDial100Entry: *Optional* speedDialEntry
    speed_dial_entry = Field(type=OCI.SpeedDial100Entry, required=False, mutable=False)


class UserSpeedDial100GetListResponse17sp1(OCIResponse):
    """
    Response to the ``UserSpeedDial100GetListRequest17sp1()``.

    """

    _ELEMENTS = (
        E("prefix", "prefix", str),
        E("speed_dial_entry", "speedDialEntry", OCI.SpeedDial100Entry, is_complex=True),
    )

    #: str: *Optional* prefix
    prefix = Field(type=str, required=False, mutable=False)
    #: OCI.SpeedDial100Entry: *Optional* speedDialEntry
    speed_dial_entry = Field(type=OCI.SpeedDial100Entry, required=False, mutable=False)


class UserSpeedDial8GetListResponse(OCIResponse):
    """
    Response to the ``UserSpeedDial8GetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "speed_dial_entry", "speedDialEntry", OCI.SpeedDial8Entry, is_complex=True,
            is_required=True,
        ),
    )

    #: OCI.SpeedDial8Entry: *Required* speedDialEntry
    speed_dial_entry = Field(type=OCI.SpeedDial8Entry, required=True, mutable=False)


class UserTimeScheduleGetResponse(OCIResponse):
    """
    Response to the ``UserTimeScheduleGetRequest()``.

    The response contains the requested time schedule information.
    """

    _ELEMENTS = (
        E("time_schedule_name", "timeScheduleName", str, is_required=True),
        E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
        E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
        E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
        E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
        E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
        E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
        E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
        E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
        E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
        E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
        E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
        E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
        E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
        E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
        E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
        E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
        E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
        E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
        E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
        E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
    )

    #: str: *Required* timeScheduleName
    time_schedule_name = Field(type=str, required=True, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval01
    time_interval01 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval02
    time_interval02 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval03
    time_interval03 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval04
    time_interval04 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval05
    time_interval05 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval06
    time_interval06 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval07
    time_interval07 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval08
    time_interval08 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval09
    time_interval09 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval10
    time_interval10 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval11
    time_interval11 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval12
    time_interval12 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval13
    time_interval13 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval14
    time_interval14 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval15
    time_interval15 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval16
    time_interval16 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval17
    time_interval17 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval18
    time_interval18 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval19
    time_interval19 = Field(type=OCI.TimeInterval, required=False, mutable=False)
    #: OCI.TimeInterval: *Optional* timeInterval20
    time_interval20 = Field(type=OCI.TimeInterval, required=False, mutable=False)


class UserVoiceMessagingUserGetGreetingResponse13mp16(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetGreetingRequest13mp16()``.

    Contains the greeting configuration for a user's voice messaging.

    Replaced By: ``UserVoiceMessagingUserGetGreetingResponse16()``
    """

    _ELEMENTS = (
        E("busy_announcement_selection", "busyAnnouncementSelection", str, is_required=True),
        E("busy_personal_audio_file", "busyPersonalAudioFile", str),
        E("busy_personal_video_file", "busyPersonalVideoFile", str),
        E(
            "no_answer_announcement_selection", "noAnswerAnnouncementSelection", str,
            is_required=True,
        ),
        E("no_answer_personal_audio_file", "noAnswerPersonalAudioFile", str),
        E("no_answer_personal_video_file", "noAnswerPersonalVideoFile", str),
        E(
            "no_answer_alternate_greeting01", "noAnswerAlternateGreeting01",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting02", "noAnswerAlternateGreeting02",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting03", "noAnswerAlternateGreeting03",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead, is_complex=True,
        ),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
    )

    #: str: *Required* busyAnnouncementSelection
    busy_announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* busyPersonalAudioFile
    busy_personal_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* busyPersonalVideoFile
    busy_personal_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Required* noAnswerAnnouncementSelection
    no_answer_announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* noAnswerPersonalAudioFile
    no_answer_personal_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* noAnswerPersonalVideoFile
    no_answer_personal_video_file = Field(type=str, required=False, mutable=False)
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead: *Optional*
    #: noAnswerAlternateGreeting01
    no_answer_alternate_greeting01 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead, required=False,
        mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead: *Optional*
    #: noAnswerAlternateGreeting02
    no_answer_alternate_greeting02 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead, required=False,
        mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead: *Optional*
    #: noAnswerAlternateGreeting03
    no_answer_alternate_greeting03 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead, required=False,
        mutable=False,
    )
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)


class UserVoiceMessagingUserGetGreetingResponse16(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetGreetingRequest16()``.

    Contains the greeting configuration for a user's voice messaging.
    """

    _ELEMENTS = (
        E("busy_announcement_selection", "busyAnnouncementSelection", str, is_required=True),
        E("busy_personal_audio_file", "busyPersonalAudioFile", str),
        E("busy_personal_audio_media_type", "busyPersonalAudioMediaType", str),
        E("busy_personal_video_file", "busyPersonalVideoFile", str),
        E("busy_personal_video_media_type", "busyPersonalVideoMediaType", str),
        E(
            "no_answer_announcement_selection", "noAnswerAnnouncementSelection", str,
            is_required=True,
        ),
        E("no_answer_personal_audio_file", "noAnswerPersonalAudioFile", str),
        E("no_answer_personal_audio_media_type", "noAnswerPersonalAudioMediaType", str),
        E("no_answer_personal_video_file", "noAnswerPersonalVideoFile", str),
        E("no_answer_personal_video_media_type", "noAnswerPersonalVideoMediaType", str),
        E(
            "no_answer_alternate_greeting01", "noAnswerAlternateGreeting01",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting02", "noAnswerAlternateGreeting02",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting03", "noAnswerAlternateGreeting03",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, is_complex=True,
        ),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
    )

    #: str: *Required* busyAnnouncementSelection
    busy_announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* busyPersonalAudioFile
    busy_personal_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* busyPersonalAudioMediaType
    busy_personal_audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* busyPersonalVideoFile
    busy_personal_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* busyPersonalVideoMediaType
    busy_personal_video_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* noAnswerAnnouncementSelection
    no_answer_announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* noAnswerPersonalAudioFile
    no_answer_personal_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* noAnswerPersonalAudioMediaType
    no_answer_personal_audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* noAnswerPersonalVideoFile
    no_answer_personal_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* noAnswerPersonalVideoMediaType
    no_answer_personal_video_media_type = Field(type=str, required=False, mutable=False)
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead16: *Optional*
    #: noAnswerAlternateGreeting01
    no_answer_alternate_greeting01 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, required=False,
        mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead16: *Optional*
    #: noAnswerAlternateGreeting02
    no_answer_alternate_greeting02 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, required=False,
        mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead16: *Optional*
    #: noAnswerAlternateGreeting03
    no_answer_alternate_greeting03 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, required=False,
        mutable=False,
    )
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)


class UserVoiceMessagingUserGetGreetingResponse18(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetGreetingRequest18()``.

    Contains the greeting configuration for a user's voice messaging.  The following
    elements are only used in AS data mode: disableMessageDeposit
    disableMessageDepositAction greetingOnlyForwardDestination Replaced by
    ``UserVoiceMessagingUserGetGreetingResponse18sp1()``
    """

    _ELEMENTS = (
        E("busy_announcement_selection", "busyAnnouncementSelection", str, is_required=True),
        E("busy_personal_audio_file", "busyPersonalAudioFile", str),
        E("busy_personal_audio_media_type", "busyPersonalAudioMediaType", str),
        E("busy_personal_video_file", "busyPersonalVideoFile", str),
        E("busy_personal_video_media_type", "busyPersonalVideoMediaType", str),
        E(
            "no_answer_announcement_selection", "noAnswerAnnouncementSelection", str,
            is_required=True,
        ),
        E("no_answer_personal_audio_file", "noAnswerPersonalAudioFile", str),
        E("no_answer_personal_audio_media_type", "noAnswerPersonalAudioMediaType", str),
        E("no_answer_personal_video_file", "noAnswerPersonalVideoFile", str),
        E("no_answer_personal_video_media_type", "noAnswerPersonalVideoMediaType", str),
        E(
            "no_answer_alternate_greeting01", "noAnswerAlternateGreeting01",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting02", "noAnswerAlternateGreeting02",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting03", "noAnswerAlternateGreeting03",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, is_complex=True,
        ),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("disable_message_deposit", "disableMessageDeposit", bool, is_required=True),
        E(
            "disable_message_deposit_action", "disableMessageDepositAction", str,
            is_required=True,
        ),
        E("greeting_only_forward_destination", "greetingOnlyForwardDestination", str),
    )

    #: str: *Required* busyAnnouncementSelection
    busy_announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* busyPersonalAudioFile
    busy_personal_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* busyPersonalAudioMediaType
    busy_personal_audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* busyPersonalVideoFile
    busy_personal_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* busyPersonalVideoMediaType
    busy_personal_video_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* noAnswerAnnouncementSelection
    no_answer_announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* noAnswerPersonalAudioFile
    no_answer_personal_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* noAnswerPersonalAudioMediaType
    no_answer_personal_audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* noAnswerPersonalVideoFile
    no_answer_personal_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* noAnswerPersonalVideoMediaType
    no_answer_personal_video_media_type = Field(type=str, required=False, mutable=False)
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead16: *Optional*
    #: noAnswerAlternateGreeting01
    no_answer_alternate_greeting01 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, required=False,
        mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead16: *Optional*
    #: noAnswerAlternateGreeting02
    no_answer_alternate_greeting02 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, required=False,
        mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead16: *Optional*
    #: noAnswerAlternateGreeting03
    no_answer_alternate_greeting03 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, required=False,
        mutable=False,
    )
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableMessageDeposit
    disable_message_deposit = Field(type=bool, required=True, mutable=False)
    #: str: *Required* disableMessageDepositAction
    disable_message_deposit_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* greetingOnlyForwardDestination
    greeting_only_forward_destination = Field(type=str, required=False, mutable=False)


class UserVoiceMessagingUserGetGreetingResponse18sp1(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetGreetingRequest18sp1()``.

    Contains the greeting configuration for a user's voice messaging.  The following
    elements are only used in AS data mode: disableMessageDeposit
    disableMessageDepositAction greetingOnlyForwardDestination extendedAwayEnabled
    extendedAwayDisableMessageDeposit extendedAwayAudioFile extendedAwayAudioMediaType
    extendedAwayVideoFile extendedAwayVideoMediaTyp Replaced by
    ``UserVoiceMessagingUserGetGreetingResponse20()``
    """

    _ELEMENTS = (
        E("busy_announcement_selection", "busyAnnouncementSelection", str, is_required=True),
        E("busy_personal_audio_file", "busyPersonalAudioFile", str),
        E("busy_personal_audio_media_type", "busyPersonalAudioMediaType", str),
        E("busy_personal_video_file", "busyPersonalVideoFile", str),
        E("busy_personal_video_media_type", "busyPersonalVideoMediaType", str),
        E(
            "no_answer_announcement_selection", "noAnswerAnnouncementSelection", str,
            is_required=True,
        ),
        E("no_answer_personal_audio_file", "noAnswerPersonalAudioFile", str),
        E("no_answer_personal_audio_media_type", "noAnswerPersonalAudioMediaType", str),
        E("no_answer_personal_video_file", "noAnswerPersonalVideoFile", str),
        E("no_answer_personal_video_media_type", "noAnswerPersonalVideoMediaType", str),
        E("extended_away_enabled", "extendedAwayEnabled", bool, is_required=True),
        E(
            "extended_away_disable_message_deposit", "extendedAwayDisableMessageDeposit",
            bool, is_required=True,
        ),
        E("extended_away_audio_file", "extendedAwayAudioFile", str),
        E("extended_away_audio_media_type", "extendedAwayAudioMediaType", str),
        E("extended_away_video_file", "extendedAwayVideoFile", str),
        E("extended_away_video_media_type", "extendedAwayVideoMediaType", str),
        E(
            "no_answer_alternate_greeting01", "noAnswerAlternateGreeting01",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting02", "noAnswerAlternateGreeting02",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting03", "noAnswerAlternateGreeting03",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, is_complex=True,
        ),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("disable_message_deposit", "disableMessageDeposit", bool, is_required=True),
        E(
            "disable_message_deposit_action", "disableMessageDepositAction", str,
            is_required=True,
        ),
        E("greeting_only_forward_destination", "greetingOnlyForwardDestination", str),
    )

    #: str: *Required* busyAnnouncementSelection
    busy_announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* busyPersonalAudioFile
    busy_personal_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* busyPersonalAudioMediaType
    busy_personal_audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* busyPersonalVideoFile
    busy_personal_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* busyPersonalVideoMediaType
    busy_personal_video_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* noAnswerAnnouncementSelection
    no_answer_announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* noAnswerPersonalAudioFile
    no_answer_personal_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* noAnswerPersonalAudioMediaType
    no_answer_personal_audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* noAnswerPersonalVideoFile
    no_answer_personal_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* noAnswerPersonalVideoMediaType
    no_answer_personal_video_media_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* extendedAwayEnabled
    extended_away_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* extendedAwayDisableMessageDeposit
    extended_away_disable_message_deposit = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* extendedAwayAudioFile
    extended_away_audio_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extendedAwayAudioMediaType
    extended_away_audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extendedAwayVideoFile
    extended_away_video_file = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extendedAwayVideoMediaType
    extended_away_video_media_type = Field(type=str, required=False, mutable=False)
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead16: *Optional*
    #: noAnswerAlternateGreeting01
    no_answer_alternate_greeting01 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, required=False,
        mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead16: *Optional*
    #: noAnswerAlternateGreeting02
    no_answer_alternate_greeting02 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, required=False,
        mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead16: *Optional*
    #: noAnswerAlternateGreeting03
    no_answer_alternate_greeting03 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead16, required=False,
        mutable=False,
    )
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableMessageDeposit
    disable_message_deposit = Field(type=bool, required=True, mutable=False)
    #: str: *Required* disableMessageDepositAction
    disable_message_deposit_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* greetingOnlyForwardDestination
    greeting_only_forward_destination = Field(type=str, required=False, mutable=False)


class UserVoiceMessagingUserGetVoicePortalResponse20(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetVoicePortalRequest20()``.

    """

    _ELEMENTS = (
        E("use_personalized_name", "usePersonalizedName", bool, is_required=True),
        E("voice_portal_auto_login", "voicePortalAutoLogin", bool, is_required=True),
        E(
            "personalized_name_audio_file", "personalizedNameAudioFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
    )

    #: bool: *Required* usePersonalizedName
    use_personalized_name = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* voicePortalAutoLogin
    voice_portal_auto_login = Field(type=bool, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* personalizedNameAudioFile
    personalized_name_audio_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )


class EnterpriseSessionAdmissionControlGetAvailableDeviceListResponse(OCIResponse):
    """
    Response to ``EnterpriseSessionAdmissionControlGetAvailableDeviceListRequest()``.

    Contains a table of devices can be assigned to session admission control group in the
    enterprise.
    """

    _ELEMENTS = (
        E(
            "access_device", "accessDevice", OCI.EnterpriseAccessDevice, is_complex=True,
            is_array=True,
        ),
    )

    #: list(OCI.EnterpriseAccessDevice): *Optional* accessDevice  *Array*
    access_device = Field(type=list, required=False, mutable=False)


class EnterpriseSessionAdmissionControlGroupGetResponse(OCIResponse):
    """
    Response to ``EnterpriseSessionAdmissionControlGroupGetRequest()``.

    Returns the profile information for the session admission control group.
    """

    _ELEMENTS = (
        E("max_session", "maxSession", int, is_required=True),
        E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
        E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
        E("reserved_session", "reservedSession", int, is_required=True),
        E("reserved_user_originating_sessions", "reservedUserOriginatingSessions", int),
        E("reserved_user_terminating_sessions", "reservedUserTerminatingSessions", int),
        E("default_group", "defaultGroup", bool, is_required=True),
        E(
            "count_intra_sac_group_sessions", "countIntraSACGroupSessions", bool,
            is_required=True,
        ),
        E("devices", "devices", OCI.EnterpriseAccessDevice, is_complex=True, is_array=True),
    )

    #: int: *Required* maxSession
    max_session = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxUserOriginatingSessions
    max_user_originating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxUserTerminatingSessions
    max_user_terminating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Required* reservedSession
    reserved_session = Field(type=int, required=True, mutable=False)
    #: int: *Optional* reservedUserOriginatingSessions
    reserved_user_originating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* reservedUserTerminatingSessions
    reserved_user_terminating_sessions = Field(type=int, required=False, mutable=False)
    #: bool: *Required* defaultGroup
    default_group = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* countIntraSACGroupSessions
    count_intra_sac_group_sessions = Field(type=bool, required=True, mutable=False)
    #: list(OCI.EnterpriseAccessDevice): *Optional* devices  *Array*
    devices = Field(type=list, required=False, mutable=False)


class EnterpriseSessionAdmissionControlGroupGetResponse19sp1(OCIResponse):
    """
    Response to ``EnterpriseSessionAdmissionControlGroupGetRequest19sp1()``.

    Returns the profile information for the session admission control group.
    """

    _ELEMENTS = (
        E("max_session", "maxSession", int, is_required=True),
        E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
        E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
        E("reserved_session", "reservedSession", int, is_required=True),
        E("reserved_user_originating_sessions", "reservedUserOriginatingSessions", int),
        E("reserved_user_terminating_sessions", "reservedUserTerminatingSessions", int),
        E("default_group", "defaultGroup", bool, is_required=True),
        E(
            "count_intra_sac_group_sessions", "countIntraSACGroupSessions", bool,
            is_required=True,
        ),
        E("devices", "devices", OCI.EnterpriseAccessDevice, is_complex=True, is_array=True),
        E(
            "block_emergency_and_repair_calls_due_to_sac_limits",
            "blockEmergencyAndRepairCallsDueToSACLimits", bool, is_required=True,
        ),
    )

    #: int: *Required* maxSession
    max_session = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxUserOriginatingSessions
    max_user_originating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxUserTerminatingSessions
    max_user_terminating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Required* reservedSession
    reserved_session = Field(type=int, required=True, mutable=False)
    #: int: *Optional* reservedUserOriginatingSessions
    reserved_user_originating_sessions = Field(type=int, required=False, mutable=False)
    #: int: *Optional* reservedUserTerminatingSessions
    reserved_user_terminating_sessions = Field(type=int, required=False, mutable=False)
    #: bool: *Required* defaultGroup
    default_group = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* countIntraSACGroupSessions
    count_intra_sac_group_sessions = Field(type=bool, required=True, mutable=False)
    #: list(OCI.EnterpriseAccessDevice): *Optional* devices  *Array*
    devices = Field(type=list, required=False, mutable=False)
    #: bool: *Required* blockEmergencyAndRepairCallsDueToSACLimits
    block_emergency_and_repair_calls_due_to_sac_limits = Field(
        type=bool, required=True, mutable=False,
    )


class GroupAutoAttendantSubmenuGetResponse(OCIResponse):
    """
    Response to ``GroupAutoAttendantSubmenuGetRequest()``.

    Contains AutoAttendant submenu information.
    """

    _ELEMENTS = (
        E("announcement_selection", "announcementSelection", str, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("audio_media_type", "audioMediaType", str),
        E("video_file_description", "videoFileDescription", str),
        E("video_media_type", "videoMediaType", str),
        E(
            "enable_level_extension_dialing", "enableLevelExtensionDialing", bool,
            is_required=True,
        ),
        E(
            "key_configuration", "keyConfiguration",
            OCI.AutoAttendantKeyReadConfiguration19, is_complex=True,
        ),
    )

    #: str: *Required* announcementSelection
    announcement_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMediaType
    audio_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoMediaType
    video_media_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableLevelExtensionDialing
    enable_level_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: OCI.AutoAttendantKeyReadConfiguration19: *Optional* keyConfiguration
    key_configuration = Field(
        type=OCI.AutoAttendantKeyReadConfiguration19, required=False, mutable=False,
    )


class GroupBroadWorksAnywhereGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupBroadWorksAnywhereGetInstanceRequest()``.

    Contains the service profile information.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("broad_works_anywhere_scope", "broadWorksAnywhereScope", str, is_required=True),
        E("prompt_for_clid", "promptForCLID", str, is_required=True),
        E("silent_prompt_mode", "silentPromptMode", bool, is_required=True),
        E("prompt_for_passcode", "promptForPasscode", bool, is_required=True),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: str: *Required* broadWorksAnywhereScope
    broad_works_anywhere_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* promptForCLID
    prompt_for_clid = Field(type=str, required=True, mutable=False)
    #: bool: *Required* silentPromptMode
    silent_prompt_mode = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* promptForPasscode
    prompt_for_passcode = Field(type=bool, required=True, mutable=False)


class GroupBroadWorksAnywhereGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupBroadWorksAnywhereGetInstanceRequest17()``.

    Contains the service profile information.  Replaced by:
    ``GroupBroadWorksAnywhereGetInstanceResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("broad_works_anywhere_scope", "broadWorksAnywhereScope", str, is_required=True),
        E("prompt_for_clid", "promptForCLID", str, is_required=True),
        E("silent_prompt_mode", "silentPromptMode", bool, is_required=True),
        E("prompt_for_passcode", "promptForPasscode", bool, is_required=True),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Required* broadWorksAnywhereScope
    broad_works_anywhere_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* promptForCLID
    prompt_for_clid = Field(type=str, required=True, mutable=False)
    #: bool: *Required* silentPromptMode
    silent_prompt_mode = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* promptForPasscode
    prompt_for_passcode = Field(type=bool, required=True, mutable=False)


class GroupBroadWorksAnywhereGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupBroadWorksAnywhereGetInstanceRequest19sp1()``.

    Contains the service profile information.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("broad_works_anywhere_scope", "broadWorksAnywhereScope", str, is_required=True),
        E("prompt_for_clid", "promptForCLID", str, is_required=True),
        E("silent_prompt_mode", "silentPromptMode", bool, is_required=True),
        E("prompt_for_passcode", "promptForPasscode", bool, is_required=True),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: str: *Required* broadWorksAnywhereScope
    broad_works_anywhere_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* promptForCLID
    prompt_for_clid = Field(type=str, required=True, mutable=False)
    #: bool: *Required* silentPromptMode
    silent_prompt_mode = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* promptForPasscode
    prompt_for_passcode = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupCallCenterComfortMessageBypassGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterComfortMessageBypassGetRequest20()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "call_waiting_age_threshold_seconds", "callWaitingAgeThresholdSeconds", int,
            is_required=True,
        ),
        E(
            "play_announcement_after_ringing", "playAnnouncementAfterRinging", bool,
            is_required=True,
        ),
        E(
            "ring_time_before_playing_announcement_seconds",
            "ringTimeBeforePlayingAnnouncementSeconds", int, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* callWaitingAgeThresholdSeconds
    call_waiting_age_threshold_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playAnnouncementAfterRinging
    play_announcement_after_ringing = Field(type=bool, required=True, mutable=False)
    #: int: *Required* ringTimeBeforePlayingAnnouncementSeconds
    ring_time_before_playing_announcement_seconds = Field(
        type=int, required=True, mutable=False,
    )
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupCallCenterForcedForwardingGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterForcedForwardingGetRequest20()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E("allow_enable_via_fac", "allowEnableViaFAC", bool, is_required=True),
        E(
            "play_announcement_before_forwarding", "playAnnouncementBeforeForwarding",
            bool, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowEnableViaFAC
    allow_enable_via_fac = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playAnnouncementBeforeForwarding
    play_announcement_before_forwarding = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupCallCenterGetInstanceResponse14(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest14()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight".

    Replaced By: ``GroupCallCenterGetInstanceResponse14sp3()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("policy", "policy", str, is_required=True),
        E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
        E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("queue_length", "queueLength", int, is_required=True),
        E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
        E("play_music_on_hold", "playMusicOnHold", bool, is_required=True),
        E("play_comfort_message", "playComfortMessage", bool, is_required=True),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* huntAfterNoAnswer
    hunt_after_no_answer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forwardAfterTimeout
    forward_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* forwardTimeoutSeconds
    forward_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowAgentLogoff
    allow_agent_logoff = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playMusicOnHold
    play_music_on_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playComfortMessage
    play_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)


class GroupCallCenterGetInstanceResponse14sp3(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest14sp3()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight".

    Replaced By: ``GroupCallCenterGetInstanceResponse14sp9()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("policy", "policy", str, is_required=True),
        E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
        E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("queue_length", "queueLength", int, is_required=True),
        E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
        E("play_music_on_hold", "playMusicOnHold", bool, is_required=True),
        E("play_comfort_message", "playComfortMessage", bool, is_required=True),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E(
            "allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool,
            is_required=True,
        ),
        E(
            "enable_call_queue_when_no_agents_available",
            "enableCallQueueWhenNoAgentsAvailable", bool, is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* huntAfterNoAnswer
    hunt_after_no_answer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forwardAfterTimeout
    forward_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* forwardTimeoutSeconds
    forward_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowAgentLogoff
    allow_agent_logoff = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playMusicOnHold
    play_music_on_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playComfortMessage
    play_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowCallsToAgentsInWrapUp
    allow_calls_to_agents_in_wrap_up = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallQueueWhenNoAgentsAvailable
    enable_call_queue_when_no_agents_available = Field(
        type=bool, required=True, mutable=False,
    )


class GroupCallCenterGetInstanceResponse14sp9(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest14sp9()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight".
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("policy", "policy", str, is_required=True),
        E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
        E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("queue_length", "queueLength", int, is_required=True),
        E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
        E("play_music_on_hold", "playMusicOnHold", bool, is_required=True),
        E("play_comfort_message", "playComfortMessage", bool, is_required=True),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
        E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E(
            "allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool,
            is_required=True,
        ),
        E(
            "enable_call_queue_when_no_agents_available",
            "enableCallQueueWhenNoAgentsAvailable", bool, is_required=True,
        ),
        E("statistics_source", "statisticsSource", str, is_required=True),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* huntAfterNoAnswer
    hunt_after_no_answer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forwardAfterTimeout
    forward_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* forwardTimeoutSeconds
    forward_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowAgentLogoff
    allow_agent_logoff = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playMusicOnHold
    play_music_on_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playComfortMessage
    play_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableGuardTimer
    enable_guard_timer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* guardTimerSeconds
    guard_timer_seconds = Field(type=int, required=True, mutable=False)
    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowCallsToAgentsInWrapUp
    allow_calls_to_agents_in_wrap_up = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableCallQueueWhenNoAgentsAvailable
    enable_call_queue_when_no_agents_available = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* statisticsSource
    statistics_source = Field(type=str, required=True, mutable=False)


class GroupCallCenterGetInstanceResponse16(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest16()``.

    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("type", "type", str, is_required=True),
        E("policy", "policy", str, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("queue_length", "queueLength", int, is_required=True),
        E("reporting_server_name", "reportingServerName", str),
        E(
            "allow_caller_to_dial_escape_digit", "allowCallerToDialEscapeDigit", bool,
            is_required=True,
        ),
        E("escape_digit", "escapeDigit", str, is_required=True),
        E(
            "reset_call_statistics_upon_entry_in_queue",
            "resetCallStatisticsUponEntryInQueue", bool,
        ),
        E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
        E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
        E("wrap_up_seconds", "wrapUpSeconds", int),
        E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
        E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
        E(
            "external_preferred_audio_codec", "externalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "internal_preferred_audio_codec", "internalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool,
            is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: str: *Required* type
    type = Field(type=str, required=True, mutable=False)
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: str: *Optional* reportingServerName
    reporting_server_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowCallerToDialEscapeDigit
    allow_caller_to_dial_escape_digit = Field(type=bool, required=True, mutable=False)
    #: str: *Required* escapeDigit
    escape_digit = Field(type=str, required=True, mutable=False)
    #: bool: *Optional* resetCallStatisticsUponEntryInQueue
    reset_call_statistics_upon_entry_in_queue = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* allowAgentLogoff
    allow_agent_logoff = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* allowCallsToAgentsInWrapUp
    allow_calls_to_agents_in_wrap_up = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* overrideAgentWrapUpTime
    override_agent_wrap_up_time = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* wrapUpSeconds
    wrap_up_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* forceDeliveryOfCalls
    force_delivery_of_calls = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* forceDeliveryWaitTimeSeconds
    force_delivery_wait_time_seconds = Field(type=int, required=False, mutable=False)
    #: str: *Required* externalPreferredAudioCodec
    external_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: str: *Required* internalPreferredAudioCodec
    internal_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: bool: *Required* playRingingWhenOfferingCall
    play_ringing_when_offering_call = Field(type=bool, required=True, mutable=False)


class GroupCallCenterGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest17()``.

    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("type", "type", str, is_required=True),
        E("policy", "policy", str, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("queue_length", "queueLength", int, is_required=True),
        E("reporting_server_name", "reportingServerName", str),
        E(
            "allow_caller_to_dial_escape_digit", "allowCallerToDialEscapeDigit", bool,
            is_required=True,
        ),
        E("escape_digit", "escapeDigit", str, is_required=True),
        E(
            "reset_call_statistics_upon_entry_in_queue",
            "resetCallStatisticsUponEntryInQueue", bool,
        ),
        E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
        E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
        E("wrap_up_seconds", "wrapUpSeconds", int),
        E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
        E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
        E(
            "enable_automatic_state_change_for_agents",
            "enableAutomaticStateChangeForAgents", bool,
        ),
        E("agent_state_after_call", "agentStateAfterCall", str),
        E("agent_unavailable_code", "agentUnavailableCode", str),
        E(
            "external_preferred_audio_codec", "externalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "internal_preferred_audio_codec", "internalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool,
            is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Required* type
    type = Field(type=str, required=True, mutable=False)
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: str: *Optional* reportingServerName
    reporting_server_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowCallerToDialEscapeDigit
    allow_caller_to_dial_escape_digit = Field(type=bool, required=True, mutable=False)
    #: str: *Required* escapeDigit
    escape_digit = Field(type=str, required=True, mutable=False)
    #: bool: *Optional* resetCallStatisticsUponEntryInQueue
    reset_call_statistics_upon_entry_in_queue = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* allowAgentLogoff
    allow_agent_logoff = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* allowCallsToAgentsInWrapUp
    allow_calls_to_agents_in_wrap_up = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* overrideAgentWrapUpTime
    override_agent_wrap_up_time = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* wrapUpSeconds
    wrap_up_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* forceDeliveryOfCalls
    force_delivery_of_calls = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* forceDeliveryWaitTimeSeconds
    force_delivery_wait_time_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* enableAutomaticStateChangeForAgents
    enable_automatic_state_change_for_agents = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* agentStateAfterCall
    agent_state_after_call = Field(type=str, required=False, mutable=False)
    #: str: *Optional* agentUnavailableCode
    agent_unavailable_code = Field(type=str, required=False, mutable=False)
    #: str: *Required* externalPreferredAudioCodec
    external_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: str: *Required* internalPreferredAudioCodec
    internal_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: bool: *Required* playRingingWhenOfferingCall
    play_ringing_when_offering_call = Field(type=bool, required=True, mutable=False)


class GroupCallCenterGetInstanceResponse17sp1(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest17sp1()``.

    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("type", "type", str, is_required=True),
        E("policy", "policy", str, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("queue_length", "queueLength", int, is_required=True),
        E("enable_reporting", "enableReporting", bool),
        E("reporting_server_name", "reportingServerName", str),
        E(
            "allow_caller_to_dial_escape_digit", "allowCallerToDialEscapeDigit", bool,
            is_required=True,
        ),
        E("escape_digit", "escapeDigit", str, is_required=True),
        E(
            "reset_call_statistics_upon_entry_in_queue",
            "resetCallStatisticsUponEntryInQueue", bool,
        ),
        E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
        E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
        E("wrap_up_seconds", "wrapUpSeconds", int),
        E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
        E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
        E(
            "enable_automatic_state_change_for_agents",
            "enableAutomaticStateChangeForAgents", bool,
        ),
        E("agent_state_after_call", "agentStateAfterCall", str),
        E("agent_unavailable_code", "agentUnavailableCode", str),
        E(
            "external_preferred_audio_codec", "externalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "internal_preferred_audio_codec", "internalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool,
            is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Required* type
    type = Field(type=str, required=True, mutable=False)
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* enableReporting
    enable_reporting = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* reportingServerName
    reporting_server_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowCallerToDialEscapeDigit
    allow_caller_to_dial_escape_digit = Field(type=bool, required=True, mutable=False)
    #: str: *Required* escapeDigit
    escape_digit = Field(type=str, required=True, mutable=False)
    #: bool: *Optional* resetCallStatisticsUponEntryInQueue
    reset_call_statistics_upon_entry_in_queue = Field(
        type=bool, required=False, mutable=False,
    )
    #: bool: *Required* allowAgentLogoff
    allow_agent_logoff = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* allowCallsToAgentsInWrapUp
    allow_calls_to_agents_in_wrap_up = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* overrideAgentWrapUpTime
    override_agent_wrap_up_time = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* wrapUpSeconds
    wrap_up_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* forceDeliveryOfCalls
    force_delivery_of_calls = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* forceDeliveryWaitTimeSeconds
    force_delivery_wait_time_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* enableAutomaticStateChangeForAgents
    enable_automatic_state_change_for_agents = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* agentStateAfterCall
    agent_state_after_call = Field(type=str, required=False, mutable=False)
    #: str: *Optional* agentUnavailableCode
    agent_unavailable_code = Field(type=str, required=False, mutable=False)
    #: str: *Required* externalPreferredAudioCodec
    external_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: str: *Required* internalPreferredAudioCodec
    internal_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: bool: *Required* playRingingWhenOfferingCall
    play_ringing_when_offering_call = Field(type=bool, required=True, mutable=False)


class GroupCallCenterGetInstanceResponse17sp3(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest17sp3()``.

    Replaced by ``GroupCallCenterGetInstanceResponse19()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("type", "type", str, is_required=True),
        E("policy", "policy", str, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("queue_length", "queueLength", int, is_required=True),
        E("enable_reporting", "enableReporting", bool),
        E("reporting_server_name", "reportingServerName", str),
        E(
            "allow_caller_to_dial_escape_digit", "allowCallerToDialEscapeDigit", bool,
            is_required=True,
        ),
        E("escape_digit", "escapeDigit", str, is_required=True),
        E(
            "reset_call_statistics_upon_entry_in_queue",
            "resetCallStatisticsUponEntryInQueue", bool, is_required=True,
        ),
        E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
        E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
        E("wrap_up_seconds", "wrapUpSeconds", int),
        E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
        E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
        E(
            "enable_automatic_state_change_for_agents",
            "enableAutomaticStateChangeForAgents", bool,
        ),
        E("agent_state_after_call", "agentStateAfterCall", str),
        E("agent_unavailable_code", "agentUnavailableCode", str),
        E(
            "external_preferred_audio_codec", "externalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "internal_preferred_audio_codec", "internalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool,
            is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Required* type
    type = Field(type=str, required=True, mutable=False)
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* enableReporting
    enable_reporting = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* reportingServerName
    reporting_server_name = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowCallerToDialEscapeDigit
    allow_caller_to_dial_escape_digit = Field(type=bool, required=True, mutable=False)
    #: str: *Required* escapeDigit
    escape_digit = Field(type=str, required=True, mutable=False)
    #: bool: *Required* resetCallStatisticsUponEntryInQueue
    reset_call_statistics_upon_entry_in_queue = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowAgentLogoff
    allow_agent_logoff = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* allowCallsToAgentsInWrapUp
    allow_calls_to_agents_in_wrap_up = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* overrideAgentWrapUpTime
    override_agent_wrap_up_time = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* wrapUpSeconds
    wrap_up_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* forceDeliveryOfCalls
    force_delivery_of_calls = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* forceDeliveryWaitTimeSeconds
    force_delivery_wait_time_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* enableAutomaticStateChangeForAgents
    enable_automatic_state_change_for_agents = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* agentStateAfterCall
    agent_state_after_call = Field(type=str, required=False, mutable=False)
    #: str: *Optional* agentUnavailableCode
    agent_unavailable_code = Field(type=str, required=False, mutable=False)
    #: str: *Required* externalPreferredAudioCodec
    external_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: str: *Required* internalPreferredAudioCodec
    internal_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: bool: *Required* playRingingWhenOfferingCall
    play_ringing_when_offering_call = Field(type=bool, required=True, mutable=False)


class GroupCallCenterGetInstanceResponse19(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest19()``.

    Replaced by: Response to ``GroupCallCenterGetInstanceRequest19sp1()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("type", "type", str, is_required=True),
        E("routing_type", "routingType", str),
        E("policy", "policy", str, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("queue_length", "queueLength", int, is_required=True),
        E("enable_reporting", "enableReporting", bool),
        E(
            "allow_caller_to_dial_escape_digit", "allowCallerToDialEscapeDigit", bool,
            is_required=True,
        ),
        E("escape_digit", "escapeDigit", str, is_required=True),
        E(
            "reset_call_statistics_upon_entry_in_queue",
            "resetCallStatisticsUponEntryInQueue", bool, is_required=True,
        ),
        E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
        E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
        E("wrap_up_seconds", "wrapUpSeconds", int),
        E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
        E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
        E(
            "enable_automatic_state_change_for_agents",
            "enableAutomaticStateChangeForAgents", bool,
        ),
        E("agent_state_after_call", "agentStateAfterCall", str),
        E("agent_unavailable_code", "agentUnavailableCode", str),
        E(
            "external_preferred_audio_codec", "externalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "internal_preferred_audio_codec", "internalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool,
            is_required=True,
        ),
        E(
            "call_center_queue_thresholds_is_active", "callCenterQueueThresholdsIsActive",
            bool,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Required* type
    type = Field(type=str, required=True, mutable=False)
    #: str: *Optional* routingType
    routing_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* enableReporting
    enable_reporting = Field(type=bool, required=False, mutable=False)
    #: bool: *Required* allowCallerToDialEscapeDigit
    allow_caller_to_dial_escape_digit = Field(type=bool, required=True, mutable=False)
    #: str: *Required* escapeDigit
    escape_digit = Field(type=str, required=True, mutable=False)
    #: bool: *Required* resetCallStatisticsUponEntryInQueue
    reset_call_statistics_upon_entry_in_queue = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowAgentLogoff
    allow_agent_logoff = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* allowCallsToAgentsInWrapUp
    allow_calls_to_agents_in_wrap_up = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* overrideAgentWrapUpTime
    override_agent_wrap_up_time = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* wrapUpSeconds
    wrap_up_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* forceDeliveryOfCalls
    force_delivery_of_calls = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* forceDeliveryWaitTimeSeconds
    force_delivery_wait_time_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* enableAutomaticStateChangeForAgents
    enable_automatic_state_change_for_agents = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* agentStateAfterCall
    agent_state_after_call = Field(type=str, required=False, mutable=False)
    #: str: *Optional* agentUnavailableCode
    agent_unavailable_code = Field(type=str, required=False, mutable=False)
    #: str: *Required* externalPreferredAudioCodec
    external_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: str: *Required* internalPreferredAudioCodec
    internal_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: bool: *Required* playRingingWhenOfferingCall
    play_ringing_when_offering_call = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* callCenterQueueThresholdsIsActive
    call_center_queue_thresholds_is_active = Field(type=bool, required=False, mutable=False)


class GroupCallCenterGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest19sp1()``.

    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("type", "type", str, is_required=True),
        E("routing_type", "routingType", str),
        E("policy", "policy", str, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("queue_length", "queueLength", int, is_required=True),
        E("enable_reporting", "enableReporting", bool),
        E(
            "allow_caller_to_dial_escape_digit", "allowCallerToDialEscapeDigit", bool,
            is_required=True,
        ),
        E("escape_digit", "escapeDigit", str, is_required=True),
        E(
            "reset_call_statistics_upon_entry_in_queue",
            "resetCallStatisticsUponEntryInQueue", bool, is_required=True,
        ),
        E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
        E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
        E("wrap_up_seconds", "wrapUpSeconds", int),
        E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
        E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
        E(
            "enable_automatic_state_change_for_agents",
            "enableAutomaticStateChangeForAgents", bool,
        ),
        E("agent_state_after_call", "agentStateAfterCall", str),
        E("agent_unavailable_code", "agentUnavailableCode", str),
        E(
            "external_preferred_audio_codec", "externalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "internal_preferred_audio_codec", "internalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool,
            is_required=True,
        ),
        E(
            "call_center_queue_thresholds_is_active", "callCenterQueueThresholdsIsActive",
            bool,
        ),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: str: *Required* type
    type = Field(type=str, required=True, mutable=False)
    #: str: *Optional* routingType
    routing_type = Field(type=str, required=False, mutable=False)
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: bool: *Optional* enableReporting
    enable_reporting = Field(type=bool, required=False, mutable=False)
    #: bool: *Required* allowCallerToDialEscapeDigit
    allow_caller_to_dial_escape_digit = Field(type=bool, required=True, mutable=False)
    #: str: *Required* escapeDigit
    escape_digit = Field(type=str, required=True, mutable=False)
    #: bool: *Required* resetCallStatisticsUponEntryInQueue
    reset_call_statistics_upon_entry_in_queue = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowAgentLogoff
    allow_agent_logoff = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* allowCallsToAgentsInWrapUp
    allow_calls_to_agents_in_wrap_up = Field(type=bool, required=False, mutable=False)
    #: bool: *Optional* overrideAgentWrapUpTime
    override_agent_wrap_up_time = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* wrapUpSeconds
    wrap_up_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* forceDeliveryOfCalls
    force_delivery_of_calls = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* forceDeliveryWaitTimeSeconds
    force_delivery_wait_time_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Optional* enableAutomaticStateChangeForAgents
    enable_automatic_state_change_for_agents = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* agentStateAfterCall
    agent_state_after_call = Field(type=str, required=False, mutable=False)
    #: str: *Optional* agentUnavailableCode
    agent_unavailable_code = Field(type=str, required=False, mutable=False)
    #: str: *Required* externalPreferredAudioCodec
    external_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: str: *Required* internalPreferredAudioCodec
    internal_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: bool: *Required* playRingingWhenOfferingCall
    play_ringing_when_offering_call = Field(type=bool, required=True, mutable=False)
    #: bool: *Optional* callCenterQueueThresholdsIsActive
    call_center_queue_thresholds_is_active = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupCallCenterGetInstanceStatisticsResponse13mp8(OCIResponse):
    """
    Contains Call Center statistics.

    Replaced By: ``GroupCallCenterGetInstanceStatisticsResponse14sp9()``
    """

    _ELEMENTS = (
        E("number_of_calls_queued_now", "numberOfCallsQueuedNow", int, is_required=True),
        E("generate_daily_report", "generateDailyReport", bool, is_required=True),
        E("collection_period_minutes", "collectionPeriodMinutes", int, is_required=True),
        E("reporting_email_address1", "reportingEmailAddress1", str),
        E("reporting_email_address2", "reportingEmailAddress2", str),
        E(
            "queue_statistics_yesterday", "queueStatisticsYesterday",
            OCI.CallCenterQueueStatistics13mp8, is_complex=True, is_required=True,
        ),
        E(
            "queue_statistics_today", "queueStatisticsToday",
            OCI.CallCenterQueueStatistics13mp8, is_complex=True, is_required=True,
        ),
        E(
            "agent_statistics", "agentStatistics", OCI.CallCenterAgentStatistics13mp8,
            is_complex=True, is_array=True,
        ),
    )

    #: int: *Required* numberOfCallsQueuedNow
    number_of_calls_queued_now = Field(type=int, required=True, mutable=False)
    #: bool: *Required* generateDailyReport
    generate_daily_report = Field(type=bool, required=True, mutable=False)
    #: int: *Required* collectionPeriodMinutes
    collection_period_minutes = Field(type=int, required=True, mutable=False)
    #: str: *Optional* reportingEmailAddress1
    reporting_email_address1 = Field(type=str, required=False, mutable=False)
    #: str: *Optional* reportingEmailAddress2
    reporting_email_address2 = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterQueueStatistics13mp8: *Required* queueStatisticsYesterday
    queue_statistics_yesterday = Field(
        type=OCI.CallCenterQueueStatistics13mp8, required=True, mutable=False,
    )
    #: OCI.CallCenterQueueStatistics13mp8: *Required* queueStatisticsToday
    queue_statistics_today = Field(
        type=OCI.CallCenterQueueStatistics13mp8, required=True, mutable=False,
    )
    #: list(OCI.CallCenterAgentStatistics13mp8): *Optional* agentStatistics  *Array*
    agent_statistics = Field(type=list, required=False, mutable=False)


class GroupCallCenterGetInstanceStatisticsResponse14sp9(OCIResponse):
    """
    Contains Call Center statistics.

    """

    _ELEMENTS = (
        E(
            "statistics_range", "statisticsRange", OCI.CallCenterStatisticsRange,
            is_complex=True, is_required=True,
        ),
        E(
            "queue_statistics", "queueStatistics", OCI.CallCenterQueueStatistics14sp9,
            is_complex=True, is_required=True,
        ),
        E(
            "agent_statistics", "agentStatistics", OCI.CallCenterAgentStatistics14sp9,
            is_complex=True, is_array=True,
        ),
    )

    #: OCI.CallCenterStatisticsRange: *Required* statisticsRange
    statistics_range = Field(type=OCI.CallCenterStatisticsRange, required=True, mutable=False)
    #: OCI.CallCenterQueueStatistics14sp9: *Required* queueStatistics
    queue_statistics = Field(
        type=OCI.CallCenterQueueStatistics14sp9, required=True, mutable=False,
    )
    #: list(OCI.CallCenterAgentStatistics14sp9): *Optional* agentStatistics  *Array*
    agent_statistics = Field(type=list, required=False, mutable=False)


class GroupCallCenterHolidayServiceGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterHolidayServiceGetRequest20()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupCallCenterNightServiceGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterNightServiceGetRequest20()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
        E("force_night_service", "forceNightService", bool, is_required=True),
        E(
            "allow_manual_override_via_fac", "allowManualOverrideViaFAC", bool,
            is_required=True,
        ),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("manual_announcement_mode", "manualAnnouncementMode", str, is_required=True),
        E(
            "manual_audio_message_selection", "manualAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_audio_url_list", "manualAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_audio_file_list", "manualAudioFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E(
            "manual_video_message_selection", "manualVideoMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_video_url_list", "manualVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_video_file_list", "manualVideoFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: OCI.TimeSchedule: *Optional* businessHours
    business_hours = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: bool: *Required* forceNightService
    force_night_service = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowManualOverrideViaFAC
    allow_manual_override_via_fac = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* manualAnnouncementMode
    manual_announcement_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* manualAudioMessageSelection
    manual_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualAudioUrlList
    manual_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* manualAudioFileList
    manual_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* manualVideoMessageSelection
    manual_video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualVideoUrlList
    manual_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* manualVideoFileList
    manual_video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupCallCenterOverflowGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterOverflowGetRequest20()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("overflow_after_timeout", "overflowAfterTimeout", bool, is_required=True),
        E("timeout_seconds", "timeoutSeconds", int, is_required=True),
        E(
            "play_announcement_before_overflow_processing",
            "playAnnouncementBeforeOverflowProcessing", bool, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* overflowAfterTimeout
    overflow_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeoutSeconds
    timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playAnnouncementBeforeOverflowProcessing
    play_announcement_before_overflow_processing = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Optional* videoMessageSelection
    video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupCallCenterStrandedCallGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterStrandedCallGetRequest20()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("audio_message_selection", "audioMessageSelection", str),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMessageSelection
    audio_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Optional* videoMessageSelection
    video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupCallCenterStrandedCallUnavailableGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterStrandedCallUnavailableGetRequest20()``.

    """

    _ELEMENTS = (
        E(
            "condition_policy_on_number_of_agents_with_specified_unavailable_code",
            "conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode", bool,
            is_required=True,
        ),
        E(
            "number_of_agents_with_specified_unavailable_code",
            "numberOfAgentsWithSpecifiedUnavailableCode", int,
        ),
        E("agents_unavailable_code", "agentsUnavailableCode", str),
        E("action", "action", str, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("audio_message_selection", "audioMessageSelection", str),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
    )

    #: bool: *Required* conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode
    condition_policy_on_number_of_agents_with_specified_unavailable_code = Field(
        type=bool, required=True, mutable=False,
    )
    #: int: *Optional* numberOfAgentsWithSpecifiedUnavailableCode
    number_of_agents_with_specified_unavailable_code = Field(
        type=int, required=False, mutable=False,
    )
    #: str: *Optional* agentsUnavailableCode
    agents_unavailable_code = Field(type=str, required=False, mutable=False)
    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* audioMessageSelection
    audio_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Optional* videoMessageSelection
    video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupCollaborateBridgeGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupCollaborateBridgeGetInstanceRequest()``.

    The system-level collaborate supportOutdial setting is returned in the response when
    the system-level collaborate supportOutdial setting is disabled.  Contains the service
    profile information and a table of assigned owners.  The table has column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    Phone Number", "Extension", "Department", "Email Address". Collaborate bridge maximum
    participant’s choices unlimited or a quantified number of participants.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E(
            "maximum_bridge_participants", "maximumBridgeParticipants",
            OCI.CollaborateBridgeMaximumParticipants, is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E("is_default", "isDefault", bool, is_required=True),
        E(
            "max_collaborate_room_participants", "maxCollaborateRoomParticipants", int,
            is_required=True,
        ),
        E("support_outdial", "supportOutdial", bool, is_required=True),
        E(
            "collaborate_owner_user_table", "collaborateOwnerUserTable", list,
            is_complex=True, is_table=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: OCI.CollaborateBridgeMaximumParticipants: *Required* maximumBridgeParticipants
    maximum_bridge_participants = Field(
        type=OCI.CollaborateBridgeMaximumParticipants, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isDefault
    is_default = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxCollaborateRoomParticipants
    max_collaborate_room_participants = Field(type=int, required=True, mutable=False)
    #: bool: *Required* supportOutdial
    support_outdial = Field(type=bool, required=True, mutable=False)
    #: list: *Optional* collaborateOwnerUserTable  *Tabular*
    collaborate_owner_user_table = Field(type=list, required=False, mutable=False)


class GroupFindMeFollowMeGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupFindMeFollowMeGetInstanceRequest()``.

    Contains the service profile information.  Replaced by:
    ``GroupFindMeFollowMeGetInstanceResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17sp4, is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile17sp4: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17sp4, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupFindMeFollowMeGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupFindMeFollowMeGetInstanceRequest19sp1()``.

    Contains the service profile information.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupFlexibleSeatingHostGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupFlexibleSeatingHostGetInstanceRequest()``.

    Contains the service profile and access device information.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("default_alias", "defaultAlias", str, is_required=True),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceMultipleContactEndpointRead20, is_complex=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: OCI.AccessDeviceMultipleContactEndpointRead20: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceMultipleContactEndpointRead20, required=False, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupGroupPagingGetInstanceResponse(OCIResponse):
    """
    Replaced By ``GroupGroupPagingGetInstanceResponse17sp3()`` Response to
    ``GroupGroupPagingGetInstanceRequest()``.

    Contains the service profile information.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E(
            "confirmation_tone_timeout_seconds", "confirmationToneTimeoutSeconds", int,
            is_required=True,
        ),
        E(
            "deliver_originator_clid_instead", "deliverOriginatorCLIDInstead", bool,
            is_required=True,
        ),
        E("originator_clid_prefix", "originatorCLIDPrefix", str),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: int: *Required* confirmationToneTimeoutSeconds
    confirmation_tone_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* deliverOriginatorCLIDInstead
    deliver_originator_clid_instead = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* originatorCLIDPrefix
    originator_clid_prefix = Field(type=str, required=False, mutable=False)


class GroupGroupPagingGetInstanceResponse17sp3(OCIResponse):
    """
    Response to ``GroupGroupPagingGetInstanceRequest17sp3()``.

    Contains the service profile information.  Replaced by:
    ``GroupGroupPagingGetInstanceResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E(
            "confirmation_tone_timeout_seconds", "confirmationToneTimeoutSeconds", int,
            is_required=True,
        ),
        E(
            "deliver_originator_clid_instead", "deliverOriginatorCLIDInstead", bool,
            is_required=True,
        ),
        E("originator_clid_prefix", "originatorCLIDPrefix", str),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: int: *Required* confirmationToneTimeoutSeconds
    confirmation_tone_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* deliverOriginatorCLIDInstead
    deliver_originator_clid_instead = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* originatorCLIDPrefix
    originator_clid_prefix = Field(type=str, required=False, mutable=False)


class GroupGroupPagingGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupGroupPagingGetInstanceRequest19sp1()``.

    Contains the service profile information.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E(
            "confirmation_tone_timeout_seconds", "confirmationToneTimeoutSeconds", int,
            is_required=True,
        ),
        E(
            "deliver_originator_clid_instead", "deliverOriginatorCLIDInstead", bool,
            is_required=True,
        ),
        E("originator_clid_prefix", "originatorCLIDPrefix", str),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: int: *Required* confirmationToneTimeoutSeconds
    confirmation_tone_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* deliverOriginatorCLIDInstead
    deliver_originator_clid_instead = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* originatorCLIDPrefix
    originator_clid_prefix = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupHuntGroupGetInstanceResponse14(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest14()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight".
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("policy", "policy", str, is_required=True),
        E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
        E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* huntAfterNoAnswer
    hunt_after_no_answer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forwardAfterTimeout
    forward_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* forwardTimeoutSeconds
    forward_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)


class GroupHuntGroupGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest17()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight".
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("policy", "policy", str, is_required=True),
        E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
        E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* huntAfterNoAnswer
    hunt_after_no_answer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forwardAfterTimeout
    forward_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* forwardTimeoutSeconds
    forward_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)


class GroupHuntGroupGetInstanceResponse17sp3(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest17sp3()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight". The following elements are only used in AS data mode:
    useSystemHuntGroupCLIDSetting includeHuntGroupNameInCLID
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("policy", "policy", str, is_required=True),
        E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
        E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E(
            "use_system_hunt_group_clid_setting", "useSystemHuntGroupCLIDSetting", bool,
            is_required=True,
        ),
        E(
            "include_hunt_group_name_in_clid", "includeHuntGroupNameInCLID", bool,
            is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* huntAfterNoAnswer
    hunt_after_no_answer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forwardAfterTimeout
    forward_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* forwardTimeoutSeconds
    forward_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useSystemHuntGroupCLIDSetting
    use_system_hunt_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeHuntGroupNameInCLID
    include_hunt_group_name_in_clid = Field(type=bool, required=True, mutable=False)


class GroupHuntGroupGetInstanceResponse17sp4(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest17sp4()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight", "Phone Number", "Extension", "Department", "Email Address". The
    following elements are only used in AS data mode: useSystemHuntGroupCLIDSetting
    includeHuntGroupNameInCLID
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("policy", "policy", str, is_required=True),
        E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
        E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E(
            "use_system_hunt_group_clid_setting", "useSystemHuntGroupCLIDSetting", bool,
            is_required=True,
        ),
        E(
            "include_hunt_group_name_in_clid", "includeHuntGroupNameInCLID", bool,
            is_required=True,
        ),
        E(
            "enable_not_reachable_forwarding", "enableNotReachableForwarding", bool,
            is_required=True,
        ),
        E("not_reachable_forward_to_phone_number", "notReachableForwardToPhoneNumber", str),
        E("make_busy_when_not_reachable", "makeBusyWhenNotReachable", bool, is_required=True),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* huntAfterNoAnswer
    hunt_after_no_answer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forwardAfterTimeout
    forward_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* forwardTimeoutSeconds
    forward_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useSystemHuntGroupCLIDSetting
    use_system_hunt_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeHuntGroupNameInCLID
    include_hunt_group_name_in_clid = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNotReachableForwarding
    enable_not_reachable_forwarding = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* notReachableForwardToPhoneNumber
    not_reachable_forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* makeBusyWhenNotReachable
    make_busy_when_not_reachable = Field(type=bool, required=True, mutable=False)


class GroupHuntGroupGetInstanceResponse19(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest19()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight", "Phone Number", "Extension", "Department", "Email Address". The
    following elements are only used in AS data mode: useSystemHuntGroupCLIDSetting
    includeHuntGroupNameInCLID The following elements are only used in HSS data mode:
    allowMembersToControlGroupBusy enableGroupBusy Replaced by:
    ``GroupHuntGroupGetInstanceResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("policy", "policy", str, is_required=True),
        E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
        E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E(
            "use_system_hunt_group_clid_setting", "useSystemHuntGroupCLIDSetting", bool,
            is_required=True,
        ),
        E(
            "include_hunt_group_name_in_clid", "includeHuntGroupNameInCLID", bool,
            is_required=True,
        ),
        E(
            "enable_not_reachable_forwarding", "enableNotReachableForwarding", bool,
            is_required=True,
        ),
        E("not_reachable_forward_to_phone_number", "notReachableForwardToPhoneNumber", str),
        E("make_busy_when_not_reachable", "makeBusyWhenNotReachable", bool, is_required=True),
        E(
            "allow_members_to_control_group_busy", "allowMembersToControlGroupBusy", bool,
            is_required=True,
        ),
        E("enable_group_busy", "enableGroupBusy", bool, is_required=True),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* huntAfterNoAnswer
    hunt_after_no_answer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forwardAfterTimeout
    forward_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* forwardTimeoutSeconds
    forward_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useSystemHuntGroupCLIDSetting
    use_system_hunt_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeHuntGroupNameInCLID
    include_hunt_group_name_in_clid = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNotReachableForwarding
    enable_not_reachable_forwarding = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* notReachableForwardToPhoneNumber
    not_reachable_forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* makeBusyWhenNotReachable
    make_busy_when_not_reachable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowMembersToControlGroupBusy
    allow_members_to_control_group_busy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGroupBusy
    enable_group_busy = Field(type=bool, required=True, mutable=False)


class GroupHuntGroupGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest19sp1()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight", "Phone Number", "Extension", "Department", "Email Address". The
    following elements are only used in AS data mode: useSystemHuntGroupCLIDSetting
    includeHuntGroupNameInCLID The following elements are only used in HSS data mode:
    allowMembersToControlGroupBusy enableGroupBusy Replaced by:
    ``GroupHuntGroupGetInstanceResponse20()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("policy", "policy", str, is_required=True),
        E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
        E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E(
            "use_system_hunt_group_clid_setting", "useSystemHuntGroupCLIDSetting", bool,
            is_required=True,
        ),
        E(
            "include_hunt_group_name_in_clid", "includeHuntGroupNameInCLID", bool,
            is_required=True,
        ),
        E(
            "enable_not_reachable_forwarding", "enableNotReachableForwarding", bool,
            is_required=True,
        ),
        E("not_reachable_forward_to_phone_number", "notReachableForwardToPhoneNumber", str),
        E("make_busy_when_not_reachable", "makeBusyWhenNotReachable", bool, is_required=True),
        E(
            "allow_members_to_control_group_busy", "allowMembersToControlGroupBusy", bool,
            is_required=True,
        ),
        E("enable_group_busy", "enableGroupBusy", bool, is_required=True),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* huntAfterNoAnswer
    hunt_after_no_answer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forwardAfterTimeout
    forward_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* forwardTimeoutSeconds
    forward_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useSystemHuntGroupCLIDSetting
    use_system_hunt_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeHuntGroupNameInCLID
    include_hunt_group_name_in_clid = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNotReachableForwarding
    enable_not_reachable_forwarding = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* notReachableForwardToPhoneNumber
    not_reachable_forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* makeBusyWhenNotReachable
    make_busy_when_not_reachable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowMembersToControlGroupBusy
    allow_members_to_control_group_busy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGroupBusy
    enable_group_busy = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupHuntGroupGetInstanceResponse20(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest20()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight", "Phone Number", "Extension", "Department", "Email Address". The
    following elements are only used in AS data mode: useSystemHuntGroupCLIDSetting
    includeHuntGroupNameInCLID
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("policy", "policy", str, is_required=True),
        E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
        E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "agent_user_table", "agentUserTable", list, is_complex=True, is_required=True,
            is_table=True,
        ),
        E(
            "allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool,
            is_required=True,
        ),
        E(
            "use_system_hunt_group_clid_setting", "useSystemHuntGroupCLIDSetting", bool,
            is_required=True,
        ),
        E(
            "include_hunt_group_name_in_clid", "includeHuntGroupNameInCLID", bool,
            is_required=True,
        ),
        E(
            "enable_not_reachable_forwarding", "enableNotReachableForwarding", bool,
            is_required=True,
        ),
        E("not_reachable_forward_to_phone_number", "notReachableForwardToPhoneNumber", str),
        E("make_busy_when_not_reachable", "makeBusyWhenNotReachable", bool, is_required=True),
        E(
            "allow_members_to_control_group_busy", "allowMembersToControlGroupBusy", bool,
            is_required=True,
        ),
        E("enable_group_busy", "enableGroupBusy", bool, is_required=True),
        E(
            "apply_group_busy_when_terminating_to_agent",
            "applyGroupBusyWhenTerminatingToAgent", bool, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: str: *Required* policy
    policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* huntAfterNoAnswer
    hunt_after_no_answer = Field(type=bool, required=True, mutable=False)
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* forwardAfterTimeout
    forward_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* forwardTimeoutSeconds
    forward_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* agentUserTable  *Tabular*
    agent_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* allowCallWaitingForAgents
    allow_call_waiting_for_agents = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useSystemHuntGroupCLIDSetting
    use_system_hunt_group_clid_setting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeHuntGroupNameInCLID
    include_hunt_group_name_in_clid = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableNotReachableForwarding
    enable_not_reachable_forwarding = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* notReachableForwardToPhoneNumber
    not_reachable_forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* makeBusyWhenNotReachable
    make_busy_when_not_reachable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowMembersToControlGroupBusy
    allow_members_to_control_group_busy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableGroupBusy
    enable_group_busy = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* applyGroupBusyWhenTerminatingToAgent
    apply_group_busy_when_terminating_to_agent = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupIncomingCallingPlanGetListResponse(OCIResponse):
    """
    Response to ``GroupIncomingCallingPlanGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions", OCI.IncomingCallingPlanPermissions,
            is_complex=True, is_required=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.IncomingCallingPlanDepartmentPermissions, is_complex=True, is_array=True,
        ),
    )

    #: OCI.IncomingCallingPlanPermissions: *Required* groupPermissions
    group_permissions = Field(
        type=OCI.IncomingCallingPlanPermissions, required=True, mutable=False,
    )
    #: list(OCI.IncomingCallingPlanDepartmentPermissions): *Optional*
    #: departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupInstantGroupCallGetInstanceResponse14(OCIResponse):
    """
    Response to ``GroupInstantGroupCallGetInstanceRequest14()``.

    Contains the service profile information and a list of phone numbers.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("destination_phone_number", "destinationPhoneNumber", str, is_array=True),
        E("is_answer_timeout_enabled", "isAnswerTimeoutEnabled", bool, is_required=True),
        E("answer_timeout_minutes", "answerTimeoutMinutes", int),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: list(str): *Optional* destinationPhoneNumber  *Array*
    destination_phone_number = Field(type=list, required=False, mutable=False)
    #: bool: *Required* isAnswerTimeoutEnabled
    is_answer_timeout_enabled = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* answerTimeoutMinutes
    answer_timeout_minutes = Field(type=int, required=False, mutable=False)


class GroupInstantGroupCallGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupInstantGroupCallGetInstanceRequest17()``.

    Contains the service profile information and a list of phone numbers.  Replaced by:
    ``GroupInstantGroupCallGetInstanceResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("destination_phone_number", "destinationPhoneNumber", str, is_array=True),
        E("is_answer_timeout_enabled", "isAnswerTimeoutEnabled", bool, is_required=True),
        E("answer_timeout_minutes", "answerTimeoutMinutes", int),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: list(str): *Optional* destinationPhoneNumber  *Array*
    destination_phone_number = Field(type=list, required=False, mutable=False)
    #: bool: *Required* isAnswerTimeoutEnabled
    is_answer_timeout_enabled = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* answerTimeoutMinutes
    answer_timeout_minutes = Field(type=int, required=False, mutable=False)


class GroupInstantGroupCallGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupInstantGroupCallGetInstanceRequest19sp1()``.

    Contains the service profile information and a list of phone numbers.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("destination_phone_number", "destinationPhoneNumber", str, is_array=True),
        E("is_answer_timeout_enabled", "isAnswerTimeoutEnabled", bool, is_required=True),
        E("answer_timeout_minutes", "answerTimeoutMinutes", int),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: list(str): *Optional* destinationPhoneNumber  *Array*
    destination_phone_number = Field(type=list, required=False, mutable=False)
    #: bool: *Required* isAnswerTimeoutEnabled
    is_answer_timeout_enabled = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* answerTimeoutMinutes
    answer_timeout_minutes = Field(type=int, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupMWIDeliveryToMobileEndpointCustomTemplateGetResponse(OCIResponse):
    """
    Response to the ``GroupMWIDeliveryToMobileEndpointCustomTemplateGetRequest()``.

    """

    _ELEMENTS = (
        E("is_enabled", "isEnabled", bool, is_required=True),
        E(
            "template_body", "templateBody", OCI.MWIDeliveryToMobileEndpointTemplateBody,
            is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* isEnabled
    is_enabled = Field(type=bool, required=True, mutable=False)
    #: OCI.MWIDeliveryToMobileEndpointTemplateBody: *Required* templateBody
    template_body = Field(
        type=OCI.MWIDeliveryToMobileEndpointTemplateBody, required=True, mutable=False,
    )


class GroupMeetMeConferencingGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", and
    "Hiragana First Name".
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E(
            "allocated_ports", "allocatedPorts", OCI.MeetMeConferencingConferencePorts,
            is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E("allow_individual_out_dial", "allowIndividualOutDial", bool, is_required=True),
        E("operator_number", "operatorNumber", str),
        E(
            "conference_host_user_table", "conferenceHostUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: OCI.MeetMeConferencingConferencePorts: *Required* allocatedPorts
    allocated_ports = Field(
        type=OCI.MeetMeConferencingConferencePorts, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowIndividualOutDial
    allow_individual_out_dial = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* operatorNumber
    operator_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* conferenceHostUserTable  *Tabular*
    conference_host_user_table = Field(type=list, required=True, mutable=False)


class GroupMeetMeConferencingGetInstanceResponse17sp3(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest17sp3()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", and
    "Hiragana First Name".
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E(
            "allocated_ports", "allocatedPorts", OCI.MeetMeConferencingConferencePorts,
            is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E("allow_individual_out_dial", "allowIndividualOutDial", bool, is_required=True),
        E("operator_number", "operatorNumber", str),
        E(
            "conference_host_user_table", "conferenceHostUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: OCI.MeetMeConferencingConferencePorts: *Required* allocatedPorts
    allocated_ports = Field(
        type=OCI.MeetMeConferencingConferencePorts, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowIndividualOutDial
    allow_individual_out_dial = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* operatorNumber
    operator_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* conferenceHostUserTable  *Tabular*
    conference_host_user_table = Field(type=list, required=True, mutable=False)


class GroupMeetMeConferencingGetInstanceResponse17sp4(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest17sp4()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", and
    "Hiragana First Name".
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17sp4, is_complex=True, is_required=True,
        ),
        E(
            "allocated_ports", "allocatedPorts", OCI.MeetMeConferencingConferencePorts,
            is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E("allow_individual_out_dial", "allowIndividualOutDial", bool, is_required=True),
        E("operator_number", "operatorNumber", str),
        E(
            "conference_host_user_table", "conferenceHostUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17sp4: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17sp4, required=True, mutable=False,
    )
    #: OCI.MeetMeConferencingConferencePorts: *Required* allocatedPorts
    allocated_ports = Field(
        type=OCI.MeetMeConferencingConferencePorts, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowIndividualOutDial
    allow_individual_out_dial = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* operatorNumber
    operator_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* conferenceHostUserTable  *Tabular*
    conference_host_user_table = Field(type=list, required=True, mutable=False)


class GroupMeetMeConferencingGetInstanceResponse18(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest18()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", Phone Number", "Extension", "Department", "Email Address".
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17sp4, is_complex=True, is_required=True,
        ),
        E(
            "allocated_ports", "allocatedPorts", OCI.MeetMeConferencingConferencePorts,
            is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E("allow_individual_out_dial", "allowIndividualOutDial", bool, is_required=True),
        E("operator_number", "operatorNumber", str),
        E(
            "conference_host_user_table", "conferenceHostUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E("play_warning_prompt", "playWarningPrompt", bool, is_required=True),
        E(
            "conference_end_warning_prompt_minutes", "conferenceEndWarningPromptMinutes",
            int, is_required=True,
        ),
        E(
            "enable_max_conference_duration", "enableMaxConferenceDuration", bool,
            is_required=True,
        ),
        E(
            "max_conference_duration_minutes", "maxConferenceDurationMinutes",
            OCI.MeetMeConferencingConferenceDuration, is_complex=True, is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17sp4: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17sp4, required=True, mutable=False,
    )
    #: OCI.MeetMeConferencingConferencePorts: *Required* allocatedPorts
    allocated_ports = Field(
        type=OCI.MeetMeConferencingConferencePorts, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: bool: *Required* allowIndividualOutDial
    allow_individual_out_dial = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* operatorNumber
    operator_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* conferenceHostUserTable  *Tabular*
    conference_host_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* playWarningPrompt
    play_warning_prompt = Field(type=bool, required=True, mutable=False)
    #: int: *Required* conferenceEndWarningPromptMinutes
    conference_end_warning_prompt_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableMaxConferenceDuration
    enable_max_conference_duration = Field(type=bool, required=True, mutable=False)
    #: OCI.MeetMeConferencingConferenceDuration: *Required* maxConferenceDurationMinutes
    max_conference_duration_minutes = Field(
        type=OCI.MeetMeConferencingConferenceDuration, required=True, mutable=False,
    )


class GroupMeetMeConferencingGetInstanceResponse19(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest19()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", Phone Number", "Extension", "Department", "Email Address". Replaced by:
    ``GroupMeetMeConferencingGetInstanceResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17sp4, is_complex=True, is_required=True,
        ),
        E(
            "allocated_ports", "allocatedPorts", OCI.MeetMeConferencingConferencePorts,
            is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E("security_pin_length", "securityPinLength", int, is_required=True),
        E("allow_individual_out_dial", "allowIndividualOutDial", bool, is_required=True),
        E("operator_number", "operatorNumber", str),
        E(
            "conference_host_user_table", "conferenceHostUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E("play_warning_prompt", "playWarningPrompt", bool, is_required=True),
        E(
            "conference_end_warning_prompt_minutes", "conferenceEndWarningPromptMinutes",
            int, is_required=True,
        ),
        E(
            "enable_max_conference_duration", "enableMaxConferenceDuration", bool,
            is_required=True,
        ),
        E(
            "max_conference_duration_minutes", "maxConferenceDurationMinutes",
            OCI.MeetMeConferencingConferenceDuration, is_complex=True, is_required=True,
        ),
        E(
            "max_scheduled_conference_duration_minutes",
            "maxScheduledConferenceDurationMinutes",
            OCI.MeetMeConferencingConferenceDuration, is_complex=True, is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17sp4: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17sp4, required=True, mutable=False,
    )
    #: OCI.MeetMeConferencingConferencePorts: *Required* allocatedPorts
    allocated_ports = Field(
        type=OCI.MeetMeConferencingConferencePorts, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: int: *Required* securityPinLength
    security_pin_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowIndividualOutDial
    allow_individual_out_dial = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* operatorNumber
    operator_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* conferenceHostUserTable  *Tabular*
    conference_host_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* playWarningPrompt
    play_warning_prompt = Field(type=bool, required=True, mutable=False)
    #: int: *Required* conferenceEndWarningPromptMinutes
    conference_end_warning_prompt_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableMaxConferenceDuration
    enable_max_conference_duration = Field(type=bool, required=True, mutable=False)
    #: OCI.MeetMeConferencingConferenceDuration: *Required* maxConferenceDurationMinutes
    max_conference_duration_minutes = Field(
        type=OCI.MeetMeConferencingConferenceDuration, required=True, mutable=False,
    )
    #: OCI.MeetMeConferencingConferenceDuration: *Required*
    #: maxScheduledConferenceDurationMinutes
    max_scheduled_conference_duration_minutes = Field(
        type=OCI.MeetMeConferencingConferenceDuration, required=True, mutable=False,
    )


class GroupMeetMeConferencingGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest19sp1()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", Phone Number", "Extension", "Department", "Email Address".
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E(
            "allocated_ports", "allocatedPorts", OCI.MeetMeConferencingConferencePorts,
            is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E("security_pin_length", "securityPinLength", int, is_required=True),
        E("allow_individual_out_dial", "allowIndividualOutDial", bool, is_required=True),
        E("operator_number", "operatorNumber", str),
        E(
            "conference_host_user_table", "conferenceHostUserTable", list,
            is_complex=True, is_required=True, is_table=True,
        ),
        E("play_warning_prompt", "playWarningPrompt", bool, is_required=True),
        E(
            "conference_end_warning_prompt_minutes", "conferenceEndWarningPromptMinutes",
            int, is_required=True,
        ),
        E(
            "enable_max_conference_duration", "enableMaxConferenceDuration", bool,
            is_required=True,
        ),
        E(
            "max_conference_duration_minutes", "maxConferenceDurationMinutes",
            OCI.MeetMeConferencingConferenceDuration, is_complex=True, is_required=True,
        ),
        E(
            "max_scheduled_conference_duration_minutes",
            "maxScheduledConferenceDurationMinutes",
            OCI.MeetMeConferencingConferenceDuration, is_complex=True, is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: OCI.MeetMeConferencingConferencePorts: *Required* allocatedPorts
    allocated_ports = Field(
        type=OCI.MeetMeConferencingConferencePorts, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: int: *Required* securityPinLength
    security_pin_length = Field(type=int, required=True, mutable=False)
    #: bool: *Required* allowIndividualOutDial
    allow_individual_out_dial = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* operatorNumber
    operator_number = Field(type=str, required=False, mutable=False)
    #: list: *Required* conferenceHostUserTable  *Tabular*
    conference_host_user_table = Field(type=list, required=True, mutable=False)
    #: bool: *Required* playWarningPrompt
    play_warning_prompt = Field(type=bool, required=True, mutable=False)
    #: int: *Required* conferenceEndWarningPromptMinutes
    conference_end_warning_prompt_minutes = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableMaxConferenceDuration
    enable_max_conference_duration = Field(type=bool, required=True, mutable=False)
    #: OCI.MeetMeConferencingConferenceDuration: *Required* maxConferenceDurationMinutes
    max_conference_duration_minutes = Field(
        type=OCI.MeetMeConferencingConferenceDuration, required=True, mutable=False,
    )
    #: OCI.MeetMeConferencingConferenceDuration: *Required*
    #: maxScheduledConferenceDurationMinutes
    max_scheduled_conference_duration_minutes = Field(
        type=OCI.MeetMeConferencingConferenceDuration, required=True, mutable=False,
    )


class GroupMusicOnHoldGetInstanceResponse14(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest14()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E("is_active_during_call_hold", "isActiveDuringCallHold", bool, is_required=True),
        E("is_active_during_call_park", "isActiveDuringCallPark", bool, is_required=True),
        E("message_selection", "messageSelection", str, is_required=True),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("video_file_description", "videoFileDescription", str),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallHold
    is_active_during_call_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallPark
    is_active_during_call_park = Field(type=bool, required=True, mutable=False)
    #: str: *Required* messageSelection
    message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)


class GroupMusicOnHoldGetInstanceResponse14sp4(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest14sp4()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E("is_active_during_call_hold", "isActiveDuringCallHold", bool, is_required=True),
        E("is_active_during_call_park", "isActiveDuringCallPark", bool, is_required=True),
        E(
            "is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool,
            is_required=True,
        ),
        E("message_selection", "messageSelection", str, is_required=True),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("audio_file_description", "audioFileDescription", str),
        E("video_file_description", "videoFileDescription", str),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallHold
    is_active_during_call_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringCallPark
    is_active_during_call_park = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isActiveDuringBusyCampOn
    is_active_during_busy_camp_on = Field(type=bool, required=True, mutable=False)
    #: str: *Required* messageSelection
    message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* audioFileDescription
    audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* videoFileDescription
    video_file_description = Field(type=str, required=False, mutable=False)


class GroupOutgoingCallingPlanAuthorizationCodeGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanAuthorizationCodeGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_code_list", "groupCodeList",
            OCI.OutgoingCallingPlanGroupAuthorizationCodes, is_complex=True,
            is_required=True,
        ),
        E(
            "department_code_list", "departmentCodeList",
            OCI.OutgoingCallingPlanDepartmentAuthorizationCodes, is_complex=True,
            is_array=True,
        ),
    )

    #: OCI.OutgoingCallingPlanGroupAuthorizationCodes: *Required* groupCodeList
    group_code_list = Field(
        type=OCI.OutgoingCallingPlanGroupAuthorizationCodes, required=True, mutable=False,
    )
    #: list(OCI.OutgoingCallingPlanDepartmentAuthorizationCodes): *Optional*
    #: departmentCodeList  *Array*
    department_code_list = Field(type=list, required=False, mutable=False)


class GroupOutgoingCallingPlanCallMeNowGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanCallMeNowGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions",
            OCI.OutgoingCallingPlanCallMeNowPermissions, is_complex=True, is_required=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.OutgoingCallingPlanCallMeNowDepartmentPermissions, is_complex=True,
            is_array=True,
        ),
    )

    #: OCI.OutgoingCallingPlanCallMeNowPermissions: *Required* groupPermissions
    group_permissions = Field(
        type=OCI.OutgoingCallingPlanCallMeNowPermissions, required=True, mutable=False,
    )
    #: list(OCI.OutgoingCallingPlanCallMeNowDepartmentPermissions): *Optional*
    #: departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupOutgoingCallingPlanOriginatingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanOriginatingGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions",
            OCI.OutgoingCallingPlanOriginatingPermissions, is_complex=True,
            is_required=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.OutgoingCallingPlanOriginatingDepartmentPermissions, is_complex=True,
            is_array=True,
        ),
    )

    #: OCI.OutgoingCallingPlanOriginatingPermissions: *Required* groupPermissions
    group_permissions = Field(
        type=OCI.OutgoingCallingPlanOriginatingPermissions, required=True, mutable=False,
    )
    #: list(OCI.OutgoingCallingPlanOriginatingDepartmentPermissions): *Optional*
    #: departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupOutgoingCallingPlanRedirectedGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanRedirectedGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions",
            OCI.OutgoingCallingPlanRedirectedPermissions, is_complex=True,
            is_required=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.OutgoingCallingPlanRedirectedDepartmentPermissions, is_complex=True,
            is_array=True,
        ),
    )

    #: OCI.OutgoingCallingPlanRedirectedPermissions: *Required* groupPermissions
    group_permissions = Field(
        type=OCI.OutgoingCallingPlanRedirectedPermissions, required=True, mutable=False,
    )
    #: list(OCI.OutgoingCallingPlanRedirectedDepartmentPermissions): *Optional*
    #: departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupOutgoingCallingPlanRedirectingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanRedirectingGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions",
            OCI.OutgoingCallingPlanRedirectingPermissions, is_complex=True,
            is_required=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.OutgoingCallingPlanRedirectingDepartmentPermissions, is_complex=True,
            is_array=True,
        ),
    )

    #: OCI.OutgoingCallingPlanRedirectingPermissions: *Required* groupPermissions
    group_permissions = Field(
        type=OCI.OutgoingCallingPlanRedirectingPermissions, required=True, mutable=False,
    )
    #: list(OCI.OutgoingCallingPlanRedirectingDepartmentPermissions): *Optional*
    #: departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupOutgoingCallingPlanTransferNumbersGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanTransferNumbersGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_numbers", "groupNumbers", OCI.OutgoingCallingPlanTransferNumbers,
            is_complex=True, is_required=True,
        ),
        E(
            "department_numbers", "departmentNumbers",
            OCI.OutgoingCallingPlanDepartmentTransferNumbers, is_complex=True,
            is_array=True,
        ),
    )

    #: OCI.OutgoingCallingPlanTransferNumbers: *Required* groupNumbers
    group_numbers = Field(
        type=OCI.OutgoingCallingPlanTransferNumbers, required=True, mutable=False,
    )
    #: list(OCI.OutgoingCallingPlanDepartmentTransferNumbers): *Optional*
    #: departmentNumbers  *Array*
    department_numbers = Field(type=list, required=False, mutable=False)


class GroupRoutePointForcedForwardingGetResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointForcedForwardingGetRequest20()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("forward_to_phone_number", "forwardToPhoneNumber", str),
        E(
            "play_announcement_before_forwarding", "playAnnouncementBeforeForwarding",
            bool, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* forwardToPhoneNumber
    forward_to_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeForwarding
    play_announcement_before_forwarding = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupRoutePointGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupRoutePointGetInstanceRequest()``.

    Replaced by: ``GroupRoutePointGetInstanceResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E(
            "external_preferred_audio_codec", "externalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "internal_preferred_audio_codec", "internalPreferredAudioCodec", str,
            is_required=True,
        ),
        E("queue_length", "queueLength", int, is_required=True),
        E("no_answer_timeout_rings", "noAnswerTimeoutRings", int, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E(
            "play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool,
            is_required=True,
        ),
        E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool, is_required=True),
        E("wrap_up_seconds", "wrapUpSeconds", int),
        E(
            "enable_automatic_state_change_for_agents",
            "enableAutomaticStateChangeForAgents", bool, is_required=True,
        ),
        E("agent_state_after_call", "agentStateAfterCall", str, is_required=True),
        E("agent_unavailable_code", "agentUnavailableCode", str),
        E("force_delivery_of_calls", "forceDeliveryOfCalls", bool, is_required=True),
        E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: str: *Required* externalPreferredAudioCodec
    external_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: str: *Required* internalPreferredAudioCodec
    internal_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* noAnswerTimeoutRings
    no_answer_timeout_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playRingingWhenOfferingCall
    play_ringing_when_offering_call = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* overrideAgentWrapUpTime
    override_agent_wrap_up_time = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* wrapUpSeconds
    wrap_up_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableAutomaticStateChangeForAgents
    enable_automatic_state_change_for_agents = Field(type=bool, required=True, mutable=False)
    #: str: *Required* agentStateAfterCall
    agent_state_after_call = Field(type=str, required=True, mutable=False)
    #: str: *Optional* agentUnavailableCode
    agent_unavailable_code = Field(type=str, required=False, mutable=False)
    #: bool: *Required* forceDeliveryOfCalls
    force_delivery_of_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* forceDeliveryWaitTimeSeconds
    force_delivery_wait_time_seconds = Field(type=int, required=False, mutable=False)


class GroupRoutePointGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupRoutePointGetInstanceRequest19sp1()``.

    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E(
            "external_preferred_audio_codec", "externalPreferredAudioCodec", str,
            is_required=True,
        ),
        E(
            "internal_preferred_audio_codec", "internalPreferredAudioCodec", str,
            is_required=True,
        ),
        E("queue_length", "queueLength", int, is_required=True),
        E("no_answer_timeout_rings", "noAnswerTimeoutRings", int, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E(
            "play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool,
            is_required=True,
        ),
        E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool, is_required=True),
        E("wrap_up_seconds", "wrapUpSeconds", int),
        E(
            "enable_automatic_state_change_for_agents",
            "enableAutomaticStateChangeForAgents", bool, is_required=True,
        ),
        E("agent_state_after_call", "agentStateAfterCall", str, is_required=True),
        E("agent_unavailable_code", "agentUnavailableCode", str),
        E("force_delivery_of_calls", "forceDeliveryOfCalls", bool, is_required=True),
        E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: str: *Required* externalPreferredAudioCodec
    external_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: str: *Required* internalPreferredAudioCodec
    internal_preferred_audio_codec = Field(type=str, required=True, mutable=False)
    #: int: *Required* queueLength
    queue_length = Field(type=int, required=True, mutable=False)
    #: int: *Required* noAnswerTimeoutRings
    no_answer_timeout_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* playRingingWhenOfferingCall
    play_ringing_when_offering_call = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* overrideAgentWrapUpTime
    override_agent_wrap_up_time = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* wrapUpSeconds
    wrap_up_seconds = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableAutomaticStateChangeForAgents
    enable_automatic_state_change_for_agents = Field(type=bool, required=True, mutable=False)
    #: str: *Required* agentStateAfterCall
    agent_state_after_call = Field(type=str, required=True, mutable=False)
    #: str: *Optional* agentUnavailableCode
    agent_unavailable_code = Field(type=str, required=False, mutable=False)
    #: bool: *Required* forceDeliveryOfCalls
    force_delivery_of_calls = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* forceDeliveryWaitTimeSeconds
    force_delivery_wait_time_seconds = Field(type=int, required=False, mutable=False)


class GroupRoutePointHolidayServiceGetResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointHolidayServiceGetRequest20()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupRoutePointNightServiceGetResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointNightServiceGetRequest20()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
        E("force_night_service", "forceNightService", bool, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E(
            "play_announcement_before_action", "playAnnouncementBeforeAction", bool,
            is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str, is_required=True),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("manual_announcement_mode", "manualAnnouncementMode", str, is_required=True),
        E(
            "manual_audio_message_selection", "manualAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_audio_url_list", "manualAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_audio_file_list", "manualAudioFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E(
            "manual_video_message_selection", "manualVideoMessageSelection", str,
            is_required=True,
        ),
        E(
            "manual_video_url_list", "manualVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "manual_video_file_list", "manualVideoFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: OCI.TimeSchedule: *Optional* businessHours
    business_hours = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: bool: *Required* forceNightService
    force_night_service = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playAnnouncementBeforeAction
    play_announcement_before_action = Field(type=bool, required=True, mutable=False)
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* videoMessageSelection
    video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* manualAnnouncementMode
    manual_announcement_mode = Field(type=str, required=True, mutable=False)
    #: str: *Required* manualAudioMessageSelection
    manual_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualAudioUrlList
    manual_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* manualAudioFileList
    manual_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Required* manualVideoMessageSelection
    manual_video_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* manualVideoUrlList
    manual_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* manualVideoFileList
    manual_video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupRoutePointOverflowGetResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointOverflowGetRequest20()``.

    """

    _ELEMENTS = (
        E("action", "action", str, is_required=True),
        E("transfer_phone_number", "transferPhoneNumber", str),
        E("overflow_after_timeout", "overflowAfterTimeout", bool, is_required=True),
        E("timeout_seconds", "timeoutSeconds", int, is_required=True),
        E(
            "play_announcement_before_overflow_processing",
            "playAnnouncementBeforeOverflowProcessing", bool, is_required=True,
        ),
        E("audio_message_selection", "audioMessageSelection", str, is_required=True),
        E(
            "audio_url_list", "audioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "audio_file_list", "audioFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
        E("video_message_selection", "videoMessageSelection", str),
        E(
            "video_url_list", "videoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "video_file_list", "videoFileList", OCI.CallCenterAnnouncementFileListRead20,
            is_complex=True,
        ),
    )

    #: str: *Required* action
    action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* transferPhoneNumber
    transfer_phone_number = Field(type=str, required=False, mutable=False)
    #: bool: *Required* overflowAfterTimeout
    overflow_after_timeout = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeoutSeconds
    timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* playAnnouncementBeforeOverflowProcessing
    play_announcement_before_overflow_processing = Field(
        type=bool, required=True, mutable=False,
    )
    #: str: *Required* audioMessageSelection
    audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* audioUrlList
    audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* audioFileList
    audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Optional* videoMessageSelection
    video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* videoUrlList
    video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* videoFileList
    video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )


class GroupScheduleGetListResponse17sp1(OCIResponse):
    """
    Response to ``GroupScheduleGetListRequest17sp1()``.

    The response contains a list of group schedules.  If the group belongs to an
    enterprise, it also contains the schedules for the enterprise.
    """

    _ELEMENTS = (
        E(
            "schedule_global_key", "scheduleGlobalKey", OCI.ScheduleGlobalKey,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.ScheduleGlobalKey): *Optional* scheduleGlobalKey  *Array*
    schedule_global_key = Field(type=list, required=False, mutable=False)


class GroupShInterfaceGetUserListResponse(OCIResponse):
    """
    Response to the ``GroupShInterfaceGetUserListRequest()``.

    The response contains the Sh Non Transparent data and associated Public User Identity
    information for every Public User Identity in the group.
    """

    _ELEMENTS = (
        E("entry", "entry", OCI.ShInterfaceUserListEntry, is_complex=True, is_array=True),
    )

    #: list(OCI.ShInterfaceUserListEntry): *Optional* entry  *Array*
    entry = Field(type=list, required=False, mutable=False)


class GroupTrunkGroupGetInstanceResponse14(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest()``.

    The publicUserIdentity in the ServiceInstanceReadProfile is not used for trunk groups.
    Returns the profile information for the Trunk Group.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)


class GroupTrunkGroupGetInstanceResponse14sp1(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest14sp1()``.

    The publicUserIdentity in the ServiceInstanceReadProfile is not used for trunk groups.
    Returns the profile information for the Trunk Group.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
        E("max_active_calls", "maxActiveCalls", int, is_required=True),
        E("max_incoming_calls", "maxIncomingCalls", int),
        E("max_outgoing_calls", "maxOutgoingCalls", int),
        E("enable_bursting", "enableBursting", bool, is_required=True),
        E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
        E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
        E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
        E("capacity_exceeded_action", "capacityExceededAction", str),
        E("capacity_exceeded_forward_address", "capacityExceededForwardAddress", str),
        E(
            "capacity_exceeded_reroute_trunk_group_id",
            "capacityExceededRerouteTrunkGroupId", str,
        ),
        E(
            "capacity_exceeded_trap_initial_calls", "capacityExceededTrapInitialCalls",
            int, is_required=True,
        ),
        E(
            "capacity_exceeded_trap_offset_calls", "capacityExceededTrapOffsetCalls", int,
            is_required=True,
        ),
        E("unreachable_destination_action", "unreachableDestinationAction", str),
        E(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress", str,
        ),
        E(
            "unreachable_destination_reroute_trunk_group_id",
            "unreachableDestinationRerouteTrunkGroupId", str,
        ),
        E(
            "unreachable_destination_trap_initial_calls",
            "unreachableDestinationTrapInitialCalls", int, is_required=True,
        ),
        E(
            "unreachable_destination_trap_offset_calls",
            "unreachableDestinationTrapOffsetCalls", int, is_required=True,
        ),
        E("invitation_timeout", "invitationTimeout", int, is_required=True),
        E("require_authentication", "requireAuthentication", bool, is_required=True),
        E("sip_authentication_user_name", "sipAuthenticationUserName", str),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )
    #: int: *Required* maxActiveCalls
    max_active_calls = Field(type=int, required=True, mutable=False)
    #: int: *Optional* maxIncomingCalls
    max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* maxOutgoingCalls
    max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: bool: *Required* enableBursting
    enable_bursting = Field(type=bool, required=True, mutable=False)
    #: int: *Optional* burstingMaxActiveCalls
    bursting_max_active_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxIncomingCalls
    bursting_max_incoming_calls = Field(type=int, required=False, mutable=False)
    #: int: *Optional* burstingMaxOutgoingCalls
    bursting_max_outgoing_calls = Field(type=int, required=False, mutable=False)
    #: str: *Optional* capacityExceededAction
    capacity_exceeded_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededForwardAddress
    capacity_exceeded_forward_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* capacityExceededRerouteTrunkGroupId
    capacity_exceeded_reroute_trunk_group_id = Field(type=str, required=False, mutable=False)
    #: int: *Required* capacityExceededTrapInitialCalls
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* capacityExceededTrapOffsetCalls
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unreachableDestinationAction
    unreachable_destination_action = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationForwardAddress
    unreachable_destination_forward_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* unreachableDestinationRerouteTrunkGroupId
    unreachable_destination_reroute_trunk_group_id = Field(
        type=str, required=False, mutable=False,
    )
    #: int: *Required* unreachableDestinationTrapInitialCalls
    unreachable_destination_trap_initial_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* unreachableDestinationTrapOffsetCalls
    unreachable_destination_trap_offset_calls = Field(type=int, required=True, mutable=False)
    #: int: *Required* invitationTimeout
    invitation_timeout = Field(type=int, required=True, mutable=False)
    #: bool: *Required* requireAuthentication
    require_authentication = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* sipAuthenticationUserName
    sip_authentication_user_name = Field(type=str, required=False, mutable=False)


class GroupVoiceMessagingGroupGetVoicePortalResponse14(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalRequest14()``.

    Replaced by ``GroupVoiceMessagingGroupGetVoicePortalResponse15()``
    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("is_active", "isActive", bool, is_required=True),
        E(
            "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
            "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin", bool,
            is_required=True,
        ),
        E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
        E(
            "voice_portal_external_routing_scope", "voicePortalExternalRoutingScope", str,
            is_required=True,
        ),
        E("use_external_routing", "useExternalRouting", bool, is_required=True),
        E("external_routing_address", "externalRoutingAddress", str),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
    allow_identification_by_phone_number_or_voice_mail_aliases_on_login = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useVoicePortalWizard
    use_voice_portal_wizard = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalExternalRoutingScope
    voice_portal_external_routing_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useExternalRouting
    use_external_routing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* externalRoutingAddress
    external_routing_address = Field(type=str, required=False, mutable=False)


class GroupVoiceMessagingGroupGetVoicePortalResponse15(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalRequest15()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("is_active", "isActive", bool, is_required=True),
        E(
            "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
            "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin", bool,
            is_required=True,
        ),
        E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
        E(
            "voice_portal_external_routing_scope", "voicePortalExternalRoutingScope", str,
            is_required=True,
        ),
        E("use_external_routing", "useExternalRouting", bool, is_required=True),
        E("external_routing_address", "externalRoutingAddress", str),
        E("home_zone_name", "homeZoneName", str),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
    allow_identification_by_phone_number_or_voice_mail_aliases_on_login = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useVoicePortalWizard
    use_voice_portal_wizard = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalExternalRoutingScope
    voice_portal_external_routing_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useExternalRouting
    use_external_routing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* externalRoutingAddress
    external_routing_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* homeZoneName
    home_zone_name = Field(type=str, required=False, mutable=False)


class GroupVoiceMessagingGroupGetVoicePortalResponse17(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalRequest17()``.

    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("is_active", "isActive", bool, is_required=True),
        E(
            "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
            "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin", bool,
            is_required=True,
        ),
        E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
        E(
            "voice_portal_external_routing_scope", "voicePortalExternalRoutingScope", str,
            is_required=True,
        ),
        E("use_external_routing", "useExternalRouting", bool, is_required=True),
        E("external_routing_address", "externalRoutingAddress", str),
        E("home_zone_name", "homeZoneName", str),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
    allow_identification_by_phone_number_or_voice_mail_aliases_on_login = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useVoicePortalWizard
    use_voice_portal_wizard = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalExternalRoutingScope
    voice_portal_external_routing_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useExternalRouting
    use_external_routing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* externalRoutingAddress
    external_routing_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* homeZoneName
    home_zone_name = Field(type=str, required=False, mutable=False)


class GroupVoiceMessagingGroupGetVoicePortalResponse17sp4(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalRequest17sp4()``.

    The following elements are only used in HSS data mode: enableExtendedScope Replaced
    by: ``GroupVoiceMessagingGroupGetVoicePortalResponse19sp1()``
    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("is_active", "isActive", bool, is_required=True),
        E("enable_extended_scope", "enableExtendedScope", bool, is_required=True),
        E(
            "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
            "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin", bool,
            is_required=True,
        ),
        E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
        E(
            "voice_portal_external_routing_scope", "voicePortalExternalRoutingScope", str,
            is_required=True,
        ),
        E("use_external_routing", "useExternalRouting", bool, is_required=True),
        E("external_routing_address", "externalRoutingAddress", str),
        E("home_zone_name", "homeZoneName", str),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableExtendedScope
    enable_extended_scope = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
    allow_identification_by_phone_number_or_voice_mail_aliases_on_login = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useVoicePortalWizard
    use_voice_portal_wizard = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalExternalRoutingScope
    voice_portal_external_routing_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useExternalRouting
    use_external_routing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* externalRoutingAddress
    external_routing_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* homeZoneName
    home_zone_name = Field(type=str, required=False, mutable=False)


class GroupVoiceMessagingGroupGetVoicePortalResponse19sp1(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalRequest19sp1()``.

    The following elements are only used in HSS data mode: enableExtendedScope
    """

    _ELEMENTS = (
        E("service_user_id", "serviceUserId", str, is_required=True),
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("is_active", "isActive", bool, is_required=True),
        E("enable_extended_scope", "enableExtendedScope", bool, is_required=True),
        E(
            "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
            "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin", bool,
            is_required=True,
        ),
        E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
        E(
            "voice_portal_external_routing_scope", "voicePortalExternalRoutingScope", str,
            is_required=True,
        ),
        E("use_external_routing", "useExternalRouting", bool, is_required=True),
        E("external_routing_address", "externalRoutingAddress", str),
        E("home_zone_name", "homeZoneName", str),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: str: *Required* serviceUserId
    service_user_id = Field(type=str, required=True, mutable=False)
    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableExtendedScope
    enable_extended_scope = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
    allow_identification_by_phone_number_or_voice_mail_aliases_on_login = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* useVoicePortalWizard
    use_voice_portal_wizard = Field(type=bool, required=True, mutable=False)
    #: str: *Required* voicePortalExternalRoutingScope
    voice_portal_external_routing_scope = Field(type=str, required=True, mutable=False)
    #: bool: *Required* useExternalRouting
    use_external_routing = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* externalRoutingAddress
    external_routing_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* homeZoneName
    home_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupVoiceXmlGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupVoiceXmlGetInstanceRequest()``.

    Contains the service profile information and possibly access device information.
    Replaced by: ``GroupVoiceXmlGetInstanceResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17sp4, is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointWithPortNumberRead, is_complex=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17sp4: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17sp4, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceEndpointWithPortNumberRead: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointWithPortNumberRead, required=False, mutable=False,
    )


class GroupVoiceXmlGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupVoiceXmlGetInstanceRequest19sp1()``.

    Contains the service profile information and possibly access device information.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("network_class_of_service", "networkClassOfService", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointWithPortNumberRead, is_complex=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceEndpointWithPortNumberRead: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointWithPortNumberRead, required=False, mutable=False,
    )


class ServiceProviderMWIDeliveryToMobileEndpointCustomTemplateGetResponse(OCIResponse):
    """
    Response to the
    ``ServiceProviderMWIDeliveryToMobileEndpointCustomTemplateGetRequest()``.

    """

    _ELEMENTS = (
        E("is_enabled", "isEnabled", bool, is_required=True),
        E(
            "template_body", "templateBody", OCI.MWIDeliveryToMobileEndpointTemplateBody,
            is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* isEnabled
    is_enabled = Field(type=bool, required=True, mutable=False)
    #: OCI.MWIDeliveryToMobileEndpointTemplateBody: *Required* templateBody
    template_body = Field(
        type=OCI.MWIDeliveryToMobileEndpointTemplateBody, required=True, mutable=False,
    )


class SystemDeviceTypeGetResponse14sp6(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest14sp6()``.

    Replaced by: ``SystemDeviceTypeGetResponse16()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E("profile", "profile", str, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
        E("use_domain", "useDomain", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptionsRead, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isIpAddressOptional
    is_ip_address_optional = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDomain
    use_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)


class SystemDeviceTypeGetResponse16(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest16()``.

    Replaced by: ``SystemDeviceTypeGetResponse16sp1()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E("profile", "profile", str, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
        E("use_domain", "useDomain", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptionsRead16, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isIpAddressOptional
    is_ip_address_optional = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDomain
    use_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)


class SystemDeviceTypeGetResponse16sp1(OCIResponse):
    """
    Replaced By SystemSIPDeviceTypeGetReponse18.

    Response to ``SystemDeviceTypeGetRequest16sp1()``.
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E("profile", "profile", str, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
        E("use_domain", "useDomain", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isIpAddressOptional
    is_ip_address_optional = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDomain
    use_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)


class SystemDeviceTypeGetResponse18(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest18()``.

    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E("profile", "profile", str, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
        E("use_domain", "useDomain", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("device_type_configuration_option", "deviceTypeConfigurationOption", str),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isIpAddressOptional
    is_ip_address_optional = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDomain
    use_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* deviceTypeConfigurationOption
    device_type_configuration_option = Field(type=str, required=False, mutable=False)


class SystemDeviceTypeGetResponse19(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest19()``.

    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E("profile", "profile", str, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
        E("use_domain", "useDomain", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("device_type_configuration_option", "deviceTypeConfigurationOption", str),
        E("static_line_ordering", "staticLineOrdering", bool),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isIpAddressOptional
    is_ip_address_optional = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useDomain
    use_domain = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* deviceTypeConfigurationOption
    device_type_configuration_option = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* staticLineOrdering
    static_line_ordering = Field(type=bool, required=False, mutable=False)


class SystemSIPDeviceTypeGetResponse14sp6(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest14sp6()``.

    Replaced by: ``SystemSIPDeviceTypeGetResponse14sp6()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E(
            "use_business_trunking_contact", "useBusinessTrunkingContact", bool,
            is_required=True,
        ),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E("tdm_overlay", "tdmOverlay", bool, is_required=True),
        E(
            "supports_broad_works_info_for_call_waiting",
            "supportsBroadWorksINFOForCallWaiting", bool, is_required=True,
        ),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useBusinessTrunkingContact
    use_business_trunking_contact = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptionsRead, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* tdmOverlay
    tdm_overlay = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportsBroadWorksINFOForCallWaiting
    supports_broad_works_info_for_call_waiting = Field(
        type=bool, required=True, mutable=False,
    )


class SystemSIPDeviceTypeGetResponse15(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest15()``.

    Replaced By : ``SystemSIPDeviceTypeAddResponse16()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E(
            "use_business_trunking_contact", "useBusinessTrunkingContact", bool,
            is_required=True,
        ),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E("tdm_overlay", "tdmOverlay", bool, is_required=True),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useBusinessTrunkingContact
    use_business_trunking_contact = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptionsRead, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* tdmOverlay
    tdm_overlay = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse16(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest16()``.

    Replaced by: ``SystemSIPDeviceTypeGetResponse16sp1()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E(
            "use_business_trunking_contact", "useBusinessTrunkingContact", bool,
            is_required=True,
        ),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E(
            "requires_broad_works_digit_collection", "requiresBroadWorksDigitCollection",
            bool, is_required=True,
        ),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
        E("advice_of_charge_capable", "adviceOfChargeCapable", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useBusinessTrunkingContact
    use_business_trunking_contact = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16: *Optional* cpeDeviceOptions
    cpe_device_options = Field(type=OCI.CPEDeviceOptionsRead16, required=False, mutable=False)
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksDigitCollection
    requires_broad_works_digit_collection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* adviceOfChargeCapable
    advice_of_charge_capable = Field(type=bool, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse16sp1(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest16sp1()``.

    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E(
            "use_business_trunking_contact", "useBusinessTrunkingContact", bool,
            is_required=True,
        ),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E(
            "requires_broad_works_digit_collection", "requiresBroadWorksDigitCollection",
            bool, is_required=True,
        ),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
        E("advice_of_charge_capable", "adviceOfChargeCapable", bool, is_required=True),
        E("reset_event", "resetEvent", str),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useBusinessTrunkingContact
    use_business_trunking_contact = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksDigitCollection
    requires_broad_works_digit_collection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* adviceOfChargeCapable
    advice_of_charge_capable = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* resetEvent
    reset_event = Field(type=str, required=False, mutable=False)


class SystemSIPDeviceTypeGetResponse17(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest17()``.

    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E(
            "requires_broad_works_digit_collection", "requiresBroadWorksDigitCollection",
            bool, is_required=True,
        ),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
        E("advice_of_charge_capable", "adviceOfChargeCapable", bool, is_required=True),
        E("reset_event", "resetEvent", str),
        E(
            "support_call_center_mime_type", "supportCallCenterMIMEType", bool,
            is_required=True,
        ),
        E("trunk_mode", "trunkMode", str, is_required=True),
        E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksDigitCollection
    requires_broad_works_digit_collection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* adviceOfChargeCapable
    advice_of_charge_capable = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* resetEvent
    reset_event = Field(type=str, required=False, mutable=False)
    #: bool: *Required* supportCallCenterMIMEType
    support_call_center_mime_type = Field(type=bool, required=True, mutable=False)
    #: str: *Required* trunkMode
    trunk_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* addPCalledPartyId
    add_p_called_party_id = Field(type=bool, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse17sp4(OCIResponse):
    """
    Replaced By ``SystemSIPDeviceTypeGetResponse18()``.

    Response to ``SystemSIPDeviceTypeGetRequest17sp4()``.
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E(
            "requires_broad_works_digit_collection", "requiresBroadWorksDigitCollection",
            bool, is_required=True,
        ),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
        E("advice_of_charge_capable", "adviceOfChargeCapable", bool, is_required=True),
        E("reset_event", "resetEvent", str),
        E(
            "support_call_center_mime_type", "supportCallCenterMIMEType", bool,
            is_required=True,
        ),
        E("trunk_mode", "trunkMode", str, is_required=True),
        E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
        E(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite", bool, is_required=True,
        ),
        E(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy", str, is_required=True,
        ),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksDigitCollection
    requires_broad_works_digit_collection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* adviceOfChargeCapable
    advice_of_charge_capable = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* resetEvent
    reset_event = Field(type=str, required=False, mutable=False)
    #: bool: *Required* supportCallCenterMIMEType
    support_call_center_mime_type = Field(type=bool, required=True, mutable=False)
    #: str: *Required* trunkMode
    trunk_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* addPCalledPartyId
    add_p_called_party_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportIdentityInUpdateAndReInvite
    support_identity_in_update_and_re_invite = Field(type=bool, required=True, mutable=False)
    #: str: *Required* unscreenedPresentationIdentityPolicy
    unscreened_presentation_identity_policy = Field(type=str, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse18(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest18()``.

    The following elements are only used in HSS data mode: enable3G4GContinuity Replaced
    by: ``SystemSIPDeviceTypeGetResponse19()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E(
            "requires_broad_works_digit_collection", "requiresBroadWorksDigitCollection",
            bool, is_required=True,
        ),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
        E("advice_of_charge_capable", "adviceOfChargeCapable", bool, is_required=True),
        E("reset_event", "resetEvent", str),
        E(
            "support_call_center_mime_type", "supportCallCenterMIMEType", bool,
            is_required=True,
        ),
        E("trunk_mode", "trunkMode", str, is_required=True),
        E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
        E(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite", bool, is_required=True,
        ),
        E(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy", str, is_required=True,
        ),
        E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
        E(
            "support_emergency_disconnect_control", "supportEmergencyDisconnectControl",
            bool, is_required=True,
        ),
        E(
            "device_type_configuration_option", "deviceTypeConfigurationOption", str,
            is_required=True,
        ),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* RFC3264Hold
    rfc3264_hold = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksDigitCollection
    requires_broad_works_digit_collection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* adviceOfChargeCapable
    advice_of_charge_capable = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* resetEvent
    reset_event = Field(type=str, required=False, mutable=False)
    #: bool: *Required* supportCallCenterMIMEType
    support_call_center_mime_type = Field(type=bool, required=True, mutable=False)
    #: str: *Required* trunkMode
    trunk_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* addPCalledPartyId
    add_p_called_party_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportIdentityInUpdateAndReInvite
    support_identity_in_update_and_re_invite = Field(type=bool, required=True, mutable=False)
    #: str: *Required* unscreenedPresentationIdentityPolicy
    unscreened_presentation_identity_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enable3G4GContinuity
    enable3_g4_g_continuity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportEmergencyDisconnectControl
    support_emergency_disconnect_control = Field(type=bool, required=True, mutable=False)
    #: str: *Required* deviceTypeConfigurationOption
    device_type_configuration_option = Field(type=str, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse18sp1(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest18sp1()``.

    The following elements are only used in AS data mode: holdAnnouncementMethod The
    following elements are only used in HSS data mode: enable3G4GContinuity The following
    element values are only applicable in AS data mode: holdNormalization=useRfc3264Hold
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("hold_normalization", "holdNormalization", str, is_required=True),
        E("hold_announcement_method", "holdAnnouncementMethod", str, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E(
            "requires_broad_works_digit_collection", "requiresBroadWorksDigitCollection",
            bool, is_required=True,
        ),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
        E("advice_of_charge_capable", "adviceOfChargeCapable", bool, is_required=True),
        E("reset_event", "resetEvent", str),
        E(
            "support_call_center_mime_type", "supportCallCenterMIMEType", bool,
            is_required=True,
        ),
        E("trunk_mode", "trunkMode", str, is_required=True),
        E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
        E(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite", bool, is_required=True,
        ),
        E(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy", str, is_required=True,
        ),
        E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
        E(
            "support_emergency_disconnect_control", "supportEmergencyDisconnectControl",
            bool, is_required=True,
        ),
        E(
            "device_type_configuration_option", "deviceTypeConfigurationOption", str,
            is_required=True,
        ),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: str: *Required* holdNormalization
    hold_normalization = Field(type=str, required=True, mutable=False)
    #: str: *Required* holdAnnouncementMethod
    hold_announcement_method = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksDigitCollection
    requires_broad_works_digit_collection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* adviceOfChargeCapable
    advice_of_charge_capable = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* resetEvent
    reset_event = Field(type=str, required=False, mutable=False)
    #: bool: *Required* supportCallCenterMIMEType
    support_call_center_mime_type = Field(type=bool, required=True, mutable=False)
    #: str: *Required* trunkMode
    trunk_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* addPCalledPartyId
    add_p_called_party_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportIdentityInUpdateAndReInvite
    support_identity_in_update_and_re_invite = Field(type=bool, required=True, mutable=False)
    #: str: *Required* unscreenedPresentationIdentityPolicy
    unscreened_presentation_identity_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enable3G4GContinuity
    enable3_g4_g_continuity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportEmergencyDisconnectControl
    support_emergency_disconnect_control = Field(type=bool, required=True, mutable=False)
    #: str: *Required* deviceTypeConfigurationOption
    device_type_configuration_option = Field(type=str, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse19(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest19()``.

    The following elements are only used in AS data mode: holdAnnouncementMethod
    supportRFC3398 The following elements are only used in HSS data mode:
    enable3G4GContinuity The following element values are only applicable in AS data mode:
    holdNormalization=useRfc3264Hold Replaced by: SystemSIPDeviceTypeGetResponse19sSp1
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("hold_normalization", "holdNormalization", str, is_required=True),
        E("hold_announcement_method", "holdAnnouncementMethod", str, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E(
            "requires_broad_works_digit_collection", "requiresBroadWorksDigitCollection",
            bool, is_required=True,
        ),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
        E("advice_of_charge_capable", "adviceOfChargeCapable", bool, is_required=True),
        E("reset_event", "resetEvent", str),
        E(
            "support_call_center_mime_type", "supportCallCenterMIMEType", bool,
            is_required=True,
        ),
        E("trunk_mode", "trunkMode", str, is_required=True),
        E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
        E(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite", bool, is_required=True,
        ),
        E(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy", str, is_required=True,
        ),
        E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
        E(
            "support_emergency_disconnect_control", "supportEmergencyDisconnectControl",
            bool, is_required=True,
        ),
        E(
            "device_type_configuration_option", "deviceTypeConfigurationOption", str,
            is_required=True,
        ),
        E("support_rfc3398", "supportRFC3398", bool, is_required=True),
        E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: str: *Required* holdNormalization
    hold_normalization = Field(type=str, required=True, mutable=False)
    #: str: *Required* holdAnnouncementMethod
    hold_announcement_method = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksDigitCollection
    requires_broad_works_digit_collection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* adviceOfChargeCapable
    advice_of_charge_capable = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* resetEvent
    reset_event = Field(type=str, required=False, mutable=False)
    #: bool: *Required* supportCallCenterMIMEType
    support_call_center_mime_type = Field(type=bool, required=True, mutable=False)
    #: str: *Required* trunkMode
    trunk_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* addPCalledPartyId
    add_p_called_party_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportIdentityInUpdateAndReInvite
    support_identity_in_update_and_re_invite = Field(type=bool, required=True, mutable=False)
    #: str: *Required* unscreenedPresentationIdentityPolicy
    unscreened_presentation_identity_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enable3G4GContinuity
    enable3_g4_g_continuity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportEmergencyDisconnectControl
    support_emergency_disconnect_control = Field(type=bool, required=True, mutable=False)
    #: str: *Required* deviceTypeConfigurationOption
    device_type_configuration_option = Field(type=str, required=True, mutable=False)
    #: bool: *Required* supportRFC3398
    support_rfc3398 = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticLineOrdering
    static_line_ordering = Field(type=bool, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse19sp1(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest19sp1()``.

    The following elements are only used in AS data mode: holdAnnouncementMethod
    supportRFC3398 bypassMediaTreatment The following elements are only used in HSS data
    mode: enable3G4GContinuity The following element values are only applicable in AS data
    mode: holdNormalization=useRfc3264Hold Replaced by:
    ``SystemSIPDeviceTypeGetResponse20()``
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("hold_normalization", "holdNormalization", str, is_required=True),
        E("hold_announcement_method", "holdAnnouncementMethod", str, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E(
            "requires_broad_works_digit_collection", "requiresBroadWorksDigitCollection",
            bool, is_required=True,
        ),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
        E("advice_of_charge_capable", "adviceOfChargeCapable", bool, is_required=True),
        E("reset_event", "resetEvent", str),
        E(
            "support_call_center_mime_type", "supportCallCenterMIMEType", bool,
            is_required=True,
        ),
        E("trunk_mode", "trunkMode", str, is_required=True),
        E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
        E(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite", bool, is_required=True,
        ),
        E(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy", str, is_required=True,
        ),
        E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
        E(
            "support_emergency_disconnect_control", "supportEmergencyDisconnectControl",
            bool, is_required=True,
        ),
        E(
            "device_type_configuration_option", "deviceTypeConfigurationOption", str,
            is_required=True,
        ),
        E("support_rfc3398", "supportRFC3398", bool, is_required=True),
        E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
        E("bypass_media_treatment", "bypassMediaTreatment", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: str: *Required* holdNormalization
    hold_normalization = Field(type=str, required=True, mutable=False)
    #: str: *Required* holdAnnouncementMethod
    hold_announcement_method = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksDigitCollection
    requires_broad_works_digit_collection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* adviceOfChargeCapable
    advice_of_charge_capable = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* resetEvent
    reset_event = Field(type=str, required=False, mutable=False)
    #: bool: *Required* supportCallCenterMIMEType
    support_call_center_mime_type = Field(type=bool, required=True, mutable=False)
    #: str: *Required* trunkMode
    trunk_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* addPCalledPartyId
    add_p_called_party_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportIdentityInUpdateAndReInvite
    support_identity_in_update_and_re_invite = Field(type=bool, required=True, mutable=False)
    #: str: *Required* unscreenedPresentationIdentityPolicy
    unscreened_presentation_identity_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enable3G4GContinuity
    enable3_g4_g_continuity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportEmergencyDisconnectControl
    support_emergency_disconnect_control = Field(type=bool, required=True, mutable=False)
    #: str: *Required* deviceTypeConfigurationOption
    device_type_configuration_option = Field(type=str, required=True, mutable=False)
    #: bool: *Required* supportRFC3398
    support_rfc3398 = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticLineOrdering
    static_line_ordering = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* bypassMediaTreatment
    bypass_media_treatment = Field(type=bool, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse20(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest20()``.

    The following elements are only used in AS data mode: holdAnnouncementMethod
    supportRFC3398 supportClientSessionInfo supportCallInfoConferenceSubscriptionURI
    supportRemotePartyInfo The following elements are only used in HSS data mode:
    enable3G4GContinuity The following element values are only applicable in AS data mode:
    holdNormalization=useRfc3264Hold
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("hold_normalization", "holdNormalization", str, is_required=True),
        E("hold_announcement_method", "holdAnnouncementMethod", str, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E(
            "requires_broad_works_digit_collection", "requiresBroadWorksDigitCollection",
            bool, is_required=True,
        ),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
        E("advice_of_charge_capable", "adviceOfChargeCapable", bool, is_required=True),
        E("reset_event", "resetEvent", str),
        E(
            "support_call_center_mime_type", "supportCallCenterMIMEType", bool,
            is_required=True,
        ),
        E("trunk_mode", "trunkMode", str, is_required=True),
        E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
        E(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite", bool, is_required=True,
        ),
        E(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy", str, is_required=True,
        ),
        E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
        E(
            "support_emergency_disconnect_control", "supportEmergencyDisconnectControl",
            bool, is_required=True,
        ),
        E(
            "device_type_configuration_option", "deviceTypeConfigurationOption", str,
            is_required=True,
        ),
        E("support_rfc3398", "supportRFC3398", bool, is_required=True),
        E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
        E("support_client_session_info", "supportClientSessionInfo", bool, is_required=True),
        E(
            "support_call_info_conference_subscription_uri",
            "supportCallInfoConferenceSubscriptionURI", bool, is_required=True,
        ),
        E("support_remote_party_info", "supportRemotePartyInfo", bool, is_required=True),
        E(
            "support_visual_device_management", "supportVisualDeviceManagement", bool,
            is_required=True,
        ),
        E("bypass_media_treatment", "bypassMediaTreatment", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: str: *Required* holdNormalization
    hold_normalization = Field(type=str, required=True, mutable=False)
    #: str: *Required* holdAnnouncementMethod
    hold_announcement_method = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksDigitCollection
    requires_broad_works_digit_collection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* adviceOfChargeCapable
    advice_of_charge_capable = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* resetEvent
    reset_event = Field(type=str, required=False, mutable=False)
    #: bool: *Required* supportCallCenterMIMEType
    support_call_center_mime_type = Field(type=bool, required=True, mutable=False)
    #: str: *Required* trunkMode
    trunk_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* addPCalledPartyId
    add_p_called_party_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportIdentityInUpdateAndReInvite
    support_identity_in_update_and_re_invite = Field(type=bool, required=True, mutable=False)
    #: str: *Required* unscreenedPresentationIdentityPolicy
    unscreened_presentation_identity_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enable3G4GContinuity
    enable3_g4_g_continuity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportEmergencyDisconnectControl
    support_emergency_disconnect_control = Field(type=bool, required=True, mutable=False)
    #: str: *Required* deviceTypeConfigurationOption
    device_type_configuration_option = Field(type=str, required=True, mutable=False)
    #: bool: *Required* supportRFC3398
    support_rfc3398 = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticLineOrdering
    static_line_ordering = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportClientSessionInfo
    support_client_session_info = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportCallInfoConferenceSubscriptionURI
    support_call_info_conference_subscription_uri = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* supportRemotePartyInfo
    support_remote_party_info = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportVisualDeviceManagement
    support_visual_device_management = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* bypassMediaTreatment
    bypass_media_treatment = Field(type=bool, required=True, mutable=False)


class SystemSIPDeviceTypeGetResponse21(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest21()``.

    The following elements are only used in AS data mode: holdAnnouncementMethod
    supportRFC3398 supportClientSessionInfo supportCallInfoConferenceSubscriptionURI
    supportRemotePartyInfo The following elements are only used in HSS data mode:
    enhancedForICS – value false is returned in AS data mode enable3G4GContinuity - value
    false is returned in AS data mode publishesOwnPresence - value false is returned in AS
    data mode The following element values are only applicable in AS data mode:
    holdNormalization=useRfc3264Hold The following elements are only used in AS data mode:
    supportCauseParameter – value false is returned in HSS data mode
    """

    _ELEMENTS = (
        E("is_obsolete", "isObsolete", bool, is_required=True),
        E(
            "number_of_ports", "numberOfPorts", OCI.UnboundedPositiveInt, is_complex=True,
            is_required=True,
        ),
        E("profile", "profile", str, is_required=True),
        E("registration_capable", "registrationCapable", bool, is_required=True),
        E("is_conference_device", "isConferenceDevice", bool, is_required=True),
        E("is_mobility_manager_device", "isMobilityManagerDevice", bool, is_required=True),
        E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
        E("hold_normalization", "holdNormalization", str, is_required=True),
        E("hold_announcement_method", "holdAnnouncementMethod", str, is_required=True),
        E("is_trusted", "isTrusted", bool, is_required=True),
        E("e164_capable", "E164Capable", bool, is_required=True),
        E("route_advance", "routeAdvance", bool, is_required=True),
        E("forwarding_override", "forwardingOverride", bool, is_required=True),
        E("wireless_integration", "wirelessIntegration", bool, is_required=True),
        E("web_based_config_url", "webBasedConfigURL", str),
        E("is_video_capable", "isVideoCapable", bool, is_required=True),
        E("pbx_integration", "PBXIntegration", bool, is_required=True),
        E("static_registration_capable", "staticRegistrationCapable", bool, is_required=True),
        E(
            "cpe_device_options", "cpeDeviceOptions", OCI.CPEDeviceOptionsRead16sp1,
            is_complex=True,
        ),
        E("protocol_choice", "protocolChoice", str, is_required=True),
        E("early_media_support", "earlyMediaSupport", str, is_required=True),
        E("authenticate_refer", "authenticateRefer", bool, is_required=True),
        E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
        E("authentication_mode", "authenticationMode", str, is_required=True),
        E(
            "requires_broad_works_digit_collection", "requiresBroadWorksDigitCollection",
            bool, is_required=True,
        ),
        E(
            "requires_broad_works_call_waiting_tone", "requiresBroadWorksCallWaitingTone",
            bool, is_required=True,
        ),
        E("requires_mwi_subscription", "requiresMWISubscription", bool, is_required=True),
        E(
            "use_history_info_header_on_access_side", "useHistoryInfoHeaderOnAccessSide",
            bool, is_required=True,
        ),
        E("advice_of_charge_capable", "adviceOfChargeCapable", bool, is_required=True),
        E("reset_event", "resetEvent", str),
        E(
            "support_call_center_mime_type", "supportCallCenterMIMEType", bool,
            is_required=True,
        ),
        E("trunk_mode", "trunkMode", str, is_required=True),
        E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
        E(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite", bool, is_required=True,
        ),
        E(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy", str, is_required=True,
        ),
        E("enhanced_for_ics", "enhancedForICS", bool, is_required=True),
        E(
            "support_emergency_disconnect_control", "supportEmergencyDisconnectControl",
            bool, is_required=True,
        ),
        E(
            "device_type_configuration_option", "deviceTypeConfigurationOption", str,
            is_required=True,
        ),
        E("support_rfc3398", "supportRFC3398", bool, is_required=True),
        E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
        E("support_client_session_info", "supportClientSessionInfo", bool, is_required=True),
        E(
            "support_call_info_conference_subscription_uri",
            "supportCallInfoConferenceSubscriptionURI", bool, is_required=True,
        ),
        E("support_remote_party_info", "supportRemotePartyInfo", bool, is_required=True),
        E(
            "support_visual_device_management", "supportVisualDeviceManagement", bool,
            is_required=True,
        ),
        E("bypass_media_treatment", "bypassMediaTreatment", bool, is_required=True),
        E("supports3_g4_g_continuity", "supports3G4GContinuity", bool, is_required=True),
        E("publishes_own_presence", "publishesOwnPresence", bool, is_required=True),
        E("support_cause_parameter", "supportCauseParameter", bool, is_required=True),
    )

    #: bool: *Required* isObsolete
    is_obsolete = Field(type=bool, required=True, mutable=False)
    #: OCI.UnboundedPositiveInt: *Required* numberOfPorts
    number_of_ports = Field(type=OCI.UnboundedPositiveInt, required=True, mutable=False)
    #: str: *Required* profile
    profile = Field(type=str, required=True, mutable=False)
    #: bool: *Required* registrationCapable
    registration_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isConferenceDevice
    is_conference_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMobilityManagerDevice
    is_mobility_manager_device = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* isMusicOnHoldDevice
    is_music_on_hold_device = Field(type=bool, required=True, mutable=False)
    #: str: *Required* holdNormalization
    hold_normalization = Field(type=str, required=True, mutable=False)
    #: str: *Required* holdAnnouncementMethod
    hold_announcement_method = Field(type=str, required=True, mutable=False)
    #: bool: *Required* isTrusted
    is_trusted = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* E164Capable
    e164_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* routeAdvance
    route_advance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* forwardingOverride
    forwarding_override = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* wirelessIntegration
    wireless_integration = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* webBasedConfigURL
    web_based_config_url = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isVideoCapable
    is_video_capable = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* PBXIntegration
    pbx_integration = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticRegistrationCapable
    static_registration_capable = Field(type=bool, required=True, mutable=False)
    #: OCI.CPEDeviceOptionsRead16sp1: *Optional* cpeDeviceOptions
    cpe_device_options = Field(
        type=OCI.CPEDeviceOptionsRead16sp1, required=False, mutable=False,
    )
    #: str: *Required* protocolChoice
    protocol_choice = Field(type=str, required=True, mutable=False)
    #: str: *Required* earlyMediaSupport
    early_media_support = Field(type=str, required=True, mutable=False)
    #: bool: *Required* authenticateRefer
    authenticate_refer = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* autoConfigSoftClient
    auto_config_soft_client = Field(type=bool, required=True, mutable=False)
    #: str: *Required* authenticationMode
    authentication_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksDigitCollection
    requires_broad_works_digit_collection = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresBroadWorksCallWaitingTone
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requiresMWISubscription
    requires_mwi_subscription = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useHistoryInfoHeaderOnAccessSide
    use_history_info_header_on_access_side = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* adviceOfChargeCapable
    advice_of_charge_capable = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* resetEvent
    reset_event = Field(type=str, required=False, mutable=False)
    #: bool: *Required* supportCallCenterMIMEType
    support_call_center_mime_type = Field(type=bool, required=True, mutable=False)
    #: str: *Required* trunkMode
    trunk_mode = Field(type=str, required=True, mutable=False)
    #: bool: *Required* addPCalledPartyId
    add_p_called_party_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportIdentityInUpdateAndReInvite
    support_identity_in_update_and_re_invite = Field(type=bool, required=True, mutable=False)
    #: str: *Required* unscreenedPresentationIdentityPolicy
    unscreened_presentation_identity_policy = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enhancedForICS
    enhanced_for_ics = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportEmergencyDisconnectControl
    support_emergency_disconnect_control = Field(type=bool, required=True, mutable=False)
    #: str: *Required* deviceTypeConfigurationOption
    device_type_configuration_option = Field(type=str, required=True, mutable=False)
    #: bool: *Required* supportRFC3398
    support_rfc3398 = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* staticLineOrdering
    static_line_ordering = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportClientSessionInfo
    support_client_session_info = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportCallInfoConferenceSubscriptionURI
    support_call_info_conference_subscription_uri = Field(
        type=bool, required=True, mutable=False,
    )
    #: bool: *Required* supportRemotePartyInfo
    support_remote_party_info = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportVisualDeviceManagement
    support_visual_device_management = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* bypassMediaTreatment
    bypass_media_treatment = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supports3G4GContinuity
    supports3_g4_g_continuity = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* publishesOwnPresence
    publishes_own_presence = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* supportCauseParameter
    support_cause_parameter = Field(type=bool, required=True, mutable=False)


class UserBroadWorksMobilityMobileIdentityGetResponse(OCIResponse):
    """
    Response to a ``UserBroadWorksMobilityMobileIdentityGetRequest()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E("is_primary", "isPrimary", bool, is_required=True),
        E("enable_alerting", "enableAlerting", bool, is_required=True),
        E("alert_agent_calls", "alertAgentCalls", bool, is_required=True),
        E("alert_click_to_dial_calls", "alertClickToDialCalls", bool, is_required=True),
        E("alert_group_paging_calls", "alertGroupPagingCalls", bool, is_required=True),
        E("use_mobility_calling_line_id", "useMobilityCallingLineID", bool, is_required=True),
        E("enable_diversion_inhibitor", "enableDiversionInhibitor", bool, is_required=True),
        E("require_answer_confirmation", "requireAnswerConfirmation", bool, is_required=True),
        E("broadworks_call_control", "broadworksCallControl", bool, is_required=True),
        E("use_setting_level", "useSettingLevel", str, is_required=True),
        E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
        E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
        E("devices_to_ring", "devicesToRing", str, is_required=True),
        E(
            "include_shared_call_appearance", "includeSharedCallAppearance", bool,
            is_required=True,
        ),
        E("include_broadworks_anywhere", "includeBroadworksAnywhere", bool, is_required=True),
        E("include_executive_assistant", "includeExecutiveAssistant", bool, is_required=True),
        E("mobile_number_alerted", "mobileNumberAlerted", str, is_array=True),
        E("enable_call_anchoring", "enableCallAnchoring", bool, is_required=True),
        E("time_schedule", "timeSchedule", OCI.ScheduleGlobalKey, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.ScheduleGlobalKey, is_complex=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: bool: *Required* isPrimary
    is_primary = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAlerting
    enable_alerting = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* alertAgentCalls
    alert_agent_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* alertClickToDialCalls
    alert_click_to_dial_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* alertGroupPagingCalls
    alert_group_paging_calls = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* useMobilityCallingLineID
    use_mobility_calling_line_id = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableDiversionInhibitor
    enable_diversion_inhibitor = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* requireAnswerConfirmation
    require_answer_confirmation = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* broadworksCallControl
    broadworks_call_control = Field(type=bool, required=True, mutable=False)
    #: str: *Required* useSettingLevel
    use_setting_level = Field(type=str, required=True, mutable=False)
    #: bool: *Required* denyCallOriginations
    deny_call_originations = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* denyCallTerminations
    deny_call_terminations = Field(type=bool, required=True, mutable=False)
    #: str: *Required* devicesToRing
    devices_to_ring = Field(type=str, required=True, mutable=False)
    #: bool: *Required* includeSharedCallAppearance
    include_shared_call_appearance = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeBroadworksAnywhere
    include_broadworks_anywhere = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* includeExecutiveAssistant
    include_executive_assistant = Field(type=bool, required=True, mutable=False)
    #: list(str): *Optional* mobileNumberAlerted  *Array*
    mobile_number_alerted = Field(type=list, required=False, mutable=False)
    #: bool: *Required* enableCallAnchoring
    enable_call_anchoring = Field(type=bool, required=True, mutable=False)
    #: OCI.ScheduleGlobalKey: *Optional* timeSchedule
    time_schedule = Field(type=OCI.ScheduleGlobalKey, required=False, mutable=False)
    #: OCI.ScheduleGlobalKey: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.ScheduleGlobalKey, required=False, mutable=False)


class UserCommPilotExpressGetResponse(OCIResponse):
    """
    Response to the ``UserCommPilotExpressGetRequest()``.

    """

    _ELEMENTS = (
        E("profile", "profile", str),
        E(
            "available_in_office", "availableInOffice",
            OCI.CommPilotExpressAvailableInOffice, is_complex=True, is_required=True,
        ),
        E(
            "available_out_of_office", "availableOutOfOffice",
            OCI.CommPilotExpressAvailableOutOfOffice, is_complex=True, is_required=True,
        ),
        E("busy", "busy", OCI.CommPilotExpressBusy, is_complex=True, is_required=True),
        E(
            "unavailable", "unavailable", OCI.CommPilotExpressUnavailable,
            is_complex=True, is_required=True,
        ),
    )

    #: str: *Optional* profile
    profile = Field(type=str, required=False, mutable=False)
    #: OCI.CommPilotExpressAvailableInOffice: *Required* availableInOffice
    available_in_office = Field(
        type=OCI.CommPilotExpressAvailableInOffice, required=True, mutable=False,
    )
    #: OCI.CommPilotExpressAvailableOutOfOffice: *Required* availableOutOfOffice
    available_out_of_office = Field(
        type=OCI.CommPilotExpressAvailableOutOfOffice, required=True, mutable=False,
    )
    #: OCI.CommPilotExpressBusy: *Required* busy
    busy = Field(type=OCI.CommPilotExpressBusy, required=True, mutable=False)
    #: OCI.CommPilotExpressUnavailable: *Required* unavailable
    unavailable = Field(type=OCI.CommPilotExpressUnavailable, required=True, mutable=False)


class UserFlexibleSeatingGuestGetResponse(OCIResponse):
    """
    Response to ``UserFlexibleSeatingGuestGetRequest()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E("enable_association_limit", "enableAssociationLimit", bool, is_required=True),
        E("association_limit_hours", "associationLimitHours", int, is_required=True),
        E("unlock_phone_pin_code", "unlockPhonePINCode", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceMultipleContactEndpointRead20, is_complex=True,
        ),
        E("host_user_id", "hostUserId", str),
        E("host_last_name", "hostLastName", str),
        E("host_first_name", "hostFirstName", str),
        E("host_association_date_time", "hostAssociationDateTime", str),
        E("host_enforces_association_limit", "hostEnforcesAssociationLimit", bool),
        E("host_association_limit_hours", "hostAssociationLimitHours", int),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* enableAssociationLimit
    enable_association_limit = Field(type=bool, required=True, mutable=False)
    #: int: *Required* associationLimitHours
    association_limit_hours = Field(type=int, required=True, mutable=False)
    #: str: *Optional* unlockPhonePINCode
    unlock_phone_pin_code = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceMultipleContactEndpointRead20: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceMultipleContactEndpointRead20, required=False, mutable=False,
    )
    #: str: *Optional* hostUserId
    host_user_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostLastName
    host_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostFirstName
    host_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hostAssociationDateTime
    host_association_date_time = Field(type=str, required=False, mutable=False)
    #: bool: *Optional* hostEnforcesAssociationLimit
    host_enforces_association_limit = Field(type=bool, required=False, mutable=False)
    #: int: *Optional* hostAssociationLimitHours
    host_association_limit_hours = Field(type=int, required=False, mutable=False)


class UserGetResponse14(OCIResponse):
    """
    Response to ``UserGetRequest14()``.

    The callingLineIdPhoneNumber is no longer being formatted for display purpose.  The
    value is returned exactly the same as being stored.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
        E(
            "trunk_group_device_endpoint", "trunkGroupDeviceEndpoint",
            OCI.TrunkGroupDeviceEndpointRead, is_complex=True,
        ),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )
    #: OCI.TrunkGroupDeviceEndpointRead: *Optional* trunkGroupDeviceEndpoint
    trunk_group_device_endpoint = Field(
        type=OCI.TrunkGroupDeviceEndpointRead, required=False, mutable=False,
    )
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)


class UserGetResponse14sp4(OCIResponse):
    """
    Response to ``UserGetRequest14sp4()``.

    The callingLineIdPhoneNumber is no longer being formatted for display purpose.  The
    value is returned exactly the same as being stored.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
        E(
            "trunk_group_device_endpoint", "trunkGroupDeviceEndpoint",
            OCI.TrunkGroupDeviceEndpointRead14sp4, is_complex=True,
        ),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E("country_code", "countryCode", str),
        E("national_prefix", "nationalPrefix", str),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )
    #: OCI.TrunkGroupDeviceEndpointRead14sp4: *Optional* trunkGroupDeviceEndpoint
    trunk_group_device_endpoint = Field(
        type=OCI.TrunkGroupDeviceEndpointRead14sp4, required=False, mutable=False,
    )
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: str: *Optional* countryCode
    country_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* nationalPrefix
    national_prefix = Field(type=str, required=False, mutable=False)


class UserGetResponse14sp9(OCIResponse):
    """
    Response to ``UserGetRequest14sp9()``.

    The callingLineIdPhoneNumber is no longer being formatted for display purpose.  The
    value is returned exactly the same as being stored.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
        E("trunk_addressing", "trunkAddressing", OCI.TrunkAddressingRead, is_complex=True),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E("country_code", "countryCode", str),
        E("national_prefix", "nationalPrefix", str),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )
    #: OCI.TrunkAddressingRead: *Optional* trunkAddressing
    trunk_addressing = Field(type=OCI.TrunkAddressingRead, required=False, mutable=False)
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: str: *Optional* countryCode
    country_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* nationalPrefix
    national_prefix = Field(type=str, required=False, mutable=False)


class UserGetResponse15sp2(OCIResponse):
    """
    Response to ``UserGetRequest15sp2()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The callingLineIdPhoneNumber is no longer
    being formatted for display purpose.  The value is returned exactly the same as being
    stored.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
        E("trunk_addressing", "trunkAddressing", OCI.TrunkAddressingRead, is_complex=True),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E("country_code", "countryCode", str),
        E("national_prefix", "nationalPrefix", str),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )
    #: OCI.TrunkAddressingRead: *Optional* trunkAddressing
    trunk_addressing = Field(type=OCI.TrunkAddressingRead, required=False, mutable=False)
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: str: *Optional* countryCode
    country_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* nationalPrefix
    national_prefix = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class UserGetResponse17(OCIResponse):
    """
    Replaced By ``UserGetResponse17sp4()`` Response to ``UserGetRequest17()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The callingLineIdPhoneNumber is no longer
    being formatted for display purpose.  The value is returned exactly the same as being
    stored.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
        E("trunk_addressing", "trunkAddressing", OCI.TrunkAddressingRead, is_complex=True),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E("country_code", "countryCode", str),
        E("national_prefix", "nationalPrefix", str),
        E("network_class_of_service", "networkClassOfService", str),
        E("office_zone_name", "officeZoneName", str),
        E("primary_zone_name", "primaryZoneName", str),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )
    #: OCI.TrunkAddressingRead: *Optional* trunkAddressing
    trunk_addressing = Field(type=OCI.TrunkAddressingRead, required=False, mutable=False)
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: str: *Optional* countryCode
    country_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* nationalPrefix
    national_prefix = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: str: *Optional* officeZoneName
    office_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* primaryZoneName
    primary_zone_name = Field(type=str, required=False, mutable=False)


class UserGetResponse17sp3(OCIResponse):
    """
    Replaced By ``UserGetRequest18()`` Response to ``UserGetRequest17sp3()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The callingLineIdPhoneNumber is no longer
    being formatted for display purpose.  The value is returned exactly the same as being
    stored.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
        E("trunk_addressing", "trunkAddressing", OCI.TrunkAddressingRead, is_complex=True),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E("country_code", "countryCode", str),
        E("national_prefix", "nationalPrefix", str),
        E("network_class_of_service", "networkClassOfService", str),
        E("office_zone_name", "officeZoneName", str),
        E("primary_zone_name", "primaryZoneName", str),
        E("imp_id", "impId", str),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )
    #: OCI.TrunkAddressingRead: *Optional* trunkAddressing
    trunk_addressing = Field(type=OCI.TrunkAddressingRead, required=False, mutable=False)
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: str: *Optional* countryCode
    country_code = Field(type=str, required=False, mutable=False)
    #: str: *Optional* nationalPrefix
    national_prefix = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: str: *Optional* officeZoneName
    office_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* primaryZoneName
    primary_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* impId
    imp_id = Field(type=str, required=False, mutable=False)


class UserGetResponse17sp4(OCIResponse):
    """
    Replaced By ``UserGetResponse18()`` Response to ``UserGetRequest17sp4()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The following data elements are only used
    in AS data mode: contact[2]-contact[5] The country code (countryCode) included is the
    user's phone number country code when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the user's Group does not have an
    associated country code.  The nationalPrefix in this response is the one associated to
    the included countryCode.  The callingLineIdPhoneNumber is no longer being formatted
    for display purpose.  The value is returned exactly the same as being stored.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceMultipleContactEndpointRead, is_complex=True,
        ),
        E(
            "trunk_addressing", "trunkAddressing", OCI.TrunkAddressingMultipleContactRead,
            is_complex=True,
        ),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E("country_code", "countryCode", str, is_required=True),
        E("national_prefix", "nationalPrefix", str),
        E("network_class_of_service", "networkClassOfService", str),
        E("office_zone_name", "officeZoneName", str),
        E("primary_zone_name", "primaryZoneName", str),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceMultipleContactEndpointRead: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceMultipleContactEndpointRead, required=False, mutable=False,
    )
    #: OCI.TrunkAddressingMultipleContactRead: *Optional* trunkAddressing
    trunk_addressing = Field(
        type=OCI.TrunkAddressingMultipleContactRead, required=False, mutable=False,
    )
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: str: *Required* countryCode
    country_code = Field(type=str, required=True, mutable=False)
    #: str: *Optional* nationalPrefix
    national_prefix = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: str: *Optional* officeZoneName
    office_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* primaryZoneName
    primary_zone_name = Field(type=str, required=False, mutable=False)


class UserGetResponse18(OCIResponse):
    """
    Response to ``UserGetRequest18()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The following data elements are only used
    in AS data mode: contact[2]-contact[5] The country code (countryCode) included is the
    user's phone number country code when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the user's Group does not have an
    associated country code.  The nationalPrefix in this response is the one associated to
    the included countryCode.  The callingLineIdPhoneNumber is no longer being formatted
    for display purpose.  The value is returned exactly the same as being stored.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceMultipleContactEndpointRead, is_complex=True,
        ),
        E(
            "trunk_addressing", "trunkAddressing", OCI.TrunkAddressingMultipleContactRead,
            is_complex=True,
        ),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E("country_code", "countryCode", str, is_required=True),
        E("national_prefix", "nationalPrefix", str),
        E("network_class_of_service", "networkClassOfService", str),
        E("office_zone_name", "officeZoneName", str),
        E("primary_zone_name", "primaryZoneName", str),
        E("imp_id", "impId", str),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceMultipleContactEndpointRead: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceMultipleContactEndpointRead, required=False, mutable=False,
    )
    #: OCI.TrunkAddressingMultipleContactRead: *Optional* trunkAddressing
    trunk_addressing = Field(
        type=OCI.TrunkAddressingMultipleContactRead, required=False, mutable=False,
    )
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: str: *Required* countryCode
    country_code = Field(type=str, required=True, mutable=False)
    #: str: *Optional* nationalPrefix
    national_prefix = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: str: *Optional* officeZoneName
    office_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* primaryZoneName
    primary_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* impId
    imp_id = Field(type=str, required=False, mutable=False)


class UserGetResponse19(OCIResponse):
    """
    Response to ``UserGetRequest19()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The following data elements are only used
    in AS data mode: contact[2]-contact[5] The country code (countryCode) included is the
    user's phone number country code when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the user's Group does not have an
    associated country code.  The nationalPrefix in this response is the one associated to
    the included countryCode.  The callingLineIdPhoneNumber is no longer being formatted
    for display purpose.  The value is returned exactly the same as being stored.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceMultipleContactEndpointRead19, is_complex=True,
        ),
        E(
            "trunk_addressing", "trunkAddressing", OCI.TrunkAddressingMultipleContactRead,
            is_complex=True,
        ),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E("country_code", "countryCode", str, is_required=True),
        E("national_prefix", "nationalPrefix", str),
        E("network_class_of_service", "networkClassOfService", str),
        E("office_zone_name", "officeZoneName", str),
        E("primary_zone_name", "primaryZoneName", str),
        E("imp_id", "impId", str),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceMultipleContactEndpointRead19: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceMultipleContactEndpointRead19, required=False, mutable=False,
    )
    #: OCI.TrunkAddressingMultipleContactRead: *Optional* trunkAddressing
    trunk_addressing = Field(
        type=OCI.TrunkAddressingMultipleContactRead, required=False, mutable=False,
    )
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: str: *Required* countryCode
    country_code = Field(type=str, required=True, mutable=False)
    #: str: *Optional* nationalPrefix
    national_prefix = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: str: *Optional* officeZoneName
    office_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* primaryZoneName
    primary_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* impId
    imp_id = Field(type=str, required=False, mutable=False)


class UserGetResponse20(OCIResponse):
    """
    Response to ``UserGetRequest20()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The following data elements are only used
    in AS data mode: contact[2]-contact[5] The country code (countryCode) included is the
    user's phone number country code when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the user's Group does not have an
    associated country code.  The nationalPrefix in this response is the one associated to
    the included countryCode.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("name_dialing_name", "nameDialingName", OCI.NameDialingName, is_complex=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceMultipleContactEndpointRead20, is_complex=True,
        ),
        E(
            "trunk_addressing", "trunkAddressing", OCI.TrunkAddressingMultipleContactRead,
            is_complex=True,
        ),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E("country_code", "countryCode", str, is_required=True),
        E("national_prefix", "nationalPrefix", str),
        E("network_class_of_service", "networkClassOfService", str),
        E("office_zone_name", "officeZoneName", str),
        E("primary_zone_name", "primaryZoneName", str),
        E("imp_id", "impId", str),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: OCI.NameDialingName: *Optional* nameDialingName
    name_dialing_name = Field(type=OCI.NameDialingName, required=False, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceMultipleContactEndpointRead20: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceMultipleContactEndpointRead20, required=False, mutable=False,
    )
    #: OCI.TrunkAddressingMultipleContactRead: *Optional* trunkAddressing
    trunk_addressing = Field(
        type=OCI.TrunkAddressingMultipleContactRead, required=False, mutable=False,
    )
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: str: *Required* countryCode
    country_code = Field(type=str, required=True, mutable=False)
    #: str: *Optional* nationalPrefix
    national_prefix = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: str: *Optional* officeZoneName
    office_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* primaryZoneName
    primary_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* impId
    imp_id = Field(type=str, required=False, mutable=False)


class UserGetResponse21(OCIResponse):
    """
    Response to ``UserGetRequest21()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The following data elements are only used
    in AS data mode: contact[2]-contact[5] The following data elements are only used in
    IMS data mode: alternateTrunkIdentityDomain The country code (countryCode) included is
    the user's phone number country code when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the user's Group does not have an
    associated country code.  The nationalPrefix in this response is the one associated to
    the included countryCode.  The callingLineIdPhoneNumber is no longer being formatted
    for display purpose.  The value is returned exactly the same as being stored.
    """

    _ELEMENTS = (
        E("service_provider_id", "serviceProviderId", str, is_required=True),
        E("group_id", "groupId", str, is_required=True),
        E("last_name", "lastName", str, is_required=True),
        E("first_name", "firstName", str, is_required=True),
        E("calling_line_id_last_name", "callingLineIdLastName", str, is_required=True),
        E("calling_line_id_first_name", "callingLineIdFirstName", str, is_required=True),
        E("name_dialing_name", "nameDialingName", OCI.NameDialingName, is_complex=True),
        E("hiragana_last_name", "hiraganaLastName", str),
        E("hiragana_first_name", "hiraganaFirstName", str),
        E("phone_number", "phoneNumber", str),
        E("extension", "extension", str),
        E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        E("department", "department", OCI.DepartmentKey, is_complex=True),
        E("department_full_path", "departmentFullPath", str),
        E("language", "language", str, is_required=True),
        E("time_zone", "timeZone", str, is_required=True),
        E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        E("default_alias", "defaultAlias", str, is_required=True),
        E("alias", "alias", str),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceMultipleIdentityAndContactEndpointRead, is_complex=True,
        ),
        E(
            "trunk_addressing", "trunkAddressing",
            OCI.TrunkAddressingMultipleContactRead21, is_complex=True,
        ),
        E("title", "title", str),
        E("pager_phone_number", "pagerPhoneNumber", str),
        E("mobile_phone_number", "mobilePhoneNumber", str),
        E("email_address", "emailAddress", str),
        E("yahoo_id", "yahooId", str),
        E("address_location", "addressLocation", str),
        E("address", "address", OCI.StreetAddress, is_complex=True),
        E("country_code", "countryCode", str, is_required=True),
        E("national_prefix", "nationalPrefix", str),
        E("network_class_of_service", "networkClassOfService", str),
        E("office_zone_name", "officeZoneName", str),
        E("primary_zone_name", "primaryZoneName", str),
        E("imp_id", "impId", str),
    )

    #: str: *Required* serviceProviderId
    service_provider_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* groupId
    group_id = Field(type=str, required=True, mutable=False)
    #: str: *Required* lastName
    last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* firstName
    first_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdLastName
    calling_line_id_last_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* callingLineIdFirstName
    calling_line_id_first_name = Field(type=str, required=True, mutable=False)
    #: OCI.NameDialingName: *Optional* nameDialingName
    name_dialing_name = Field(type=OCI.NameDialingName, required=False, mutable=False)
    #: str: *Optional* hiraganaLastName
    hiragana_last_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* hiraganaFirstName
    hiragana_first_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* phoneNumber
    phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* extension
    extension = Field(type=str, required=False, mutable=False)
    #: str: *Optional* callingLineIdPhoneNumber
    calling_line_id_phone_number = Field(type=str, required=False, mutable=False)
    #: OCI.DepartmentKey: *Optional* department
    department = Field(type=OCI.DepartmentKey, required=False, mutable=False)
    #: str: *Optional* departmentFullPath
    department_full_path = Field(type=str, required=False, mutable=False)
    #: str: *Required* language
    language = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZone
    time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* timeZoneDisplayName
    time_zone_display_name = Field(type=str, required=True, mutable=False)
    #: str: *Required* defaultAlias
    default_alias = Field(type=str, required=True, mutable=False)
    #: str: *Optional* alias
    alias = Field(type=str, required=False, mutable=False)
    #: OCI.AccessDeviceMultipleIdentityAndContactEndpointRead: *Optional*
    #: accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceMultipleIdentityAndContactEndpointRead, required=False,
        mutable=False,
    )
    #: OCI.TrunkAddressingMultipleContactRead21: *Optional* trunkAddressing
    trunk_addressing = Field(
        type=OCI.TrunkAddressingMultipleContactRead21, required=False, mutable=False,
    )
    #: str: *Optional* title
    title = Field(type=str, required=False, mutable=False)
    #: str: *Optional* pagerPhoneNumber
    pager_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* mobilePhoneNumber
    mobile_phone_number = Field(type=str, required=False, mutable=False)
    #: str: *Optional* emailAddress
    email_address = Field(type=str, required=False, mutable=False)
    #: str: *Optional* yahooId
    yahoo_id = Field(type=str, required=False, mutable=False)
    #: str: *Optional* addressLocation
    address_location = Field(type=str, required=False, mutable=False)
    #: OCI.StreetAddress: *Optional* address
    address = Field(type=OCI.StreetAddress, required=False, mutable=False)
    #: str: *Required* countryCode
    country_code = Field(type=str, required=True, mutable=False)
    #: str: *Optional* nationalPrefix
    national_prefix = Field(type=str, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)
    #: str: *Optional* officeZoneName
    office_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* primaryZoneName
    primary_zone_name = Field(type=str, required=False, mutable=False)
    #: str: *Optional* impId
    imp_id = Field(type=str, required=False, mutable=False)


class UserIncomingCallingPlanGetResponse(OCIResponse):
    """
    Response to ``UserIncomingCallingPlanGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions", OCI.IncomingCallingPlanPermissions,
            is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.IncomingCallingPlanPermissions: *Required* userPermissions
    user_permissions = Field(
        type=OCI.IncomingCallingPlanPermissions, required=True, mutable=False,
    )


class UserOutgoingCallingPlanDigitPlanCallMeNowGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanDigitPlanCallMeNowGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions",
            OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions, is_complex=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions: *Optional* userPermissions
    user_permissions = Field(
        type=OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions, required=False,
        mutable=False,
    )


class UserOutgoingCallingPlanDigitPlanOriginatingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanDigitPlanOriginatingGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions",
            OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions, is_complex=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions: *Optional*
    #: userPermissions
    user_permissions = Field(
        type=OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions, required=False,
        mutable=False,
    )


class UserOutgoingCallingPlanDigitPlanRedirectingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanDigitPlanRedirectingGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions",
            OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions, is_complex=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions: *Optional*
    #: userPermissions
    user_permissions = Field(
        type=OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions, required=False,
        mutable=False,
    )


class UserOutgoingCallingPlanPinholeDigitPlanCallMeNowGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanPinholeDigitPlanCallMeNowGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions",
            OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions, is_complex=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions: *Optional*
    #: userPermissions
    user_permissions = Field(
        type=OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions, required=False,
        mutable=False,
    )


class UserOutgoingCallingPlanPinholeDigitPlanOriginatingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanPinholeDigitPlanOriginatingGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions",
            OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions,
            is_complex=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions: *Optional*
    #: userPermissions
    user_permissions = Field(
        type=OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions,
        required=False, mutable=False,
    )


class UserOutgoingCallingPlanPinholeDigitPlanRedirectingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanPinholeDigitPlanRedirectingGetRequest()``.

    """

    _ELEMENTS = (
        E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        E(
            "user_permissions", "userPermissions",
            OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions,
            is_complex=True,
        ),
    )

    #: bool: *Required* useCustomSettings
    use_custom_settings = Field(type=bool, required=True, mutable=False)
    #: OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions: *Optional*
    #: userPermissions
    user_permissions = Field(
        type=OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions,
        required=False, mutable=False,
    )


class UserScheduleGetEventDetailListResponse(OCIResponse):
    """
    Response to ``UserScheduleGetEventRequest()``.

    The response contains collection of event details of a requested schedule.
    """

    _ELEMENTS = (
        E(
            "schedule_events", "scheduleEvents", OCI.ScheduleEvents, is_complex=True,
            is_array=True,
        ),
    )

    #: list(OCI.ScheduleEvents): *Optional* scheduleEvents  *Array*
    schedule_events = Field(type=list, required=False, mutable=False)


class UserScheduleGetListResponse17sp1(OCIResponse):
    """
    Response to ``UserScheduleGetListRequest17sp1()``.

    The response contains a list of schedules viewable by the user.  It contains the
    schedules defined for the user and the group the user belongs to.  If the user belongs
    to an enterprise, the list also contains the schedules defined for the enterprise.
    """

    _ELEMENTS = (
        E(
            "schedule_global_key", "scheduleGlobalKey", OCI.ScheduleGlobalKey,
            is_complex=True, is_array=True,
        ),
    )

    #: list(OCI.ScheduleGlobalKey): *Optional* scheduleGlobalKey  *Array*
    schedule_global_key = Field(type=list, required=False, mutable=False)


class UserShInterfaceGetUserIdDataResponse(OCIResponse):
    """
    Response to the ``UserShInterfaceGetUserIdDataRequest()``.

    The response contains the Sh non-transparent data for the specified userId.  The data
    also includes a userType, publicUserIdentity and endpointType.
    """

    _ELEMENTS = (
        E("entry", "entry", OCI.ShInterfaceUserIdDataEntry, is_complex=True, is_array=True),
    )

    #: list(OCI.ShInterfaceUserIdDataEntry): *Optional* entry  *Array*
    entry = Field(type=list, required=False, mutable=False)


class UserVideoAddOnGetResponse14(OCIResponse):
    """
    Response to the ``UserVideoAddOnGetRequest14()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "max_originating_call_delay_seconds", "maxOriginatingCallDelaySeconds", int,
            is_required=True,
        ),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointRead14, is_complex=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxOriginatingCallDelaySeconds
    max_originating_call_delay_seconds = Field(type=int, required=True, mutable=False)
    #: OCI.AccessDeviceEndpointRead14: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointRead14, required=False, mutable=False,
    )


class UserVideoAddOnGetResponse19(OCIResponse):
    """
    Response to the ``UserVideoAddOnGetRequest19()``.

    """

    _ELEMENTS = (
        E("is_active", "isActive", bool, is_required=True),
        E(
            "max_originating_call_delay_seconds", "maxOriginatingCallDelaySeconds", int,
            is_required=True,
        ),
        E(
            "access_device_endpoint", "accessDeviceEndpoint",
            OCI.AccessDeviceEndpointWithPortNumberRead, is_complex=True,
        ),
    )

    #: bool: *Required* isActive
    is_active = Field(type=bool, required=True, mutable=False)
    #: int: *Required* maxOriginatingCallDelaySeconds
    max_originating_call_delay_seconds = Field(type=int, required=True, mutable=False)
    #: OCI.AccessDeviceEndpointWithPortNumberRead: *Optional* accessDeviceEndpoint
    access_device_endpoint = Field(
        type=OCI.AccessDeviceEndpointWithPortNumberRead, required=False, mutable=False,
    )


class UserVoiceMessagingUserGetGreetingResponse20(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetGreetingRequest18sp1()``.

    Contains the greeting configuration for a user's voice messaging.  The following
    elements are only used in AS data mode: disableMessageDeposit
    disableMessageDepositAction greetingOnlyForwardDestination extendedAwayEnabled
    extendedAwayDisableMessageDeposit extendedAwayAudioFile extendedAwayAudioMediaType
    extendedAwayVideoFile extendedAwayVideoMediaTyp
    """

    _ELEMENTS = (
        E("busy_announcement_selection", "busyAnnouncementSelection", str, is_required=True),
        E(
            "busy_personal_audio_file", "busyPersonalAudioFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
        E(
            "busy_personal_video_file", "busyPersonalVideoFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
        E(
            "no_answer_announcement_selection", "noAnswerAnnouncementSelection", str,
            is_required=True,
        ),
        E(
            "no_answer_personal_audio_file", "noAnswerPersonalAudioFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
        E(
            "no_answer_personal_video_file", "noAnswerPersonalVideoFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting01", "noAnswerAlternateGreeting01",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead20, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting02", "noAnswerAlternateGreeting02",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead20, is_complex=True,
        ),
        E(
            "no_answer_alternate_greeting03", "noAnswerAlternateGreeting03",
            OCI.VoiceMessagingAlternateNoAnswerGreetingRead20, is_complex=True,
        ),
        E("extended_away_enabled", "extendedAwayEnabled", bool, is_required=True),
        E(
            "extended_away_disable_message_deposit", "extendedAwayDisableMessageDeposit",
            bool, is_required=True,
        ),
        E(
            "extended_away_audio_file", "extendedAwayAudioFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
        E(
            "extended_away_video_file", "extendedAwayVideoFile",
            OCI.AnnouncementFileLevelKey, is_complex=True,
        ),
        E("no_answer_number_of_rings", "noAnswerNumberOfRings", int, is_required=True),
        E("disable_message_deposit", "disableMessageDeposit", bool, is_required=True),
        E(
            "disable_message_deposit_action", "disableMessageDepositAction", str,
            is_required=True,
        ),
        E("greeting_only_forward_destination", "greetingOnlyForwardDestination", str),
    )

    #: str: *Required* busyAnnouncementSelection
    busy_announcement_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* busyPersonalAudioFile
    busy_personal_audio_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )
    #: OCI.AnnouncementFileLevelKey: *Optional* busyPersonalVideoFile
    busy_personal_video_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )
    #: str: *Required* noAnswerAnnouncementSelection
    no_answer_announcement_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* noAnswerPersonalAudioFile
    no_answer_personal_audio_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )
    #: OCI.AnnouncementFileLevelKey: *Optional* noAnswerPersonalVideoFile
    no_answer_personal_video_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead20: *Optional*
    #: noAnswerAlternateGreeting01
    no_answer_alternate_greeting01 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead20, required=False,
        mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead20: *Optional*
    #: noAnswerAlternateGreeting02
    no_answer_alternate_greeting02 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead20, required=False,
        mutable=False,
    )
    #: OCI.VoiceMessagingAlternateNoAnswerGreetingRead20: *Optional*
    #: noAnswerAlternateGreeting03
    no_answer_alternate_greeting03 = Field(
        type=OCI.VoiceMessagingAlternateNoAnswerGreetingRead20, required=False,
        mutable=False,
    )
    #: bool: *Required* extendedAwayEnabled
    extended_away_enabled = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* extendedAwayDisableMessageDeposit
    extended_away_disable_message_deposit = Field(type=bool, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* extendedAwayAudioFile
    extended_away_audio_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )
    #: OCI.AnnouncementFileLevelKey: *Optional* extendedAwayVideoFile
    extended_away_video_file = Field(
        type=OCI.AnnouncementFileLevelKey, required=False, mutable=False,
    )
    #: int: *Required* noAnswerNumberOfRings
    no_answer_number_of_rings = Field(type=int, required=True, mutable=False)
    #: bool: *Required* disableMessageDeposit
    disable_message_deposit = Field(type=bool, required=True, mutable=False)
    #: str: *Required* disableMessageDepositAction
    disable_message_deposit_action = Field(type=str, required=True, mutable=False)
    #: str: *Optional* greetingOnlyForwardDestination
    greeting_only_forward_destination = Field(type=str, required=False, mutable=False)


class EnterpriseCallCenterEnhancedReportingScheduledReportGetResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingScheduledReportGetRequest()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E(
            "report_template", "reportTemplate", OCI.CallCenterReportTemplateKey,
            is_complex=True, is_required=True,
        ),
        E(
            "schedule", "schedule", OCI.CallCenterReportSchedule, is_complex=True,
            is_required=True,
        ),
        E("sampling_period", "samplingPeriod", str),
        E("start_day_of_week", "startDayOfWeek", str),
        E("report_time_zone", "reportTimeZone", str, is_required=True),
        E("report_date_format", "reportDateFormat", str, is_required=True),
        E("report_time_format", "reportTimeFormat", str, is_required=True),
        E(
            "report_interval", "reportInterval", OCI.CallCenterReportInterval,
            is_complex=True, is_required=True,
        ),
        E("report_format", "reportFormat", str, is_required=True),
        E(
            "agent", "agent", OCI.CallCenterScheduledReportAgentSelectionAdminRead,
            is_complex=True,
        ),
        E(
            "call_center", "callCenter",
            OCI.CallCenterScheduledReportCallCenterSelectionRead, is_complex=True,
        ),
        E("dnis", "dnis", OCI.CallCenterScheduledReportDNISSelectionRead, is_complex=True),
        E("call_completion_threshold_seconds", "callCompletionThresholdSeconds", int),
        E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
        E("service_level_threshold_seconds", "serviceLevelThresholdSeconds", int),
        E(
            "service_level_inclusions", "serviceLevelInclusions",
            OCI.CallCenterScheduledReportServiceLevelInclusions, is_complex=True,
        ),
        E("service_level_objective_percentage", "serviceLevelObjectivePercentage", int),
        E("abandoned_call_threshold_seconds", "abandonedCallThresholdSeconds", int),
        E("email_address", "emailAddress", str, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterReportTemplateKey: *Required* reportTemplate
    report_template = Field(
        type=OCI.CallCenterReportTemplateKey, required=True, mutable=False,
    )
    #: OCI.CallCenterReportSchedule: *Required* schedule
    schedule = Field(type=OCI.CallCenterReportSchedule, required=True, mutable=False)
    #: str: *Optional* samplingPeriod
    sampling_period = Field(type=str, required=False, mutable=False)
    #: str: *Optional* startDayOfWeek
    start_day_of_week = Field(type=str, required=False, mutable=False)
    #: str: *Required* reportTimeZone
    report_time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* reportDateFormat
    report_date_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* reportTimeFormat
    report_time_format = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterReportInterval: *Required* reportInterval
    report_interval = Field(type=OCI.CallCenterReportInterval, required=True, mutable=False)
    #: str: *Required* reportFormat
    report_format = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterScheduledReportAgentSelectionAdminRead: *Optional* agent
    agent = Field(
        type=OCI.CallCenterScheduledReportAgentSelectionAdminRead, required=False,
        mutable=False,
    )
    #: OCI.CallCenterScheduledReportCallCenterSelectionRead: *Optional* callCenter
    call_center = Field(
        type=OCI.CallCenterScheduledReportCallCenterSelectionRead, required=False,
        mutable=False,
    )
    #: OCI.CallCenterScheduledReportDNISSelectionRead: *Optional* dnis
    dnis = Field(
        type=OCI.CallCenterScheduledReportDNISSelectionRead, required=False, mutable=False,
    )
    #: int: *Optional* callCompletionThresholdSeconds
    call_completion_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: int: *Optional* shortDurationThresholdSeconds
    short_duration_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: int: *Optional* serviceLevelThresholdSeconds
    service_level_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: OCI.CallCenterScheduledReportServiceLevelInclusions: *Optional*
    #: serviceLevelInclusions
    service_level_inclusions = Field(
        type=OCI.CallCenterScheduledReportServiceLevelInclusions, required=False,
        mutable=False,
    )
    #: int: *Optional* serviceLevelObjectivePercentage
    service_level_objective_percentage = Field(type=int, required=False, mutable=False)
    #: int: *Optional* abandonedCallThresholdSeconds
    abandoned_call_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: str: *Required* emailAddress
    email_address = Field(type=str, required=True, mutable=False)


class GroupAutoAttendantGetInstanceResponse19(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest19()``.

    Contains the service profile information.  The following elements are only used in AS
    data mode: type, use AutoAttendantType.BASIC in HSS mode.  holidayMenu.  The following
    elementsare only valid for Standard Auto Attendants: holidayMenu Replaced by:
    ``GroupAutoAttendantGetInstanceResponse19sp1()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("type", "type", str, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
        E("name_dialing_scope", "nameDialingScope", str, is_required=True),
        E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
        E(
            "business_hours_menu", "businessHoursMenu", OCI.AutoAttendantReadMenu19,
            is_complex=True, is_required=True,
        ),
        E(
            "after_hours_menu", "afterHoursMenu", OCI.AutoAttendantReadMenu19,
            is_complex=True, is_required=True,
        ),
        E("holiday_menu", "holidayMenu", OCI.AutoAttendantReadMenu19, is_complex=True),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: str: *Required* type
    type = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.TimeSchedule: *Optional* businessHours
    business_hours = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Required* extensionDialingScope
    extension_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingScope
    name_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingEntries
    name_dialing_entries = Field(type=str, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu19: *Required* businessHoursMenu
    business_hours_menu = Field(
        type=OCI.AutoAttendantReadMenu19, required=True, mutable=False,
    )
    #: OCI.AutoAttendantReadMenu19: *Required* afterHoursMenu
    after_hours_menu = Field(type=OCI.AutoAttendantReadMenu19, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu19: *Optional* holidayMenu
    holiday_menu = Field(type=OCI.AutoAttendantReadMenu19, required=False, mutable=False)


class GroupAutoAttendantGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest19sp1()``.

    Contains the service profile information.  The following elements are only used in AS
    data mode: type, use AutoAttendantType.BASIC in HSS mode.  holidayMenu.  The following
    elementsare only valid for Standard Auto Attendants: holidayMenu Replaced by:
    ``GroupAutoAttendantGetInstanceResponse20()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("type", "type", str, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
        E("name_dialing_scope", "nameDialingScope", str, is_required=True),
        E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
        E(
            "business_hours_menu", "businessHoursMenu", OCI.AutoAttendantReadMenu19,
            is_complex=True, is_required=True,
        ),
        E(
            "after_hours_menu", "afterHoursMenu", OCI.AutoAttendantReadMenu19,
            is_complex=True, is_required=True,
        ),
        E("holiday_menu", "holidayMenu", OCI.AutoAttendantReadMenu19, is_complex=True),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: str: *Required* type
    type = Field(type=str, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.TimeSchedule: *Optional* businessHours
    business_hours = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Required* extensionDialingScope
    extension_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingScope
    name_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingEntries
    name_dialing_entries = Field(type=str, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu19: *Required* businessHoursMenu
    business_hours_menu = Field(
        type=OCI.AutoAttendantReadMenu19, required=True, mutable=False,
    )
    #: OCI.AutoAttendantReadMenu19: *Required* afterHoursMenu
    after_hours_menu = Field(type=OCI.AutoAttendantReadMenu19, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu19: *Optional* holidayMenu
    holiday_menu = Field(type=OCI.AutoAttendantReadMenu19, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class GroupAutoAttendantSubmenuGetResponse20(OCIResponse):
    """
    Response to ``GroupAutoAttendantSubmenuGetRequest20()``.

    Contains AutoAttendant submenu information.
    """

    _ELEMENTS = (
        E("announcement_selection", "announcementSelection", str, is_required=True),
        E("audio_file", "audioFile", OCI.AnnouncementFileLevelKey, is_complex=True),
        E("video_file", "videoFile", OCI.AnnouncementFileLevelKey, is_complex=True),
        E(
            "enable_level_extension_dialing", "enableLevelExtensionDialing", bool,
            is_required=True,
        ),
        E(
            "key_configuration", "keyConfiguration",
            OCI.AutoAttendantKeyReadConfiguration20, is_complex=True,
        ),
    )

    #: str: *Required* announcementSelection
    announcement_selection = Field(type=str, required=True, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* audioFile
    audio_file = Field(type=OCI.AnnouncementFileLevelKey, required=False, mutable=False)
    #: OCI.AnnouncementFileLevelKey: *Optional* videoFile
    video_file = Field(type=OCI.AnnouncementFileLevelKey, required=False, mutable=False)
    #: bool: *Required* enableLevelExtensionDialing
    enable_level_extension_dialing = Field(type=bool, required=True, mutable=False)
    #: OCI.AutoAttendantKeyReadConfiguration20: *Optional* keyConfiguration
    key_configuration = Field(
        type=OCI.AutoAttendantKeyReadConfiguration20, required=False, mutable=False,
    )


class GroupCallCenterEnhancedReportingScheduledReportGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingScheduledReportGetRequest()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E(
            "report_template", "reportTemplate", OCI.CallCenterReportTemplateKey,
            is_complex=True, is_required=True,
        ),
        E(
            "schedule", "schedule", OCI.CallCenterReportSchedule, is_complex=True,
            is_required=True,
        ),
        E("sampling_period", "samplingPeriod", str),
        E("start_day_of_week", "startDayOfWeek", str),
        E("report_time_zone", "reportTimeZone", str, is_required=True),
        E("report_date_format", "reportDateFormat", str, is_required=True),
        E("report_time_format", "reportTimeFormat", str, is_required=True),
        E(
            "report_interval", "reportInterval", OCI.CallCenterReportInterval,
            is_complex=True, is_required=True,
        ),
        E("report_format", "reportFormat", str, is_required=True),
        E(
            "agent", "agent", OCI.CallCenterScheduledReportAgentSelectionAdminRead,
            is_complex=True,
        ),
        E(
            "call_center", "callCenter",
            OCI.CallCenterScheduledReportCallCenterSelectionRead, is_complex=True,
        ),
        E("dnis", "dnis", OCI.CallCenterScheduledReportDNISSelectionRead, is_complex=True),
        E("call_completion_threshold_seconds", "callCompletionThresholdSeconds", int),
        E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
        E("service_level_threshold_seconds", "serviceLevelThresholdSeconds", int),
        E(
            "service_level_inclusions", "serviceLevelInclusions",
            OCI.CallCenterScheduledReportServiceLevelInclusions, is_complex=True,
        ),
        E("service_level_objective_percentage", "serviceLevelObjectivePercentage", int),
        E("abandoned_call_threshold_seconds", "abandonedCallThresholdSeconds", int),
        E("email_address", "emailAddress", str, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterReportTemplateKey: *Required* reportTemplate
    report_template = Field(
        type=OCI.CallCenterReportTemplateKey, required=True, mutable=False,
    )
    #: OCI.CallCenterReportSchedule: *Required* schedule
    schedule = Field(type=OCI.CallCenterReportSchedule, required=True, mutable=False)
    #: str: *Optional* samplingPeriod
    sampling_period = Field(type=str, required=False, mutable=False)
    #: str: *Optional* startDayOfWeek
    start_day_of_week = Field(type=str, required=False, mutable=False)
    #: str: *Required* reportTimeZone
    report_time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* reportDateFormat
    report_date_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* reportTimeFormat
    report_time_format = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterReportInterval: *Required* reportInterval
    report_interval = Field(type=OCI.CallCenterReportInterval, required=True, mutable=False)
    #: str: *Required* reportFormat
    report_format = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterScheduledReportAgentSelectionAdminRead: *Optional* agent
    agent = Field(
        type=OCI.CallCenterScheduledReportAgentSelectionAdminRead, required=False,
        mutable=False,
    )
    #: OCI.CallCenterScheduledReportCallCenterSelectionRead: *Optional* callCenter
    call_center = Field(
        type=OCI.CallCenterScheduledReportCallCenterSelectionRead, required=False,
        mutable=False,
    )
    #: OCI.CallCenterScheduledReportDNISSelectionRead: *Optional* dnis
    dnis = Field(
        type=OCI.CallCenterScheduledReportDNISSelectionRead, required=False, mutable=False,
    )
    #: int: *Optional* callCompletionThresholdSeconds
    call_completion_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: int: *Optional* shortDurationThresholdSeconds
    short_duration_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: int: *Optional* serviceLevelThresholdSeconds
    service_level_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: OCI.CallCenterScheduledReportServiceLevelInclusions: *Optional*
    #: serviceLevelInclusions
    service_level_inclusions = Field(
        type=OCI.CallCenterScheduledReportServiceLevelInclusions, required=False,
        mutable=False,
    )
    #: int: *Optional* serviceLevelObjectivePercentage
    service_level_objective_percentage = Field(type=int, required=False, mutable=False)
    #: int: *Optional* abandonedCallThresholdSeconds
    abandoned_call_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: str: *Required* emailAddress
    email_address = Field(type=str, required=True, mutable=False)


class GroupCallCenterGetAnnouncementResponse16(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest16()``.

    """

    _ELEMENTS = (
        E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
        E("mandatory_entrance_message", "mandatoryEntranceMessage", bool, is_required=True),
        E(
            "entrance_audio_message_selection", "entranceAudioMessageSelection", str,
            is_required=True,
        ),
        E("entrance_audio_file_url", "entranceAudioFileUrl", str),
        E(
            "entrance_message_audio_file_description",
            "entranceMessageAudioFileDescription", str,
        ),
        E("entrance_audio_file_media_type", "entranceAudioFileMediaType", str),
        E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
        E("entrance_video_file_url", "entranceVideoFileUrl", str),
        E(
            "entrance_message_video_file_description",
            "entranceMessageVideoFileDescription", str,
        ),
        E("entrance_video_file_media_type", "entranceVideoFileMediaType", str),
        E(
            "play_periodic_comfort_message", "playPeriodicComfortMessage", bool,
            is_required=True,
        ),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E(
            "periodic_comfort_audio_message_selection",
            "periodicComfortAudioMessageSelection", str, is_required=True,
        ),
        E("periodic_comfort_audio_file_url", "periodicComfortAudioFileUrl", str),
        E(
            "periodic_comfort_message_audio_file_description",
            "periodicComfortMessageAudioFileDescription", str,
        ),
        E("periodic_comfort_audio_file_media_type", "periodicComfortAudioFileMediaType", str),
        E(
            "periodic_comfort_video_message_selection",
            "periodicComfortVideoMessageSelection", str,
        ),
        E("periodic_comfort_video_file_url", "periodicComfortVideoFileUrl", str),
        E(
            "periodic_comfort_message_video_file_description",
            "periodicComfortMessageVideoFileDescription", str,
        ),
        E("periodic_comfort_video_file_media_type", "periodicComfortVideoFileMediaType", str),
        E(
            "enable_media_on_hold_for_queued_calls", "enableMediaOnHoldForQueuedCalls",
            bool, is_required=True,
        ),
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead16, is_complex=True, is_required=True,
        ),
        E(
            "media_on_hold_use_alternate_source_for_internal_calls",
            "mediaOnHoldUseAlternateSourceForInternalCalls", bool,
        ),
        E(
            "media_on_hold_internal_source", "mediaOnHoldInternalSource",
            OCI.CallCenterMediaOnHoldSourceRead16, is_complex=True,
        ),
    )

    #: bool: *Required* playEntranceMessage
    play_entrance_message = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mandatoryEntranceMessage
    mandatory_entrance_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* entranceAudioMessageSelection
    entrance_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* entranceAudioFileUrl
    entrance_audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* entranceMessageAudioFileDescription
    entrance_message_audio_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* entranceAudioFileMediaType
    entrance_audio_file_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* entranceVideoMessageSelection
    entrance_video_message_selection = Field(type=str, required=False, mutable=False)
    #: str: *Optional* entranceVideoFileUrl
    entrance_video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* entranceMessageVideoFileDescription
    entrance_message_video_file_description = Field(type=str, required=False, mutable=False)
    #: str: *Optional* entranceVideoFileMediaType
    entrance_video_file_media_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* playPeriodicComfortMessage
    play_periodic_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* periodicComfortAudioMessageSelection
    periodic_comfort_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: str: *Optional* periodicComfortAudioFileUrl
    periodic_comfort_audio_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* periodicComfortMessageAudioFileDescription
    periodic_comfort_message_audio_file_description = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortAudioFileMediaType
    periodic_comfort_audio_file_media_type = Field(type=str, required=False, mutable=False)
    #: str: *Optional* periodicComfortVideoMessageSelection
    periodic_comfort_video_message_selection = Field(type=str, required=False, mutable=False)
    #: str: *Optional* periodicComfortVideoFileUrl
    periodic_comfort_video_file_url = Field(type=str, required=False, mutable=False)
    #: str: *Optional* periodicComfortMessageVideoFileDescription
    periodic_comfort_message_video_file_description = Field(
        type=str, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortVideoFileMediaType
    periodic_comfort_video_file_media_type = Field(type=str, required=False, mutable=False)
    #: bool: *Required* enableMediaOnHoldForQueuedCalls
    enable_media_on_hold_for_queued_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.CallCenterMediaOnHoldSourceRead16: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead16, required=True, mutable=False,
    )
    #: bool: *Optional* mediaOnHoldUseAlternateSourceForInternalCalls
    media_on_hold_use_alternate_source_for_internal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: OCI.CallCenterMediaOnHoldSourceRead16: *Optional* mediaOnHoldInternalSource
    media_on_hold_internal_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead16, required=False, mutable=False,
    )


class GroupCallCenterGetAnnouncementResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest17()``.

    Replaced by ``GroupCallCenterGetAnnouncementResponse17sp4()``
    """

    _ELEMENTS = (
        E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
        E("mandatory_entrance_message", "mandatoryEntranceMessage", bool, is_required=True),
        E(
            "entrance_audio_message_selection", "entranceAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "entrance_message_audio_url_list", "entranceMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_audio_file_list", "entranceMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_audio_media_type_list", "entranceMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
        E(
            "entrance_message_video_url_list", "entranceMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_video_file_list", "entranceMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_video_media_type_list", "entranceMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "play_periodic_comfort_message", "playPeriodicComfortMessage", bool,
            is_required=True,
        ),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E(
            "periodic_comfort_audio_message_selection",
            "periodicComfortAudioMessageSelection", str, is_required=True,
        ),
        E(
            "periodic_comfort_message_audio_url_list",
            "periodicComfortMessageAudioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_file_list",
            "periodicComfortMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_media_type_list",
            "periodicComfortMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "periodic_comfort_video_message_selection",
            "periodicComfortVideoMessageSelection", str,
        ),
        E(
            "periodic_comfort_message_video_url_list",
            "periodicComfortMessageVideoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_file_list",
            "periodicComfortMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_media_type_list",
            "periodicComfortMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "enable_media_on_hold_for_queued_calls", "enableMediaOnHoldForQueuedCalls",
            bool, is_required=True,
        ),
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead17, is_complex=True, is_required=True,
        ),
        E(
            "media_on_hold_use_alternate_source_for_internal_calls",
            "mediaOnHoldUseAlternateSourceForInternalCalls", bool,
        ),
        E(
            "media_on_hold_internal_source", "mediaOnHoldInternalSource",
            OCI.CallCenterMediaOnHoldSourceRead17, is_complex=True,
        ),
        E("play_whisper_message", "playWhisperMessage", bool),
        E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
        E(
            "whisper_message_audio_url_list", "whisperMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_audio_file_list", "whisperMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_audio_media_type_list", "whisperMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
        E(
            "whisper_message_video_url_list", "whisperMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_video_file_list", "whisperMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_video_media_type_list", "whisperMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "estimated_wait_message_options_read", "estimatedWaitMessageOptionsRead",
            OCI.EstimatedWaitMessageOptionsRead, is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* playEntranceMessage
    play_entrance_message = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mandatoryEntranceMessage
    mandatory_entrance_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* entranceAudioMessageSelection
    entrance_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageAudioUrlList
    entrance_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageAudioFileList
    entrance_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageAudioMediaTypeList
    entrance_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* entranceVideoMessageSelection
    entrance_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageVideoUrlList
    entrance_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageVideoFileList
    entrance_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageVideoMediaTypeList
    entrance_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* playPeriodicComfortMessage
    play_periodic_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* periodicComfortAudioMessageSelection
    periodic_comfort_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageAudioUrlList
    periodic_comfort_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageAudioFileList
    periodic_comfort_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageAudioMediaTypeList
    periodic_comfort_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortVideoMessageSelection
    periodic_comfort_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageVideoUrlList
    periodic_comfort_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageVideoFileList
    periodic_comfort_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageVideoMediaTypeList
    periodic_comfort_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* enableMediaOnHoldForQueuedCalls
    enable_media_on_hold_for_queued_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.CallCenterMediaOnHoldSourceRead17: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead17, required=True, mutable=False,
    )
    #: bool: *Optional* mediaOnHoldUseAlternateSourceForInternalCalls
    media_on_hold_use_alternate_source_for_internal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: OCI.CallCenterMediaOnHoldSourceRead17: *Optional* mediaOnHoldInternalSource
    media_on_hold_internal_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead17, required=False, mutable=False,
    )
    #: bool: *Optional* playWhisperMessage
    play_whisper_message = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* whisperAudioMessageSelection
    whisper_audio_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageAudioUrlList
    whisper_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageAudioFileList
    whisper_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageAudioMediaTypeList
    whisper_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* whisperVideoMessageSelection
    whisper_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageVideoUrlList
    whisper_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageVideoFileList
    whisper_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageVideoMediaTypeList
    whisper_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: OCI.EstimatedWaitMessageOptionsRead: *Required* estimatedWaitMessageOptionsRead
    estimated_wait_message_options_read = Field(
        type=OCI.EstimatedWaitMessageOptionsRead, required=True, mutable=False,
    )


class GroupCallCenterGetAnnouncementResponse17sp4(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest17sp4()``.

    """

    _ELEMENTS = (
        E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
        E("mandatory_entrance_message", "mandatoryEntranceMessage", bool, is_required=True),
        E(
            "entrance_audio_message_selection", "entranceAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "entrance_message_audio_url_list", "entranceMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_audio_file_list", "entranceMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_audio_media_type_list", "entranceMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
        E(
            "entrance_message_video_url_list", "entranceMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_video_file_list", "entranceMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_video_media_type_list", "entranceMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "play_periodic_comfort_message", "playPeriodicComfortMessage", bool,
            is_required=True,
        ),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E(
            "periodic_comfort_audio_message_selection",
            "periodicComfortAudioMessageSelection", str, is_required=True,
        ),
        E(
            "periodic_comfort_message_audio_url_list",
            "periodicComfortMessageAudioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_file_list",
            "periodicComfortMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_media_type_list",
            "periodicComfortMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "periodic_comfort_video_message_selection",
            "periodicComfortVideoMessageSelection", str,
        ),
        E(
            "periodic_comfort_message_video_url_list",
            "periodicComfortMessageVideoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_file_list",
            "periodicComfortMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_media_type_list",
            "periodicComfortMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "enable_media_on_hold_for_queued_calls", "enableMediaOnHoldForQueuedCalls",
            bool, is_required=True,
        ),
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead17, is_complex=True, is_required=True,
        ),
        E(
            "media_on_hold_use_alternate_source_for_internal_calls",
            "mediaOnHoldUseAlternateSourceForInternalCalls", bool,
        ),
        E(
            "media_on_hold_internal_source", "mediaOnHoldInternalSource",
            OCI.CallCenterMediaOnHoldSourceRead17, is_complex=True,
        ),
        E("play_whisper_message", "playWhisperMessage", bool),
        E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
        E(
            "whisper_message_audio_url_list", "whisperMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_audio_file_list", "whisperMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_audio_media_type_list", "whisperMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
        E(
            "whisper_message_video_url_list", "whisperMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_video_file_list", "whisperMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_video_media_type_list", "whisperMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "estimated_wait_message_options_read", "estimatedWaitMessageOptionsRead",
            OCI.EstimatedWaitMessageOptionsRead17sp4, is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* playEntranceMessage
    play_entrance_message = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mandatoryEntranceMessage
    mandatory_entrance_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* entranceAudioMessageSelection
    entrance_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageAudioUrlList
    entrance_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageAudioFileList
    entrance_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageAudioMediaTypeList
    entrance_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* entranceVideoMessageSelection
    entrance_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageVideoUrlList
    entrance_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageVideoFileList
    entrance_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageVideoMediaTypeList
    entrance_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* playPeriodicComfortMessage
    play_periodic_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* periodicComfortAudioMessageSelection
    periodic_comfort_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageAudioUrlList
    periodic_comfort_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageAudioFileList
    periodic_comfort_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageAudioMediaTypeList
    periodic_comfort_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortVideoMessageSelection
    periodic_comfort_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageVideoUrlList
    periodic_comfort_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageVideoFileList
    periodic_comfort_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageVideoMediaTypeList
    periodic_comfort_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* enableMediaOnHoldForQueuedCalls
    enable_media_on_hold_for_queued_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.CallCenterMediaOnHoldSourceRead17: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead17, required=True, mutable=False,
    )
    #: bool: *Optional* mediaOnHoldUseAlternateSourceForInternalCalls
    media_on_hold_use_alternate_source_for_internal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: OCI.CallCenterMediaOnHoldSourceRead17: *Optional* mediaOnHoldInternalSource
    media_on_hold_internal_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead17, required=False, mutable=False,
    )
    #: bool: *Optional* playWhisperMessage
    play_whisper_message = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* whisperAudioMessageSelection
    whisper_audio_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageAudioUrlList
    whisper_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageAudioFileList
    whisper_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageAudioMediaTypeList
    whisper_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* whisperVideoMessageSelection
    whisper_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageVideoUrlList
    whisper_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageVideoFileList
    whisper_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageVideoMediaTypeList
    whisper_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: OCI.EstimatedWaitMessageOptionsRead17sp4: *Required*
    #: estimatedWaitMessageOptionsRead
    estimated_wait_message_options_read = Field(
        type=OCI.EstimatedWaitMessageOptionsRead17sp4, required=True, mutable=False,
    )


class GroupCallCenterGetAnnouncementResponse19(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest19()``.

    """

    _ELEMENTS = (
        E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
        E("mandatory_entrance_message", "mandatoryEntranceMessage", bool, is_required=True),
        E(
            "entrance_audio_message_selection", "entranceAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "entrance_message_audio_url_list", "entranceMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_audio_file_list", "entranceMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_audio_media_type_list", "entranceMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
        E(
            "entrance_message_video_url_list", "entranceMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_video_file_list", "entranceMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_video_media_type_list", "entranceMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "play_periodic_comfort_message", "playPeriodicComfortMessage", bool,
            is_required=True,
        ),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E(
            "periodic_comfort_audio_message_selection",
            "periodicComfortAudioMessageSelection", str, is_required=True,
        ),
        E(
            "periodic_comfort_message_audio_url_list",
            "periodicComfortMessageAudioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_file_list",
            "periodicComfortMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_media_type_list",
            "periodicComfortMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "periodic_comfort_video_message_selection",
            "periodicComfortVideoMessageSelection", str,
        ),
        E(
            "periodic_comfort_message_video_url_list",
            "periodicComfortMessageVideoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_file_list",
            "periodicComfortMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_media_type_list",
            "periodicComfortMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "enable_media_on_hold_for_queued_calls", "enableMediaOnHoldForQueuedCalls",
            bool, is_required=True,
        ),
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead19, is_complex=True, is_required=True,
        ),
        E(
            "media_on_hold_use_alternate_source_for_internal_calls",
            "mediaOnHoldUseAlternateSourceForInternalCalls", bool,
        ),
        E(
            "media_on_hold_internal_source", "mediaOnHoldInternalSource",
            OCI.CallCenterMediaOnHoldSourceRead19, is_complex=True,
        ),
        E("play_whisper_message", "playWhisperMessage", bool),
        E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
        E(
            "whisper_message_audio_url_list", "whisperMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_audio_file_list", "whisperMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_audio_media_type_list", "whisperMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
        E(
            "whisper_message_video_url_list", "whisperMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_video_file_list", "whisperMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_video_media_type_list", "whisperMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "estimated_wait_message_options_read", "estimatedWaitMessageOptionsRead",
            OCI.EstimatedWaitMessageOptionsRead17sp4, is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* playEntranceMessage
    play_entrance_message = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mandatoryEntranceMessage
    mandatory_entrance_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* entranceAudioMessageSelection
    entrance_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageAudioUrlList
    entrance_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageAudioFileList
    entrance_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageAudioMediaTypeList
    entrance_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* entranceVideoMessageSelection
    entrance_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageVideoUrlList
    entrance_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageVideoFileList
    entrance_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageVideoMediaTypeList
    entrance_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* playPeriodicComfortMessage
    play_periodic_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* periodicComfortAudioMessageSelection
    periodic_comfort_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageAudioUrlList
    periodic_comfort_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageAudioFileList
    periodic_comfort_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageAudioMediaTypeList
    periodic_comfort_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortVideoMessageSelection
    periodic_comfort_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageVideoUrlList
    periodic_comfort_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageVideoFileList
    periodic_comfort_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageVideoMediaTypeList
    periodic_comfort_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* enableMediaOnHoldForQueuedCalls
    enable_media_on_hold_for_queued_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.CallCenterMediaOnHoldSourceRead19: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead19, required=True, mutable=False,
    )
    #: bool: *Optional* mediaOnHoldUseAlternateSourceForInternalCalls
    media_on_hold_use_alternate_source_for_internal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: OCI.CallCenterMediaOnHoldSourceRead19: *Optional* mediaOnHoldInternalSource
    media_on_hold_internal_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead19, required=False, mutable=False,
    )
    #: bool: *Optional* playWhisperMessage
    play_whisper_message = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* whisperAudioMessageSelection
    whisper_audio_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageAudioUrlList
    whisper_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageAudioFileList
    whisper_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageAudioMediaTypeList
    whisper_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* whisperVideoMessageSelection
    whisper_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageVideoUrlList
    whisper_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageVideoFileList
    whisper_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageVideoMediaTypeList
    whisper_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: OCI.EstimatedWaitMessageOptionsRead17sp4: *Required*
    #: estimatedWaitMessageOptionsRead
    estimated_wait_message_options_read = Field(
        type=OCI.EstimatedWaitMessageOptionsRead17sp4, required=True, mutable=False,
    )


class GroupCallCenterGetAnnouncementResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest20()``.

    """

    _ELEMENTS = (
        E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
        E("mandatory_entrance_message", "mandatoryEntranceMessage", bool, is_required=True),
        E(
            "entrance_audio_message_selection", "entranceAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "entrance_message_audio_url_list", "entranceMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_audio_file_list", "entranceMessageAudioFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
        E(
            "entrance_message_video_url_list", "entranceMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_video_file_list", "entranceMessageVideoFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E(
            "play_periodic_comfort_message", "playPeriodicComfortMessage", bool,
            is_required=True,
        ),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E(
            "periodic_comfort_audio_message_selection",
            "periodicComfortAudioMessageSelection", str, is_required=True,
        ),
        E(
            "periodic_comfort_message_audio_url_list",
            "periodicComfortMessageAudioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_file_list",
            "periodicComfortMessageAudioFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E(
            "periodic_comfort_video_message_selection",
            "periodicComfortVideoMessageSelection", str,
        ),
        E(
            "periodic_comfort_message_video_url_list",
            "periodicComfortMessageVideoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_file_list",
            "periodicComfortMessageVideoFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E(
            "enable_media_on_hold_for_queued_calls", "enableMediaOnHoldForQueuedCalls",
            bool, is_required=True,
        ),
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead20, is_complex=True, is_required=True,
        ),
        E(
            "media_on_hold_use_alternate_source_for_internal_calls",
            "mediaOnHoldUseAlternateSourceForInternalCalls", bool,
        ),
        E(
            "media_on_hold_internal_source", "mediaOnHoldInternalSource",
            OCI.CallCenterMediaOnHoldSourceRead20, is_complex=True,
        ),
        E("play_whisper_message", "playWhisperMessage", bool),
        E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
        E(
            "whisper_message_audio_url_list", "whisperMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_audio_file_list", "whisperMessageAudioFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
        E(
            "whisper_message_video_url_list", "whisperMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_video_file_list", "whisperMessageVideoFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E(
            "estimated_wait_message_options_read", "estimatedWaitMessageOptionsRead",
            OCI.EstimatedWaitMessageOptionsRead17sp4, is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* playEntranceMessage
    play_entrance_message = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mandatoryEntranceMessage
    mandatory_entrance_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* entranceAudioMessageSelection
    entrance_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageAudioUrlList
    entrance_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* entranceMessageAudioFileList
    entrance_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Optional* entranceVideoMessageSelection
    entrance_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageVideoUrlList
    entrance_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* entranceMessageVideoFileList
    entrance_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: bool: *Required* playPeriodicComfortMessage
    play_periodic_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* periodicComfortAudioMessageSelection
    periodic_comfort_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageAudioUrlList
    periodic_comfort_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional*
    #: periodicComfortMessageAudioFileList
    periodic_comfort_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortVideoMessageSelection
    periodic_comfort_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageVideoUrlList
    periodic_comfort_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional*
    #: periodicComfortMessageVideoFileList
    periodic_comfort_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: bool: *Required* enableMediaOnHoldForQueuedCalls
    enable_media_on_hold_for_queued_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.CallCenterMediaOnHoldSourceRead20: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead20, required=True, mutable=False,
    )
    #: bool: *Optional* mediaOnHoldUseAlternateSourceForInternalCalls
    media_on_hold_use_alternate_source_for_internal_calls = Field(
        type=bool, required=False, mutable=False,
    )
    #: OCI.CallCenterMediaOnHoldSourceRead20: *Optional* mediaOnHoldInternalSource
    media_on_hold_internal_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead20, required=False, mutable=False,
    )
    #: bool: *Optional* playWhisperMessage
    play_whisper_message = Field(type=bool, required=False, mutable=False)
    #: str: *Optional* whisperAudioMessageSelection
    whisper_audio_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageAudioUrlList
    whisper_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* whisperMessageAudioFileList
    whisper_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Optional* whisperVideoMessageSelection
    whisper_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageVideoUrlList
    whisper_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* whisperMessageVideoFileList
    whisper_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: OCI.EstimatedWaitMessageOptionsRead17sp4: *Required*
    #: estimatedWaitMessageOptionsRead
    estimated_wait_message_options_read = Field(
        type=OCI.EstimatedWaitMessageOptionsRead17sp4, required=True, mutable=False,
    )


class GroupCallCenterGetDNISAnnouncementResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISAnnouncementResponse()``.

    Replaced by ``GroupCallCenterGetDNISAnnouncementResponse17sp4()``
    """

    _ELEMENTS = (
        E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
        E("mandatory_entrance_message", "mandatoryEntranceMessage", bool, is_required=True),
        E(
            "entrance_audio_message_selection", "entranceAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "entrance_message_audio_url_list", "entranceMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_audio_file_list", "entranceMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_audio_media_type_list", "entranceMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
        E(
            "entrance_message_video_url_list", "entranceMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_video_file_list", "entranceMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_video_media_type_list", "entranceMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "play_periodic_comfort_message", "playPeriodicComfortMessage", bool,
            is_required=True,
        ),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E(
            "periodic_comfort_audio_message_selection",
            "periodicComfortAudioMessageSelection", str, is_required=True,
        ),
        E(
            "periodic_comfort_message_audio_url_list",
            "periodicComfortMessageAudioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_file_list",
            "periodicComfortMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_media_type_list",
            "periodicComfortMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "periodic_comfort_video_message_selection",
            "periodicComfortVideoMessageSelection", str,
        ),
        E(
            "periodic_comfort_message_video_url_list",
            "periodicComfortMessageVideoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_file_list",
            "periodicComfortMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_media_type_list",
            "periodicComfortMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "enable_media_on_hold_for_queued_calls", "enableMediaOnHoldForQueuedCalls",
            bool, is_required=True,
        ),
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead17, is_complex=True, is_required=True,
        ),
        E("play_whisper_message", "playWhisperMessage", bool, is_required=True),
        E(
            "whisper_audio_message_selection", "whisperAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "whisper_message_audio_url_list", "whisperMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_audio_file_list", "whisperMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_audio_media_type_list", "whisperMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
        E(
            "whisper_message_video_url_list", "whisperMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_video_file_list", "whisperMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_video_media_type_list", "whisperMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "estimated_wait_message_options_read", "estimatedWaitMessageOptionsRead",
            OCI.EstimatedWaitMessageOptionsRead, is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* playEntranceMessage
    play_entrance_message = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mandatoryEntranceMessage
    mandatory_entrance_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* entranceAudioMessageSelection
    entrance_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageAudioUrlList
    entrance_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageAudioFileList
    entrance_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageAudioMediaTypeList
    entrance_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* entranceVideoMessageSelection
    entrance_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageVideoUrlList
    entrance_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageVideoFileList
    entrance_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageVideoMediaTypeList
    entrance_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* playPeriodicComfortMessage
    play_periodic_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* periodicComfortAudioMessageSelection
    periodic_comfort_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageAudioUrlList
    periodic_comfort_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageAudioFileList
    periodic_comfort_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageAudioMediaTypeList
    periodic_comfort_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortVideoMessageSelection
    periodic_comfort_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageVideoUrlList
    periodic_comfort_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageVideoFileList
    periodic_comfort_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageVideoMediaTypeList
    periodic_comfort_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* enableMediaOnHoldForQueuedCalls
    enable_media_on_hold_for_queued_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.CallCenterMediaOnHoldSourceRead17: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead17, required=True, mutable=False,
    )
    #: bool: *Required* playWhisperMessage
    play_whisper_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* whisperAudioMessageSelection
    whisper_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageAudioUrlList
    whisper_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageAudioFileList
    whisper_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageAudioMediaTypeList
    whisper_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* whisperVideoMessageSelection
    whisper_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageVideoUrlList
    whisper_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageVideoFileList
    whisper_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageVideoMediaTypeList
    whisper_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: OCI.EstimatedWaitMessageOptionsRead: *Required* estimatedWaitMessageOptionsRead
    estimated_wait_message_options_read = Field(
        type=OCI.EstimatedWaitMessageOptionsRead, required=True, mutable=False,
    )


class GroupCallCenterGetDNISAnnouncementResponse17sp4(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISAnnouncementResponse17sp4()``.

    """

    _ELEMENTS = (
        E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
        E("mandatory_entrance_message", "mandatoryEntranceMessage", bool, is_required=True),
        E(
            "entrance_audio_message_selection", "entranceAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "entrance_message_audio_url_list", "entranceMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_audio_file_list", "entranceMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_audio_media_type_list", "entranceMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
        E(
            "entrance_message_video_url_list", "entranceMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_video_file_list", "entranceMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_video_media_type_list", "entranceMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "play_periodic_comfort_message", "playPeriodicComfortMessage", bool,
            is_required=True,
        ),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E(
            "periodic_comfort_audio_message_selection",
            "periodicComfortAudioMessageSelection", str, is_required=True,
        ),
        E(
            "periodic_comfort_message_audio_url_list",
            "periodicComfortMessageAudioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_file_list",
            "periodicComfortMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_media_type_list",
            "periodicComfortMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "periodic_comfort_video_message_selection",
            "periodicComfortVideoMessageSelection", str,
        ),
        E(
            "periodic_comfort_message_video_url_list",
            "periodicComfortMessageVideoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_file_list",
            "periodicComfortMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_media_type_list",
            "periodicComfortMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "enable_media_on_hold_for_queued_calls", "enableMediaOnHoldForQueuedCalls",
            bool, is_required=True,
        ),
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead17, is_complex=True, is_required=True,
        ),
        E("play_whisper_message", "playWhisperMessage", bool, is_required=True),
        E(
            "whisper_audio_message_selection", "whisperAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "whisper_message_audio_url_list", "whisperMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_audio_file_list", "whisperMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_audio_media_type_list", "whisperMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
        E(
            "whisper_message_video_url_list", "whisperMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_video_file_list", "whisperMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_video_media_type_list", "whisperMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "estimated_wait_message_options_read", "estimatedWaitMessageOptionsRead",
            OCI.EstimatedWaitMessageOptionsRead17sp4, is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* playEntranceMessage
    play_entrance_message = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mandatoryEntranceMessage
    mandatory_entrance_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* entranceAudioMessageSelection
    entrance_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageAudioUrlList
    entrance_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageAudioFileList
    entrance_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageAudioMediaTypeList
    entrance_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* entranceVideoMessageSelection
    entrance_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageVideoUrlList
    entrance_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageVideoFileList
    entrance_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageVideoMediaTypeList
    entrance_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* playPeriodicComfortMessage
    play_periodic_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* periodicComfortAudioMessageSelection
    periodic_comfort_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageAudioUrlList
    periodic_comfort_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageAudioFileList
    periodic_comfort_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageAudioMediaTypeList
    periodic_comfort_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortVideoMessageSelection
    periodic_comfort_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageVideoUrlList
    periodic_comfort_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageVideoFileList
    periodic_comfort_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageVideoMediaTypeList
    periodic_comfort_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* enableMediaOnHoldForQueuedCalls
    enable_media_on_hold_for_queued_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.CallCenterMediaOnHoldSourceRead17: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead17, required=True, mutable=False,
    )
    #: bool: *Required* playWhisperMessage
    play_whisper_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* whisperAudioMessageSelection
    whisper_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageAudioUrlList
    whisper_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageAudioFileList
    whisper_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageAudioMediaTypeList
    whisper_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* whisperVideoMessageSelection
    whisper_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageVideoUrlList
    whisper_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageVideoFileList
    whisper_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageVideoMediaTypeList
    whisper_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: OCI.EstimatedWaitMessageOptionsRead17sp4: *Required*
    #: estimatedWaitMessageOptionsRead
    estimated_wait_message_options_read = Field(
        type=OCI.EstimatedWaitMessageOptionsRead17sp4, required=True, mutable=False,
    )


class GroupCallCenterGetDNISAnnouncementResponse19(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISAnnouncementRequest19()``.

    """

    _ELEMENTS = (
        E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
        E("mandatory_entrance_message", "mandatoryEntranceMessage", bool, is_required=True),
        E(
            "entrance_audio_message_selection", "entranceAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "entrance_message_audio_url_list", "entranceMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_audio_file_list", "entranceMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_audio_media_type_list", "entranceMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
        E(
            "entrance_message_video_url_list", "entranceMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_video_file_list", "entranceMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "entrance_message_video_media_type_list", "entranceMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "play_periodic_comfort_message", "playPeriodicComfortMessage", bool,
            is_required=True,
        ),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E(
            "periodic_comfort_audio_message_selection",
            "periodicComfortAudioMessageSelection", str, is_required=True,
        ),
        E(
            "periodic_comfort_message_audio_url_list",
            "periodicComfortMessageAudioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_file_list",
            "periodicComfortMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_media_type_list",
            "periodicComfortMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "periodic_comfort_video_message_selection",
            "periodicComfortVideoMessageSelection", str,
        ),
        E(
            "periodic_comfort_message_video_url_list",
            "periodicComfortMessageVideoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_file_list",
            "periodicComfortMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_media_type_list",
            "periodicComfortMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "enable_media_on_hold_for_queued_calls", "enableMediaOnHoldForQueuedCalls",
            bool, is_required=True,
        ),
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead19, is_complex=True, is_required=True,
        ),
        E("play_whisper_message", "playWhisperMessage", bool, is_required=True),
        E(
            "whisper_audio_message_selection", "whisperAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "whisper_message_audio_url_list", "whisperMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_audio_file_list", "whisperMessageAudioFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_audio_media_type_list", "whisperMessageAudioMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
        E(
            "whisper_message_video_url_list", "whisperMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_video_file_list", "whisperMessageVideoFileList",
            OCI.CallCenterAnnouncementDescriptionList, is_complex=True,
        ),
        E(
            "whisper_message_video_media_type_list", "whisperMessageVideoMediaTypeList",
            OCI.CallCenterAnnouncementMediaFileTypeList, is_complex=True,
        ),
        E(
            "estimated_wait_message_options_read", "estimatedWaitMessageOptionsRead",
            OCI.EstimatedWaitMessageOptionsRead17sp4, is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* playEntranceMessage
    play_entrance_message = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mandatoryEntranceMessage
    mandatory_entrance_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* entranceAudioMessageSelection
    entrance_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageAudioUrlList
    entrance_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageAudioFileList
    entrance_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageAudioMediaTypeList
    entrance_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* entranceVideoMessageSelection
    entrance_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageVideoUrlList
    entrance_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* entranceMessageVideoFileList
    entrance_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: entranceMessageVideoMediaTypeList
    entrance_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* playPeriodicComfortMessage
    play_periodic_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* periodicComfortAudioMessageSelection
    periodic_comfort_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageAudioUrlList
    periodic_comfort_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageAudioFileList
    periodic_comfort_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageAudioMediaTypeList
    periodic_comfort_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortVideoMessageSelection
    periodic_comfort_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageVideoUrlList
    periodic_comfort_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional*
    #: periodicComfortMessageVideoFileList
    periodic_comfort_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: periodicComfortMessageVideoMediaTypeList
    periodic_comfort_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: bool: *Required* enableMediaOnHoldForQueuedCalls
    enable_media_on_hold_for_queued_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.CallCenterMediaOnHoldSourceRead19: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead19, required=True, mutable=False,
    )
    #: bool: *Required* playWhisperMessage
    play_whisper_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* whisperAudioMessageSelection
    whisper_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageAudioUrlList
    whisper_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageAudioFileList
    whisper_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageAudioMediaTypeList
    whisper_message_audio_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: str: *Optional* whisperVideoMessageSelection
    whisper_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageVideoUrlList
    whisper_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementDescriptionList: *Optional* whisperMessageVideoFileList
    whisper_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementDescriptionList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementMediaFileTypeList: *Optional*
    #: whisperMessageVideoMediaTypeList
    whisper_message_video_media_type_list = Field(
        type=OCI.CallCenterAnnouncementMediaFileTypeList, required=False, mutable=False,
    )
    #: OCI.EstimatedWaitMessageOptionsRead17sp4: *Required*
    #: estimatedWaitMessageOptionsRead
    estimated_wait_message_options_read = Field(
        type=OCI.EstimatedWaitMessageOptionsRead17sp4, required=True, mutable=False,
    )


class GroupCallCenterGetDNISAnnouncementResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISAnnouncementRequest20()``.

    """

    _ELEMENTS = (
        E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
        E("mandatory_entrance_message", "mandatoryEntranceMessage", bool, is_required=True),
        E(
            "entrance_audio_message_selection", "entranceAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "entrance_message_audio_url_list", "entranceMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_audio_file_list", "entranceMessageAudioFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
        E(
            "entrance_message_video_url_list", "entranceMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "entrance_message_video_file_list", "entranceMessageVideoFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E(
            "play_periodic_comfort_message", "playPeriodicComfortMessage", bool,
            is_required=True,
        ),
        E(
            "time_between_comfort_messages_seconds", "timeBetweenComfortMessagesSeconds",
            int, is_required=True,
        ),
        E(
            "periodic_comfort_audio_message_selection",
            "periodicComfortAudioMessageSelection", str, is_required=True,
        ),
        E(
            "periodic_comfort_message_audio_url_list",
            "periodicComfortMessageAudioUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_audio_file_list",
            "periodicComfortMessageAudioFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E(
            "periodic_comfort_video_message_selection",
            "periodicComfortVideoMessageSelection", str,
        ),
        E(
            "periodic_comfort_message_video_url_list",
            "periodicComfortMessageVideoUrlList", OCI.CallCenterAnnouncementURLList,
            is_complex=True,
        ),
        E(
            "periodic_comfort_message_video_file_list",
            "periodicComfortMessageVideoFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E(
            "enable_media_on_hold_for_queued_calls", "enableMediaOnHoldForQueuedCalls",
            bool, is_required=True,
        ),
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead20, is_complex=True, is_required=True,
        ),
        E("play_whisper_message", "playWhisperMessage", bool, is_required=True),
        E(
            "whisper_audio_message_selection", "whisperAudioMessageSelection", str,
            is_required=True,
        ),
        E(
            "whisper_message_audio_url_list", "whisperMessageAudioUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_audio_file_list", "whisperMessageAudioFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
        E(
            "whisper_message_video_url_list", "whisperMessageVideoUrlList",
            OCI.CallCenterAnnouncementURLList, is_complex=True,
        ),
        E(
            "whisper_message_video_file_list", "whisperMessageVideoFileList",
            OCI.CallCenterAnnouncementFileListRead20, is_complex=True,
        ),
        E(
            "estimated_wait_message_options_read", "estimatedWaitMessageOptionsRead",
            OCI.EstimatedWaitMessageOptionsRead17sp4, is_complex=True, is_required=True,
        ),
    )

    #: bool: *Required* playEntranceMessage
    play_entrance_message = Field(type=bool, required=True, mutable=False)
    #: bool: *Required* mandatoryEntranceMessage
    mandatory_entrance_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* entranceAudioMessageSelection
    entrance_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageAudioUrlList
    entrance_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* entranceMessageAudioFileList
    entrance_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Optional* entranceVideoMessageSelection
    entrance_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* entranceMessageVideoUrlList
    entrance_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* entranceMessageVideoFileList
    entrance_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: bool: *Required* playPeriodicComfortMessage
    play_periodic_comfort_message = Field(type=bool, required=True, mutable=False)
    #: int: *Required* timeBetweenComfortMessagesSeconds
    time_between_comfort_messages_seconds = Field(type=int, required=True, mutable=False)
    #: str: *Required* periodicComfortAudioMessageSelection
    periodic_comfort_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageAudioUrlList
    periodic_comfort_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional*
    #: periodicComfortMessageAudioFileList
    periodic_comfort_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Optional* periodicComfortVideoMessageSelection
    periodic_comfort_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* periodicComfortMessageVideoUrlList
    periodic_comfort_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional*
    #: periodicComfortMessageVideoFileList
    periodic_comfort_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: bool: *Required* enableMediaOnHoldForQueuedCalls
    enable_media_on_hold_for_queued_calls = Field(type=bool, required=True, mutable=False)
    #: OCI.CallCenterMediaOnHoldSourceRead20: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead20, required=True, mutable=False,
    )
    #: bool: *Required* playWhisperMessage
    play_whisper_message = Field(type=bool, required=True, mutable=False)
    #: str: *Required* whisperAudioMessageSelection
    whisper_audio_message_selection = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageAudioUrlList
    whisper_message_audio_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* whisperMessageAudioFileList
    whisper_message_audio_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: str: *Optional* whisperVideoMessageSelection
    whisper_video_message_selection = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterAnnouncementURLList: *Optional* whisperMessageVideoUrlList
    whisper_message_video_url_list = Field(
        type=OCI.CallCenterAnnouncementURLList, required=False, mutable=False,
    )
    #: OCI.CallCenterAnnouncementFileListRead20: *Optional* whisperMessageVideoFileList
    whisper_message_video_file_list = Field(
        type=OCI.CallCenterAnnouncementFileListRead20, required=False, mutable=False,
    )
    #: OCI.EstimatedWaitMessageOptionsRead17sp4: *Required*
    #: estimatedWaitMessageOptionsRead
    estimated_wait_message_options_read = Field(
        type=OCI.EstimatedWaitMessageOptionsRead17sp4, required=True, mutable=False,
    )


class GroupOutgoingCallingPlanDigitPlanCallMeNowGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanDigitPlanCallMeNowGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions",
            OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions, is_complex=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.OutgoingCallingPlanDigitPatternCallMeNowDepartmentPermissions,
            is_complex=True, is_array=True,
        ),
    )

    #: OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions: *Optional*
    #: groupPermissions
    group_permissions = Field(
        type=OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions, required=False,
        mutable=False,
    )
    #: list(OCI.OutgoingCallingPlanDigitPatternCallMeNowDepartmentPermissions): *Optional*
    #: departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupOutgoingCallingPlanDigitPlanOriginatingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanDigitPlanOriginatingGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions",
            OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions, is_complex=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.OutgoingCallingPlanDigitPatternOriginatingDepartmentPermissions,
            is_complex=True, is_array=True,
        ),
    )

    #: OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions: *Optional*
    #: groupPermissions
    group_permissions = Field(
        type=OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions, required=False,
        mutable=False,
    )
    #: list(OCI.OutgoingCallingPlanDigitPatternOriginatingDepartmentPermissions):
    #: *Optional* departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupOutgoingCallingPlanDigitPlanRedirectingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanDigitPlanRedirectingGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions",
            OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions, is_complex=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.OutgoingCallingPlanDigitPatternRedirectingDepartmentPermissions,
            is_complex=True, is_array=True,
        ),
    )

    #: OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions: *Optional*
    #: groupPermissions
    group_permissions = Field(
        type=OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions, required=False,
        mutable=False,
    )
    #: list(OCI.OutgoingCallingPlanDigitPatternRedirectingDepartmentPermissions):
    #: *Optional* departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions",
            OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions, is_complex=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowDepartmentPermissions,
            is_complex=True, is_array=True,
        ),
    )

    #: OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions: *Optional*
    #: groupPermissions
    group_permissions = Field(
        type=OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions, required=False,
        mutable=False,
    )
    #: list(OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowDepartmentPermissions):
    #: *Optional* departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupOutgoingCallingPlanPinholeDigitPlanOriginatingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanPinholeDigitPlanOriginatingGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions",
            OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions,
            is_complex=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingDepartmentPermissions,
            is_complex=True, is_array=True,
        ),
    )

    #: OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions: *Optional*
    #: groupPermissions
    group_permissions = Field(
        type=OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions,
        required=False, mutable=False,
    )
    #: list(OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingDepartmentPermissions):
    #: *Optional* departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupOutgoingCallingPlanPinholeDigitPlanRedirectingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanPinholeDigitPlanRedirectingGetListRequest()``.

    """

    _ELEMENTS = (
        E(
            "group_permissions", "groupPermissions",
            OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions,
            is_complex=True,
        ),
        E(
            "department_permissions", "departmentPermissions",
            OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingDepartmentPermissions,
            is_complex=True, is_array=True,
        ),
    )

    #: OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions: *Optional*
    #: groupPermissions
    group_permissions = Field(
        type=OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions,
        required=False, mutable=False,
    )
    #: list(OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingDepartmentPermissions):
    #: *Optional* departmentPermissions  *Array*
    department_permissions = Field(type=list, required=False, mutable=False)


class GroupRoutePointGetAnnouncementResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetAnnouncementRequest()``.

    """

    _ELEMENTS = (
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead17, is_complex=True, is_required=True,
        ),
    )

    #: OCI.CallCenterMediaOnHoldSourceRead17: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead17, required=True, mutable=False,
    )


class GroupRoutePointGetAnnouncementResponse19(OCIResponse):
    """
    Response to the ``GroupRoutePointGetAnnouncementRequest19()``.

    """

    _ELEMENTS = (
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead19, is_complex=True, is_required=True,
        ),
    )

    #: OCI.CallCenterMediaOnHoldSourceRead19: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead19, required=True, mutable=False,
    )


class GroupRoutePointGetAnnouncementResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointGetAnnouncementRequest20()``.

    """

    _ELEMENTS = (
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead20, is_complex=True, is_required=True,
        ),
    )

    #: OCI.CallCenterMediaOnHoldSourceRead20: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead20, required=True, mutable=False,
    )


class GroupRoutePointGetDNISAnnouncementResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISAnnouncementRequest()``.

    """

    _ELEMENTS = (
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead17, is_complex=True, is_required=True,
        ),
    )

    #: OCI.CallCenterMediaOnHoldSourceRead17: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead17, required=True, mutable=False,
    )


class GroupRoutePointGetDNISAnnouncementResponse19(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISAnnouncementRequest19()``.

    """

    _ELEMENTS = (
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead19, is_complex=True, is_required=True,
        ),
    )

    #: OCI.CallCenterMediaOnHoldSourceRead19: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead19, required=True, mutable=False,
    )


class GroupRoutePointGetDNISAnnouncementResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISAnnouncementRequest20()``.

    """

    _ELEMENTS = (
        E(
            "media_on_hold_source", "mediaOnHoldSource",
            OCI.CallCenterMediaOnHoldSourceRead20, is_complex=True, is_required=True,
        ),
    )

    #: OCI.CallCenterMediaOnHoldSourceRead20: *Required* mediaOnHoldSource
    media_on_hold_source = Field(
        type=OCI.CallCenterMediaOnHoldSourceRead20, required=True, mutable=False,
    )


class UserCallCenterEnhancedReportingScheduledReportGetResponse(OCIResponse):
    """
    Response to ``UserCallCenterEnhancedReportingScheduledReportGetRequest()``.

    """

    _ELEMENTS = (
        E("description", "description", str),
        E(
            "report_template", "reportTemplate", OCI.CallCenterReportTemplateKey,
            is_complex=True, is_required=True,
        ),
        E(
            "schedule", "schedule", OCI.CallCenterReportSchedule, is_complex=True,
            is_required=True,
        ),
        E("sampling_period", "samplingPeriod", str),
        E("start_day_of_week", "startDayOfWeek", str),
        E("report_time_zone", "reportTimeZone", str, is_required=True),
        E("report_date_format", "reportDateFormat", str, is_required=True),
        E("report_time_format", "reportTimeFormat", str, is_required=True),
        E(
            "report_interval", "reportInterval", OCI.CallCenterReportInterval,
            is_complex=True, is_required=True,
        ),
        E("report_format", "reportFormat", str, is_required=True),
        E("agent", "agent", OCI.CallCenterScheduledReportAgentSelectionRead, is_complex=True),
        E(
            "call_center", "callCenter", OCI.CallCenterScheduledReportCallCenterSelection,
            is_complex=True,
        ),
        E("dnis", "dnis", OCI.CallCenterScheduledReportDNISSelection, is_complex=True),
        E("call_completion_threshold_seconds", "callCompletionThresholdSeconds", int),
        E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
        E("service_level_threshold_seconds", "serviceLevelThresholdSeconds", int),
        E(
            "service_level_inclusions", "serviceLevelInclusions",
            OCI.CallCenterScheduledReportServiceLevelInclusions, is_complex=True,
        ),
        E("service_level_objective_percentage", "serviceLevelObjectivePercentage", int),
        E("abandoned_call_threshold_seconds", "abandonedCallThresholdSeconds", int),
        E("email_address", "emailAddress", str, is_required=True),
    )

    #: str: *Optional* description
    description = Field(type=str, required=False, mutable=False)
    #: OCI.CallCenterReportTemplateKey: *Required* reportTemplate
    report_template = Field(
        type=OCI.CallCenterReportTemplateKey, required=True, mutable=False,
    )
    #: OCI.CallCenterReportSchedule: *Required* schedule
    schedule = Field(type=OCI.CallCenterReportSchedule, required=True, mutable=False)
    #: str: *Optional* samplingPeriod
    sampling_period = Field(type=str, required=False, mutable=False)
    #: str: *Optional* startDayOfWeek
    start_day_of_week = Field(type=str, required=False, mutable=False)
    #: str: *Required* reportTimeZone
    report_time_zone = Field(type=str, required=True, mutable=False)
    #: str: *Required* reportDateFormat
    report_date_format = Field(type=str, required=True, mutable=False)
    #: str: *Required* reportTimeFormat
    report_time_format = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterReportInterval: *Required* reportInterval
    report_interval = Field(type=OCI.CallCenterReportInterval, required=True, mutable=False)
    #: str: *Required* reportFormat
    report_format = Field(type=str, required=True, mutable=False)
    #: OCI.CallCenterScheduledReportAgentSelectionRead: *Optional* agent
    agent = Field(
        type=OCI.CallCenterScheduledReportAgentSelectionRead, required=False,
        mutable=False,
    )
    #: OCI.CallCenterScheduledReportCallCenterSelection: *Optional* callCenter
    call_center = Field(
        type=OCI.CallCenterScheduledReportCallCenterSelection, required=False,
        mutable=False,
    )
    #: OCI.CallCenterScheduledReportDNISSelection: *Optional* dnis
    dnis = Field(
        type=OCI.CallCenterScheduledReportDNISSelection, required=False, mutable=False,
    )
    #: int: *Optional* callCompletionThresholdSeconds
    call_completion_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: int: *Optional* shortDurationThresholdSeconds
    short_duration_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: int: *Optional* serviceLevelThresholdSeconds
    service_level_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: OCI.CallCenterScheduledReportServiceLevelInclusions: *Optional*
    #: serviceLevelInclusions
    service_level_inclusions = Field(
        type=OCI.CallCenterScheduledReportServiceLevelInclusions, required=False,
        mutable=False,
    )
    #: int: *Optional* serviceLevelObjectivePercentage
    service_level_objective_percentage = Field(type=int, required=False, mutable=False)
    #: int: *Optional* abandonedCallThresholdSeconds
    abandoned_call_threshold_seconds = Field(type=int, required=False, mutable=False)
    #: str: *Required* emailAddress
    email_address = Field(type=str, required=True, mutable=False)


class GroupAutoAttendantGetInstanceResponse14(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest14()``.

    Contains the service profile information.

    Replaced By: ``GroupAutoAttendantGetInstanceResponse16()``
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("business_hours", "businessHours", str),
        E("holiday_schedule_name", "holidayScheduleName", str),
        E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
        E("name_dialing_scope", "nameDialingScope", str, is_required=True),
        E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
        E(
            "business_hours_menu", "businessHoursMenu", OCI.AutoAttendantReadMenu,
            is_complex=True, is_required=True,
        ),
        E(
            "after_hours_menu", "afterHoursMenu", OCI.AutoAttendantReadMenu,
            is_complex=True, is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* businessHours
    business_hours = Field(type=str, required=False, mutable=False)
    #: str: *Optional* holidayScheduleName
    holiday_schedule_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* extensionDialingScope
    extension_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingScope
    name_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingEntries
    name_dialing_entries = Field(type=str, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu: *Required* businessHoursMenu
    business_hours_menu = Field(type=OCI.AutoAttendantReadMenu, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu: *Required* afterHoursMenu
    after_hours_menu = Field(type=OCI.AutoAttendantReadMenu, required=True, mutable=False)


class GroupAutoAttendantGetInstanceResponse16(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest16()``.

    Contains the service profile information.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile, is_complex=True, is_required=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("business_hours", "businessHours", str),
        E("holiday_schedule_name", "holidayScheduleName", str),
        E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
        E("name_dialing_scope", "nameDialingScope", str, is_required=True),
        E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
        E(
            "business_hours_menu", "businessHoursMenu", OCI.AutoAttendantReadMenu16,
            is_complex=True, is_required=True,
        ),
        E(
            "after_hours_menu", "afterHoursMenu", OCI.AutoAttendantReadMenu16,
            is_complex=True, is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile, required=True, mutable=False,
    )
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* businessHours
    business_hours = Field(type=str, required=False, mutable=False)
    #: str: *Optional* holidayScheduleName
    holiday_schedule_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* extensionDialingScope
    extension_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingScope
    name_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingEntries
    name_dialing_entries = Field(type=str, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu16: *Required* businessHoursMenu
    business_hours_menu = Field(
        type=OCI.AutoAttendantReadMenu16, required=True, mutable=False,
    )
    #: OCI.AutoAttendantReadMenu16: *Required* afterHoursMenu
    after_hours_menu = Field(type=OCI.AutoAttendantReadMenu16, required=True, mutable=False)


class GroupAutoAttendantGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest17()``.

    Contains the service profile information.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("business_hours", "businessHours", str),
        E("holiday_schedule_name", "holidayScheduleName", str),
        E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
        E("name_dialing_scope", "nameDialingScope", str, is_required=True),
        E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
        E(
            "business_hours_menu", "businessHoursMenu", OCI.AutoAttendantReadMenu16,
            is_complex=True, is_required=True,
        ),
        E(
            "after_hours_menu", "afterHoursMenu", OCI.AutoAttendantReadMenu16,
            is_complex=True, is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: str: *Optional* businessHours
    business_hours = Field(type=str, required=False, mutable=False)
    #: str: *Optional* holidayScheduleName
    holiday_schedule_name = Field(type=str, required=False, mutable=False)
    #: str: *Required* extensionDialingScope
    extension_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingScope
    name_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingEntries
    name_dialing_entries = Field(type=str, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu16: *Required* businessHoursMenu
    business_hours_menu = Field(
        type=OCI.AutoAttendantReadMenu16, required=True, mutable=False,
    )
    #: OCI.AutoAttendantReadMenu16: *Required* afterHoursMenu
    after_hours_menu = Field(type=OCI.AutoAttendantReadMenu16, required=True, mutable=False)


class GroupAutoAttendantGetInstanceResponse17sp1(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest17sp1()``.

    Contains the service profile information.
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile17, is_complex=True, is_required=True,
        ),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
        E("name_dialing_scope", "nameDialingScope", str, is_required=True),
        E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
        E(
            "business_hours_menu", "businessHoursMenu", OCI.AutoAttendantReadMenu16,
            is_complex=True, is_required=True,
        ),
        E(
            "after_hours_menu", "afterHoursMenu", OCI.AutoAttendantReadMenu16,
            is_complex=True, is_required=True,
        ),
    )

    #: OCI.ServiceInstanceReadProfile17: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile17, required=True, mutable=False,
    )
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.TimeSchedule: *Optional* businessHours
    business_hours = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Required* extensionDialingScope
    extension_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingScope
    name_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingEntries
    name_dialing_entries = Field(type=str, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu16: *Required* businessHoursMenu
    business_hours_menu = Field(
        type=OCI.AutoAttendantReadMenu16, required=True, mutable=False,
    )
    #: OCI.AutoAttendantReadMenu16: *Required* afterHoursMenu
    after_hours_menu = Field(type=OCI.AutoAttendantReadMenu16, required=True, mutable=False)


class GroupAutoAttendantGetInstanceResponse20(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest20()``.

    Contains the service profile information.  The following elements are only used in AS
    data mode: type, use AutoAttendantType.BASIC in HSS mode.  holidayMenu.  The following
    elements are only valid for Standard Auto Attendants: holidayMenu
    """

    _ELEMENTS = (
        E(
            "service_instance_profile", "serviceInstanceProfile",
            OCI.ServiceInstanceReadProfile19sp1, is_complex=True, is_required=True,
        ),
        E("type", "type", str, is_required=True),
        E("first_digit_timeout_seconds", "firstDigitTimeoutSeconds", int, is_required=True),
        E("enable_video", "enableVideo", bool, is_required=True),
        E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
        E("holiday_schedule", "holidaySchedule", OCI.HolidaySchedule, is_complex=True),
        E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
        E("name_dialing_scope", "nameDialingScope", str, is_required=True),
        E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
        E(
            "business_hours_menu", "businessHoursMenu", OCI.AutoAttendantReadMenu20,
            is_complex=True, is_required=True,
        ),
        E(
            "after_hours_menu", "afterHoursMenu", OCI.AutoAttendantReadMenu20,
            is_complex=True, is_required=True,
        ),
        E("holiday_menu", "holidayMenu", OCI.AutoAttendantReadMenu20, is_complex=True),
        E("network_class_of_service", "networkClassOfService", str),
    )

    #: OCI.ServiceInstanceReadProfile19sp1: *Required* serviceInstanceProfile
    service_instance_profile = Field(
        type=OCI.ServiceInstanceReadProfile19sp1, required=True, mutable=False,
    )
    #: str: *Required* type
    type = Field(type=str, required=True, mutable=False)
    #: int: *Required* firstDigitTimeoutSeconds
    first_digit_timeout_seconds = Field(type=int, required=True, mutable=False)
    #: bool: *Required* enableVideo
    enable_video = Field(type=bool, required=True, mutable=False)
    #: OCI.TimeSchedule: *Optional* businessHours
    business_hours = Field(type=OCI.TimeSchedule, required=False, mutable=False)
    #: OCI.HolidaySchedule: *Optional* holidaySchedule
    holiday_schedule = Field(type=OCI.HolidaySchedule, required=False, mutable=False)
    #: str: *Required* extensionDialingScope
    extension_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingScope
    name_dialing_scope = Field(type=str, required=True, mutable=False)
    #: str: *Required* nameDialingEntries
    name_dialing_entries = Field(type=str, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu20: *Required* businessHoursMenu
    business_hours_menu = Field(
        type=OCI.AutoAttendantReadMenu20, required=True, mutable=False,
    )
    #: OCI.AutoAttendantReadMenu20: *Required* afterHoursMenu
    after_hours_menu = Field(type=OCI.AutoAttendantReadMenu20, required=True, mutable=False)
    #: OCI.AutoAttendantReadMenu20: *Optional* holidayMenu
    holiday_menu = Field(type=OCI.AutoAttendantReadMenu20, required=False, mutable=False)
    #: str: *Optional* networkClassOfService
    network_class_of_service = Field(type=str, required=False, mutable=False)


class UserCommPilotExpressSRGetResponse13mp16(OCIResponse):
    """
    Response to the ``UserCommPilotExpressSRGetRequest13mp16()``.

    """

    _ELEMENTS = (
        E("profile", "profile", str),
        E(
            "available_in_office", "availableInOffice",
            OCI.CommPilotExpressSRAvailableInOffice, is_complex=True, is_required=True,
        ),
        E(
            "available_out_of_office", "availableOutOfOffice",
            OCI.CommPilotExpressSRAvailableOutOfOffice, is_complex=True, is_required=True,
        ),
        E("busy", "busy", OCI.CommPilotExpressSRBusy, is_complex=True, is_required=True),
        E(
            "unavailable", "unavailable", OCI.CommPilotExpressSRUnavailable,
            is_complex=True, is_required=True,
        ),
    )

    #: str: *Optional* profile
    profile = Field(type=str, required=False, mutable=False)
    #: OCI.CommPilotExpressSRAvailableInOffice: *Required* availableInOffice
    available_in_office = Field(
        type=OCI.CommPilotExpressSRAvailableInOffice, required=True, mutable=False,
    )
    #: OCI.CommPilotExpressSRAvailableOutOfOffice: *Required* availableOutOfOffice
    available_out_of_office = Field(
        type=OCI.CommPilotExpressSRAvailableOutOfOffice, required=True, mutable=False,
    )
    #: OCI.CommPilotExpressSRBusy: *Required* busy
    busy = Field(type=OCI.CommPilotExpressSRBusy, required=True, mutable=False)
    #: OCI.CommPilotExpressSRUnavailable: *Required* unavailable
    unavailable = Field(type=OCI.CommPilotExpressSRUnavailable, required=True, mutable=False)


# fmt: on
# end
