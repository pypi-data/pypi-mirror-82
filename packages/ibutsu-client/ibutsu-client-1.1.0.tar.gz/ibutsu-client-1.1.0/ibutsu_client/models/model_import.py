# coding: utf-8

"""
    Ibutsu API

    A system to store and query test results  # noqa: E501

    The version of the OpenAPI document: 1.10.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ibutsu_client.configuration import Configuration


class ModelImport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'status': 'str',
        'filename': 'str',
        'format': 'str',
        'run_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'filename': 'filename',
        'format': 'format',
        'run_id': 'run_id'
    }

    def __init__(self, id=None, status=None, filename=None, format=None, run_id=None, local_vars_configuration=None):  # noqa: E501
        """ModelImport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._status = None
        self._filename = None
        self._format = None
        self._run_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if filename is not None:
            self.filename = filename
        if format is not None:
            self.format = format
        if run_id is not None:
            self.run_id = run_id

    @property
    def id(self):
        """Gets the id of this ModelImport.  # noqa: E501

        The database ID of the import  # noqa: E501

        :return: The id of this ModelImport.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelImport.

        The database ID of the import  # noqa: E501

        :param id: The id of this ModelImport.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this ModelImport.  # noqa: E501

        The current status of the import, can be one of \"pending\", \"running\", \"done\"  # noqa: E501

        :return: The status of this ModelImport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelImport.

        The current status of the import, can be one of \"pending\", \"running\", \"done\"  # noqa: E501

        :param status: The status of this ModelImport.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def filename(self):
        """Gets the filename of this ModelImport.  # noqa: E501

        The name of the file that was uploaded  # noqa: E501

        :return: The filename of this ModelImport.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ModelImport.

        The name of the file that was uploaded  # noqa: E501

        :param filename: The filename of this ModelImport.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def format(self):
        """Gets the format of this ModelImport.  # noqa: E501

        The format of the file uploaded  # noqa: E501

        :return: The format of this ModelImport.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ModelImport.

        The format of the file uploaded  # noqa: E501

        :param format: The format of this ModelImport.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def run_id(self):
        """Gets the run_id of this ModelImport.  # noqa: E501

        The ID of the run from the import  # noqa: E501

        :return: The run_id of this ModelImport.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this ModelImport.

        The ID of the run from the import  # noqa: E501

        :param run_id: The run_id of this ModelImport.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelImport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelImport):
            return True

        return self.to_dict() != other.to_dict()
