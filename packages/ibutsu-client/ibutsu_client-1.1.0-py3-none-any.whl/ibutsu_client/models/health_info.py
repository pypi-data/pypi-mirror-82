# coding: utf-8

"""
    Ibutsu API

    A system to store and query test results  # noqa: E501

    The version of the OpenAPI document: 1.10.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ibutsu_client.configuration import Configuration


class HealthInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'frontend': 'str',
        'backend': 'str',
        'api_ui': 'str'
    }

    attribute_map = {
        'frontend': 'frontend',
        'backend': 'backend',
        'api_ui': 'api_ui'
    }

    def __init__(self, frontend=None, backend=None, api_ui=None, local_vars_configuration=None):  # noqa: E501
        """HealthInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._frontend = None
        self._backend = None
        self._api_ui = None
        self.discriminator = None

        if frontend is not None:
            self.frontend = frontend
        if backend is not None:
            self.backend = backend
        if api_ui is not None:
            self.api_ui = api_ui

    @property
    def frontend(self):
        """Gets the frontend of this HealthInfo.  # noqa: E501

        The URL of the frontend  # noqa: E501

        :return: The frontend of this HealthInfo.  # noqa: E501
        :rtype: str
        """
        return self._frontend

    @frontend.setter
    def frontend(self, frontend):
        """Sets the frontend of this HealthInfo.

        The URL of the frontend  # noqa: E501

        :param frontend: The frontend of this HealthInfo.  # noqa: E501
        :type: str
        """

        self._frontend = frontend

    @property
    def backend(self):
        """Gets the backend of this HealthInfo.  # noqa: E501

        The URL of the backend  # noqa: E501

        :return: The backend of this HealthInfo.  # noqa: E501
        :rtype: str
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this HealthInfo.

        The URL of the backend  # noqa: E501

        :param backend: The backend of this HealthInfo.  # noqa: E501
        :type: str
        """

        self._backend = backend

    @property
    def api_ui(self):
        """Gets the api_ui of this HealthInfo.  # noqa: E501

        The URL to the UI for the API  # noqa: E501

        :return: The api_ui of this HealthInfo.  # noqa: E501
        :rtype: str
        """
        return self._api_ui

    @api_ui.setter
    def api_ui(self, api_ui):
        """Sets the api_ui of this HealthInfo.

        The URL to the UI for the API  # noqa: E501

        :param api_ui: The api_ui of this HealthInfo.  # noqa: E501
        :type: str
        """

        self._api_ui = api_ui

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HealthInfo):
            return True

        return self.to_dict() != other.to_dict()
