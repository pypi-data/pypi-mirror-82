# coding: utf-8

"""
    Ibutsu API

    A system to store and query test results  # noqa: E501

    The version of the OpenAPI document: 1.10.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ibutsu_client.configuration import Configuration


class Report(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'filename': 'str',
        'mimetype': 'str',
        'url': 'str',
        'download_url': 'str',
        'view_url': 'str',
        'parameters': 'ReportParameters',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'filename': 'filename',
        'mimetype': 'mimetype',
        'url': 'url',
        'download_url': 'download_url',
        'view_url': 'view_url',
        'parameters': 'parameters',
        'status': 'status'
    }

    def __init__(self, id=None, filename=None, mimetype=None, url=None, download_url=None, view_url=None, parameters=None, status=None, local_vars_configuration=None):  # noqa: E501
        """Report - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._filename = None
        self._mimetype = None
        self._url = None
        self._download_url = None
        self._view_url = None
        self._parameters = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if filename is not None:
            self.filename = filename
        if mimetype is not None:
            self.mimetype = mimetype
        if url is not None:
            self.url = url
        if download_url is not None:
            self.download_url = download_url
        if view_url is not None:
            self.view_url = view_url
        if parameters is not None:
            self.parameters = parameters
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this Report.  # noqa: E501

        Unique ID of the project  # noqa: E501

        :return: The id of this Report.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.

        Unique ID of the project  # noqa: E501

        :param id: The id of this Report.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def filename(self):
        """Gets the filename of this Report.  # noqa: E501

        The filename of the report  # noqa: E501

        :return: The filename of this Report.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Report.

        The filename of the report  # noqa: E501

        :param filename: The filename of this Report.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def mimetype(self):
        """Gets the mimetype of this Report.  # noqa: E501

        The mime type of the downloadable file  # noqa: E501

        :return: The mimetype of this Report.  # noqa: E501
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this Report.

        The mime type of the downloadable file  # noqa: E501

        :param mimetype: The mimetype of this Report.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    @property
    def url(self):
        """Gets the url of this Report.  # noqa: E501

        The URL to the downloadable report (deprecated)  # noqa: E501

        :return: The url of this Report.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Report.

        The URL to the downloadable report (deprecated)  # noqa: E501

        :param url: The url of this Report.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def download_url(self):
        """Gets the download_url of this Report.  # noqa: E501

        The URL to the downloadable report  # noqa: E501

        :return: The download_url of this Report.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Report.

        The URL to the downloadable report  # noqa: E501

        :param download_url: The download_url of this Report.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def view_url(self):
        """Gets the view_url of this Report.  # noqa: E501

        The URL to the viewable report  # noqa: E501

        :return: The view_url of this Report.  # noqa: E501
        :rtype: str
        """
        return self._view_url

    @view_url.setter
    def view_url(self, view_url):
        """Sets the view_url of this Report.

        The URL to the viewable report  # noqa: E501

        :param view_url: The view_url of this Report.  # noqa: E501
        :type: str
        """

        self._view_url = view_url

    @property
    def parameters(self):
        """Gets the parameters of this Report.  # noqa: E501


        :return: The parameters of this Report.  # noqa: E501
        :rtype: ReportParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Report.


        :param parameters: The parameters of this Report.  # noqa: E501
        :type: ReportParameters
        """

        self._parameters = parameters

    @property
    def status(self):
        """Gets the status of this Report.  # noqa: E501

        The status of the report, one of \"pending\", \"running\", \"done\"  # noqa: E501

        :return: The status of this Report.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Report.

        The status of the report, one of \"pending\", \"running\", \"done\"  # noqa: E501

        :param status: The status of this Report.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Report):
            return True

        return self.to_dict() != other.to_dict()
