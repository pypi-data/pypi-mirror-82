# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['html2image']

package_data = \
{'': ['*']}

entry_points = \
{'console_scripts': ['hti = html2image:cli_entry',
                     'html2image = html2image:cli_entry']}

setup_kwargs = {
    'name': 'html2image',
    'version': '0.1.6',
    'description': 'Package acting as a wrapper around the headless mode of existing web browsers to generate images from URLs and from HTML+CSS strings or files.',
    'long_description': '# HTML 2 Image\n[\n![PyPI](https://img.shields.io/pypi/v/html2image.svg)\n![PyPI](https://img.shields.io/pypi/pyversions/html2image.svg)\n![PyPI](https://img.shields.io/github/license/vgalin/html2image.svg)\n](https://pypi.org/project/html2image/)\n[\n![GitHub](https://img.shields.io/github/v/release/vgalin/html2image?include_prereleases)\n![GitHub](https://img.shields.io/github/languages/code-size/vgalin/html2image)\n](https://github.com/vgalin/html2image)\n\n**HTML2Image** (HTML to Image) is a lightweight **Python** package that acts as a wrapper around the **headless mode** of existing web browsers to *generate images from URLs and from HTML+CSS strings or files*.\n\nHTML2Image has been tested on Windows, Ubuntu (desktop and server) and MacOS. It is currently in a **work in progress** stage, if you encounter any issues while using it, feel free to open an issue on the GitHub page of this project.\n\n\n## Principle\n\nMost web browsers have a **Headless Mode**, which is a way to run them without displaying any graphical interface. Headless mode is mainly used for automated testings but also comes in handy if you want to take screenshots of web pages that are exact replicas of what you would see on your screen if you were using the browser yourself.\n\nHowever, for the sake of taking screenshots, headless mode is not very convenient to use. HTML2Image aims to hide the inconveniences of the browsers\' headless modes while adding useful features such as allowing to create an image from as little as a string.\n\nFor more information about headless modes :\n-   (Chrome) [https://developers.google.com/web/updates/2017/04/headless-chrome](https://developers.google.com/web/updates/2017/04/headless-chrome)\n-   (Firefox) [https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode)\n\n## Installation\nhtml2image is published on PyPI and can be installed through pip:\n\n\n```\npip install --upgrade html2image\n```\n\nIn addition to this package, at least one of the following browsers but be installed on your machine :\n-   Google Chrome (Windows, MacOS)\n-   Chromium (Linux)\n\n## Usage\n\n### Import the library and instantiate it\n```python\nfrom html2image import HtmlToImage\nhti = HtmlToImage()\n```\n\n<details>\n<summary> Possible arguments for the constructor (click to expand):</summary>\n\n-   `browser` :  Browser that will be used, set by default to `\'chrome\'` (the only browser supported by HTML2Image at the moment)\n-   `chrome_path` and  `firefox_path` : The path or the command that can be used to find the executable of a specific browser.\n-   `output_path` : Path to the folder to which taken screenshots will be outputed. Default is the current working directory of your python program.\n-   `size` : 2-Tuple reprensenting the size of the screenshots that will be taken. Default value is `(1920, 1080)`.\n-   `temp_path` : Path that will be used by html2image to put together different resources *loaded* with the `load_str` and `load_file` methods. Default value is `%TEMP%/html2image` on Windows, and `/tmp/html2image` on Linux and MacOS.\n\nYou can also change these values later: \n\n``` python\nhti.size = (500, 200)\n```\n</details>\n<br>\n\n### Image from an URL\nThe following code takes a screenshot (with a size of 800 * 400 ) of the [python.org](https://www.python.org/) webpage and save it in the current working directory as `python_org.png` :\n```python\nhti.size = (800, 400)\nhti.screenshot_url(\'https://www.python.org\', \'python_org.png\')\n\n# One line alternative :\nhti.screenshot_url(\'https://www.python.org\', \'python_org.png\', size=(800, 400))\n\n# Please note that you don\'t necessarily have to specify a size.\n```\n\nResult : \n\n![python_org_screenshot](/readme_assets/python_org.png)\n\n### Image from HTML and CSS strings\n\nThe following code generates an image from two given strings, an HTML one and a CSS one.  \n\n```python \n...\n\n# minimal html : quite unconventional but browsers can read it anyway\nmy_html_string = """\\\n<link rel="stylesheet" href="red_background.css">\n<h1> An interesting title </h1>\nThis page will be red\n"""\n\nmy_css_string = "body { background: red; }"\n\n# image from html & css string\nhti.load_str(my_html_string, as_filename=\'red_page.html\')\nhti.load_str(my_css_string, as_filename=\'red_background.css\')\n\nhti.screenshot(\'red_page.html\', \'red.png\', size=(500, 200))\n```\n\nResult: \n\n![red_screenshot](/readme_assets/red.png)\n\n### Image from HTML and CSS files\n\n``` css\n/* blue_background.css */\nbody {\n    background: blue;\n}\n```\n\n``` html\n<!-- blue_page.html -->\n<!doctype html>\n<html>\n<head>\n    <link rel="stylesheet" href="blue_background.css">\n</head>\n\n<body>\n    <h1> An interesting title </h1>\n    This page will be blue\n</body>\n</html>\n```\n\n``` python\n...\n\n# image from html & css files\nhti.load_file(\'blue_page.html\')\nhti.load_file(\'blue_background.css\')\n\nhti.screenshot(\'blue_page.html\', \'blue.png\', size=(500, 200))\n```\n\nResult: \n\n![blue_screenshot](/readme_assets/blue.png)\n\n## Using the CLI\nhtml2image comes with a CLI which you can use to generate screenshots from files and urls on the go.\n\nThe CLI is a work in progress and may be subject to changes.\nYou can call it by typing `hti` or `html2image` into a terminal.\n\nLet the CLI handle your inputs:\n```\nhti https://www.python.org style.css index.html example.svg\n```\n\nOr use arguments:\n\n| argument | description | example |\n| - | - | - |\n| -h, --help | Show help message | `hti -h` |\n| -u, --urls | Screenshot a list of URLs | `hti -u https://www.python.org` |\n| -f, --files| Screenshot a list of files| `hti -f star.svg test.html`|\n| -n, --name | Name the outputted screenshots | `hti star.svg -n red_star` |\n| -o, --output_path| Change the output path of the screenshots (default is current working directory) | `hti star.svg -o screenshot_dir` |\n| -q, --quiet| Disable all CLI\'s outputs | `hti --quiet` |\n| -v, --verbose| More details, can help debugging | `hti --verbose` |\n| --chrome_path| Specify a different chrome path ||\n| --temp_path| Specify a different temp path (where the files are loaded)||\n\n<br>\n\n## Note about the way html2image loads files\nTo better understand how to use html2image, it is important for you to know what it does with your strings and files.\n\nAs you may have noticed, html2image requires you to "load" files and strings before taking a screenshot.\n\nBehing the scenes, everything you load is sent to `temp_path`, which is set by default to `%TEMP%\\html2image` on Windows, and `/tmp/html2image` on Linux and MacOS.\n\nThis directory is used to put together all the resources that are needed to display a web page correctly, like `css`, `js`, and obviously `html` files. In other words : **everything that you load goes, by default, into the same directory**.\n\nWhen using `load_str` or `load_file`, you have the possiblity to load things under a specific name using the `as_filename` parameter, this is the name that your loaded files and strings will take when they are placed into this directory.\nThis name is important:\n-   For the HTML files, you have to pass this name as an argument to the `screenshot` method.\n-   For other files, you have to refer to this name into the HTML file that you are screenshotting.  \n    Example: You load a some CSS with `as_filename=\'my_style.css\'`. To take a screenshot with this CSS applied to your HTML, your HTML must contain the line `<link rel="stylesheet" href="my_style.css">`.\n\n## Testing\n\nOnly basic testing is available at the moment. To run tests, run PyTest at the root of the project:\n```\npython -m pytest\n```\n\n## TODO List\n-   A nice CLI (Currently in a WIP state)\n    - A better way to name the CLI\'s outputed files ?\n-   Support of other browsers, such as Firefox\n-   More extensive doc + comments\n-   PDF generation?\n-   Testing on push/PR with GitHub Actions\n',
    'author': 'vgalin',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/vgalin/html2image',
    'packages': packages,
    'package_data': package_data,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
