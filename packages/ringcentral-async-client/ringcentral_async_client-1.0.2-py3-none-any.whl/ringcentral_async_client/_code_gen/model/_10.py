from ._9 import *

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequestQueueFixedOrderAgentsItem(DataClassJsonMixin):
    extension: Optional[CreateAnsweringRuleRequestQueueFixedOrderAgentsItemExtension] = None
    index: Optional[int] = None
    """ Ordinal of an agent (call queue member) """
    

class CreateAnsweringRuleRequestQueueHoldAudioInterruptionMode(Enum):
    """ Connecting audio interruption mode """
    
    Never = 'Never'
    WhenMusicEnds = 'WhenMusicEnds'
    Periodically = 'Periodically'

class CreateAnsweringRuleRequestQueueHoldTimeExpirationAction(Enum):
    """
    Specifies the type of action to be taken after the hold time (waiting for an available call
    queue member) expires. If 'TransferToExtension' option is selected, the extension specified in
    `transfer` field is used. The default value is `Voicemail`
    
    Generated by Python OpenAPI Parser
    """
    
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'
    Voicemail = 'Voicemail'

class CreateAnsweringRuleRequestQueueMaxCallersAction(Enum):
    """
    Specifies the type of action to be taken if count of callers on hold exceeds the supported
    maximum
    
    Generated by Python OpenAPI Parser
    """
    
    Voicemail = 'Voicemail'
    Announcement = 'Announcement'
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'

class CreateAnsweringRuleRequestQueueUnconditionalForwardingItemAction(Enum):
    """ Event that initiates forwarding to the specified phone number """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequestQueueUnconditionalForwardingItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number to which the call is forwarded. In addition to common e.164 format, the following
    number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx; where xxxxxxxxxxx
    is a phone number in e.164 format (without '+' sign)
    """
    
    action: Optional[CreateAnsweringRuleRequestQueueUnconditionalForwardingItemAction] = None
    """ Event that initiates forwarding to the specified phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequestQueue(DataClassJsonMixin):
    """
    Queue settings applied for department (call queue) extension type, with the 'AgentQueue' value
    specified as a call handling action
    
    Generated by Python OpenAPI Parser
    """
    
    transfer_mode: Optional[CreateAnsweringRuleRequestQueueTransferMode] = None
    """ Specifies how calls are transferred to group members """
    
    transfer: Optional[List[CreateAnsweringRuleRequestQueueTransferItem]] = None
    """ Call transfer information """
    
    no_answer_action: Optional[CreateAnsweringRuleRequestQueueNoAnswerAction] = None
    """
    Specifies the type of action to be taken if: members are available but no one answers, or all
    members are busy/unavailable. This option is available for Business hours only. For
    simultaneous transfer mode only 'WaitPrimaryMembers' and 'WaitPrimaryAndOverflowMembers' are
    supported
    """
    
    fixed_order_agents: Optional[List[CreateAnsweringRuleRequestQueueFixedOrderAgentsItem]] = None
    """ Information on a call forwarding rule """
    
    hold_audio_interruption_mode: Optional[CreateAnsweringRuleRequestQueueHoldAudioInterruptionMode] = None
    """ Connecting audio interruption mode """
    
    hold_audio_interruption_period: Optional[int] = None
    """ Connecting audio interruption message period in seconds """
    
    hold_time_expiration_action: Optional[CreateAnsweringRuleRequestQueueHoldTimeExpirationAction] = 'Voicemail'
    """
    Specifies the type of action to be taken after the hold time (waiting for an available call
    queue member) expires. If 'TransferToExtension' option is selected, the extension specified in
    `transfer` field is used. The default value is `Voicemail`
    """
    
    agent_timeout: Optional[int] = None
    """ Maximum time in seconds to wait for a call queue member before trying the next member """
    
    wrap_up_time: Optional[int] = None
    """
    Minimum post-call wrap up time in seconds before agent status is automatically set; the value
    range is from 180 to 300
    """
    
    hold_time: Optional[int] = None
    """ Maximum hold time in seconds to wait for an available call queue member """
    
    max_callers: Optional[int] = None
    """ Maximum count of callers on hold; the limitation is 25 callers """
    
    max_callers_action: Optional[CreateAnsweringRuleRequestQueueMaxCallersAction] = None
    """
    Specifies the type of action to be taken if count of callers on hold exceeds the supported
    maximum
    """
    
    unconditional_forwarding: Optional[List[CreateAnsweringRuleRequestQueueUnconditionalForwardingItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequestTransferExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Number of department extension """
    
    partner_id: Optional[str] = None
    """
    For Partner Applications Internal identifier of an extension created by partner. The
    RingCentral supports the mapping of accounts and stores the corresponding account ID/extension
    ID for each partner ID of a client application. In request URIs partner IDs are accepted
    instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in
    response URIs contain the corresponding account IDs and extension IDs. In all request and
    response bodies these values are reflected via partnerId attributes of account and extension
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequestTransfer(DataClassJsonMixin):
    """
    Transfer settings applied for department (call queue) extension type, with
    'TransferToExtension' call handling action
    
    Generated by Python OpenAPI Parser
    """
    
    extension: Optional[CreateAnsweringRuleRequestTransferExtension] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequestVoicemailRecipient(DataClassJsonMixin):
    """ Recipient data """
    
    uri: Optional[str] = None
    """ Link to a recipient extension resource """
    
    id: Optional[int] = None
    """ Internal identifier of a recipient extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequestVoicemail(DataClassJsonMixin):
    """ Specifies whether to take a voicemail and who should do it """
    
    enabled: Optional[bool] = None
    """ If 'True' then voicemails are allowed to be received """
    
    recipient: Optional[CreateAnsweringRuleRequestVoicemailRecipient] = None
    """ Recipient data """
    

class CreateAnsweringRuleRequestGreetingsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Custom = 'Custom'
    Company = 'Company'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    AutomaticRecording = 'AutomaticRecording'

class CreateAnsweringRuleRequestGreetingsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequestGreetingsItemPreset(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a greeting resource """
    
    id: Optional[str] = None
    """ Internal identifier of a greeting """
    
    name: Optional[str] = None
    """ Name of a greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequestGreetingsItemCustom(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a custom user greeting """
    
    id: Optional[str] = None
    """ Internal identifier of a custom user greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequestGreetingsItem(DataClassJsonMixin):
    type: Optional[CreateAnsweringRuleRequestGreetingsItemType] = None
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    usage_type: Optional[CreateAnsweringRuleRequestGreetingsItemUsageType] = None
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    """
    
    preset: Optional[CreateAnsweringRuleRequestGreetingsItemPreset] = None
    custom: Optional[CreateAnsweringRuleRequestGreetingsItemCustom] = None

class CreateAnsweringRuleRequestScreening(Enum):
    """
    Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then
    callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not
    in contact list, then callers are asked to say their name before connecting; 'Always' - the
    callers are always asked to say their name before connecting. The default value is 'Off'
    
    Generated by Python OpenAPI Parser
    """
    
    Off = 'Off'
    NoCallerId = 'NoCallerId'
    UnknownCallerId = 'UnknownCallerId'
    Always = 'Always'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleRequest(DataClassJsonMixin):
    enabled: Optional[bool] = None
    """ Specifies if the rule is active or inactive. The default value is 'True' """
    
    type: Optional[str] = None
    """ Type of an answering rule. The 'Custom' value should be specified """
    
    name: Optional[str] = None
    """ Name of an answering rule specified by user """
    
    callers: Optional[List[CreateAnsweringRuleRequestCallersItem]] = None
    """ Answering rule will be applied when calls are received from the specified caller(s) """
    
    called_numbers: Optional[List[CreateAnsweringRuleRequestCalledNumbersItem]] = None
    """ Answering rules are applied when calling to selected number(s) """
    
    schedule: Optional[CreateAnsweringRuleRequestSchedule] = None
    """ Schedule when an answering rule should be applied """
    
    call_handling_action: Optional[CreateAnsweringRuleRequestCallHandlingAction] = None
    """ Specifies how incoming calls are forwarded """
    
    forwarding: Optional[CreateAnsweringRuleRequestForwarding] = None
    """
    Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These
    settings determine the forwarding numbers to which the call will be forwarded
    """
    
    unconditional_forwarding: Optional[CreateAnsweringRuleRequestUnconditionalForwarding] = None
    """
    Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in
    'callHandlingAction'
    """
    
    queue: Optional[CreateAnsweringRuleRequestQueue] = None
    """
    Queue settings applied for department (call queue) extension type, with the 'AgentQueue' value
    specified as a call handling action
    """
    
    transfer: Optional[CreateAnsweringRuleRequestTransfer] = None
    """
    Transfer settings applied for department (call queue) extension type, with
    'TransferToExtension' call handling action
    """
    
    voicemail: Optional[CreateAnsweringRuleRequestVoicemail] = None
    """ Specifies whether to take a voicemail and who should do it """
    
    greetings: Optional[List[CreateAnsweringRuleRequestGreetingsItem]] = None
    """
    Greetings applied for an answering rule; only predefined greetings can be applied, see
    Dictionary Greeting List
    """
    
    screening: Optional[CreateAnsweringRuleRequestScreening] = None
    """
    Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then
    callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not
    in contact list, then callers are asked to say their name before connecting; 'Always' - the
    callers are always asked to say their name before connecting. The default value is 'Off'
    """
    

class CreateAnsweringRuleResponseType(Enum):
    """ Type of an answering rule """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'
    Custom = 'Custom'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseScheduleWeeklyRangesMondayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseScheduleWeeklyRangesThursdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseScheduleWeeklyRangesFridayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseScheduleWeeklyRangesSundayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseScheduleWeeklyRanges(DataClassJsonMixin):
    """ Weekly schedule """
    
    monday: Optional[List[CreateAnsweringRuleResponseScheduleWeeklyRangesMondayItem]] = None
    """ Time intervals for a particular day """
    
    tuesday: Optional[List[CreateAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem]] = None
    """ Time intervals for a particular day """
    
    wednesday: Optional[List[CreateAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem]] = None
    """ Time intervals for a particular day """
    
    thursday: Optional[List[CreateAnsweringRuleResponseScheduleWeeklyRangesThursdayItem]] = None
    """ Time intervals for a particular day """
    
    friday: Optional[List[CreateAnsweringRuleResponseScheduleWeeklyRangesFridayItem]] = None
    """ Time intervals for a particular day """
    
    saturday: Optional[List[CreateAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem]] = None
    """ Time intervals for a particular day """
    
    sunday: Optional[List[CreateAnsweringRuleResponseScheduleWeeklyRangesSundayItem]] = None
    """ Time intervals for a particular day """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseScheduleRangesItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Starting datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    
    to: Optional[str] = None
    """
    Ending datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    

class CreateAnsweringRuleResponseScheduleRef(Enum):
    """
    The user's schedule specified for business hours or after hours; it can also be set/retrieved
    calling the corresponding method
    
    Generated by Python OpenAPI Parser
    """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseSchedule(DataClassJsonMixin):
    """ Schedule when an answering rule should be applied """
    
    weekly_ranges: Optional[CreateAnsweringRuleResponseScheduleWeeklyRanges] = None
    """ Weekly schedule """
    
    ranges: Optional[List[CreateAnsweringRuleResponseScheduleRangesItem]] = None
    """ Specific data ranges """
    
    ref: Optional[CreateAnsweringRuleResponseScheduleRef] = None
    """
    The user's schedule specified for business hours or after hours; it can also be set/retrieved
    calling the corresponding method
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseCalledNumbersItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """ Called phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseCallersItem(DataClassJsonMixin):
    caller_id: Optional[str] = None
    """ Phone number of a caller """
    
    name: Optional[str] = None
    """ Contact name of a caller """
    

class CreateAnsweringRuleResponseCallHandlingAction(Enum):
    """ Specifies how incoming calls are forwarded """
    
    ForwardCalls = 'ForwardCalls'
    UnconditionalForwarding = 'UnconditionalForwarding'
    AgentQueue = 'AgentQueue'
    TransferToExtension = 'TransferToExtension'
    TakeMessagesOnly = 'TakeMessagesOnly'
    PlayAnnouncementOnly = 'PlayAnnouncementOnly'
    SharedLines = 'SharedLines'

class CreateAnsweringRuleResponseForwardingRingingMode(Enum):
    """
    Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding
    numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding
    numbers are ring all at the same time
    
    Generated by Python OpenAPI Parser
    """
    
    Sequentially = 'Sequentially'
    Simultaneously = 'Simultaneously'

class CreateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemLabel(Enum):
    """ Forwarding/Call flip number title """
    
    Business_Mobile_Phone = 'Business Mobile Phone'

class CreateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemType(Enum):
    """ Type of a forwarding number """
    
    Home = 'Home'
    Mobile = 'Mobile'
    Work = 'Work'
    PhoneLine = 'PhoneLine'
    Outage = 'Outage'
    Other = 'Other'
    BusinessMobilePhone = 'BusinessMobilePhone'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a forwarding number """
    
    uri: Optional[str] = None
    """ Canonical URI of a forwarding/call flip phone number """
    
    phone_number: Optional[str] = None
    """ Forwarding/Call flip phone number """
    
    label: Optional[CreateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemLabel] = None
    """ Forwarding/Call flip number title """
    
    type: Optional[CreateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemType] = None
    """ Type of a forwarding number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseForwardingRulesItem(DataClassJsonMixin):
    index: Optional[int] = None
    """ Forwarding number (or group) ordinal """
    
    ring_count: Optional[int] = None
    """ Number of rings for a forwarding number (or group) """
    
    enabled: Optional[bool] = None
    """ Forwarding number status. Returned only if `showInactiveNumbers` is set to `true` """
    
    forwarding_numbers: Optional[List[CreateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItem]] = None
    """ Forwarding number (or group) data """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseForwarding(DataClassJsonMixin):
    """
    Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These
    settings determine the forwarding numbers to which the call will be forwarded
    
    Generated by Python OpenAPI Parser
    """
    
    notify_my_soft_phones: Optional[bool] = None
    """
    Specifies if the user's softphone(s) are notified before forwarding the incoming call to desk
    phones and forwarding numbers
    """
    
    notify_admin_soft_phones: Optional[bool] = None
    """
    Specifies if the administrator's softphone is notified before forwarding the incoming call to
    desk phones and forwarding numbers. The default value is 'False'
    """
    
    soft_phones_ring_count: Optional[int] = None
    """ Number of rings before forwarding starts """
    
    ringing_mode: Optional[CreateAnsweringRuleResponseForwardingRingingMode] = None
    """
    Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding
    numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding
    numbers are ring all at the same time
    """
    
    rules: Optional[List[CreateAnsweringRuleResponseForwardingRulesItem]] = None
    """ Information on a call forwarding rule """
    
    mobile_timeout: Optional[bool] = None
    """ Specifies if mobile timeout is activated for the rule """
    

class CreateAnsweringRuleResponseUnconditionalForwardingAction(Enum):
    """ Event that initiates forwarding to the specified phone number """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseUnconditionalForwarding(DataClassJsonMixin):
    """
    Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in
    'callHandlingAction'
    
    Generated by Python OpenAPI Parser
    """
    
    phone_number: Optional[str] = None
    """
    Phone number to which the call is forwarded. In addition to common e.164 format, the following
    number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx; where xxxxxxxxxxx
    is a phone number in e.164 format (without '+' sign)
    """
    
    action: Optional[CreateAnsweringRuleResponseUnconditionalForwardingAction] = None
    """ Event that initiates forwarding to the specified phone number """
    

class CreateAnsweringRuleResponseQueueTransferMode(Enum):
    """ Specifies how calls are transferred to group members """
    
    Rotating = 'Rotating'
    Simultaneous = 'Simultaneous'
    FixedOrder = 'FixedOrder'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseQueueTransferItemExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension the call is transferred to """
    
    name: Optional[str] = None
    """ Extension name """
    
    extension_number: Optional[str] = None
    """ Extension number """
    

class CreateAnsweringRuleResponseQueueTransferItemAction(Enum):
    """ Event that initiates transferring to the specified extension """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseQueueTransferItem(DataClassJsonMixin):
    extension: Optional[CreateAnsweringRuleResponseQueueTransferItemExtension] = None
    action: Optional[CreateAnsweringRuleResponseQueueTransferItemAction] = None
    """ Event that initiates transferring to the specified extension """
    

class CreateAnsweringRuleResponseQueueNoAnswerAction(Enum):
    """
    Specifies the type of action to be taken if: members are available but no one answers, or all
    members are busy/unavailable. This option is available for Business hours only. For
    simultaneous transfer mode only 'WaitPrimaryMembers' and 'WaitPrimaryAndOverflowMembers' are
    supported
    
    Generated by Python OpenAPI Parser
    """
    
    WaitPrimaryMembers = 'WaitPrimaryMembers'
    WaitPrimaryAndOverflowMembers = 'WaitPrimaryAndOverflowMembers'
    Voicemail = 'Voicemail'
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseQueueFixedOrderAgentsItemExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Number of department extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseQueueFixedOrderAgentsItem(DataClassJsonMixin):
    extension: Optional[CreateAnsweringRuleResponseQueueFixedOrderAgentsItemExtension] = None
    index: Optional[int] = None
    """ Ordinal of an agent (call queue member) """
    

class CreateAnsweringRuleResponseQueueHoldAudioInterruptionMode(Enum):
    """ Connecting audio interruption mode """
    
    Never = 'Never'
    WhenMusicEnds = 'WhenMusicEnds'
    Periodically = 'Periodically'

class CreateAnsweringRuleResponseQueueHoldTimeExpirationAction(Enum):
    """
    Specifies the type of action to be taken after the hold time (waiting for an available call
    queue member) expires. If 'TransferToExtension' option is selected, the extension specified in
    `transfer` field is used. The default value is `Voicemail`
    
    Generated by Python OpenAPI Parser
    """
    
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'
    Voicemail = 'Voicemail'

class CreateAnsweringRuleResponseQueueMaxCallersAction(Enum):
    """
    Specifies the type of action to be taken if count of callers on hold exceeds the supported
    maximum
    
    Generated by Python OpenAPI Parser
    """
    
    Voicemail = 'Voicemail'
    Announcement = 'Announcement'
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'

class CreateAnsweringRuleResponseQueueUnconditionalForwardingItemAction(Enum):
    """ Event that initiates forwarding to the specified phone number """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseQueueUnconditionalForwardingItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number to which the call is forwarded. In addition to common e.164 format, the following
    number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx; where xxxxxxxxxxx
    is a phone number in e.164 format (without '+' sign)
    """
    
    action: Optional[CreateAnsweringRuleResponseQueueUnconditionalForwardingItemAction] = None
    """ Event that initiates forwarding to the specified phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseQueue(DataClassJsonMixin):
    """
    Queue settings applied for department (call queue) extension type, with the 'AgentQueue' value
    specified as a call handling action
    
    Generated by Python OpenAPI Parser
    """
    
    transfer_mode: Optional[CreateAnsweringRuleResponseQueueTransferMode] = None
    """ Specifies how calls are transferred to group members """
    
    transfer: Optional[List[CreateAnsweringRuleResponseQueueTransferItem]] = None
    """ Call transfer information """
    
    no_answer_action: Optional[CreateAnsweringRuleResponseQueueNoAnswerAction] = None
    """
    Specifies the type of action to be taken if: members are available but no one answers, or all
    members are busy/unavailable. This option is available for Business hours only. For
    simultaneous transfer mode only 'WaitPrimaryMembers' and 'WaitPrimaryAndOverflowMembers' are
    supported
    """
    
    fixed_order_agents: Optional[List[CreateAnsweringRuleResponseQueueFixedOrderAgentsItem]] = None
    """ Information on a call forwarding rule """
    
    hold_audio_interruption_mode: Optional[CreateAnsweringRuleResponseQueueHoldAudioInterruptionMode] = None
    """ Connecting audio interruption mode """
    
    hold_audio_interruption_period: Optional[int] = None
    """ Connecting audio interruption message period in seconds """
    
    hold_time_expiration_action: Optional[CreateAnsweringRuleResponseQueueHoldTimeExpirationAction] = 'Voicemail'
    """
    Specifies the type of action to be taken after the hold time (waiting for an available call
    queue member) expires. If 'TransferToExtension' option is selected, the extension specified in
    `transfer` field is used. The default value is `Voicemail`
    """
    
    agent_timeout: Optional[int] = None
    """ Maximum time in seconds to wait for a call queue member before trying the next member """
    
    wrap_up_time: Optional[int] = None
    """
    Minimum post-call wrap up time in seconds before agent status is automatically set; the value
    range is from 180 to 300
    """
    
    hold_time: Optional[int] = None
    """ Maximum hold time in seconds to wait for an available call queue member """
    
    max_callers: Optional[int] = None
    """ Maximum count of callers on hold; the limitation is 25 callers """
    
    max_callers_action: Optional[CreateAnsweringRuleResponseQueueMaxCallersAction] = None
    """
    Specifies the type of action to be taken if count of callers on hold exceeds the supported
    maximum
    """
    
    unconditional_forwarding: Optional[List[CreateAnsweringRuleResponseQueueUnconditionalForwardingItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseTransferExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Number of department extension """
    
    partner_id: Optional[str] = None
    """
    For Partner Applications Internal identifier of an extension created by partner. The
    RingCentral supports the mapping of accounts and stores the corresponding account ID/extension
    ID for each partner ID of a client application. In request URIs partner IDs are accepted
    instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in
    response URIs contain the corresponding account IDs and extension IDs. In all request and
    response bodies these values are reflected via partnerId attributes of account and extension
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseTransfer(DataClassJsonMixin):
    """
    Transfer settings applied for department (call queue) extension type, with
    'TransferToExtension' call handling action
    
    Generated by Python OpenAPI Parser
    """
    
    extension: Optional[CreateAnsweringRuleResponseTransferExtension] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseVoicemailRecipient(DataClassJsonMixin):
    """ Recipient data """
    
    uri: Optional[str] = None
    """ Link to a recipient extension resource """
    
    id: Optional[int] = None
    """ Internal identifier of a recipient extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseVoicemail(DataClassJsonMixin):
    """ Specifies whether to take a voicemail and who should do it """
    
    enabled: Optional[bool] = None
    """ If 'True' then voicemails are allowed to be received """
    
    recipient: Optional[CreateAnsweringRuleResponseVoicemailRecipient] = None
    """ Recipient data """
    

class CreateAnsweringRuleResponseGreetingsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Custom = 'Custom'
    Company = 'Company'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    AutomaticRecording = 'AutomaticRecording'

class CreateAnsweringRuleResponseGreetingsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseGreetingsItemPreset(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a greeting resource """
    
    id: Optional[str] = None
    """ Internal identifier of a greeting """
    
    name: Optional[str] = None
    """ Name of a greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseGreetingsItemCustom(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a custom user greeting """
    
    id: Optional[str] = None
    """ Internal identifier of a custom user greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseGreetingsItem(DataClassJsonMixin):
    type: Optional[CreateAnsweringRuleResponseGreetingsItemType] = None
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    usage_type: Optional[CreateAnsweringRuleResponseGreetingsItemUsageType] = None
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    """
    
    preset: Optional[CreateAnsweringRuleResponseGreetingsItemPreset] = None
    custom: Optional[CreateAnsweringRuleResponseGreetingsItemCustom] = None

class CreateAnsweringRuleResponseScreening(Enum):
    """
    Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then
    callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not
    in contact list, then callers are asked to say their name before connecting; 'Always' - the
    callers are always asked to say their name before connecting. The default value is 'Off'
    
    Generated by Python OpenAPI Parser
    """
    
    Off = 'Off'
    NoCallerId = 'NoCallerId'
    UnknownCallerId = 'UnknownCallerId'
    Always = 'Always'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponseSharedLines(DataClassJsonMixin):
    """ SharedLines call handling action settings """
    
    timeout: Optional[int] = None
    """ Number of seconds to wait before forwarding unanswered calls. The value range is 10 - 80 """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateAnsweringRuleResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI to an answering rule resource """
    
    id: Optional[str] = None
    """ Internal identifier of an answering rule """
    
    type: Optional[CreateAnsweringRuleResponseType] = None
    """ Type of an answering rule """
    
    name: Optional[str] = None
    """ Name of an answering rule specified by user """
    
    enabled: Optional[bool] = None
    """ Specifies if an answering rule is active or inactive """
    
    schedule: Optional[CreateAnsweringRuleResponseSchedule] = None
    """ Schedule when an answering rule should be applied """
    
    called_numbers: Optional[List[CreateAnsweringRuleResponseCalledNumbersItem]] = None
    """ Answering rules are applied when calling to selected number(s) """
    
    callers: Optional[List[CreateAnsweringRuleResponseCallersItem]] = None
    """ Answering rules are applied when calls are received from specified caller(s) """
    
    call_handling_action: Optional[CreateAnsweringRuleResponseCallHandlingAction] = None
    """ Specifies how incoming calls are forwarded """
    
    forwarding: Optional[CreateAnsweringRuleResponseForwarding] = None
    """
    Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These
    settings determine the forwarding numbers to which the call will be forwarded
    """
    
    unconditional_forwarding: Optional[CreateAnsweringRuleResponseUnconditionalForwarding] = None
    """
    Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in
    'callHandlingAction'
    """
    
    queue: Optional[CreateAnsweringRuleResponseQueue] = None
    """
    Queue settings applied for department (call queue) extension type, with the 'AgentQueue' value
    specified as a call handling action
    """
    
    transfer: Optional[CreateAnsweringRuleResponseTransfer] = None
    """
    Transfer settings applied for department (call queue) extension type, with
    'TransferToExtension' call handling action
    """
    
    voicemail: Optional[CreateAnsweringRuleResponseVoicemail] = None
    """ Specifies whether to take a voicemail and who should do it """
    
    greetings: Optional[List[CreateAnsweringRuleResponseGreetingsItem]] = None
    """
    Greetings applied for an answering rule; only predefined greetings can be applied, see
    Dictionary Greeting List
    """
    
    screening: Optional[CreateAnsweringRuleResponseScreening] = None
    """
    Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then
    callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not
    in contact list, then callers are asked to say their name before connecting; 'Always' - the
    callers are always asked to say their name before connecting. The default value is 'Off'
    """
    
    shared_lines: Optional[CreateAnsweringRuleResponseSharedLines] = None
    """ SharedLines call handling action settings """
    

class ReadAnsweringRuleResponseType(Enum):
    """ Type of an answering rule """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'
    Custom = 'Custom'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseScheduleWeeklyRangesMondayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseScheduleWeeklyRangesThursdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseScheduleWeeklyRangesFridayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseScheduleWeeklyRangesSundayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseScheduleWeeklyRanges(DataClassJsonMixin):
    """ Weekly schedule """
    
    monday: Optional[List[ReadAnsweringRuleResponseScheduleWeeklyRangesMondayItem]] = None
    """ Time intervals for a particular day """
    
    tuesday: Optional[List[ReadAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem]] = None
    """ Time intervals for a particular day """
    
    wednesday: Optional[List[ReadAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem]] = None
    """ Time intervals for a particular day """
    
    thursday: Optional[List[ReadAnsweringRuleResponseScheduleWeeklyRangesThursdayItem]] = None
    """ Time intervals for a particular day """
    
    friday: Optional[List[ReadAnsweringRuleResponseScheduleWeeklyRangesFridayItem]] = None
    """ Time intervals for a particular day """
    
    saturday: Optional[List[ReadAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem]] = None
    """ Time intervals for a particular day """
    
    sunday: Optional[List[ReadAnsweringRuleResponseScheduleWeeklyRangesSundayItem]] = None
    """ Time intervals for a particular day """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseScheduleRangesItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Starting datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    
    to: Optional[str] = None
    """
    Ending datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    

class ReadAnsweringRuleResponseScheduleRef(Enum):
    """
    The user's schedule specified for business hours or after hours; it can also be set/retrieved
    calling the corresponding method
    
    Generated by Python OpenAPI Parser
    """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseSchedule(DataClassJsonMixin):
    """ Schedule when an answering rule should be applied """
    
    weekly_ranges: Optional[ReadAnsweringRuleResponseScheduleWeeklyRanges] = None
    """ Weekly schedule """
    
    ranges: Optional[List[ReadAnsweringRuleResponseScheduleRangesItem]] = None
    """ Specific data ranges """
    
    ref: Optional[ReadAnsweringRuleResponseScheduleRef] = None
    """
    The user's schedule specified for business hours or after hours; it can also be set/retrieved
    calling the corresponding method
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseCalledNumbersItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """ Called phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseCallersItem(DataClassJsonMixin):
    caller_id: Optional[str] = None
    """ Phone number of a caller """
    
    name: Optional[str] = None
    """ Contact name of a caller """
    

class ReadAnsweringRuleResponseCallHandlingAction(Enum):
    """ Specifies how incoming calls are forwarded """
    
    ForwardCalls = 'ForwardCalls'
    UnconditionalForwarding = 'UnconditionalForwarding'
    AgentQueue = 'AgentQueue'
    TransferToExtension = 'TransferToExtension'
    TakeMessagesOnly = 'TakeMessagesOnly'
    PlayAnnouncementOnly = 'PlayAnnouncementOnly'
    SharedLines = 'SharedLines'

class ReadAnsweringRuleResponseForwardingRingingMode(Enum):
    """
    Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding
    numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding
    numbers are ring all at the same time
    
    Generated by Python OpenAPI Parser
    """
    
    Sequentially = 'Sequentially'
    Simultaneously = 'Simultaneously'

class ReadAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemLabel(Enum):
    """ Forwarding/Call flip number title """
    
    Business_Mobile_Phone = 'Business Mobile Phone'

class ReadAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemType(Enum):
    """ Type of a forwarding number """
    
    Home = 'Home'
    Mobile = 'Mobile'
    Work = 'Work'
    PhoneLine = 'PhoneLine'
    Outage = 'Outage'
    Other = 'Other'
    BusinessMobilePhone = 'BusinessMobilePhone'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseForwardingRulesItemForwardingNumbersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a forwarding number """
    
    uri: Optional[str] = None
    """ Canonical URI of a forwarding/call flip phone number """
    
    phone_number: Optional[str] = None
    """ Forwarding/Call flip phone number """
    
    label: Optional[ReadAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemLabel] = None
    """ Forwarding/Call flip number title """
    
    type: Optional[ReadAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemType] = None
    """ Type of a forwarding number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseForwardingRulesItem(DataClassJsonMixin):
    index: Optional[int] = None
    """ Forwarding number (or group) ordinal """
    
    ring_count: Optional[int] = None
    """ Number of rings for a forwarding number (or group) """
    
    enabled: Optional[bool] = None
    """ Forwarding number status. Returned only if `showInactiveNumbers` is set to `true` """
    
    forwarding_numbers: Optional[List[ReadAnsweringRuleResponseForwardingRulesItemForwardingNumbersItem]] = None
    """ Forwarding number (or group) data """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseForwarding(DataClassJsonMixin):
    """
    Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These
    settings determine the forwarding numbers to which the call will be forwarded
    
    Generated by Python OpenAPI Parser
    """
    
    notify_my_soft_phones: Optional[bool] = None
    """
    Specifies if the user's softphone(s) are notified before forwarding the incoming call to desk
    phones and forwarding numbers
    """
    
    notify_admin_soft_phones: Optional[bool] = None
    """
    Specifies if the administrator's softphone is notified before forwarding the incoming call to
    desk phones and forwarding numbers. The default value is 'False'
    """
    
    soft_phones_ring_count: Optional[int] = None
    """ Number of rings before forwarding starts """
    
    ringing_mode: Optional[ReadAnsweringRuleResponseForwardingRingingMode] = None
    """
    Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding
    numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding
    numbers are ring all at the same time
    """
    
    rules: Optional[List[ReadAnsweringRuleResponseForwardingRulesItem]] = None
    """ Information on a call forwarding rule """
    
    mobile_timeout: Optional[bool] = None
    """ Specifies if mobile timeout is activated for the rule """
    

class ReadAnsweringRuleResponseUnconditionalForwardingAction(Enum):
    """ Event that initiates forwarding to the specified phone number """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseUnconditionalForwarding(DataClassJsonMixin):
    """
    Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in
    'callHandlingAction'
    
    Generated by Python OpenAPI Parser
    """
    
    phone_number: Optional[str] = None
    """
    Phone number to which the call is forwarded. In addition to common e.164 format, the following
    number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx; where xxxxxxxxxxx
    is a phone number in e.164 format (without '+' sign)
    """
    
    action: Optional[ReadAnsweringRuleResponseUnconditionalForwardingAction] = None
    """ Event that initiates forwarding to the specified phone number """
    

class ReadAnsweringRuleResponseQueueTransferMode(Enum):
    """ Specifies how calls are transferred to group members """
    
    Rotating = 'Rotating'
    Simultaneous = 'Simultaneous'
    FixedOrder = 'FixedOrder'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseQueueTransferItemExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension the call is transferred to """
    
    name: Optional[str] = None
    """ Extension name """
    
    extension_number: Optional[str] = None
    """ Extension number """
    

class ReadAnsweringRuleResponseQueueTransferItemAction(Enum):
    """ Event that initiates transferring to the specified extension """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseQueueTransferItem(DataClassJsonMixin):
    extension: Optional[ReadAnsweringRuleResponseQueueTransferItemExtension] = None
    action: Optional[ReadAnsweringRuleResponseQueueTransferItemAction] = None
    """ Event that initiates transferring to the specified extension """
    

class ReadAnsweringRuleResponseQueueNoAnswerAction(Enum):
    """
    Specifies the type of action to be taken if: members are available but no one answers, or all
    members are busy/unavailable. This option is available for Business hours only. For
    simultaneous transfer mode only 'WaitPrimaryMembers' and 'WaitPrimaryAndOverflowMembers' are
    supported
    
    Generated by Python OpenAPI Parser
    """
    
    WaitPrimaryMembers = 'WaitPrimaryMembers'
    WaitPrimaryAndOverflowMembers = 'WaitPrimaryAndOverflowMembers'
    Voicemail = 'Voicemail'
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseQueueFixedOrderAgentsItemExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Number of department extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseQueueFixedOrderAgentsItem(DataClassJsonMixin):
    extension: Optional[ReadAnsweringRuleResponseQueueFixedOrderAgentsItemExtension] = None
    index: Optional[int] = None
    """ Ordinal of an agent (call queue member) """
    

class ReadAnsweringRuleResponseQueueHoldAudioInterruptionMode(Enum):
    """ Connecting audio interruption mode """
    
    Never = 'Never'
    WhenMusicEnds = 'WhenMusicEnds'
    Periodically = 'Periodically'

class ReadAnsweringRuleResponseQueueHoldTimeExpirationAction(Enum):
    """
    Specifies the type of action to be taken after the hold time (waiting for an available call
    queue member) expires. If 'TransferToExtension' option is selected, the extension specified in
    `transfer` field is used. The default value is `Voicemail`
    
    Generated by Python OpenAPI Parser
    """
    
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'
    Voicemail = 'Voicemail'

class ReadAnsweringRuleResponseQueueMaxCallersAction(Enum):
    """
    Specifies the type of action to be taken if count of callers on hold exceeds the supported
    maximum
    
    Generated by Python OpenAPI Parser
    """
    
    Voicemail = 'Voicemail'
    Announcement = 'Announcement'
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'

class ReadAnsweringRuleResponseQueueUnconditionalForwardingItemAction(Enum):
    """ Event that initiates forwarding to the specified phone number """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseQueueUnconditionalForwardingItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number to which the call is forwarded. In addition to common e.164 format, the following
    number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx; where xxxxxxxxxxx
    is a phone number in e.164 format (without '+' sign)
    """
    
    action: Optional[ReadAnsweringRuleResponseQueueUnconditionalForwardingItemAction] = None
    """ Event that initiates forwarding to the specified phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseQueue(DataClassJsonMixin):
    """
    Queue settings applied for department (call queue) extension type, with the 'AgentQueue' value
    specified as a call handling action
    
    Generated by Python OpenAPI Parser
    """
    
    transfer_mode: Optional[ReadAnsweringRuleResponseQueueTransferMode] = None
    """ Specifies how calls are transferred to group members """
    
    transfer: Optional[List[ReadAnsweringRuleResponseQueueTransferItem]] = None
    """ Call transfer information """
    
    no_answer_action: Optional[ReadAnsweringRuleResponseQueueNoAnswerAction] = None
    """
    Specifies the type of action to be taken if: members are available but no one answers, or all
    members are busy/unavailable. This option is available for Business hours only. For
    simultaneous transfer mode only 'WaitPrimaryMembers' and 'WaitPrimaryAndOverflowMembers' are
    supported
    """
    
    fixed_order_agents: Optional[List[ReadAnsweringRuleResponseQueueFixedOrderAgentsItem]] = None
    """ Information on a call forwarding rule """
    
    hold_audio_interruption_mode: Optional[ReadAnsweringRuleResponseQueueHoldAudioInterruptionMode] = None
    """ Connecting audio interruption mode """
    
    hold_audio_interruption_period: Optional[int] = None
    """ Connecting audio interruption message period in seconds """
    
    hold_time_expiration_action: Optional[ReadAnsweringRuleResponseQueueHoldTimeExpirationAction] = 'Voicemail'
    """
    Specifies the type of action to be taken after the hold time (waiting for an available call
    queue member) expires. If 'TransferToExtension' option is selected, the extension specified in
    `transfer` field is used. The default value is `Voicemail`
    """
    
    agent_timeout: Optional[int] = None
    """ Maximum time in seconds to wait for a call queue member before trying the next member """
    
    wrap_up_time: Optional[int] = None
    """
    Minimum post-call wrap up time in seconds before agent status is automatically set; the value
    range is from 180 to 300
    """
    
    hold_time: Optional[int] = None
    """ Maximum hold time in seconds to wait for an available call queue member """
    
    max_callers: Optional[int] = None
    """ Maximum count of callers on hold; the limitation is 25 callers """
    
    max_callers_action: Optional[ReadAnsweringRuleResponseQueueMaxCallersAction] = None
    """
    Specifies the type of action to be taken if count of callers on hold exceeds the supported
    maximum
    """
    
    unconditional_forwarding: Optional[List[ReadAnsweringRuleResponseQueueUnconditionalForwardingItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseTransferExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Number of department extension """
    
    partner_id: Optional[str] = None
    """
    For Partner Applications Internal identifier of an extension created by partner. The
    RingCentral supports the mapping of accounts and stores the corresponding account ID/extension
    ID for each partner ID of a client application. In request URIs partner IDs are accepted
    instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in
    response URIs contain the corresponding account IDs and extension IDs. In all request and
    response bodies these values are reflected via partnerId attributes of account and extension
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseTransfer(DataClassJsonMixin):
    """
    Transfer settings applied for department (call queue) extension type, with
    'TransferToExtension' call handling action
    
    Generated by Python OpenAPI Parser
    """
    
    extension: Optional[ReadAnsweringRuleResponseTransferExtension] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseVoicemailRecipient(DataClassJsonMixin):
    """ Recipient data """
    
    uri: Optional[str] = None
    """ Link to a recipient extension resource """
    
    id: Optional[int] = None
    """ Internal identifier of a recipient extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseVoicemail(DataClassJsonMixin):
    """ Specifies whether to take a voicemail and who should do it """
    
    enabled: Optional[bool] = None
    """ If 'True' then voicemails are allowed to be received """
    
    recipient: Optional[ReadAnsweringRuleResponseVoicemailRecipient] = None
    """ Recipient data """
    

class ReadAnsweringRuleResponseGreetingsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Custom = 'Custom'
    Company = 'Company'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    AutomaticRecording = 'AutomaticRecording'

class ReadAnsweringRuleResponseGreetingsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseGreetingsItemPreset(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a greeting resource """
    
    id: Optional[str] = None
    """ Internal identifier of a greeting """
    
    name: Optional[str] = None
    """ Name of a greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseGreetingsItemCustom(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a custom user greeting """
    
    id: Optional[str] = None
    """ Internal identifier of a custom user greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseGreetingsItem(DataClassJsonMixin):
    type: Optional[ReadAnsweringRuleResponseGreetingsItemType] = None
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    usage_type: Optional[ReadAnsweringRuleResponseGreetingsItemUsageType] = None
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    """
    
    preset: Optional[ReadAnsweringRuleResponseGreetingsItemPreset] = None
    custom: Optional[ReadAnsweringRuleResponseGreetingsItemCustom] = None

class ReadAnsweringRuleResponseScreening(Enum):
    """
    Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then
    callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not
    in contact list, then callers are asked to say their name before connecting; 'Always' - the
    callers are always asked to say their name before connecting. The default value is 'Off'
    
    Generated by Python OpenAPI Parser
    """
    
    Off = 'Off'
    NoCallerId = 'NoCallerId'
    UnknownCallerId = 'UnknownCallerId'
    Always = 'Always'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponseSharedLines(DataClassJsonMixin):
    """ SharedLines call handling action settings """
    
    timeout: Optional[int] = None
    """ Number of seconds to wait before forwarding unanswered calls. The value range is 10 - 80 """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAnsweringRuleResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI to an answering rule resource """
    
    id: Optional[str] = None
    """ Internal identifier of an answering rule """
    
    type: Optional[ReadAnsweringRuleResponseType] = None
    """ Type of an answering rule """
    
    name: Optional[str] = None
    """ Name of an answering rule specified by user """
    
    enabled: Optional[bool] = None
    """ Specifies if an answering rule is active or inactive """
    
    schedule: Optional[ReadAnsweringRuleResponseSchedule] = None
    """ Schedule when an answering rule should be applied """
    
    called_numbers: Optional[List[ReadAnsweringRuleResponseCalledNumbersItem]] = None
    """ Answering rules are applied when calling to selected number(s) """
    
    callers: Optional[List[ReadAnsweringRuleResponseCallersItem]] = None
    """ Answering rules are applied when calls are received from specified caller(s) """
    
    call_handling_action: Optional[ReadAnsweringRuleResponseCallHandlingAction] = None
    """ Specifies how incoming calls are forwarded """
    
    forwarding: Optional[ReadAnsweringRuleResponseForwarding] = None
    """
    Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These
    settings determine the forwarding numbers to which the call will be forwarded
    """
    
    unconditional_forwarding: Optional[ReadAnsweringRuleResponseUnconditionalForwarding] = None
    """
    Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in
    'callHandlingAction'
    """
    
    queue: Optional[ReadAnsweringRuleResponseQueue] = None
    """
    Queue settings applied for department (call queue) extension type, with the 'AgentQueue' value
    specified as a call handling action
    """
    
    transfer: Optional[ReadAnsweringRuleResponseTransfer] = None
    """
    Transfer settings applied for department (call queue) extension type, with
    'TransferToExtension' call handling action
    """
    
    voicemail: Optional[ReadAnsweringRuleResponseVoicemail] = None
    """ Specifies whether to take a voicemail and who should do it """
    
    greetings: Optional[List[ReadAnsweringRuleResponseGreetingsItem]] = None
    """
    Greetings applied for an answering rule; only predefined greetings can be applied, see
    Dictionary Greeting List
    """
    
    screening: Optional[ReadAnsweringRuleResponseScreening] = None
    """
    Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then
    callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not
    in contact list, then callers are asked to say their name before connecting; 'Always' - the
    callers are always asked to say their name before connecting. The default value is 'Off'
    """
    
    shared_lines: Optional[ReadAnsweringRuleResponseSharedLines] = None
    """ SharedLines call handling action settings """
    

class UpdateAnsweringRuleRequestForwardingRingingMode(Enum):
    """
    Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding
    numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding
    numbers are ringing all at the same time. The default value is 'Sequentially'
    
    Generated by Python OpenAPI Parser
    """
    
    Sequentially = 'Sequentially'
    Simultaneously = 'Simultaneously'

class UpdateAnsweringRuleRequestForwardingRulesItemForwardingNumbersItemType(Enum):
    """ Forwarding phone number type """
    
    Home = 'Home'
    Mobile = 'Mobile'
    Work = 'Work'
    PhoneLine = 'PhoneLine'
    Outage = 'Outage'
    Other = 'Other'
    BusinessMobilePhone = 'BusinessMobilePhone'

class UpdateAnsweringRuleRequestForwardingRulesItemForwardingNumbersItemLabel(Enum):
    """ Forwarding/Call flip number title """
    
    Business_Mobile_Phone = 'Business Mobile Phone'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestForwardingRulesItemForwardingNumbersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a forwarding number """
    
    type: Optional[UpdateAnsweringRuleRequestForwardingRulesItemForwardingNumbersItemType] = None
    """ Forwarding phone number type """
    
    uri: Optional[str] = None
    """ Canonical URI of a forwarding/call flip phone number """
    
    phone_number: Optional[str] = None
    """ Forwarding/Call flip phone number """
    
    label: Optional[UpdateAnsweringRuleRequestForwardingRulesItemForwardingNumbersItemLabel] = None
    """ Forwarding/Call flip number title """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestForwardingRulesItem(DataClassJsonMixin):
    index: Optional[int] = None
    """ Forwarding number (or group) ordinal. Not returned for inactive numbers """
    
    ring_count: Optional[int] = None
    """
    Number of rings for a forwarding number (or group). For inactive numbers the default value
    ('4') is returned
    """
    
    enabled: Optional[bool] = None
    """ Phone number status """
    
    forwarding_numbers: Optional[List[UpdateAnsweringRuleRequestForwardingRulesItemForwardingNumbersItem]] = None
    """ Forwarding number (or group) data """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestForwarding(DataClassJsonMixin):
    """
    Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These
    settings determine the forwarding numbers to which the call will be forwarded
    
    Generated by Python OpenAPI Parser
    """
    
    notify_my_soft_phones: Optional[bool] = None
    """ Specifies if the first ring on desktop/mobile apps is enabled. The default value is 'True' """
    
    notify_admin_soft_phones: Optional[bool] = None
    """
    Specifies if the administrator's softphone (desktop application) is notified before forwarding
    the incoming call to desk phones and forwarding numbers. The default value is 'True'
    """
    
    soft_phones_ring_count: Optional[int] = 1
    """ Specifies delay between ring on apps and starting of a call forwarding """
    
    ringing_mode: Optional[UpdateAnsweringRuleRequestForwardingRingingMode] = None
    """
    Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding
    numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding
    numbers are ringing all at the same time. The default value is 'Sequentially'
    """
    
    rules: Optional[List[UpdateAnsweringRuleRequestForwardingRulesItem]] = None
    """ Information on a call forwarding rule """
    
    mobile_timeout: Optional[bool] = None
    """ Specifies if mobile timeout is activated for the rule """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestCallersItem(DataClassJsonMixin):
    caller_id: Optional[str] = None
    """ Phone number of a caller """
    
    name: Optional[str] = None
    """ Contact name of a caller """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestCalledNumbersItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """ Called phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestScheduleWeeklyRangesMondayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestScheduleWeeklyRangesTuesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestScheduleWeeklyRangesWednesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestScheduleWeeklyRangesThursdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestScheduleWeeklyRangesFridayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestScheduleWeeklyRangesSaturdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestScheduleWeeklyRangesSundayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestScheduleWeeklyRanges(DataClassJsonMixin):
    """ Weekly schedule """
    
    monday: Optional[List[UpdateAnsweringRuleRequestScheduleWeeklyRangesMondayItem]] = None
    """ Time intervals for a particular day """
    
    tuesday: Optional[List[UpdateAnsweringRuleRequestScheduleWeeklyRangesTuesdayItem]] = None
    """ Time intervals for a particular day """
    
    wednesday: Optional[List[UpdateAnsweringRuleRequestScheduleWeeklyRangesWednesdayItem]] = None
    """ Time intervals for a particular day """
    
    thursday: Optional[List[UpdateAnsweringRuleRequestScheduleWeeklyRangesThursdayItem]] = None
    """ Time intervals for a particular day """
    
    friday: Optional[List[UpdateAnsweringRuleRequestScheduleWeeklyRangesFridayItem]] = None
    """ Time intervals for a particular day """
    
    saturday: Optional[List[UpdateAnsweringRuleRequestScheduleWeeklyRangesSaturdayItem]] = None
    """ Time intervals for a particular day """
    
    sunday: Optional[List[UpdateAnsweringRuleRequestScheduleWeeklyRangesSundayItem]] = None
    """ Time intervals for a particular day """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestScheduleRangesItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Starting datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    
    to: Optional[str] = None
    """
    Ending datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    

class UpdateAnsweringRuleRequestScheduleRef(Enum):
    """
    The user's schedule specified for business hours or after hours; it can also be set/retrieved
    calling the corresponding method
    
    Generated by Python OpenAPI Parser
    """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestSchedule(DataClassJsonMixin):
    """ Schedule when an answering rule should be applied """
    
    weekly_ranges: Optional[UpdateAnsweringRuleRequestScheduleWeeklyRanges] = None
    """ Weekly schedule """
    
    ranges: Optional[List[UpdateAnsweringRuleRequestScheduleRangesItem]] = None
    """ Specific data ranges """
    
    ref: Optional[UpdateAnsweringRuleRequestScheduleRef] = None
    """
    The user's schedule specified for business hours or after hours; it can also be set/retrieved
    calling the corresponding method
    """
    

class UpdateAnsweringRuleRequestCallHandlingAction(Enum):
    """ Specifies how incoming calls are forwarded """
    
    ForwardCalls = 'ForwardCalls'
    UnconditionalForwarding = 'UnconditionalForwarding'
    AgentQueue = 'AgentQueue'
    TransferToExtension = 'TransferToExtension'
    TakeMessagesOnly = 'TakeMessagesOnly'
    PlayAnnouncementOnly = 'PlayAnnouncementOnly'
    SharedLines = 'SharedLines'

class UpdateAnsweringRuleRequestType(Enum):
    """ Type of an answering rule """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'
    Custom = 'Custom'

class UpdateAnsweringRuleRequestUnconditionalForwardingAction(Enum):
    """ Event that initiates forwarding to the specified phone number """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestUnconditionalForwarding(DataClassJsonMixin):
    """
    Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in
    'callHandlingAction'
    
    Generated by Python OpenAPI Parser
    """
    
    phone_number: Optional[str] = None
    """
    Phone number to which the call is forwarded. In addition to common e.164 format, the following
    number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx; where xxxxxxxxxxx
    is a phone number in e.164 format (without '+' sign)
    """
    
    action: Optional[UpdateAnsweringRuleRequestUnconditionalForwardingAction] = None
    """ Event that initiates forwarding to the specified phone number """
    

class UpdateAnsweringRuleRequestQueueTransferMode(Enum):
    """ Specifies how calls are transferred to group members """
    
    Rotating = 'Rotating'
    Simultaneous = 'Simultaneous'
    FixedOrder = 'FixedOrder'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestQueueTransferItemExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension the call is transferred to """
    
    name: Optional[str] = None
    """ Extension name """
    
    extension_number: Optional[str] = None
    """ Extension number """
    

class UpdateAnsweringRuleRequestQueueTransferItemAction(Enum):
    """ Event that initiates transferring to the specified extension """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestQueueTransferItem(DataClassJsonMixin):
    extension: Optional[UpdateAnsweringRuleRequestQueueTransferItemExtension] = None
    action: Optional[UpdateAnsweringRuleRequestQueueTransferItemAction] = None
    """ Event that initiates transferring to the specified extension """
    

class UpdateAnsweringRuleRequestQueueNoAnswerAction(Enum):
    """
    Specifies the type of action to be taken if: members are available but no one answers, or all
    members are busy/unavailable. This option is available for Business hours only. For
    simultaneous transfer mode only 'WaitPrimaryMembers' and 'WaitPrimaryAndOverflowMembers' are
    supported
    
    Generated by Python OpenAPI Parser
    """
    
    WaitPrimaryMembers = 'WaitPrimaryMembers'
    WaitPrimaryAndOverflowMembers = 'WaitPrimaryAndOverflowMembers'
    Voicemail = 'Voicemail'
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestQueueFixedOrderAgentsItemExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Number of department extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestQueueFixedOrderAgentsItem(DataClassJsonMixin):
    extension: Optional[UpdateAnsweringRuleRequestQueueFixedOrderAgentsItemExtension] = None
    index: Optional[int] = None
    """ Ordinal of an agent (call queue member) """
    

class UpdateAnsweringRuleRequestQueueHoldAudioInterruptionMode(Enum):
    """ Connecting audio interruption mode """
    
    Never = 'Never'
    WhenMusicEnds = 'WhenMusicEnds'
    Periodically = 'Periodically'

class UpdateAnsweringRuleRequestQueueHoldTimeExpirationAction(Enum):
    """
    Specifies the type of action to be taken after the hold time (waiting for an available call
    queue member) expires. If 'TransferToExtension' option is selected, the extension specified in
    `transfer` field is used. The default value is `Voicemail`
    
    Generated by Python OpenAPI Parser
    """
    
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'
    Voicemail = 'Voicemail'

class UpdateAnsweringRuleRequestQueueMaxCallersAction(Enum):
    """
    Specifies the type of action to be taken if count of callers on hold exceeds the supported
    maximum
    
    Generated by Python OpenAPI Parser
    """
    
    Voicemail = 'Voicemail'
    Announcement = 'Announcement'
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'

class UpdateAnsweringRuleRequestQueueUnconditionalForwardingItemAction(Enum):
    """ Event that initiates forwarding to the specified phone number """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestQueueUnconditionalForwardingItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number to which the call is forwarded. In addition to common e.164 format, the following
    number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx; where xxxxxxxxxxx
    is a phone number in e.164 format (without '+' sign)
    """
    
    action: Optional[UpdateAnsweringRuleRequestQueueUnconditionalForwardingItemAction] = None
    """ Event that initiates forwarding to the specified phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestQueue(DataClassJsonMixin):
    """
    Queue settings applied for department (call queue) extension type, with the 'AgentQueue' value
    specified as a call handling action
    
    Generated by Python OpenAPI Parser
    """
    
    transfer_mode: Optional[UpdateAnsweringRuleRequestQueueTransferMode] = None
    """ Specifies how calls are transferred to group members """
    
    transfer: Optional[List[UpdateAnsweringRuleRequestQueueTransferItem]] = None
    """ Call transfer information """
    
    no_answer_action: Optional[UpdateAnsweringRuleRequestQueueNoAnswerAction] = None
    """
    Specifies the type of action to be taken if: members are available but no one answers, or all
    members are busy/unavailable. This option is available for Business hours only. For
    simultaneous transfer mode only 'WaitPrimaryMembers' and 'WaitPrimaryAndOverflowMembers' are
    supported
    """
    
    fixed_order_agents: Optional[List[UpdateAnsweringRuleRequestQueueFixedOrderAgentsItem]] = None
    """ Information on a call forwarding rule """
    
    hold_audio_interruption_mode: Optional[UpdateAnsweringRuleRequestQueueHoldAudioInterruptionMode] = None
    """ Connecting audio interruption mode """
    
    hold_audio_interruption_period: Optional[int] = None
    """ Connecting audio interruption message period in seconds """
    
    hold_time_expiration_action: Optional[UpdateAnsweringRuleRequestQueueHoldTimeExpirationAction] = 'Voicemail'
    """
    Specifies the type of action to be taken after the hold time (waiting for an available call
    queue member) expires. If 'TransferToExtension' option is selected, the extension specified in
    `transfer` field is used. The default value is `Voicemail`
    """
    
    agent_timeout: Optional[int] = None
    """ Maximum time in seconds to wait for a call queue member before trying the next member """
    
    wrap_up_time: Optional[int] = None
    """
    Minimum post-call wrap up time in seconds before agent status is automatically set; the value
    range is from 180 to 300
    """
    
    hold_time: Optional[int] = None
    """ Maximum hold time in seconds to wait for an available call queue member """
    
    max_callers: Optional[int] = None
    """ Maximum count of callers on hold; the limitation is 25 callers """
    
    max_callers_action: Optional[UpdateAnsweringRuleRequestQueueMaxCallersAction] = None
    """
    Specifies the type of action to be taken if count of callers on hold exceeds the supported
    maximum
    """
    
    unconditional_forwarding: Optional[List[UpdateAnsweringRuleRequestQueueUnconditionalForwardingItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestVoicemailRecipient(DataClassJsonMixin):
    """ Recipient data """
    
    uri: Optional[str] = None
    """ Link to a recipient extension resource """
    
    id: Optional[int] = None
    """ Internal identifier of a recipient extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestVoicemail(DataClassJsonMixin):
    """ Specifies whether to take a voicemail and who should do it """
    
    enabled: Optional[bool] = None
    """ If 'True' then voicemails are allowed to be received """
    
    recipient: Optional[UpdateAnsweringRuleRequestVoicemailRecipient] = None
    """ Recipient data """
    

class UpdateAnsweringRuleRequestGreetingsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Custom = 'Custom'
    Company = 'Company'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    AutomaticRecording = 'AutomaticRecording'

class UpdateAnsweringRuleRequestGreetingsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestGreetingsItemPreset(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a greeting resource """
    
    id: Optional[str] = None
    """ Internal identifier of a greeting """
    
    name: Optional[str] = None
    """ Name of a greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestGreetingsItemCustom(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a custom user greeting """
    
    id: Optional[str] = None
    """ Internal identifier of a custom user greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestGreetingsItem(DataClassJsonMixin):
    type: Optional[UpdateAnsweringRuleRequestGreetingsItemType] = None
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    usage_type: Optional[UpdateAnsweringRuleRequestGreetingsItemUsageType] = None
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    """
    
    preset: Optional[UpdateAnsweringRuleRequestGreetingsItemPreset] = None
    custom: Optional[UpdateAnsweringRuleRequestGreetingsItemCustom] = None

class UpdateAnsweringRuleRequestScreening(Enum):
    """
    Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then
    callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not
    in contact list, then callers are asked to say their name before connecting; 'Always' - the
    callers are always asked to say their name before connecting. The default value is 'Off'
    
    Generated by Python OpenAPI Parser
    """
    
    Off = 'Off'
    NoCallerId = 'NoCallerId'
    UnknownCallerId = 'UnknownCallerId'
    Always = 'Always'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestTransferExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Number of department extension """
    
    partner_id: Optional[str] = None
    """
    For Partner Applications Internal identifier of an extension created by partner. The
    RingCentral supports the mapping of accounts and stores the corresponding account ID/extension
    ID for each partner ID of a client application. In request URIs partner IDs are accepted
    instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in
    response URIs contain the corresponding account IDs and extension IDs. In all request and
    response bodies these values are reflected via partnerId attributes of account and extension
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequestTransfer(DataClassJsonMixin):
    """
    Transfer settings applied for department (call queue) extension type, with
    'TransferToExtension' call handling action
    
    Generated by Python OpenAPI Parser
    """
    
    extension: Optional[UpdateAnsweringRuleRequestTransferExtension] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleRequest(DataClassJsonMixin):
    id: Optional[str] = None
    """ Identifier of an answering rule """
    
    forwarding: Optional[UpdateAnsweringRuleRequestForwarding] = None
    """
    Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These
    settings determine the forwarding numbers to which the call will be forwarded
    """
    
    enabled: Optional[bool] = None
    """ Specifies if the rule is active or inactive. The default value is 'True' """
    
    name: Optional[str] = None
    """ Name of an answering rule specified by user """
    
    callers: Optional[List[UpdateAnsweringRuleRequestCallersItem]] = None
    """ Answering rule will be applied when calls are received from the specified caller(s) """
    
    called_numbers: Optional[List[UpdateAnsweringRuleRequestCalledNumbersItem]] = None
    """ Answering rules are applied when calling to selected number(s) """
    
    schedule: Optional[UpdateAnsweringRuleRequestSchedule] = None
    """ Schedule when an answering rule should be applied """
    
    call_handling_action: Optional[UpdateAnsweringRuleRequestCallHandlingAction] = None
    """ Specifies how incoming calls are forwarded """
    
    type: Optional[UpdateAnsweringRuleRequestType] = None
    """ Type of an answering rule """
    
    unconditional_forwarding: Optional[UpdateAnsweringRuleRequestUnconditionalForwarding] = None
    """
    Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in
    'callHandlingAction'
    """
    
    queue: Optional[UpdateAnsweringRuleRequestQueue] = None
    """
    Queue settings applied for department (call queue) extension type, with the 'AgentQueue' value
    specified as a call handling action
    """
    
    voicemail: Optional[UpdateAnsweringRuleRequestVoicemail] = None
    """ Specifies whether to take a voicemail and who should do it """
    
    greetings: Optional[List[UpdateAnsweringRuleRequestGreetingsItem]] = None
    """
    Greetings applied for an answering rule; only predefined greetings can be applied, see
    Dictionary Greeting List
    """
    
    screening: Optional[UpdateAnsweringRuleRequestScreening] = None
    """
    Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then
    callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not
    in contact list, then callers are asked to say their name before connecting; 'Always' - the
    callers are always asked to say their name before connecting. The default value is 'Off'
    """
    
    show_inactive_numbers: Optional[bool] = None
    """ Indicates whether inactive numbers should be returned or not """
    
    transfer: Optional[UpdateAnsweringRuleRequestTransfer] = None
    """
    Transfer settings applied for department (call queue) extension type, with
    'TransferToExtension' call handling action
    """
    

class UpdateAnsweringRuleResponseType(Enum):
    """ Type of an answering rule """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'
    Custom = 'Custom'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseScheduleWeeklyRangesMondayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseScheduleWeeklyRangesThursdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseScheduleWeeklyRangesFridayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseScheduleWeeklyRangesSundayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseScheduleWeeklyRanges(DataClassJsonMixin):
    """ Weekly schedule """
    
    monday: Optional[List[UpdateAnsweringRuleResponseScheduleWeeklyRangesMondayItem]] = None
    """ Time intervals for a particular day """
    
    tuesday: Optional[List[UpdateAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem]] = None
    """ Time intervals for a particular day """
    
    wednesday: Optional[List[UpdateAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem]] = None
    """ Time intervals for a particular day """
    
    thursday: Optional[List[UpdateAnsweringRuleResponseScheduleWeeklyRangesThursdayItem]] = None
    """ Time intervals for a particular day """
    
    friday: Optional[List[UpdateAnsweringRuleResponseScheduleWeeklyRangesFridayItem]] = None
    """ Time intervals for a particular day """
    
    saturday: Optional[List[UpdateAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem]] = None
    """ Time intervals for a particular day """
    
    sunday: Optional[List[UpdateAnsweringRuleResponseScheduleWeeklyRangesSundayItem]] = None
    """ Time intervals for a particular day """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseScheduleRangesItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Starting datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    
    to: Optional[str] = None
    """
    Ending datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    

class UpdateAnsweringRuleResponseScheduleRef(Enum):
    """
    The user's schedule specified for business hours or after hours; it can also be set/retrieved
    calling the corresponding method
    
    Generated by Python OpenAPI Parser
    """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseSchedule(DataClassJsonMixin):
    """ Schedule when an answering rule should be applied """
    
    weekly_ranges: Optional[UpdateAnsweringRuleResponseScheduleWeeklyRanges] = None
    """ Weekly schedule """
    
    ranges: Optional[List[UpdateAnsweringRuleResponseScheduleRangesItem]] = None
    """ Specific data ranges """
    
    ref: Optional[UpdateAnsweringRuleResponseScheduleRef] = None
    """
    The user's schedule specified for business hours or after hours; it can also be set/retrieved
    calling the corresponding method
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseCalledNumbersItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """ Called phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseCallersItem(DataClassJsonMixin):
    caller_id: Optional[str] = None
    """ Phone number of a caller """
    
    name: Optional[str] = None
    """ Contact name of a caller """
    

class UpdateAnsweringRuleResponseCallHandlingAction(Enum):
    """ Specifies how incoming calls are forwarded """
    
    ForwardCalls = 'ForwardCalls'
    UnconditionalForwarding = 'UnconditionalForwarding'
    AgentQueue = 'AgentQueue'
    TransferToExtension = 'TransferToExtension'
    TakeMessagesOnly = 'TakeMessagesOnly'
    PlayAnnouncementOnly = 'PlayAnnouncementOnly'
    SharedLines = 'SharedLines'

class UpdateAnsweringRuleResponseForwardingRingingMode(Enum):
    """
    Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding
    numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding
    numbers are ring all at the same time
    
    Generated by Python OpenAPI Parser
    """
    
    Sequentially = 'Sequentially'
    Simultaneously = 'Simultaneously'

class UpdateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemLabel(Enum):
    """ Forwarding/Call flip number title """
    
    Business_Mobile_Phone = 'Business Mobile Phone'

class UpdateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemType(Enum):
    """ Type of a forwarding number """
    
    Home = 'Home'
    Mobile = 'Mobile'
    Work = 'Work'
    PhoneLine = 'PhoneLine'
    Outage = 'Outage'
    Other = 'Other'
    BusinessMobilePhone = 'BusinessMobilePhone'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a forwarding number """
    
    uri: Optional[str] = None
    """ Canonical URI of a forwarding/call flip phone number """
    
    phone_number: Optional[str] = None
    """ Forwarding/Call flip phone number """
    
    label: Optional[UpdateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemLabel] = None
    """ Forwarding/Call flip number title """
    
    type: Optional[UpdateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItemType] = None
    """ Type of a forwarding number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseForwardingRulesItem(DataClassJsonMixin):
    index: Optional[int] = None
    """ Forwarding number (or group) ordinal """
    
    ring_count: Optional[int] = None
    """ Number of rings for a forwarding number (or group) """
    
    enabled: Optional[bool] = None
    """ Forwarding number status. Returned only if `showInactiveNumbers` is set to `true` """
    
    forwarding_numbers: Optional[List[UpdateAnsweringRuleResponseForwardingRulesItemForwardingNumbersItem]] = None
    """ Forwarding number (or group) data """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseForwarding(DataClassJsonMixin):
    """
    Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These
    settings determine the forwarding numbers to which the call will be forwarded
    
    Generated by Python OpenAPI Parser
    """
    
    notify_my_soft_phones: Optional[bool] = None
    """
    Specifies if the user's softphone(s) are notified before forwarding the incoming call to desk
    phones and forwarding numbers
    """
    
    notify_admin_soft_phones: Optional[bool] = None
    """
    Specifies if the administrator's softphone is notified before forwarding the incoming call to
    desk phones and forwarding numbers. The default value is 'False'
    """
    
    soft_phones_ring_count: Optional[int] = None
    """ Number of rings before forwarding starts """
    
    ringing_mode: Optional[UpdateAnsweringRuleResponseForwardingRingingMode] = None
    """
    Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding
    numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding
    numbers are ring all at the same time
    """
    
    rules: Optional[List[UpdateAnsweringRuleResponseForwardingRulesItem]] = None
    """ Information on a call forwarding rule """
    
    mobile_timeout: Optional[bool] = None
    """ Specifies if mobile timeout is activated for the rule """
    

class UpdateAnsweringRuleResponseUnconditionalForwardingAction(Enum):
    """ Event that initiates forwarding to the specified phone number """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseUnconditionalForwarding(DataClassJsonMixin):
    """
    Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in
    'callHandlingAction'
    
    Generated by Python OpenAPI Parser
    """
    
    phone_number: Optional[str] = None
    """
    Phone number to which the call is forwarded. In addition to common e.164 format, the following
    number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx; where xxxxxxxxxxx
    is a phone number in e.164 format (without '+' sign)
    """
    
    action: Optional[UpdateAnsweringRuleResponseUnconditionalForwardingAction] = None
    """ Event that initiates forwarding to the specified phone number """
    

class UpdateAnsweringRuleResponseQueueTransferMode(Enum):
    """ Specifies how calls are transferred to group members """
    
    Rotating = 'Rotating'
    Simultaneous = 'Simultaneous'
    FixedOrder = 'FixedOrder'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseQueueTransferItemExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension the call is transferred to """
    
    name: Optional[str] = None
    """ Extension name """
    
    extension_number: Optional[str] = None
    """ Extension number """
    

class UpdateAnsweringRuleResponseQueueTransferItemAction(Enum):
    """ Event that initiates transferring to the specified extension """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseQueueTransferItem(DataClassJsonMixin):
    extension: Optional[UpdateAnsweringRuleResponseQueueTransferItemExtension] = None
    action: Optional[UpdateAnsweringRuleResponseQueueTransferItemAction] = None
    """ Event that initiates transferring to the specified extension """
    

class UpdateAnsweringRuleResponseQueueNoAnswerAction(Enum):
    """
    Specifies the type of action to be taken if: members are available but no one answers, or all
    members are busy/unavailable. This option is available for Business hours only. For
    simultaneous transfer mode only 'WaitPrimaryMembers' and 'WaitPrimaryAndOverflowMembers' are
    supported
    
    Generated by Python OpenAPI Parser
    """
    
    WaitPrimaryMembers = 'WaitPrimaryMembers'
    WaitPrimaryAndOverflowMembers = 'WaitPrimaryAndOverflowMembers'
    Voicemail = 'Voicemail'
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseQueueFixedOrderAgentsItemExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Number of department extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseQueueFixedOrderAgentsItem(DataClassJsonMixin):
    extension: Optional[UpdateAnsweringRuleResponseQueueFixedOrderAgentsItemExtension] = None
    index: Optional[int] = None
    """ Ordinal of an agent (call queue member) """
    

class UpdateAnsweringRuleResponseQueueHoldAudioInterruptionMode(Enum):
    """ Connecting audio interruption mode """
    
    Never = 'Never'
    WhenMusicEnds = 'WhenMusicEnds'
    Periodically = 'Periodically'

class UpdateAnsweringRuleResponseQueueHoldTimeExpirationAction(Enum):
    """
    Specifies the type of action to be taken after the hold time (waiting for an available call
    queue member) expires. If 'TransferToExtension' option is selected, the extension specified in
    `transfer` field is used. The default value is `Voicemail`
    
    Generated by Python OpenAPI Parser
    """
    
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'
    Voicemail = 'Voicemail'

class UpdateAnsweringRuleResponseQueueMaxCallersAction(Enum):
    """
    Specifies the type of action to be taken if count of callers on hold exceeds the supported
    maximum
    
    Generated by Python OpenAPI Parser
    """
    
    Voicemail = 'Voicemail'
    Announcement = 'Announcement'
    TransferToExtension = 'TransferToExtension'
    UnconditionalForwarding = 'UnconditionalForwarding'

class UpdateAnsweringRuleResponseQueueUnconditionalForwardingItemAction(Enum):
    """ Event that initiates forwarding to the specified phone number """
    
    HoldTimeExpiration = 'HoldTimeExpiration'
    MaxCallers = 'MaxCallers'
    NoAnswer = 'NoAnswer'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseQueueUnconditionalForwardingItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number to which the call is forwarded. In addition to common e.164 format, the following
    number patterns are supported: 11xxxxxxxxxxx, 444xxxxxxxxxxx, 616xxxxxxxxxxx; where xxxxxxxxxxx
    is a phone number in e.164 format (without '+' sign)
    """
    
    action: Optional[UpdateAnsweringRuleResponseQueueUnconditionalForwardingItemAction] = None
    """ Event that initiates forwarding to the specified phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseQueue(DataClassJsonMixin):
    """
    Queue settings applied for department (call queue) extension type, with the 'AgentQueue' value
    specified as a call handling action
    
    Generated by Python OpenAPI Parser
    """
    
    transfer_mode: Optional[UpdateAnsweringRuleResponseQueueTransferMode] = None
    """ Specifies how calls are transferred to group members """
    
    transfer: Optional[List[UpdateAnsweringRuleResponseQueueTransferItem]] = None
    """ Call transfer information """
    
    no_answer_action: Optional[UpdateAnsweringRuleResponseQueueNoAnswerAction] = None
    """
    Specifies the type of action to be taken if: members are available but no one answers, or all
    members are busy/unavailable. This option is available for Business hours only. For
    simultaneous transfer mode only 'WaitPrimaryMembers' and 'WaitPrimaryAndOverflowMembers' are
    supported
    """
    
    fixed_order_agents: Optional[List[UpdateAnsweringRuleResponseQueueFixedOrderAgentsItem]] = None
    """ Information on a call forwarding rule """
    
    hold_audio_interruption_mode: Optional[UpdateAnsweringRuleResponseQueueHoldAudioInterruptionMode] = None
    """ Connecting audio interruption mode """
    
    hold_audio_interruption_period: Optional[int] = None
    """ Connecting audio interruption message period in seconds """
    
    hold_time_expiration_action: Optional[UpdateAnsweringRuleResponseQueueHoldTimeExpirationAction] = 'Voicemail'
    """
    Specifies the type of action to be taken after the hold time (waiting for an available call
    queue member) expires. If 'TransferToExtension' option is selected, the extension specified in
    `transfer` field is used. The default value is `Voicemail`
    """
    
    agent_timeout: Optional[int] = None
    """ Maximum time in seconds to wait for a call queue member before trying the next member """
    
    wrap_up_time: Optional[int] = None
    """
    Minimum post-call wrap up time in seconds before agent status is automatically set; the value
    range is from 180 to 300
    """
    
    hold_time: Optional[int] = None
    """ Maximum hold time in seconds to wait for an available call queue member """
    
    max_callers: Optional[int] = None
    """ Maximum count of callers on hold; the limitation is 25 callers """
    
    max_callers_action: Optional[UpdateAnsweringRuleResponseQueueMaxCallersAction] = None
    """
    Specifies the type of action to be taken if count of callers on hold exceeds the supported
    maximum
    """
    
    unconditional_forwarding: Optional[List[UpdateAnsweringRuleResponseQueueUnconditionalForwardingItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseTransferExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Number of department extension """
    
    partner_id: Optional[str] = None
    """
    For Partner Applications Internal identifier of an extension created by partner. The
    RingCentral supports the mapping of accounts and stores the corresponding account ID/extension
    ID for each partner ID of a client application. In request URIs partner IDs are accepted
    instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in
    response URIs contain the corresponding account IDs and extension IDs. In all request and
    response bodies these values are reflected via partnerId attributes of account and extension
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseTransfer(DataClassJsonMixin):
    """
    Transfer settings applied for department (call queue) extension type, with
    'TransferToExtension' call handling action
    
    Generated by Python OpenAPI Parser
    """
    
    extension: Optional[UpdateAnsweringRuleResponseTransferExtension] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseVoicemailRecipient(DataClassJsonMixin):
    """ Recipient data """
    
    uri: Optional[str] = None
    """ Link to a recipient extension resource """
    
    id: Optional[int] = None
    """ Internal identifier of a recipient extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseVoicemail(DataClassJsonMixin):
    """ Specifies whether to take a voicemail and who should do it """
    
    enabled: Optional[bool] = None
    """ If 'True' then voicemails are allowed to be received """
    
    recipient: Optional[UpdateAnsweringRuleResponseVoicemailRecipient] = None
    """ Recipient data """
    

class UpdateAnsweringRuleResponseGreetingsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Custom = 'Custom'
    Company = 'Company'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    AutomaticRecording = 'AutomaticRecording'

class UpdateAnsweringRuleResponseGreetingsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseGreetingsItemPreset(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a greeting resource """
    
    id: Optional[str] = None
    """ Internal identifier of a greeting """
    
    name: Optional[str] = None
    """ Name of a greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseGreetingsItemCustom(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a custom user greeting """
    
    id: Optional[str] = None
    """ Internal identifier of a custom user greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseGreetingsItem(DataClassJsonMixin):
    type: Optional[UpdateAnsweringRuleResponseGreetingsItemType] = None
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    usage_type: Optional[UpdateAnsweringRuleResponseGreetingsItemUsageType] = None
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    """
    
    preset: Optional[UpdateAnsweringRuleResponseGreetingsItemPreset] = None
    custom: Optional[UpdateAnsweringRuleResponseGreetingsItemCustom] = None

class UpdateAnsweringRuleResponseScreening(Enum):
    """
    Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then
    callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not
    in contact list, then callers are asked to say their name before connecting; 'Always' - the
    callers are always asked to say their name before connecting. The default value is 'Off'
    
    Generated by Python OpenAPI Parser
    """
    
    Off = 'Off'
    NoCallerId = 'NoCallerId'
    UnknownCallerId = 'UnknownCallerId'
    Always = 'Always'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponseSharedLines(DataClassJsonMixin):
    """ SharedLines call handling action settings """
    
    timeout: Optional[int] = None
    """ Number of seconds to wait before forwarding unanswered calls. The value range is 10 - 80 """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateAnsweringRuleResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI to an answering rule resource """
    
    id: Optional[str] = None
    """ Internal identifier of an answering rule """
    
    type: Optional[UpdateAnsweringRuleResponseType] = None
    """ Type of an answering rule """
    
    name: Optional[str] = None
    """ Name of an answering rule specified by user """
    
    enabled: Optional[bool] = None
    """ Specifies if an answering rule is active or inactive """
    
    schedule: Optional[UpdateAnsweringRuleResponseSchedule] = None
    """ Schedule when an answering rule should be applied """
    
    called_numbers: Optional[List[UpdateAnsweringRuleResponseCalledNumbersItem]] = None
    """ Answering rules are applied when calling to selected number(s) """
    
    callers: Optional[List[UpdateAnsweringRuleResponseCallersItem]] = None
    """ Answering rules are applied when calls are received from specified caller(s) """
    
    call_handling_action: Optional[UpdateAnsweringRuleResponseCallHandlingAction] = None
    """ Specifies how incoming calls are forwarded """
    
    forwarding: Optional[UpdateAnsweringRuleResponseForwarding] = None
    """
    Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These
    settings determine the forwarding numbers to which the call will be forwarded
    """
    
    unconditional_forwarding: Optional[UpdateAnsweringRuleResponseUnconditionalForwarding] = None
    """
    Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in
    'callHandlingAction'
    """
    
    queue: Optional[UpdateAnsweringRuleResponseQueue] = None
    """
    Queue settings applied for department (call queue) extension type, with the 'AgentQueue' value
    specified as a call handling action
    """
    
    transfer: Optional[UpdateAnsweringRuleResponseTransfer] = None
    """
    Transfer settings applied for department (call queue) extension type, with
    'TransferToExtension' call handling action
    """
    
    voicemail: Optional[UpdateAnsweringRuleResponseVoicemail] = None
    """ Specifies whether to take a voicemail and who should do it """
    
    greetings: Optional[List[UpdateAnsweringRuleResponseGreetingsItem]] = None
    """
    Greetings applied for an answering rule; only predefined greetings can be applied, see
    Dictionary Greeting List
    """
    
    screening: Optional[UpdateAnsweringRuleResponseScreening] = None
    """
    Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then
    callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not
    in contact list, then callers are asked to say their name before connecting; 'Always' - the
    callers are always asked to say their name before connecting. The default value is 'Off'
    """
    
    shared_lines: Optional[UpdateAnsweringRuleResponseSharedLines] = None
    """ SharedLines call handling action settings """
    

class ListCompanyAnsweringRulesResponseRecordsItemType(Enum):
    """
    Type of an answering rule, the default value is 'Custom' = ['BusinessHours', 'AfterHours',
    'Custom']
    
    Generated by Python OpenAPI Parser
    """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'
    Custom = 'Custom'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListCompanyAnsweringRulesResponseRecordsItemCalledNumbersItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """ Called phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListCompanyAnsweringRulesResponseRecordsItemExtension(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListCompanyAnsweringRulesResponseRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an answering rule """
    
    uri: Optional[str] = None
    """ Canonical URI of an answering rule """
    
    enabled: Optional[bool] = True
    """ Specifies if the rule is active or inactive. The default value is 'True' """
    
    type: Optional[ListCompanyAnsweringRulesResponseRecordsItemType] = None
    """
    Type of an answering rule, the default value is 'Custom' = ['BusinessHours', 'AfterHours',
    'Custom']
    """
    
    name: Optional[str] = None
    """
    Name of an answering rule specified by user. Max number of symbols is 30. The default value is
    'My Rule N' where 'N' is the first free number
    """
    
    called_numbers: Optional[List[ListCompanyAnsweringRulesResponseRecordsItemCalledNumbersItem]] = None
    """ Answering rules are applied when calling to selected number(s) """
    
    extension: Optional[ListCompanyAnsweringRulesResponseRecordsItemExtension] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListCompanyAnsweringRulesResponsePaging(DataClassJsonMixin):
    """ Information on paging """
    
    page: Optional[int] = None
    """
    The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result
    is empty (because non-existent page was specified or perPage=0 was requested)
    """
    
    per_page: Optional[int] = None
    """
    Current page size, describes how many items are in each page. Default value is 100. Maximum
    value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000)
    is applied
    """
    
    page_start: Optional[int] = None
    """
    The zero-based number of the first element on the current page. Omitted if the page is omitted
    or result is empty
    """
    
    page_end: Optional[int] = None
    """
    The zero-based index of the last element on the current page. Omitted if the page is omitted or
    result is empty
    """
    
    total_pages: Optional[int] = None
    """
    The total number of pages in a dataset. May be omitted for some resources due to performance
    reasons
    """
    
    total_elements: Optional[int] = None
    """
    The total number of elements in a dataset. May be omitted for some resource due to performance
    reasons
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListCompanyAnsweringRulesResponseNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListCompanyAnsweringRulesResponseNavigationNextPage(DataClassJsonMixin):
    """ Canonical URI for the next page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListCompanyAnsweringRulesResponseNavigationPreviousPage(DataClassJsonMixin):
    """ Canonical URI for the previous page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListCompanyAnsweringRulesResponseNavigationLastPage(DataClassJsonMixin):
    """ Canonical URI for the last page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListCompanyAnsweringRulesResponseNavigation(DataClassJsonMixin):
    """ Information on navigation """
    
    first_page: Optional[ListCompanyAnsweringRulesResponseNavigationFirstPage] = None
    """ Canonical URI for the first page of the list """
    
    next_page: Optional[ListCompanyAnsweringRulesResponseNavigationNextPage] = None
    """ Canonical URI for the next page of the list """
    
    previous_page: Optional[ListCompanyAnsweringRulesResponseNavigationPreviousPage] = None
    """ Canonical URI for the previous page of the list """
    
    last_page: Optional[ListCompanyAnsweringRulesResponseNavigationLastPage] = None
    """ Canonical URI for the last page of the list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListCompanyAnsweringRulesResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to an answering rule resource """
    
    records: Optional[List[ListCompanyAnsweringRulesResponseRecordsItem]] = None
    """ List of company answering rules """
    
    paging: Optional[ListCompanyAnsweringRulesResponsePaging] = None
    """ Information on paging """
    
    navigation: Optional[ListCompanyAnsweringRulesResponseNavigation] = None
    """ Information on navigation """
    

class CreateCompanyAnsweringRuleRequestType(Enum):
    """
    Type of an answering rule, the default value is 'Custom' = ['BusinessHours', 'AfterHours',
    'Custom']
    
    Generated by Python OpenAPI Parser
    """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'
    Custom = 'Custom'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestCallersItem(DataClassJsonMixin):
    caller_id: Optional[str] = None
    """ Phone number of a caller """
    
    name: Optional[str] = None
    """ Displayed name for a caller ID """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestCalledNumbersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an account phone number """
    
    phone_number: Optional[str] = None
    """ Phone number of a callee """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesMondayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesTuesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesWednesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesThursdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesFridayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesSaturdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesSundayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestScheduleWeeklyRanges(DataClassJsonMixin):
    """ Weekly schedule. If specified, ranges cannot be specified """
    
    monday: Optional[List[CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesMondayItem]] = None
    """ Time interval for a particular day """
    
    tuesday: Optional[List[CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesTuesdayItem]] = None
    """ Time interval for a particular day """
    
    wednesday: Optional[List[CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesWednesdayItem]] = None
    """ Time interval for a particular day """
    
    thursday: Optional[List[CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesThursdayItem]] = None
    """ Time interval for a particular day """
    
    friday: Optional[List[CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesFridayItem]] = None
    """ Time interval for a particular day """
    
    saturday: Optional[List[CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesSaturdayItem]] = None
    """ Time interval for a particular day """
    
    sunday: Optional[List[CreateCompanyAnsweringRuleRequestScheduleWeeklyRangesSundayItem]] = None
    """ Time interval for a particular day """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestScheduleRangesItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Starting datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    
    to: Optional[str] = None
    """
    Ending datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    

class CreateCompanyAnsweringRuleRequestScheduleRef(Enum):
    """ Reference to Business Hours or After Hours schedule """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestSchedule(DataClassJsonMixin):
    """ Schedule when an answering rule should be applied """
    
    weekly_ranges: Optional[CreateCompanyAnsweringRuleRequestScheduleWeeklyRanges] = None
    """ Weekly schedule. If specified, ranges cannot be specified """
    
    ranges: Optional[List[CreateCompanyAnsweringRuleRequestScheduleRangesItem]] = None
    """ Specific data ranges. If specified, weeklyRanges cannot be specified """
    
    ref: Optional[CreateCompanyAnsweringRuleRequestScheduleRef] = None
    """ Reference to Business Hours or After Hours schedule """
    

class CreateCompanyAnsweringRuleRequestCallHandlingAction(Enum):
    """
    Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play
    company greeting and forward to operator extension 'Disconnect' - play company greeting and
    disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect',
    'Bypass']
    
    Generated by Python OpenAPI Parser
    """
    
    Operator = 'Operator'
    Disconnect = 'Disconnect'
    Bypass = 'Bypass'

class CreateCompanyAnsweringRuleRequestGreetingsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Custom = 'Custom'
    Company = 'Company'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    AutomaticRecording = 'AutomaticRecording'

class CreateCompanyAnsweringRuleRequestGreetingsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestGreetingsItemPreset(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a greeting resource """
    
    id: Optional[str] = None
    """ Internal identifier of a greeting """
    
    name: Optional[str] = None
    """ Name of a greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestGreetingsItemCustom(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a custom user greeting """
    
    id: Optional[str] = None
    """ Internal identifier of a custom user greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequestGreetingsItem(DataClassJsonMixin):
    type: Optional[CreateCompanyAnsweringRuleRequestGreetingsItemType] = None
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    usage_type: Optional[CreateCompanyAnsweringRuleRequestGreetingsItemUsageType] = None
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    """
    
    preset: Optional[CreateCompanyAnsweringRuleRequestGreetingsItemPreset] = None
    custom: Optional[CreateCompanyAnsweringRuleRequestGreetingsItemCustom] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleRequest(DataClassJsonMixin):
    name: Optional[str] = None
    """
    Name of an answering rule specified by user. Max number of symbols is 30. The default value is
    'My Rule N' where 'N' is the first free number
    """
    
    enabled: Optional[bool] = True
    """ Specifies if the rule is active or inactive. The default value is 'True' """
    
    type: Optional[CreateCompanyAnsweringRuleRequestType] = None
    """
    Type of an answering rule, the default value is 'Custom' = ['BusinessHours', 'AfterHours',
    'Custom']
    """
    
    callers: Optional[List[CreateCompanyAnsweringRuleRequestCallersItem]] = None
    """ Answering rule will be applied when calls are received from the specified caller(s) """
    
    called_numbers: Optional[List[CreateCompanyAnsweringRuleRequestCalledNumbersItem]] = None
    """ Answering rule will be applied when calling the specified number(s) """
    
    schedule: Optional[CreateCompanyAnsweringRuleRequestSchedule] = None
    """ Schedule when an answering rule should be applied """
    
    call_handling_action: Optional[CreateCompanyAnsweringRuleRequestCallHandlingAction] = None
    """
    Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play
    company greeting and forward to operator extension 'Disconnect' - play company greeting and
    disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect',
    'Bypass']
    """
    
    extension: Optional[str] = None
    """ Extension to which the call is forwarded in 'Bypass' mode """
    
    greetings: Optional[List[CreateCompanyAnsweringRuleRequestGreetingsItem]] = None
    """
    Greetings applied for an answering rule; only predefined greetings can be applied, see
    Dictionary Greeting List
    """
    

class CreateCompanyAnsweringRuleResponseType(Enum):
    """ Type of an answering rule """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'
    Custom = 'Custom'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseCallersItem(DataClassJsonMixin):
    caller_id: Optional[str] = None
    """ Phone number of a caller """
    
    name: Optional[str] = None
    """ Displayed name for a caller ID """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseCalledNumbersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an account phone number """
    
    phone_number: Optional[str] = None
    """ Phone number of a callee """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesMondayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesThursdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesFridayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesSundayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseScheduleWeeklyRanges(DataClassJsonMixin):
    """ Weekly schedule. If specified, ranges cannot be specified """
    
    monday: Optional[List[CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesMondayItem]] = None
    """ Time interval for a particular day """
    
    tuesday: Optional[List[CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem]] = None
    """ Time interval for a particular day """
    
    wednesday: Optional[List[CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem]] = None
    """ Time interval for a particular day """
    
    thursday: Optional[List[CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesThursdayItem]] = None
    """ Time interval for a particular day """
    
    friday: Optional[List[CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesFridayItem]] = None
    """ Time interval for a particular day """
    
    saturday: Optional[List[CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem]] = None
    """ Time interval for a particular day """
    
    sunday: Optional[List[CreateCompanyAnsweringRuleResponseScheduleWeeklyRangesSundayItem]] = None
    """ Time interval for a particular day """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseScheduleRangesItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Starting datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    
    to: Optional[str] = None
    """
    Ending datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    

class CreateCompanyAnsweringRuleResponseScheduleRef(Enum):
    """ Reference to Business Hours or After Hours schedule = ['BusinessHours', 'AfterHours'] """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseSchedule(DataClassJsonMixin):
    """ Schedule when an answering rule should be applied """
    
    weekly_ranges: Optional[CreateCompanyAnsweringRuleResponseScheduleWeeklyRanges] = None
    """ Weekly schedule. If specified, ranges cannot be specified """
    
    ranges: Optional[List[CreateCompanyAnsweringRuleResponseScheduleRangesItem]] = None
    """ Specific data ranges. If specified, weeklyRanges cannot be specified """
    
    ref: Optional[CreateCompanyAnsweringRuleResponseScheduleRef] = None
    """ Reference to Business Hours or After Hours schedule = ['BusinessHours', 'AfterHours'] """
    

class CreateCompanyAnsweringRuleResponseCallHandlingAction(Enum):
    """
    Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play
    company greeting and forward to operator extension 'Disconnect' - play company greeting and
    disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect',
    'Bypass']
    
    Generated by Python OpenAPI Parser
    """
    
    Operator = 'Operator'
    Disconnect = 'Disconnect'
    Bypass = 'Bypass'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseExtension(DataClassJsonMixin):
    """ Extension to which the call is forwarded in 'Bypass' mode """
    
    id: Optional[str] = None
    """ Internal identifier of an extension """
    

class CreateCompanyAnsweringRuleResponseGreetingsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Custom = 'Custom'
    Company = 'Company'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    AutomaticRecording = 'AutomaticRecording'

class CreateCompanyAnsweringRuleResponseGreetingsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseGreetingsItemPreset(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a greeting resource """
    
    id: Optional[str] = None
    """ Internal identifier of a greeting """
    
    name: Optional[str] = None
    """ Name of a greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseGreetingsItemCustom(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a custom user greeting """
    
    id: Optional[str] = None
    """ Internal identifier of a custom user greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponseGreetingsItem(DataClassJsonMixin):
    type: Optional[CreateCompanyAnsweringRuleResponseGreetingsItemType] = None
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    usage_type: Optional[CreateCompanyAnsweringRuleResponseGreetingsItemUsageType] = None
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    """
    
    preset: Optional[CreateCompanyAnsweringRuleResponseGreetingsItemPreset] = None
    custom: Optional[CreateCompanyAnsweringRuleResponseGreetingsItemCustom] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCompanyAnsweringRuleResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an answering rule """
    
    uri: Optional[str] = None
    """ Canonical URI of an answering rule """
    
    enabled: Optional[bool] = True
    """ Specifies if the rule is active or inactive """
    
    type: Optional[CreateCompanyAnsweringRuleResponseType] = 'Custom'
    """ Type of an answering rule """
    
    name: Optional[str] = None
    """
    Name of an answering rule specified by user. Max number of symbols is 30. The default value is
    'My Rule N' where 'N' is the first free number
    """
    
    callers: Optional[List[CreateCompanyAnsweringRuleResponseCallersItem]] = None
    """ Answering rule will be applied when calls are received from the specified caller(s) """
    
    called_numbers: Optional[List[CreateCompanyAnsweringRuleResponseCalledNumbersItem]] = None
    """ Answering rule will be applied when calling the specified number(s) """
    
    schedule: Optional[CreateCompanyAnsweringRuleResponseSchedule] = None
    """ Schedule when an answering rule should be applied """
    
    call_handling_action: Optional[CreateCompanyAnsweringRuleResponseCallHandlingAction] = None
    """
    Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play
    company greeting and forward to operator extension 'Disconnect' - play company greeting and
    disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect',
    'Bypass']
    """
    
    extension: Optional[CreateCompanyAnsweringRuleResponseExtension] = None
    """ Extension to which the call is forwarded in 'Bypass' mode """
    
    greetings: Optional[List[CreateCompanyAnsweringRuleResponseGreetingsItem]] = None
    """
    Greetings applied for an answering rule; only predefined greetings can be applied, see
    Dictionary Greeting List
    """
    

class ReadCompanyAnsweringRuleResponseType(Enum):
    """ Type of an answering rule """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'
    Custom = 'Custom'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseCallersItem(DataClassJsonMixin):
    caller_id: Optional[str] = None
    """ Phone number of a caller """
    
    name: Optional[str] = None
    """ Displayed name for a caller ID """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseCalledNumbersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an account phone number """
    
    phone_number: Optional[str] = None
    """ Phone number of a callee """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesMondayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesThursdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesFridayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesSundayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseScheduleWeeklyRanges(DataClassJsonMixin):
    """ Weekly schedule. If specified, ranges cannot be specified """
    
    monday: Optional[List[ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesMondayItem]] = None
    """ Time interval for a particular day """
    
    tuesday: Optional[List[ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem]] = None
    """ Time interval for a particular day """
    
    wednesday: Optional[List[ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem]] = None
    """ Time interval for a particular day """
    
    thursday: Optional[List[ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesThursdayItem]] = None
    """ Time interval for a particular day """
    
    friday: Optional[List[ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesFridayItem]] = None
    """ Time interval for a particular day """
    
    saturday: Optional[List[ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem]] = None
    """ Time interval for a particular day """
    
    sunday: Optional[List[ReadCompanyAnsweringRuleResponseScheduleWeeklyRangesSundayItem]] = None
    """ Time interval for a particular day """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseScheduleRangesItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Starting datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    
    to: Optional[str] = None
    """
    Ending datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    

class ReadCompanyAnsweringRuleResponseScheduleRef(Enum):
    """ Reference to Business Hours or After Hours schedule = ['BusinessHours', 'AfterHours'] """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseSchedule(DataClassJsonMixin):
    """ Schedule when an answering rule should be applied """
    
    weekly_ranges: Optional[ReadCompanyAnsweringRuleResponseScheduleWeeklyRanges] = None
    """ Weekly schedule. If specified, ranges cannot be specified """
    
    ranges: Optional[List[ReadCompanyAnsweringRuleResponseScheduleRangesItem]] = None
    """ Specific data ranges. If specified, weeklyRanges cannot be specified """
    
    ref: Optional[ReadCompanyAnsweringRuleResponseScheduleRef] = None
    """ Reference to Business Hours or After Hours schedule = ['BusinessHours', 'AfterHours'] """
    

class ReadCompanyAnsweringRuleResponseCallHandlingAction(Enum):
    """
    Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play
    company greeting and forward to operator extension 'Disconnect' - play company greeting and
    disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect',
    'Bypass']
    
    Generated by Python OpenAPI Parser
    """
    
    Operator = 'Operator'
    Disconnect = 'Disconnect'
    Bypass = 'Bypass'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseExtension(DataClassJsonMixin):
    """ Extension to which the call is forwarded in 'Bypass' mode """
    
    id: Optional[str] = None
    """ Internal identifier of an extension """
    

class ReadCompanyAnsweringRuleResponseGreetingsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Custom = 'Custom'
    Company = 'Company'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    AutomaticRecording = 'AutomaticRecording'

class ReadCompanyAnsweringRuleResponseGreetingsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseGreetingsItemPreset(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a greeting resource """
    
    id: Optional[str] = None
    """ Internal identifier of a greeting """
    
    name: Optional[str] = None
    """ Name of a greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseGreetingsItemCustom(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a custom user greeting """
    
    id: Optional[str] = None
    """ Internal identifier of a custom user greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponseGreetingsItem(DataClassJsonMixin):
    type: Optional[ReadCompanyAnsweringRuleResponseGreetingsItemType] = None
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    usage_type: Optional[ReadCompanyAnsweringRuleResponseGreetingsItemUsageType] = None
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    """
    
    preset: Optional[ReadCompanyAnsweringRuleResponseGreetingsItemPreset] = None
    custom: Optional[ReadCompanyAnsweringRuleResponseGreetingsItemCustom] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCompanyAnsweringRuleResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an answering rule """
    
    uri: Optional[str] = None
    """ Canonical URI of an answering rule """
    
    enabled: Optional[bool] = True
    """ Specifies if the rule is active or inactive """
    
    type: Optional[ReadCompanyAnsweringRuleResponseType] = 'Custom'
    """ Type of an answering rule """
    
    name: Optional[str] = None
    """
    Name of an answering rule specified by user. Max number of symbols is 30. The default value is
    'My Rule N' where 'N' is the first free number
    """
    
    callers: Optional[List[ReadCompanyAnsweringRuleResponseCallersItem]] = None
    """ Answering rule will be applied when calls are received from the specified caller(s) """
    
    called_numbers: Optional[List[ReadCompanyAnsweringRuleResponseCalledNumbersItem]] = None
    """ Answering rule will be applied when calling the specified number(s) """
    
    schedule: Optional[ReadCompanyAnsweringRuleResponseSchedule] = None
    """ Schedule when an answering rule should be applied """
    
    call_handling_action: Optional[ReadCompanyAnsweringRuleResponseCallHandlingAction] = None
    """
    Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play
    company greeting and forward to operator extension 'Disconnect' - play company greeting and
    disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect',
    'Bypass']
    """
    
    extension: Optional[ReadCompanyAnsweringRuleResponseExtension] = None
    """ Extension to which the call is forwarded in 'Bypass' mode """
    
    greetings: Optional[List[ReadCompanyAnsweringRuleResponseGreetingsItem]] = None
    """
    Greetings applied for an answering rule; only predefined greetings can be applied, see
    Dictionary Greeting List
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestCallersItem(DataClassJsonMixin):
    caller_id: Optional[str] = None
    """ Phone number of a caller """
    
    name: Optional[str] = None
    """ Displayed name for a caller ID """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestCalledNumbersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an account phone number """
    
    phone_number: Optional[str] = None
    """ Phone number of a callee """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesMondayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesTuesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesWednesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesThursdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesFridayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesSaturdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesSundayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestScheduleWeeklyRanges(DataClassJsonMixin):
    """ Weekly schedule. If specified, ranges cannot be specified """
    
    monday: Optional[List[UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesMondayItem]] = None
    """ Time interval for a particular day """
    
    tuesday: Optional[List[UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesTuesdayItem]] = None
    """ Time interval for a particular day """
    
    wednesday: Optional[List[UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesWednesdayItem]] = None
    """ Time interval for a particular day """
    
    thursday: Optional[List[UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesThursdayItem]] = None
    """ Time interval for a particular day """
    
    friday: Optional[List[UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesFridayItem]] = None
    """ Time interval for a particular day """
    
    saturday: Optional[List[UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesSaturdayItem]] = None
    """ Time interval for a particular day """
    
    sunday: Optional[List[UpdateCompanyAnsweringRuleRequestScheduleWeeklyRangesSundayItem]] = None
    """ Time interval for a particular day """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestScheduleRangesItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Starting datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    
    to: Optional[str] = None
    """
    Ending datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    

class UpdateCompanyAnsweringRuleRequestScheduleRef(Enum):
    """ Reference to Business Hours or After Hours schedule """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestSchedule(DataClassJsonMixin):
    """ Schedule when an answering rule should be applied """
    
    weekly_ranges: Optional[UpdateCompanyAnsweringRuleRequestScheduleWeeklyRanges] = None
    """ Weekly schedule. If specified, ranges cannot be specified """
    
    ranges: Optional[List[UpdateCompanyAnsweringRuleRequestScheduleRangesItem]] = None
    """ Specific data ranges. If specified, weeklyRanges cannot be specified """
    
    ref: Optional[UpdateCompanyAnsweringRuleRequestScheduleRef] = None
    """ Reference to Business Hours or After Hours schedule """
    

class UpdateCompanyAnsweringRuleRequestCallHandlingAction(Enum):
    """
    Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play
    company greeting and forward to operator extension 'Disconnect' - play company greeting and
    disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect',
    'Bypass']
    
    Generated by Python OpenAPI Parser
    """
    
    Operator = 'Operator'
    Disconnect = 'Disconnect'
    Bypass = 'Bypass'

class UpdateCompanyAnsweringRuleRequestType(Enum):
    """ Type of an answering rule """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'
    Custom = 'Custom'

class UpdateCompanyAnsweringRuleRequestGreetingsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Custom = 'Custom'
    Company = 'Company'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    AutomaticRecording = 'AutomaticRecording'

class UpdateCompanyAnsweringRuleRequestGreetingsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestGreetingsItemPreset(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a greeting resource """
    
    id: Optional[str] = None
    """ Internal identifier of a greeting """
    
    name: Optional[str] = None
    """ Name of a greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestGreetingsItemCustom(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a custom user greeting """
    
    id: Optional[str] = None
    """ Internal identifier of a custom user greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequestGreetingsItem(DataClassJsonMixin):
    type: Optional[UpdateCompanyAnsweringRuleRequestGreetingsItemType] = None
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    usage_type: Optional[UpdateCompanyAnsweringRuleRequestGreetingsItemUsageType] = None
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    """
    
    preset: Optional[UpdateCompanyAnsweringRuleRequestGreetingsItemPreset] = None
    custom: Optional[UpdateCompanyAnsweringRuleRequestGreetingsItemCustom] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleRequest(DataClassJsonMixin):
    enabled: Optional[bool] = True
    """ Specifies if the rule is active or inactive. The default value is 'True' """
    
    name: Optional[str] = None
    """
    Name of an answering rule specified by user. Max number of symbols is 30. The default value is
    'My Rule N' where 'N' is the first free number
    """
    
    callers: Optional[List[UpdateCompanyAnsweringRuleRequestCallersItem]] = None
    """ Answering rule will be applied when calls are received from the specified caller(s) """
    
    called_numbers: Optional[List[UpdateCompanyAnsweringRuleRequestCalledNumbersItem]] = None
    """ Answering rule will be applied when calling the specified number(s) """
    
    schedule: Optional[UpdateCompanyAnsweringRuleRequestSchedule] = None
    """ Schedule when an answering rule should be applied """
    
    call_handling_action: Optional[UpdateCompanyAnsweringRuleRequestCallHandlingAction] = None
    """
    Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play
    company greeting and forward to operator extension 'Disconnect' - play company greeting and
    disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect',
    'Bypass']
    """
    
    type: Optional[UpdateCompanyAnsweringRuleRequestType] = 'Custom'
    """ Type of an answering rule """
    
    extension: Optional[str] = None
    """
    Internal identifier of the extension the call is forwarded to. Supported for 'Bypass' mode only
    (that should be specified in `callHandlingAction` field)
    """
    
    greetings: Optional[List[UpdateCompanyAnsweringRuleRequestGreetingsItem]] = None
    """
    Greetings applied for an answering rule; only predefined greetings can be applied, see
    Dictionary Greeting List
    """
    

class UpdateCompanyAnsweringRuleResponseType(Enum):
    """ Type of an answering rule """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'
    Custom = 'Custom'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseCallersItem(DataClassJsonMixin):
    caller_id: Optional[str] = None
    """ Phone number of a caller """
    
    name: Optional[str] = None
    """ Displayed name for a caller ID """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseCalledNumbersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an account phone number """
    
    phone_number: Optional[str] = None
    """ Phone number of a callee """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesMondayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesThursdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesFridayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesSundayItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """ Time in format hh:mm """
    
    to: Optional[str] = None
    """ Time in format hh:mm """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseScheduleWeeklyRanges(DataClassJsonMixin):
    """ Weekly schedule. If specified, ranges cannot be specified """
    
    monday: Optional[List[UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesMondayItem]] = None
    """ Time interval for a particular day """
    
    tuesday: Optional[List[UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesTuesdayItem]] = None
    """ Time interval for a particular day """
    
    wednesday: Optional[List[UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesWednesdayItem]] = None
    """ Time interval for a particular day """
    
    thursday: Optional[List[UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesThursdayItem]] = None
    """ Time interval for a particular day """
    
    friday: Optional[List[UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesFridayItem]] = None
    """ Time interval for a particular day """
    
    saturday: Optional[List[UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesSaturdayItem]] = None
    """ Time interval for a particular day """
    
    sunday: Optional[List[UpdateCompanyAnsweringRuleResponseScheduleWeeklyRangesSundayItem]] = None
    """ Time interval for a particular day """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseScheduleRangesItem(DataClassJsonMixin):
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Starting datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    
    to: Optional[str] = None
    """
    Ending datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example
    *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*
    """
    

class UpdateCompanyAnsweringRuleResponseScheduleRef(Enum):
    """ Reference to Business Hours or After Hours schedule = ['BusinessHours', 'AfterHours'] """
    
    BusinessHours = 'BusinessHours'
    AfterHours = 'AfterHours'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseSchedule(DataClassJsonMixin):
    """ Schedule when an answering rule should be applied """
    
    weekly_ranges: Optional[UpdateCompanyAnsweringRuleResponseScheduleWeeklyRanges] = None
    """ Weekly schedule. If specified, ranges cannot be specified """
    
    ranges: Optional[List[UpdateCompanyAnsweringRuleResponseScheduleRangesItem]] = None
    """ Specific data ranges. If specified, weeklyRanges cannot be specified """
    
    ref: Optional[UpdateCompanyAnsweringRuleResponseScheduleRef] = None
    """ Reference to Business Hours or After Hours schedule = ['BusinessHours', 'AfterHours'] """
    

class UpdateCompanyAnsweringRuleResponseCallHandlingAction(Enum):
    """
    Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play
    company greeting and forward to operator extension 'Disconnect' - play company greeting and
    disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect',
    'Bypass']
    
    Generated by Python OpenAPI Parser
    """
    
    Operator = 'Operator'
    Disconnect = 'Disconnect'
    Bypass = 'Bypass'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseExtension(DataClassJsonMixin):
    """ Extension to which the call is forwarded in 'Bypass' mode """
    
    id: Optional[str] = None
    """ Internal identifier of an extension """
    

class UpdateCompanyAnsweringRuleResponseGreetingsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Custom = 'Custom'
    Company = 'Company'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    AutomaticRecording = 'AutomaticRecording'

class UpdateCompanyAnsweringRuleResponseGreetingsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseGreetingsItemPreset(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a greeting resource """
    
    id: Optional[str] = None
    """ Internal identifier of a greeting """
    
    name: Optional[str] = None
    """ Name of a greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseGreetingsItemCustom(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to a custom user greeting """
    
    id: Optional[str] = None
    """ Internal identifier of a custom user greeting """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponseGreetingsItem(DataClassJsonMixin):
    type: Optional[UpdateCompanyAnsweringRuleResponseGreetingsItemType] = None
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    usage_type: Optional[UpdateCompanyAnsweringRuleResponseGreetingsItemUsageType] = None
    """
    Usage type of a greeting, specifying if the greeting is applied to user extension or department
    extension.
    """
    
    preset: Optional[UpdateCompanyAnsweringRuleResponseGreetingsItemPreset] = None
    custom: Optional[UpdateCompanyAnsweringRuleResponseGreetingsItemCustom] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCompanyAnsweringRuleResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an answering rule """
    
    uri: Optional[str] = None
    """ Canonical URI of an answering rule """
    
    enabled: Optional[bool] = True
    """ Specifies if the rule is active or inactive """
    
    type: Optional[UpdateCompanyAnsweringRuleResponseType] = 'Custom'
    """ Type of an answering rule """
    
    name: Optional[str] = None
    """
    Name of an answering rule specified by user. Max number of symbols is 30. The default value is
    'My Rule N' where 'N' is the first free number
    """
    
    callers: Optional[List[UpdateCompanyAnsweringRuleResponseCallersItem]] = None
    """ Answering rule will be applied when calls are received from the specified caller(s) """
    
    called_numbers: Optional[List[UpdateCompanyAnsweringRuleResponseCalledNumbersItem]] = None
    """ Answering rule will be applied when calling the specified number(s) """
    
    schedule: Optional[UpdateCompanyAnsweringRuleResponseSchedule] = None
    """ Schedule when an answering rule should be applied """
    
    call_handling_action: Optional[UpdateCompanyAnsweringRuleResponseCallHandlingAction] = None
    """
    Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play
    company greeting and forward to operator extension 'Disconnect' - play company greeting and
    disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect',
    'Bypass']
    """
    
    extension: Optional[UpdateCompanyAnsweringRuleResponseExtension] = None
    """ Extension to which the call is forwarded in 'Bypass' mode """
    
    greetings: Optional[List[UpdateCompanyAnsweringRuleResponseGreetingsItem]] = None
    """
    Greetings applied for an answering rule; only predefined greetings can be applied, see
    Dictionary Greeting List
    """
    

class ListStandardGreetingsType(Enum):
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    HoldMusic = 'HoldMusic'
    Company = 'Company'

class ListStandardGreetingsUsageType(Enum):
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'
    SharedLinesGroupAnsweringRule = 'SharedLinesGroupAnsweringRule'

class ListStandardGreetingsResponseRecordsItemUsageType(Enum):
    """
    Usage type of a greeting, specifying if the greeting is applied for user extension or
    department extension.
    
    Generated by Python OpenAPI Parser
    """
    
    UserExtensionAnsweringRule = 'UserExtensionAnsweringRule'
    ExtensionAnsweringRule = 'ExtensionAnsweringRule'
    DepartmentExtensionAnsweringRule = 'DepartmentExtensionAnsweringRule'
    BlockedCalls = 'BlockedCalls'
    CallRecording = 'CallRecording'
    CompanyAnsweringRule = 'CompanyAnsweringRule'
    CompanyAfterHoursAnsweringRule = 'CompanyAfterHoursAnsweringRule'
    LimitedExtensionAnsweringRule = 'LimitedExtensionAnsweringRule'
    VoicemailExtensionAnsweringRule = 'VoicemailExtensionAnsweringRule'
    AnnouncementExtensionAnsweringRule = 'AnnouncementExtensionAnsweringRule'
    SharedLinesGroupAnsweringRule = 'SharedLinesGroupAnsweringRule'

class ListStandardGreetingsResponseRecordsItemType(Enum):
    """ Type of a greeting, specifying the case when the greeting is played. """
    
    Introductory = 'Introductory'
    Announcement = 'Announcement'
    AutomaticRecording = 'AutomaticRecording'
    BlockedCallersAll = 'BlockedCallersAll'
    BlockedCallersSpecific = 'BlockedCallersSpecific'
    BlockedNoCallerId = 'BlockedNoCallerId'
    BlockedPayPhones = 'BlockedPayPhones'
    ConnectingMessage = 'ConnectingMessage'
    ConnectingAudio = 'ConnectingAudio'
    StartRecording = 'StartRecording'
    StopRecording = 'StopRecording'
    Voicemail = 'Voicemail'
    Unavailable = 'Unavailable'
    InterruptPrompt = 'InterruptPrompt'
    HoldMusic = 'HoldMusic'
    Company = 'Company'

class ListStandardGreetingsResponseRecordsItemCategory(Enum):
    """
    Category of a greeting, specifying data form. The category value 'None' specifies that
    greetings of a certain type ('Introductory', 'ConnectingAudio', etc.) are switched off for an
    extension = ['Music', 'Message', 'RingTones', 'None']
    
    Generated by Python OpenAPI Parser
    """
    
    Music = 'Music'
    Message = 'Message'
    RingTones = 'RingTones'
    None_ = 'None'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListStandardGreetingsResponseRecordsItemNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None
