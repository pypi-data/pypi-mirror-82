from .model import *
from .utils import datetime_decoder
from .utils import discriminator_decoder
from dataclasses import dataclass
from dataclasses import field
from datetime import date
from datetime import datetime
from datetime import time
from enum import Enum
from http_server_base.auth import *
from http_server_base.model.filtering_json_encoder import FilteringJsonEncoder
from http_server_base.model.iencoder import IEncoder
from http_server_base.tools.filters import filter_out_smart
from http_server_base.tools.logging import RequestLogger
from http_server_base.tools.subrequest_classes import HttpSubrequest
from tornado.httpclient import HTTPRequest
from typing import *
from urllib.parse import ParseResult
from urllib.parse import urlparse

class RingcentralApiClientServers(Enum):
    """ Enum-container of default servers used for `RingcentralApiClient` """
    
    DefaultServer = 'https://platform.ringcentral.com'
    SandboxServer = 'https://platform.devtest.ringcentral.com'

class RingcentralApiClient(AuthorizedClient):
    """
    This is an interactive API explorer for the RingCentral Connect Platform. To use this service,
    you will need to have a developer account.
    
    ## Links
    
    * <a
    href="https://netstorage.ringcentral.com/dpw/api-reference/rc-platform.yml?v=20200817050758"
    target="_blank">RingCentral API Spec</a><span>&nbsp;&nbsp;(OpenAPI fka Swagger
    format)&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://github.com/OAI/OpenAPI-Specification"
    target="_blank">Learn more about OpenAPI</a>
    
    Meta:
         - Generated by Python OpenAPI Parser
    """
    
    server: Union[RingcentralApiClientServers, str]
    logger_name: str = 'ringcentral-client.client'
    model_encoder: Type[IEncoder] = FilteringJsonEncoder
    
    def __init__(self, server: Union[RingcentralApiClientServers, str] = RingcentralApiClientServers.DefaultServer):
        if (isinstance(server, RingcentralApiClientServers)):
            server = server.value
        
        super().__init__()
        self.server = server
        self.initialize_logger()
        self.logger = RequestLogger(None, self.logger)
        
    
    # region Utility Methods
    async def _fetch__form_request(self, request: Union[str, HTTPRequest, HttpSubrequest], **kwargs) -> HttpSubrequest:
        request = await super()._fetch__form_request(request, **kwargs)
        request = await self._fetch__form_request__add_server(request)
        return request
    
    async def _fetch__form_request__add_server(self, request: HttpSubrequest) -> HttpSubrequest:
        parsed: ParseResult = urlparse(request.url)
        if (not parsed.hostname):
            request.url = self.server + request.url
        
        return request
    
    # endregion
    # region Authorization Methods
    async def provide_o_auth2_authorization \
    (
        self,
        state: str = None,
        redirect_uri: str = None,
        *,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        scope: Optional[List[str]] = None,
    ) -> OAuth2AuthorizationProvider:
        provider = OAuth2AuthorizationProvider(client_id=client_id, client_secret=client_secret, redirect_uri=redirect_uri, token_url='https://platform.ringcentral.com/restapi/oauth/token', authorization_url='https://platform.ringcentral.com/restapi/oauth/authorize', refresh_url=None)
        await provider.authorize_via_redirect_uri(state=state, scope=scope)
        return provider
    
    def provide_api_key_authorization(self, api_key: str) -> HeaderApiKeyAuthorizationProvider:
        return HeaderApiKeyAuthorizationProvider(name='api_key', api_key=api_key)
    
    # endregion
    # region Client Methods
    async def read_api_versions(self) -> ReadAPIVersionsResponse:
        """
        Get API Versions
        
        Returns current API version(s) and server info.
        
        Returns:
            `ReadAPIVersionsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model(request=f'/restapi', model=ReadAPIVersionsResponse, expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def read_api_version(self, api_version: str) -> ReadAPIVersionResponse:
        """
        Get Version Info
        
        Returns current API version info by apiVersion.
        
        Arguments:
            api_version: `str`.
                **REQUIRED.** API version to be requested, for example 'v1.0'
        
        Returns:
            `ReadAPIVersionResponse`. API Version
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/{api_version}',
            model = ReadAPIVersionResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_user_call_log \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        extension_number: Optional[str] = None,
        show_blocked: Optional[bool] = True,
        phone_number: Optional[str] = None,
        direction: Optional[List[ReadUserCallLogDirectionItem]] = None,
        session_id: Optional[str] = None,
        type: Optional[List[ReadUserCallLogTypeItem]] = None,
        transport: Optional[List[ReadUserCallLogTransportItem]] = None,
        view: Optional[ReadUserCallLogView] = 'Simple',
        with_recording: Optional[bool] = False,
        recording_type: Optional[ReadUserCallLogRecordingType] = None,
        date_to: Optional[datetime] = None,
        date_from: Optional[datetime] = None,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        show_deleted: Optional[bool] = False,
    ) -> ReadUserCallLogResponse:
        """
        Get User Call Log Records
        
        Returns call log records filtered by parameters specified.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            extension_number: `Optional[str]`, default: `None`.
                Optional. Extension number of a user. If specified, returns call log for a particular extension
                only
            
            show_blocked: `Optional[bool]`, default: `True`.
                Optional. If 'True' then calls from/to blocked numbers are returned
            
            phone_number: `Optional[str]`, default: `None`.
                Optional. Phone number of a caller/callee. If specified, returns all calls (both incoming and
                outcoming) with the phone number specified
            
            direction: `Optional[List[ReadUserCallLogDirectionItem]]`, default: `None`.
                Optional. The direction for the resulting records. If not specified, both inbound and outbound
                records are returned. Multiple values are accepted
            
            session_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a session
            
            type: `Optional[List[ReadUserCallLogTypeItem]]`, default: `None`.
                Optional. Call type of a record. It is allowed to specify more than one type. If not specified,
                all call types are returned. Multiple values are accepted
            
            transport: `Optional[List[ReadUserCallLogTransportItem]]`, default: `None`.
                Optional. Call transport type. 'PSTN' specifies that a call leg is initiated from the PSTN
                network provider; 'VoIP' - from an RC phone. By default this filter is disabled
            
            view: `Optional[ReadUserCallLogView]`, default: `'Simple'`.
                Optional. View of call records. The same view parameter specified for FSync will be applied for
                ISync, the view cannot be changed for ISync
            
            with_recording: `Optional[bool]`, default: `False`.
                Optional. **Deprecated**. Supported for compatibility reasons. `True` if only recorded calls
                are returned. If both `withRecording` and `recordingType` are specified, then `withRecording`
                is ignored
            
            recording_type: `Optional[ReadUserCallLogRecordingType]`, default: `None`.
                Optional. Type of a call recording. If not specified, then calls without recordings are also
                returned
            
            date_to: `Optional[datetime]`, default: `None`.
                Optional. The end datetime for resulting records in (ISO
                8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
                2016-03-10T18:07:52.534Z. The default value is current time
            
            date_from: `Optional[datetime]`, default: `None`.
                Optional. The start datetime for resulting records in (ISO
                8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
                2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are allowed
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
            
            show_deleted: `Optional[bool]`, default: `False`.
                Optional. If 'True' then deleted calls are returned
        
        Returns:
            `ReadUserCallLogResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/call-log',
            query = filter_out_smart({'extensionNumber': extension_number, 'showBlocked': str(show_blocked), 'phoneNumber': phone_number, 'direction': str(direction), 'sessionId': session_id, 'type': str(type), 'transport': str(transport), 'view': str(view), 'withRecording': str(with_recording), 'recordingType': str(recording_type), 'dateTo': datetime.isoformat(date_to), 'dateFrom': datetime.isoformat(date_from), 'page': str(page), 'perPage': str(per_page), 'showDeleted': str(show_deleted)}),
            model = ReadUserCallLogResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_user_call_log \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        date_to: Optional[datetime] = None,
        phone_number: Optional[str] = None,
        extension_number: Optional[str] = None,
        type: Optional[List[DeleteUserCallLogTypeItem]] = None,
        direction: Optional[List[DeleteUserCallLogDirectionItem]] = None,
        date_from: Optional[datetime] = None,
    ):
        """
        Delete User Call Log
        
        Deletes filtered call log records.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            date_to: `Optional[datetime]`, default: `None`.
                Optional. The end datetime for records deletion in (ISO
                8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
                2016-03-10T18:07:52.534Z. The default value is current time
            
            phone_number: `Optional[str]`, default: `None`.
                Optional.
            
            extension_number: `Optional[str]`, default: `None`.
                Optional.
            
            type: `Optional[List[DeleteUserCallLogTypeItem]]`, default: `None`.
                Optional.
            
            direction: `Optional[List[DeleteUserCallLogDirectionItem]]`, default: `None`.
                Optional.
            
            date_from: `Optional[datetime]`, default: `None`.
                Optional.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/call-log',
            method = 'DELETE',
            query = filter_out_smart({'dateTo': datetime.isoformat(date_to), 'phoneNumber': phone_number, 'extensionNumber': extension_number, 'type': str(type), 'direction': str(direction), 'dateFrom': datetime.isoformat(date_from)}),
        )
    
    async def sync_user_call_log \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        sync_type: Optional[List[SyncUserCallLogSyncTypeItem]] = None,
        sync_token: Optional[str] = None,
        date_from: Optional[datetime] = None,
        record_count: Optional[int] = None,
        status_group: Optional[List[SyncUserCallLogStatusGroupItem]] = None,
        view: Optional[SyncUserCallLogView] = 'Simple',
        show_deleted: Optional[bool] = False,
    ) -> SyncUserCallLogResponse:
        """
        Sync User Call Log
        
        Synchronizes call log records.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            sync_type: `Optional[List[SyncUserCallLogSyncTypeItem]]`, default: `None`.
                Optional. Type of synchronization
            
            sync_token: `Optional[str]`, default: `None`.
                Optional. Value of syncToken property of last sync request response
            
            date_from: `Optional[datetime]`, default: `None`.
                Optional. The start datetime for resulting records in (ISO
                8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
                2016-03-10T18:07:52.534Z. The default value is the current moment
            
            record_count: `Optional[int]`, default: `None`.
                Optional. For 'FSync' the parameter is mandatory, it limits the number of records to be
                returned in response. For 'ISync' it specifies with how many records to extend sync Frame to
                the past, the maximum number of records is 250
            
            status_group: `Optional[List[SyncUserCallLogStatusGroupItem]]`, default: `None`.
                Optional. Type of calls to be returned. The default value is 'All'
            
            view: `Optional[SyncUserCallLogView]`, default: `'Simple'`.
                Optional. View of call records. The same view parameter specified for FSync will be applied for
                ISync, the view cannot be changed for ISync
            
            show_deleted: `Optional[bool]`, default: `False`.
                Optional. Supported for ISync. If 'True' then deleted call records are returned
        
        Returns:
            `SyncUserCallLogResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/call-log-sync',
            query = filter_out_smart({'syncType': str(sync_type), 'syncToken': sync_token, 'dateFrom': datetime.isoformat(date_from), 'recordCount': str(record_count), 'statusGroup': str(status_group), 'view': str(view), 'showDeleted': str(show_deleted)}),
            model = SyncUserCallLogResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_user_call_record \
    (
        self,
        call_record_id: List[str],
        extension_id: str,
        account_id: str,
        *,
        view: Optional[ReadUserCallRecordView] = 'Simple',
    ) -> ReadUserCallRecordResponse:
        """
        Get User Call Record
        
        Returns call log records by ID.
        
        Arguments:
            call_record_id: `List[str]`.
                **REQUIRED.**
            
            view: `Optional[ReadUserCallRecordView]`, default: `'Simple'`.
                Optional. View of call records. The view value specified for 'FSync' will also be applied for
                'ISync' by default, since it cannot be changed for ISync
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ReadUserCallRecordResponse`. Call Log Record
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/call-log/{call_record_id}',
            query = filter_out_smart({'view': str(view)}),
            model = ReadUserCallRecordResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_extension_active_calls \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        direction: Optional[List[ListExtensionActiveCallsDirectionItem]] = None,
        view: Optional[ListExtensionActiveCallsView] = 'Simple',
        type: Optional[List[ListExtensionActiveCallsTypeItem]] = None,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
    ) -> ListExtensionActiveCallsResponse:
        """
        Get User Active Calls
        
        Returns records of all extension calls that are in progress, ordered by start time in
        descending order.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            direction: `Optional[List[ListExtensionActiveCallsDirectionItem]]`, default: `None`.
                Optional. The direction for the result records. If not specified, both inbound and outbound
                records are returned. Multiple values are accepted
            
            view: `Optional[ListExtensionActiveCallsView]`, default: `'Simple'`.
                Optional. View of call records. The same view parameter specified for FSync will be applied for
                ISync, the view cannot be changed for ISync
            
            type: `Optional[List[ListExtensionActiveCallsTypeItem]]`, default: `None`.
                Optional. Call type of a record. If not specified, all call types are returned. Multiple values
                are accepted
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are allowed
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
        
        Returns:
            `ListExtensionActiveCallsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/active-calls',
            query = filter_out_smart({'direction': str(direction), 'view': str(view), 'type': str(type), 'page': str(page), 'perPage': str(per_page)}),
            model = ListExtensionActiveCallsResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_company_call_log \
    (
        self,
        account_id: str = '~',
        *,
        extension_number: Optional[str] = None,
        phone_number: Optional[str] = None,
        direction: Optional[List[ReadCompanyCallLogDirectionItem]] = None,
        type: Optional[List[ReadCompanyCallLogTypeItem]] = None,
        view: Optional[ReadCompanyCallLogView] = 'Simple',
        with_recording: Optional[bool] = None,
        recording_type: Optional[ReadCompanyCallLogRecordingType] = None,
        date_from: Optional[datetime] = None,
        date_to: Optional[datetime] = None,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        session_id: Optional[str] = None,
    ) -> ReadCompanyCallLogResponse:
        """
        Get Company Call Log Records
        
        Returns call log records filtered by parameters specified.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_number: `Optional[str]`, default: `None`.
                Optional. Extension number of a user. If specified, returns call log for a particular extension
                only
            
            phone_number: `Optional[str]`, default: `None`.
                Optional. Phone number of a caller/call recipient. If specified, returns all calls (both
                incoming and outcoming) with the phone number specified. Cannot be specified together with the
                extensionNumber filter
            
            direction: `Optional[List[ReadCompanyCallLogDirectionItem]]`, default: `None`.
                Optional. The direction for the result records. If not specified, both inbound and outbound
                records are returned. Multiple values are accepted
            
            type: `Optional[List[ReadCompanyCallLogTypeItem]]`, default: `None`.
                Optional. Call type of a record. If not specified, all call types are returned. Multiple values
                are accepted
            
            view: `Optional[ReadCompanyCallLogView]`, default: `'Simple'`.
                Optional. View of call records. The same view parameter specified for FSync will be applied for
                ISync, the view cannot be changed for ISync
            
            with_recording: `Optional[bool]`, default: `None`.
                Optional. **Deprecated**. Supported for compatibility reasons only. `true` if only recorded
                calls are returned. The default value is `false`. If both `withRecording` and `recordingType`
                are specified, `withRecording` is ignored
            
            recording_type: `Optional[ReadCompanyCallLogRecordingType]`, default: `None`.
                Optional. Type of a call recording. If not specified, then calls without recordings are also
                returned
            
            date_from: `Optional[datetime]`, default: `None`.
                Optional. The start datetime for resulting records in (ISO
                8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
                2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours
            
            date_to: `Optional[datetime]`, default: `None`.
                Optional. The end datetime for resulting records in (ISO
                8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
                2016-03-10T18:07:52.534Z. The default value is current time
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
            
            session_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a call session
        
        Returns:
            `ReadCompanyCallLogResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-log',
            query = filter_out_smart({'extensionNumber': extension_number, 'phoneNumber': phone_number, 'direction': str(direction), 'type': str(type), 'view': str(view), 'withRecording': str(with_recording), 'recordingType': str(recording_type), 'dateFrom': datetime.isoformat(date_from), 'dateTo': datetime.isoformat(date_to), 'page': str(page), 'perPage': str(per_page), 'sessionId': session_id}),
            model = ReadCompanyCallLogResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def sync_account_call_log \
    (
        self,
        account_id: str = '~',
        *,
        sync_type: Optional[SyncAccountCallLogSyncType] = None,
        sync_token: Optional[str] = None,
        date_from: Optional[datetime] = None,
        record_count: Optional[int] = None,
        status_group: Optional[SyncAccountCallLogStatusGroup] = None,
        view: Optional[SyncAccountCallLogView] = 'Simple',
        show_deleted: Optional[bool] = False,
    ) -> SyncAccountCallLogResponse:
        """
        Sync Company Call Log
        
        Synchronizes company call log records.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            sync_type: `Optional[SyncAccountCallLogSyncType]`, default: `None`.
                Optional. Type of synchronization. 'FSync' is a default value
            
            sync_token: `Optional[str]`, default: `None`.
                Optional. Value of syncToken property of last sync request response
            
            date_from: `Optional[datetime]`, default: `None`.
                Optional. The start datetime for resulting records in (ISO
                8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
                2016-03-10T18:07:52.534Z. The default value is the current moment
            
            record_count: `Optional[int]`, default: `None`.
                Optional. For 'FSync' the parameter is mandatory, it limits the number of records to be
                returned in response. For 'ISync' it specifies with how many records to extend sync frame to
                the past, the maximum number of records is 250
            
            status_group: `Optional[SyncAccountCallLogStatusGroup]`, default: `None`.
                Optional. Type of calls to be returned.
            
            view: `Optional[SyncAccountCallLogView]`, default: `'Simple'`.
                Optional. View of call records. The same view parameter specified for FSync will be applied for
                ISync, the view cannot be changed for ISync
            
            show_deleted: `Optional[bool]`, default: `False`.
                Optional. Supported for ISync. If 'True' then deleted call records are returned
        
        Returns:
            `SyncAccountCallLogResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-log-sync',
            query = filter_out_smart({'syncType': str(sync_type), 'syncToken': sync_token, 'dateFrom': datetime.isoformat(date_from), 'recordCount': str(record_count), 'statusGroup': str(status_group), 'view': str(view), 'showDeleted': str(show_deleted)}),
            model = SyncAccountCallLogResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_company_call_record \
    (
        self,
        call_record_id: str,
        account_id: str = '~',
        *,
        view: Optional[ReadCompanyCallRecordView] = 'Simple',
    ) -> ReadCompanyCallRecordResponse:
        """
        Get Company Call Log Record(s)
        
        Returns individual call log record(s) by ID(s). Batch request is supported.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            call_record_id: `str`.
                **REQUIRED.** Internal identifier of a call log record
            
            view: `Optional[ReadCompanyCallRecordView]`, default: `'Simple'`.
                Optional. View of call records. The view value specified for 'FSync' will also be applied for
                'ISync' by default, since it cannot be changed for ISync
        
        Returns:
            `ReadCompanyCallRecordResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-log/{call_record_id}',
            query = filter_out_smart({'view': str(view)}),
            model = ReadCompanyCallRecordResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_company_active_calls \
    (
        self,
        account_id: str = '~',
        *,
        direction: Optional[List[ListCompanyActiveCallsDirectionItem]] = None,
        view: Optional[ListCompanyActiveCallsView] = 'Simple',
        type: Optional[List[ListCompanyActiveCallsTypeItem]] = None,
        transport: Optional[List[ListCompanyActiveCallsTransportItem]] = None,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
    ) -> ListCompanyActiveCallsResponse:
        """
        Get Company Active Calls
        
        Returns records of all calls that are in progress, ordered by start time in descending order.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            direction: `Optional[List[ListCompanyActiveCallsDirectionItem]]`, default: `None`.
                Optional. The direction for the result records. If not specified, both inbound and outbound
                records are returned. Multiple values are accepted
            
            view: `Optional[ListCompanyActiveCallsView]`, default: `'Simple'`.
                Optional. View of call records. The same view parameter specified for FSync will be applied for
                ISync, the view cannot be changed for ISync
            
            type: `Optional[List[ListCompanyActiveCallsTypeItem]]`, default: `None`.
                Optional. Call type of a record. If not specified, all call types are returned. Multiple values
                are accepted
            
            transport: `Optional[List[ListCompanyActiveCallsTransportItem]]`, default: `None`.
                Optional. Call transport type. 'PSTN' specifies that a call leg is initiated from the PSTN
                network provider; 'VoIP' - from an RC phone. By default this filter is disabled
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
        
        Returns:
            `ListCompanyActiveCallsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/active-calls',
            query = filter_out_smart({'direction': str(direction), 'view': str(view), 'type': str(type), 'transport': str(transport), 'page': str(page), 'perPage': str(per_page)}),
            model = ListCompanyActiveCallsResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_call_recording(self, recording_id: str, account_id: str = '~') -> ReadCallRecordingResponse:
        """
        Get Call Recording
        
        Returns call recordings by ID(s).
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            recording_id: `str`.
                **REQUIRED.** Internal identifier of a recording (returned in Call Log)
        
        Returns:
            `ReadCallRecordingResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/recording/{recording_id}',
            model = ReadCallRecordingResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_call_recording_data(self, recording_id: str, account_id: str = '~') -> bytes:
        """
        Get Call Recordings Data
        
        Returns media content of a call recording.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            recording_id: `str`.
                **REQUIRED.** Internal identifier of a recording (returned in Call Log)
        
        Returns:
            `bytes`. Call Recording Media Data
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_binary_data \
        (
            request = f'/restapi/v1.0/account/{account_id}/recording/{recording_id}/content',
            expected_content_type = 'audio/x-wav',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_sms_message(self, data: CreateSMSMessageRequest, account_id: str = '~', extension_id: str = '~') -> CreateSMSMessageResponse:
        """
        Send SMS
        
        Creates and sends a new text message. You can send SMS messages simultaneously to different
        recipients up to 40 requests per minute; this limitation is relevant for all client
        applications. Sending and receiving SMS is available for Toll-Free Numbers within the USA. You
        can send up to 10 attachments in one MMS message; the size of all attachments linked is limited
        to 1500000 bytes.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `CreateSMSMessageRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateSMSMessageResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/sms',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateSMSMessageResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def create_mm_s(self, data: CreateMMSRequest, account_id: str = '~', extension_id: str = '~') -> CreateMMSResponse:
        """
        Create MMS Message
        
        Creates and sends media messages. Sending MMS messages simultaneously to different recipients
        is limited up to 50 requests per minute; relevant for all client applications.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `CreateMMSRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateMMSResponse`. MMS Message
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/mms',
            method = 'POST',
            encode_body = 'multipart/mixed',
            body = data,
            model = CreateMMSResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def create_internal_text_message \
    (
        self,
        data: CreateInternalTextMessageRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> CreateInternalTextMessageResponse:
        """
        Create Internal Text Message
        
        Creates and sends an internal text message.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `CreateInternalTextMessageRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateInternalTextMessageResponse`. Created Text Message
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/company-pager',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateInternalTextMessageResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_fax_message(self, account_id: str, extension_id: str, data: CreateFaxMessageRequest) -> CreateFaxMessageResponse:
        """
        Create Fax Message
        
        Creates and sends/resends a fax message. Resend can be implemented if sending has failed. Fax
        attachment size (both single and total) is limited to 50Mb.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account (integer) or tilde (~) to indicate
                the account which was logged-in within the current session.
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension (integer) or tilde (~) to indicate the
                extension assigned to the account logged-in within the current session
            
            data: `CreateFaxMessageRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateFaxMessageResponse`. Fax Message
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/fax',
            method = 'POST',
            encode_body = 'multipart/form-data',
            body = data,
            model = CreateFaxMessageResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_fax_cover_pages(self, *, page: Optional[int] = 1, per_page: Optional[int] = 100) -> ListFaxCoverPagesResponse:
        """
        Get Fax Cover Page List
        
        Returns fax cover pages available for the current extension.
        
        Arguments:
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
        
        Returns:
            `ListFaxCoverPagesResponse`. List of Fax Cover Pages
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/dictionary/fax-cover-page',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page)}),
            model = ListFaxCoverPagesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_messages \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        availability: Optional[List[ListMessagesAvailabilityItem]] = None,
        conversation_id: Optional[int] = None,
        date_from: Optional[datetime] = None,
        date_to: Optional[datetime] = None,
        direction: Optional[List[ListMessagesDirectionItem]] = None,
        distinct_conversations: Optional[bool] = None,
        message_type: Optional[List[ListMessagesMessageTypeItem]] = None,
        read_status: Optional[List[ListMessagesReadStatusItem]] = None,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        phone_number: Optional[str] = None,
    ) -> ListMessagesResponse:
        """
        Get Message List
        
        Returns the list of messages from an extension mailbox.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            availability: `Optional[List[ListMessagesAvailabilityItem]]`, default: `None`.
                Optional. Specifies the availability status for the resulting messages. Multiple values are
                accepted
            
            conversation_id: `Optional[int]`, default: `None`.
                Optional. Specifies the conversation identifier for the resulting messages
            
            date_from: `Optional[datetime]`, default: `None`.
                Optional. The start datetime for resulting messages in ISO 8601 format including timezone, for
                example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours
            
            date_to: `Optional[datetime]`, default: `None`.
                Optional. The end datetime for resulting messages in ISO 8601 format including timezone, for
                example 2016-03-10T18:07:52.534Z. The default value is current time
            
            direction: `Optional[List[ListMessagesDirectionItem]]`, default: `None`.
                Optional. The direction for the resulting messages. If not specified, both inbound and outbound
                messages are returned. Multiple values are accepted
            
            distinct_conversations: `Optional[bool]`, default: `None`.
                Optional. If 'True', then the latest messages per every conversation ID are returned
            
            message_type: `Optional[List[ListMessagesMessageTypeItem]]`, default: `None`.
                Optional. The type of the resulting messages. If not specified, all messages without message
                type filtering are returned. Multiple values are accepted
            
            read_status: `Optional[List[ListMessagesReadStatusItem]]`, default: `None`.
                Optional. The read status for the resulting messages. Multiple values are accepted
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
            
            phone_number: `Optional[str]`, default: `None`.
                Optional. The phone number. If specified, messages are returned for this particular phone
                number only
        
        Returns:
            `ListMessagesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/message-store',
            query = filter_out_smart({'availability': str(availability), 'conversationId': str(conversation_id), 'dateFrom': datetime.isoformat(date_from), 'dateTo': datetime.isoformat(date_to), 'direction': str(direction), 'distinctConversations': str(distinct_conversations), 'messageType': str(message_type), 'readStatus': str(read_status), 'page': str(page), 'perPage': str(per_page), 'phoneNumber': phone_number}),
            model = ListMessagesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_message_by_filter \
    (
        self,
        extension_id: str,
        account_id: str,
        *,
        conversation_id: Optional[List[str]] = None,
        date_to: Optional[datetime] = None,
        type: Optional[DeleteMessageByFilterType] = 'All',
    ):
        """
        Delete Conversation
        
        Deletes conversation(s) by conversation ID(s). Batch request is supported, max number of IDs
        passed as query/path parameters is 50. Alternative syntax is supported - user converations can
        be deleted by passing multiple IDs in request body as an array of string, max number of
        conversation IDs passed in request body is 100. In this case asterisk is used in the path
        instead of IDs
        
        Arguments:
            conversation_id: `Optional[List[str]]`, default: `None`.
                Optional.
            
            date_to: `Optional[datetime]`, default: `None`.
                Optional. Messages received earlier then the date specified will be deleted. The default value
                is current datetime
            
            type: `Optional[DeleteMessageByFilterType]`, default: `'All'`.
                Optional. Type of messages to be deleted
            
            extension_id: `str`.
                **REQUIRED.**
            
            account_id: `str`.
                **REQUIRED.**
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/message-store',
            method = 'DELETE',
            query = filter_out_smart({'conversationId': str(conversation_id), 'dateTo': datetime.isoformat(date_to), 'type': str(type)}),
            expected_codes = [ 204 ],
        )
    
    async def read_message(self, message_id: int, account_id: str = '~', extension_id: str = '~') -> ReadMessageResponse:
        """
        Get Message
        
        Returns individual message record(s) by the given message ID(s). The length of inbound messages
        is unlimited. Batch request is supported.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            message_id: `int`.
                **REQUIRED.** Internal identifier of a message
        
        Returns:
            `ReadMessageResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/message-store/{message_id}',
            model = ReadMessageResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_message \
    (
        self,
        message_id: int,
        data: UpdateMessageRequest,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        date_from: Optional[str] = None,
        type: Optional[UpdateMessageType] = None,
    ) -> UpdateMessageResponse:
        """
        Update Message List
        
        Updates message(s) by ID(s). Currently only message read status can be updated. Batch request
        is supported, max number of IDs passed as query/path parameters is 50. Alternative syntax is
        supported - user messages can be updated by passing multiple IDs in request body as an array of
        string, max number of IDs passed in request body is 1000. In this case asterisk is used in the
        path instead of IDs
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            message_id: `int`.
                **REQUIRED.** Internal identifier of a message
            
            date_from: `Optional[str]`, default: `None`.
                Optional.
            
            type: `Optional[UpdateMessageType]`, default: `None`.
                Optional.
            
            data: `UpdateMessageRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateMessageResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/message-store/{message_id}',
            method = 'PUT',
            query = filter_out_smart({'dateFrom': date_from, 'type': str(type)}),
            encode_body = 'application/json',
            body = data,
            model = UpdateMessageResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_message \
    (
        self,
        message_id: int,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        purge: Optional[bool] = False,
        conversation_id: Optional[int] = None,
    ):
        """
        Delete Message
        
        Deletes message(s) by the given message ID(s). The first call of this method transfers the
        message to the 'Delete' status. The second call transfers the deleted message to the 'Purged'
        status. If it is required to make the message 'Purged' immediately (from the first call), then
        set the query parameter purge to 'True'.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            message_id: `int`.
                **REQUIRED.** Internal identifier of a message
            
            purge: `Optional[bool]`, default: `False`.
                Optional. If the value is 'True', then the message is purged immediately with all the
                attachments
            
            conversation_id: `Optional[int]`, default: `None`.
                Optional. Internal identifier of a message thread
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/message-store/{message_id}',
            method = 'DELETE',
            query = filter_out_smart({'purge': str(purge), 'conversationId': str(conversation_id)}),
            expected_codes = [ 204 ],
        )
    
    async def read_message_content \
    (
        self,
        attachment_id: int,
        message_id: int,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        content_disposition: Optional[ReadMessageContentContentDisposition] = 'Inline',
        range: Optional[str] = None,
    ) -> bytes:
        """
        Get Message Content
        
        Returns a specific message attachment data as media stream.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            attachment_id: `int`.
                **REQUIRED.** Internal identifier of a message attachment
            
            message_id: `int`.
                **REQUIRED.** Internal identifier of a message
            
            range: `Optional[str]`, default: `None`.
                Optional.
            
            content_disposition: `Optional[ReadMessageContentContentDisposition]`, default: `'Inline'`.
                Optional. Content disposition of a response
        
        Returns:
            `bytes`. Attachment Data
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_binary_data \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/message-store/{message_id}/content/{attachment_id}',
            query = filter_out_smart({'contentDisposition': str(content_disposition)}),
            headers = filter_out_smart({'Range': range}),
            expected_content_type = 'text/plain',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def sync_messages \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        conversation_id: Optional[int] = None,
        date_from: Optional[datetime] = None,
        date_to: Optional[datetime] = None,
        direction: Optional[List[SyncMessagesDirectionItem]] = None,
        distinct_conversations: Optional[bool] = None,
        message_type: Optional[List[SyncMessagesMessageTypeItem]] = None,
        record_count: Optional[int] = None,
        sync_token: Optional[str] = None,
        sync_type: Optional[List[SyncMessagesSyncTypeItem]] = None,
    ) -> SyncMessagesResponse:
        """
        Sync Messages
        
        Synchronizes messages.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            conversation_id: `Optional[int]`, default: `None`.
                Optional. Conversation identifier for the resulting messages. Meaningful for SMS and Pager
                messages only.
            
            date_from: `Optional[datetime]`, default: `None`.
                Optional. The start datetime for resulting messages in ISO 8601 format including timezone, for
                example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours
            
            date_to: `Optional[datetime]`, default: `None`.
                Optional. The end datetime for resulting messages in ISO 8601 format including timezone, for
                example 2016-03-10T18:07:52.534Z. The default value is current time
            
            direction: `Optional[List[SyncMessagesDirectionItem]]`, default: `None`.
                Optional. Direction for the resulting messages. If not specified, both inbound and outbound
                messages are returned. Multiple values are accepted
            
            distinct_conversations: `Optional[bool]`, default: `None`.
                Optional. If 'True', then the latest messages per every conversation ID are returned
            
            message_type: `Optional[List[SyncMessagesMessageTypeItem]]`, default: `None`.
                Optional. Type for the resulting messages. If not specified, all types of messages are
                returned. Multiple values are accepted
            
            record_count: `Optional[int]`, default: `None`.
                Optional. Limits the number of records to be returned (works in combination with dateFrom and
                dateTo if specified)
            
            sync_token: `Optional[str]`, default: `None`.
                Optional. Value of syncToken property of last sync request response
            
            sync_type: `Optional[List[SyncMessagesSyncTypeItem]]`, default: `None`.
                Optional. Type of message synchronization
        
        Returns:
            `SyncMessagesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/message-sync',
            query = filter_out_smart({'conversationId': str(conversation_id), 'dateFrom': datetime.isoformat(date_from), 'dateTo': datetime.isoformat(date_to), 'direction': str(direction), 'distinctConversations': str(distinct_conversations), 'messageType': str(message_type), 'recordCount': str(record_count), 'syncToken': sync_token, 'syncType': str(sync_type)}),
            model = SyncMessagesResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_message_store_configuration(self, account_id: str) -> ReadMessageStoreConfigurationResponse:
        """
        Get Message Store Configuration
        
        Returns message store settings.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ReadMessageStoreConfigurationResponse`. Successful operation
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/message-store-configuration',
            model = ReadMessageStoreConfigurationResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_message_store_configuration(self, account_id: str, data: UpdateMessageStoreConfigurationRequest) -> UpdateMessageStoreConfigurationResponse:
        """
        Update Message Store Configuration
        
        Updates message store settings.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `UpdateMessageStoreConfigurationRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateMessageStoreConfigurationResponse`. Successful operation
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/message-store-configuration',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateMessageStoreConfigurationResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_ring_out_call(self, data: CreateRingOutCallRequest, account_id: str = '~', extension_id: str = '~') -> CreateRingOutCallResponse:
        """
        Make RingOut Call
        
        Makes a 2-leg RingOut call.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `CreateRingOutCallRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateRingOutCallResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/ring-out',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateRingOutCallResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_ring_out_call_status(self, ringout_id: str, account_id: str = '~', extension_id: str = '~') -> ReadRingOutCallStatusResponse:
        """
        Get RingOut Call Status
        
        Returns the status of a 2-leg RingOut call.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            ringout_id: `str`.
                **REQUIRED.** Internal identifier of a RingOut call
        
        Returns:
            `ReadRingOutCallStatusResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/ring-out/{ringout_id}',
            model = ReadRingOutCallStatusResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def delete_ring_out_call(self, ringout_id: str, account_id: str = '~', extension_id: str = '~'):
        """
        Cancel RingOut Call
        
        Cancels a 2-leg RingOut call.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            ringout_id: `str`.
                **REQUIRED.** Internal identifier of a RingOut call
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/ring-out/{ringout_id}', method='DELETE')
    
    async def create_ring_out_call_deprecated(self, account_id: str = '~', extension_id: str = '~') -> CreateRingOutCallDeprecatedResponse:
        """
        Make RingOut Call
        
        Makes a 2-leg RingOut call.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
        
        Returns:
            `CreateRingOutCallDeprecatedResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/ringout',
            method = 'POST',
            model = CreateRingOutCallDeprecatedResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_ring_out_call_status_deprecated \
    (
        self,
        ringout_id: int,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> ReadRingOutCallStatusDeprecatedResponse:
        """
        Get RingOut Call Status
        
        Returns status of a 2-leg RingOut call.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            ringout_id: `int`.
                **REQUIRED.** Internal identifier of a RingOut call
        
        Returns:
            `ReadRingOutCallStatusDeprecatedResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/ringout/{ringout_id}',
            model = ReadRingOutCallStatusDeprecatedResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def delete_ring_out_call_deprecated(self, ringout_id: int, account_id: str = '~', extension_id: str = '~'):
        """
        Cancel RingOut Call
        
        Cancels a 2-leg RingOut call.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            ringout_id: `int`.
                **REQUIRED.** Internal identifier of a RingOut call
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/ringout/{ringout_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def list_contacts \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        starts_with: Optional[str] = None,
        sort_by: Optional[List[ListContactsSortByItem]] = None,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        phone_number: Optional[List[str]] = None,
    ) -> ListContactsResponse:
        """
        Get Contact List
        
        Returns user personal contacts.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            starts_with: `Optional[str]`, default: `None`.
                Optional. If specified, only contacts whose First name or Last name start with the mentioned
                substring are returned. Case-insensitive
            
            sort_by: `Optional[List[ListContactsSortByItem]]`, default: `None`.
                Optional. Sorts results by the specified property
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
            
            phone_number: `Optional[List[str]]`, default: `None`.
                Optional.
        
        Returns:
            `ListContactsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/address-book/contact',
            query = filter_out_smart({'startsWith': starts_with, 'sortBy': str(sort_by), 'page': str(page), 'perPage': str(per_page), 'phoneNumber': str(phone_number)}),
            model = ListContactsResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def create_contact \
    (
        self,
        data: CreateContactRequest,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        dialing_plan: Optional[str] = None,
    ) -> CreateContactResponse:
        """
        Create Contact
        
        Creates personal user contact.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            dialing_plan: `Optional[str]`, default: `None`.
                Optional. A country code value complying with the [ISO 3166-1
                alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home
                country of the current extension
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `CreateContactRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateContactResponse`. New Contact
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/address-book/contact',
            method = 'POST',
            query = filter_out_smart({'dialingPlan': dialing_plan}),
            encode_body = 'application/json',
            body = data,
            model = CreateContactResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_contact(self, contact_id: int, account_id: str = '~', extension_id: str = '~') -> ReadContactResponse:
        """
        Get Contact
        
        Returns contact(s) by ID(s). Batch request is supported.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            contact_id: `int`.
                **REQUIRED.** Internal identifier of a contact record in the RingCentral database
        
        Returns:
            `ReadContactResponse`. Contact
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/address-book/contact/{contact_id}',
            model = ReadContactResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def update_contact \
    (
        self,
        contact_id: int,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        dialing_plan: Optional[str] = None,
    ) -> UpdateContactResponse:
        """
        Update Contact
        
        Updates personal contact information by contact ID(s). Batch request is supported
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            contact_id: `int`.
                **REQUIRED.** Internal identifier of a contact record in the RingCentral database
            
            dialing_plan: `Optional[str]`, default: `None`.
                Optional. A country code value complying with the [ISO 3166-1
                alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home
                country of the current extension
        
        Returns:
            `UpdateContactResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/address-book/contact/{contact_id}',
            method = 'PUT',
            query = filter_out_smart({'dialingPlan': dialing_plan}),
            model = UpdateContactResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def delete_contact(self, contact_id: int, account_id: str = '~', extension_id: str = '~'):
        """
        Delete Contact
        
        Deletes contact(s) by ID(s). Batch request is supported.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            contact_id: `int`.
                **REQUIRED.** Internal identifier of a contact record in the RingCentral database
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/address-book/contact/{contact_id}', method='DELETE')
    
    async def sync_address_book \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        sync_type: Optional[List[SyncAddressBookSyncTypeItem]] = None,
        sync_token: Optional[str] = None,
        per_page: Optional[int] = None,
        page_id: Optional[int] = None,
    ) -> SyncAddressBookResponse:
        """
        Address Book Synchronization
        
        Synchronizes user contacts.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            sync_type: `Optional[List[SyncAddressBookSyncTypeItem]]`, default: `None`.
                Optional. Type of synchronization
            
            sync_token: `Optional[str]`, default: `None`.
                Optional. Value of syncToken property of the last sync request response
            
            per_page: `Optional[int]`, default: `None`.
                Optional. Number of records per page to be returned. The max number of records is 250, which is
                also the default. For 'FSync' if the number of records exceeds the parameter value (either
                specified or default), all of the pages can be retrieved in several requests. For 'ISync' if
                the number of records exceeds the page size, the number of incoming changes to this number is
                limited
            
            page_id: `Optional[int]`, default: `None`.
                Optional. Internal identifier of a page. It can be obtained from the 'nextPageId' parameter
                passed in response body
        
        Returns:
            `SyncAddressBookResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/address-book-sync',
            query = filter_out_smart({'syncType': str(sync_type), 'syncToken': sync_token, 'perPage': str(per_page), 'pageId': str(page_id)}),
            model = SyncAddressBookResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_favorite_contacts(self, account_id: str = '~', extension_id: str = '~') -> ListFavoriteContactsResponse:
        """
        Get Favorite Contact List
        
        Returns the list of favorite contacts of the current extension. Favorite contacts include both
        company contacts (extensions) and personal contacts (address book records).
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
        
        Returns:
            `ListFavoriteContactsResponse`. Favorite Contact List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/favorite',
            model = ListFavoriteContactsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_favorite_contact_list \
    (
        self,
        data: UpdateFavoriteContactListRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> UpdateFavoriteContactListResponse:
        """
        Update Favorite Contact List
        
        Updates the list of favorite contacts of the current extension. Favorite contacts include both
        company contacts (extensions) and personal contacts (address book records).**Please note**:
        currently personal address book size is limited to 10 000 contacts.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `UpdateFavoriteContactListRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateFavoriteContactListResponse`. Favorite Contact List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/favorite',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateFavoriteContactListResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def search_directory_entries(self, account_id: str, data: SearchDirectoryEntriesRequest) -> SearchDirectoryEntriesResponse:
        """
        Search Company Directory Entries
        
        Returns contact information on corporate users of federated accounts according to the specified
        filtering and ordering.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `SearchDirectoryEntriesRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `SearchDirectoryEntriesResponse`. Paged collection of all contacts information for a given
            account according to filtering and ordering. Records can be empty if no data found
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/directory/entries/search',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = SearchDirectoryEntriesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_directory_entry(self, entry_id: str, account_id: str) -> ReadDirectoryEntryResponse:
        """
        Get Corporate Directory Entry
        
        Returns contact information on a particular corporate user of a federated account.
        
        Arguments:
            entry_id: `str`.
                **REQUIRED.** Internal identifier of extension to read information for
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of owning account
        
        Returns:
            `ReadDirectoryEntryResponse`. Contact information for given parameters. If value doesn't found
            then empty body will be returned
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/directory/entries/{entry_id}',
            model = ReadDirectoryEntryResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_directory_entries \
    (
        self,
        account_id: str,
        *,
        show_federated: Optional[bool] = True,
        type: Optional[ListDirectoryEntriesType] = None,
        page: Optional[str] = '1',
        per_page: Optional[int] = 1000,
        site_id: Optional[str] = None,
        if_none_match: Optional[str] = None,
    ) -> ListDirectoryEntriesResponse:
        """
        Get Company Directory Entries
        
        Returns contact information on corporate users of federated accounts. Please note: 1. `User`,
        `DigitalUser`, `VirtualUser` and `FaxUser` types are returned as `User` type. 2.
        `ApplicationExtension` type is not returned. 3. Only extensions in `Enabled`, `Disabled` and
        `NotActivated` state are returned.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            show_federated: `Optional[bool]`, default: `True`.
                Optional. If 'True' then contacts of all accounts in federation are returned. If 'False' then
                only contacts of the current account are returned, and account section is eliminated in this
                case
            
            type: `Optional[ListDirectoryEntriesType]`, default: `None`.
                Optional. Type of an extension
            
            page: `Optional[str]`, default: `'1'`.
                Optional. Page number
            
            per_page: `Optional[int]`, default: `1000`.
                Optional. Records count to be returned per one page. The default value is 1000. Specific
                keyword values: `all` - all records are returned in one page; `max` - maximum count of records
                that can be returned in one page
            
            site_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of the business site to which extensions belong
            
            if_none_match: `Optional[str]`, default: `None`.
                Optional. If-None-Match
        
        Returns:
            `ListDirectoryEntriesResponse`. Paged collection of all contacts information for a given
            account. Records can be empty if no data found.
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/directory/entries',
            query = filter_out_smart({'showFederated': str(show_federated), 'type': str(type), 'page': page, 'perPage': str(per_page), 'siteId': site_id}),
            headers = filter_out_smart({'If-None-Match': if_none_match}),
            model = ListDirectoryEntriesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_account_federation(self, account_id: str, *, rc_extension_id: Optional[str] = None) -> ReadAccountFederationResponse:
        """
        Get Account Federation
        
        Returns information on a federation and associated accounts.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            rc_extension_id: `Optional[str]`, default: `None`.
                Optional. RCExtensionId
        
        Returns:
            `ReadAccountFederationResponse`. List of found federations. Records array can be empty if no
            data found
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/directory/federation',
            headers = filter_out_smart({'RCExtensionId': rc_extension_id}),
            model = ReadAccountFederationResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_user_presence_status \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        detailed_telephony_state: Optional[bool] = None,
        sip_data: Optional[bool] = None,
    ) -> ReadUserPresenceStatusResponse:
        """
        Get User Presence Status
        
        Returns presence status of an extension or several extensions by their ID(s). Batch request is
        supported. The 'presenceStatus' is returned as Offline (the parameters 'telephonyStatus',
        'message', 'userStatus' and 'dndStatus' are not returned at all) for the following extension
        types: Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only
        Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.If the user requests
        his/her own presence status, the response contains actual presence status even if the status
        publication is turned off. Batch request is supported. For batch requests the number of
        extensions in one request is limited to 30. If more extensions are included in the request, the
        error code 400 Bad Request is returned with the logical error code InvalidMultipartRequest and
        the corresponding message 'Extension Presence Info multipart request is limited to 30
        extensions'.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            detailed_telephony_state: `Optional[bool]`, default: `None`.
                Optional. Whether to return detailed telephony state
            
            sip_data: `Optional[bool]`, default: `None`.
                Optional. Whether to return SIP data
        
        Returns:
            `ReadUserPresenceStatusResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/presence',
            query = filter_out_smart({'detailedTelephonyState': str(detailed_telephony_state), 'sipData': str(sip_data)}),
            model = ReadUserPresenceStatusResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_user_presence_status \
    (
        self,
        data: UpdateUserPresenceStatusRequest,
        extension_id: str = '~',
        account_id: str = '~',
    ) -> UpdateUserPresenceStatusResponse:
        """
        Update User Presence Status
        
        Updates user-defined extension presence status, status message and DnD status by extension ID.
        Supported for regular User extensions only. The extension types listed do not support presence
        status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only
        Group, Shared Lines Group, IVR Menu, Application Extension.
        
        Arguments:
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `UpdateUserPresenceStatusRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateUserPresenceStatusResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/presence',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateUserPresenceStatusResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_account_presence \
    (
        self,
        account_id: str = '~',
        *,
        detailed_telephony_state: Optional[bool] = None,
        sip_data: Optional[bool] = None,
        page: Optional[int] = None,
        per_page: Optional[int] = None,
    ) -> ReadAccountPresenceResponse:
        """
        Get User Presence Status List
        
        Returns presence status of all extensions of an account. Please note: The presenceStatus is
        returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not
        returned at all) for the following extension types: Department, Announcement Only, Voicemail
        (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application
        Extension.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            detailed_telephony_state: `Optional[bool]`, default: `None`.
                Optional. Whether to return detailed telephony state
            
            sip_data: `Optional[bool]`, default: `None`.
                Optional. Whether to return SIP data
            
            page: `Optional[int]`, default: `None`.
                Optional. Page number for account presence information
            
            per_page: `Optional[int]`, default: `None`.
                Optional. Number for account presence information items per page
        
        Returns:
            `ReadAccountPresenceResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/presence',
            query = filter_out_smart({'detailedTelephonyState': str(detailed_telephony_state), 'sipData': str(sip_data), 'page': str(page), 'perPage': str(per_page)}),
            model = ReadAccountPresenceResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_call_queue_presence(self, group_id: str, account_id: str = '~') -> ReadCallQueuePresenceResponse:
        """
        Get Call Queue Presence
        
        Returns presence status of the call queue members.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            group_id: `str`.
                **REQUIRED.** Internal identifier of an call queue extension
        
        Returns:
            `ReadCallQueuePresenceResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-queues/{group_id}/presence',
            model = ReadCallQueuePresenceResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_call_queue_presence(self, group_id: str, data: UpdateCallQueuePresenceRequest, account_id: str = '~') -> UpdateCallQueuePresenceResponse:
        """
        Update Call Queue Presence
        
        Updates presence status of the call queue members in the specified queue.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            group_id: `str`.
                **REQUIRED.** Internal identifier of a call queue extension
            
            data: `UpdateCallQueuePresenceRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateCallQueuePresenceResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-queues/{group_id}/presence',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateCallQueuePresenceResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_extension_call_queue_presence \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        editable_member_status: Optional[bool] = None,
    ) -> ReadExtensionCallQueuePresenceResponse:
        """
        Get Agent’s Call Queue Presence
        
        Returns a list of agent's call queues with the agent presence status (per queue)
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension
            
            editable_member_status: `Optional[bool]`, default: `None`.
                Optional. Filtering by the flag 'Allow members to change their Queue Status'. If 'true' only
                queues where user can change his availability status are returned
        
        Returns:
            `ReadExtensionCallQueuePresenceResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/call-queue-presence',
            query = filter_out_smart({'editableMemberStatus': str(editable_member_status)}),
            model = ReadExtensionCallQueuePresenceResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_extension_call_queue_presence \
    (
        self,
        data: UpdateExtensionCallQueuePresenceRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> UpdateExtensionCallQueuePresenceResponse:
        """
        Update Call Queue Presence
        
        Updates availability of the agent for the call queues.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension
            
            data: `UpdateExtensionCallQueuePresenceRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateExtensionCallQueuePresenceResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/call-queue-presence',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateExtensionCallQueuePresenceResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_glip_chats \
    (
        self,
        *,
        type: Optional[List[ListGlipChatsTypeItem]] = None,
        record_count: Optional[int] = 30,
        page_token: Optional[str] = None,
    ) -> ListGlipChatsResponse:
        """
        Get Chats
        
        Returns the list of chats where the user is a member and also public teams that can be joined.
        All records in response are sorted by creation time of a chat in ascending order.
        
        Arguments:
            type: `Optional[List[ListGlipChatsTypeItem]]`, default: `None`.
                Optional. Type of chats to be fetched. By default all type of chats will be fetched
            
            record_count: `Optional[int]`, default: `30`.
                Optional. Number of chats to be fetched by one request. The maximum value is 250, by default -
                30.
            
            page_token: `Optional[str]`, default: `None`.
                Optional. Pagination token.
        
        Returns:
            `ListGlipChatsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/chats',
            query = filter_out_smart({'type': str(type), 'recordCount': str(record_count), 'pageToken': page_token}),
            model = ListGlipChatsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_glip_chat(self, chat_id: str) -> ReadGlipChatResponse:
        """
        Get Chat
        
        Returns information about a chat by ID.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat. If tilda (~) is specified, then `/me` (Personal)
                chat will be returned
        
        Returns:
            `ReadGlipChatResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/chats/{chat_id}',
            model = ReadGlipChatResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_glip_conversations(self, *, record_count: Optional[int] = 30, page_token: Optional[str] = None) -> ListGlipConversationsResponse:
        """
        Get Conversations
        
        Returns the list of conversations where the user is a member. All records in response are
        sorted by creation time of a chat in ascending order.
        
        Arguments:
            record_count: `Optional[int]`, default: `30`.
                Optional. Number of conversations to be fetched by one request. The maximum value is 250, by
                default - 30
            
            page_token: `Optional[str]`, default: `None`.
                Optional. Pagination token.
        
        Returns:
            `ListGlipConversationsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/conversations',
            query = filter_out_smart({'recordCount': str(record_count), 'pageToken': page_token}),
            model = ListGlipConversationsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_glip_conversation(self, data: CreateGlipConversationRequest) -> CreateGlipConversationResponse:
        """
        Create/Open Conversation
        
        Creates a new conversation or opens the existing one. If the conversation already exists, then
        its ID will be returned in response. A conversation is an adhoc discussion between a particular
        set of users, not featuring any specific name or description. If you add a person to the
        existing conversation, it creates a whole new conversation.
        
        Returns:
            `CreateGlipConversationResponse`. Conversation is opened
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/conversations',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateGlipConversationResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_glip_conversation(self, chat_id: str) -> ReadGlipConversationResponse:
        """
        Get Conversation
        
        Returns information about the specified conversation, including the list of conversation
        participants. A conversation is an adhoc discussion between a particular set of users, not
        featuring any specific name or description. If you add a person to the existing conversation,
        it creates a whole new conversation.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a conversation to be returned.
        
        Returns:
            `ReadGlipConversationResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/conversations/{chat_id}',
            model = ReadGlipConversationResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_glip_teams(self, *, record_count: Optional[int] = 30, page_token: Optional[str] = None) -> ListGlipTeamsResponse:
        """
        Get Teams
        
        Returns the list of teams where the user is a member (both archived and active) combined with a
        list of public teams that can be joined by the current user. All records in response are sorted
        by creation time of a chat in ascending order.
        
        Arguments:
            record_count: `Optional[int]`, default: `30`.
                Optional. Number of teams to be fetched by one request. The maximum value is 250, by default -
                30
            
            page_token: `Optional[str]`, default: `None`.
                Optional. Pagination token.
        
        Returns:
            `ListGlipTeamsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/teams',
            query = filter_out_smart({'recordCount': str(record_count), 'pageToken': page_token}),
            model = ListGlipTeamsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_glip_team(self, data: CreateGlipTeamRequest) -> CreateGlipTeamResponse:
        """
        Create Team
        
        Creates a team, and adds a list of people to the team.
        
        Returns:
            `CreateGlipTeamResponse`. Created
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/teams',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateGlipTeamResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def read_glip_team(self, chat_id: str) -> ReadGlipTeamResponse:
        """
        Get Team
        
        Returns information about the specified team.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a team to be returned.
        
        Returns:
            `ReadGlipTeamResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/teams/{chat_id}',
            model = ReadGlipTeamResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_glip_team(self, chat_id: str):
        """
        Delete Team
        
        Deletes the specified team.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a team.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/teams/{chat_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def patch_glip_team(self, chat_id: str, data: PatchGlipTeamRequest) -> PatchGlipTeamResponse:
        """
        Update Team
        
        Updates the name and description of the specified team.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a team to be updated.
            
            data: `PatchGlipTeamRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `PatchGlipTeamResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/teams/{chat_id}',
            method = 'PATCH',
            encode_body = 'application/json',
            body = data,
            model = PatchGlipTeamResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def join_glip_team(self, chat_id: str):
        """
        Join Team
        
        Adds the current user to the specified team.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a team to be joined.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/teams/{chat_id}/join', method='POST', expected_codes=[ 204 ])
    
    async def leave_glip_team(self, chat_id: str):
        """
        Leave Team
        
        Removes the current user from the specified team.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a team to be left.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/teams/{chat_id}/leave', method='POST', expected_codes=[ 204 ])
    
    async def add_glip_team_members(self, chat_id: str, data: AddGlipTeamMembersRequest):
        """
        Add Team Members
        
        Adds members to the specified team.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a team to add members to.
            
            data: `AddGlipTeamMembersRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/teams/{chat_id}/add', method='POST', encode_body='application/json', body=data, expected_codes=[ 204 ])
    
    async def remove_glip_team_members(self, chat_id: str, data: RemoveGlipTeamMembersRequest):
        """
        Remove Team Members
        
        Removes members from the specified team.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a team to remove members from.
            
            data: `RemoveGlipTeamMembersRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/teams/{chat_id}/remove', method='POST', encode_body='application/json', body=data, expected_codes=[ 204 ])
    
    async def archive_glip_team(self, chat_id: str):
        """
        Archive Team
        
        Changes the status of the specified team to 'Archived'.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a team to be archived.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/teams/{chat_id}/archive', method='POST', expected_codes=[ 204 ])
    
    async def unarchive_glip_team(self, chat_id: str):
        """
        Unarchive Team
        
        Changes the status of the specified team to 'Active'.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a team to be made active.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/teams/{chat_id}/unarchive', method='POST', expected_codes=[ 204 ])
    
    async def read_glip_everyone(self) -> ReadGlipEveryoneResponse:
        """
        Get Everyone Chat
        
        Returns information about Everyone chat.
        
        Returns:
            `ReadGlipEveryoneResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/everyone',
            model = ReadGlipEveryoneResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def patch_glip_everyone(self, data: PatchGlipEveryoneRequest) -> PatchGlipEveryoneResponse:
        """
        Update Everyone Сhat
        
        Updates Everyone chat information.
        
        Returns:
            `PatchGlipEveryoneResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/everyone',
            method = 'PATCH',
            encode_body = 'application/json',
            body = data,
            model = PatchGlipEveryoneResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_recent_chats(self, *, type: Optional[List[ListRecentChatsTypeItem]] = None, record_count: Optional[int] = 30) -> ListRecentChatsResponse:
        """
        Get Recent Chats
        
        Returns recent chats where the user is a member. All records in response are sorted by the
        `lastModifiedTime` in descending order (the latest changed chat is displayed first on page)
        
        Arguments:
            type: `Optional[List[ListRecentChatsTypeItem]]`, default: `None`.
                Optional. Type of chats to be fetched. By default all chat types are returned
            
            record_count: `Optional[int]`, default: `30`.
                Optional. Max number of chats to be fetched by one request (Not more than 250).
        
        Returns:
            `ListRecentChatsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/recent/chats',
            query = filter_out_smart({'type': str(type), 'recordCount': str(record_count)}),
            model = ListRecentChatsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_favorite_chats(self, *, record_count: Optional[int] = 30) -> ListFavoriteChatsResponse:
        """
        Get Favorite Chats
        
        Returns a list of the current user's favorite chats.
        
        Arguments:
            record_count: `Optional[int]`, default: `30`.
                Optional. Max number of chats to be fetched by one request (Not more than 250).
        
        Returns:
            `ListFavoriteChatsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/favorites',
            query = filter_out_smart({'recordCount': str(record_count)}),
            model = ListFavoriteChatsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def favorite_glip_chat(self, chat_id: str):
        """
        Add Chat to Favorites
        
        Adds the specified chat to the users's list of favorites.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat to add to favorite list.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/chats/{chat_id}/favorite', method='POST', expected_codes=[ 204 ])
    
    async def unfavorite_glip_chat(self, chat_id: str):
        """
        Remove Chat from Favorites
        
        Removes the specified chat from the users's list of favorites.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat to remove from favorite list.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/chats/{chat_id}/unfavorite', method='POST', expected_codes=[ 204 ])
    
    async def mark_chat_read(self, chat_id: str):
        """
        Mark Chat as Read
        
        Sets the specified chat status to 'Read' for the current user.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Id of chat to be marked
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/chats/{chat_id}/read', method='POST', expected_codes=[ 200 ])
    
    async def mark_chat_unread(self, chat_id: str):
        """
        Mark Chat as Unread
        
        Sets the specified chat status to 'Unread' for the current user.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Id of chat to be marked
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/chats/{chat_id}/unread', method='POST', expected_codes=[ 200 ])
    
    async def read_glip_post(self, chat_id: str, post_id: str) -> ReadGlipPostResponse:
        """
        Get Post
        
        Returns information about the specified post.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat.
            
            post_id: `str`.
                **REQUIRED.** Internal identifier of a post.
        
        Returns:
            `ReadGlipPostResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/chats/{chat_id}/posts/{post_id}',
            model = ReadGlipPostResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_glip_post(self, chat_id: str, post_id: str):
        """
        Delete Post
        
        Deletes the specified post from the chat.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat.
            
            post_id: `str`.
                **REQUIRED.** Internal identifier of a post to be deleted.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/chats/{chat_id}/posts/{post_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def patch_glip_post(self, chat_id: str, post_id: str, data: PatchGlipPostRequest) -> PatchGlipPostResponse:
        """
        Update Post
        
        Updates a specific post within a chat.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat.
            
            post_id: `str`.
                **REQUIRED.** Internal identifier of a post to be updated.
            
            data: `PatchGlipPostRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `PatchGlipPostResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/chats/{chat_id}/posts/{post_id}',
            method = 'PATCH',
            encode_body = 'application/json',
            body = data,
            model = PatchGlipPostResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_glip_posts(self, chat_id: str, *, record_count: Optional[int] = 30, page_token: Optional[str] = None) -> ReadGlipPostsResponse:
        """
        Get Posts
        
        Returns a list of posts from the specified chat.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat.
            
            record_count: `Optional[int]`, default: `30`.
                Optional. Max number of posts to be fetched by one request (Not more than 250).
            
            page_token: `Optional[str]`, default: `None`.
                Optional. Pagination token.
        
        Returns:
            `ReadGlipPostsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/chats/{chat_id}/posts',
            query = filter_out_smart({'recordCount': str(record_count), 'pageToken': page_token}),
            model = ReadGlipPostsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_glip_post(self, chat_id: str, data: CreateGlipPostRequest) -> CreateGlipPostResponse:
        """
        Create Post
        
        Creates a post within the specified chat. Attachments are supported.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat.
            
            data: `CreateGlipPostRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateGlipPostResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/chats/{chat_id}/posts',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateGlipPostResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def list_glip_group_posts(self, group_id: str, *, record_count: Optional[int] = 30, page_token: Optional[str] = None) -> ListGlipGroupPostsResponse:
        """
        Get Group Posts
        
        Returns posts which are available for the current user by group ID.
        
        Arguments:
            group_id: `str`.
                **REQUIRED.** Internal identifier of a group
            
            record_count: `Optional[int]`, default: `30`.
                Optional. Max number of records to be returned
            
            page_token: `Optional[str]`, default: `None`.
                Optional. Pagination token
        
        Returns:
            `ListGlipGroupPostsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/groups/{group_id}/posts',
            query = filter_out_smart({'recordCount': str(record_count), 'pageToken': page_token}),
            model = ListGlipGroupPostsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_glip_group_post(self, group_id: str, data: CreateGlipGroupPostRequest) -> CreateGlipGroupPostResponse:
        """
        Create Post in Group
        
        Creates a new post in a group specified.
        
        Arguments:
            group_id: `str`.
                **REQUIRED.** Internal identifier of a group.
            
            data: `CreateGlipGroupPostRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateGlipGroupPostResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/groups/{group_id}/posts',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateGlipGroupPostResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_glip_post_text(self, group_id: str, post_id: str, data: str) -> str:
        """
        Update Post
        
        Modifies text of a post.
        
        Arguments:
            group_id: `str`.
                **REQUIRED.** Internal identifier of a group
            
            post_id: `str`.
                **REQUIRED.** Internal identifier of a post
            
            data: `str`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `str`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json \
        (
            request = f'/restapi/v1.0/glip/groups/{group_id}/posts/{post_id}/text',
            method = 'PUT',
            body = data,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_glip_card(self, data: CreateGlipCardRequest, *, group_id: Optional[int] = None) -> CreateGlipCardResponse:
        """
        Create Card
        
        Creates a new message.
        
        Arguments:
            group_id: `Optional[int]`, default: `None`.
                Optional. Internal identifier of a group where to create a post with the card
            
            data: `CreateGlipCardRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateGlipCardResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/cards',
            method = 'POST',
            query = filter_out_smart({'groupId': str(group_id)}),
            encode_body = 'application/json',
            body = data,
            model = CreateGlipCardResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_glip_card(self, card_id: List[str]) -> ReadGlipCardResponse:
        """
        Get Card
        
        Returns card(s) with given id(s).
        
        Arguments:
            card_id: `List[str]`.
                **REQUIRED.** Internal identifier of a card or comma separated list of card IDs.
        
        Returns:
            `ReadGlipCardResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/cards/{card_id}',
            model = ReadGlipCardResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_glip_card(self, card_id: str):
        """
        Update Card
        
        Updates a card.
        
        Arguments:
            card_id: `str`.
                **REQUIRED.** Internal identifier of a card
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/cards/{card_id}', method='PUT', expected_codes=[ 200 ])
    
    async def delete_glip_card(self, card_id: str):
        """
        Delete Card
        
        Deletes a card by ID.
        
        Arguments:
            card_id: `str`.
                **REQUIRED.** Card ID to be deleted.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/cards/{card_id}', method='DELETE', expected_codes=[ 200 ])
    
    async def read_glip_events(self, *, record_count: Optional[int] = 30, page_token: Optional[str] = None) -> ReadGlipEventsResponse:
        """
        Get User Events List
        
        Returns all calendar events created by the current user.
        
        Arguments:
            record_count: `Optional[int]`, default: `30`.
                Optional. Number of groups to be fetched by one request. The maximum value is 250, by default -
                30.
            
            page_token: `Optional[str]`, default: `None`.
                Optional. Token of a page to be returned
        
        Returns:
            `ReadGlipEventsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/events',
            query = filter_out_smart({'recordCount': str(record_count), 'pageToken': page_token}),
            model = ReadGlipEventsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_event(self, data: CreateEventRequest) -> CreateEventResponse:
        """
        Create Event
        
        Creates a new calendar event.
        
        Returns:
            `CreateEventResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/events',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateEventResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_event(self, event_id: List[str]) -> ReadEventResponse:
        """
        Get Event
        
        Returns the specified calendar event(s) by ID(s).
        
        Arguments:
            event_id: `List[str]`.
                **REQUIRED.** event id or comma separated list of event ids.
        
        Returns:
            `ReadEventResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/events/{event_id}',
            model = ReadEventResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_event(self, event_id: str) -> UpdateEventResponse:
        """
        Update Event
        
        Updates the specified calendar event.
        
        Arguments:
            event_id: `str`.
                **REQUIRED.** Internal identifier of an event
        
        Returns:
            `UpdateEventResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/events/{event_id}',
            method = 'PUT',
            model = UpdateEventResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_event(self, event_id: str):
        """
        Delete Event
        
        Deletes the specified calendar event.
        
        Arguments:
            event_id: `str`.
                **REQUIRED.** Internal identifier of an event to be deleted
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/events/{event_id}', method='DELETE', expected_codes=[ 200 ])
    
    async def list_group_events(self, group_id: str) -> ListGroupEventsResponse:
        """
        Get Group Events
        
        Returns a list of calendar events available for the current user within the specified group.
        Users can only see their personal tasks and public tasks.
        
        Arguments:
            group_id: `str`.
                **REQUIRED.** Internal identifier of a group
        
        Returns:
            `ListGroupEventsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/groups/{group_id}/events',
            model = ListGroupEventsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_eventby_group_id(self, group_id: str) -> CreateEventbyGroupIdResponse:
        """
        Create Event by Group ID
        
        Creates a new calendar event within the specified group.
        
        Arguments:
            group_id: `str`.
                **REQUIRED.** Internal identifier of a group
        
        Returns:
            `CreateEventbyGroupIdResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/groups/{group_id}/events',
            method = 'POST',
            model = CreateEventbyGroupIdResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_chat_notes \
    (
        self,
        chat_id: str,
        *,
        creation_time_to: Optional[str] = None,
        creation_time_from: Optional[str] = None,
        creator_id: Optional[str] = None,
        status: Optional[ListChatNotesStatus] = None,
        page_token: Optional[str] = None,
        record_count: Optional[int] = 30,
    ) -> ListChatNotesResponse:
        """
        Get Chat Notes
        
        Returns the list of notes created in the specified chat.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat to fetch notes from.
            
            creation_time_to: `Optional[str]`, default: `None`.
                Optional. The end datetime for resulting records in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g.
                2019-03-10T18:23:45. The default value is Now.
            
            creation_time_from: `Optional[str]`, default: `None`.
                Optional. The start datetime for resulting records in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone
            
            creator_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of the user that created the note. Multiple values are supported
            
            status: `Optional[ListChatNotesStatus]`, default: `None`.
                Optional. Status of notes to be fetched; if not specified all notes are fetched by default.
            
            page_token: `Optional[str]`, default: `None`.
                Optional. Pagination token
            
            record_count: `Optional[int]`, default: `30`.
                Optional. Max number of notes to be fetched by one request; the value range is 1-250.
        
        Returns:
            `ListChatNotesResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/chats/{chat_id}/notes',
            query = filter_out_smart({'creationTimeTo': creation_time_to, 'creationTimeFrom': creation_time_from, 'creatorId': creator_id, 'status': str(status), 'pageToken': page_token, 'recordCount': str(record_count)}),
            model = ListChatNotesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_chat_note(self, chat_id: str, data: CreateChatNoteRequest) -> CreateChatNoteResponse:
        """
        Create Note
        
        Creates a new note in the specified chat.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat to create a note in
            
            data: `CreateChatNoteRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateChatNoteResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/chats/{chat_id}/notes',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateChatNoteResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_user_note(self, note_id: str) -> ReadUserNoteResponse:
        """
        Get Note
        
        Returns the specified note(s). It is possible to fetch up to 50 notes per request.
        
        Arguments:
            note_id: `str`.
                **REQUIRED.** Internal identifier of a note to be fetched
        
        Returns:
            `ReadUserNoteResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/notes/{note_id}',
            model = ReadUserNoteResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_note(self, note_id: str):
        """
        Delete Note
        
        Deletes the specified note.
        
        Arguments:
            note_id: `str`.
                **REQUIRED.** Internal identifier of a note to be deleted
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/notes/{note_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def patch_note(self, note_id: str) -> PatchNoteResponse:
        """
        Update Note
        
        Edits a note. Notes can be edited by any user if posted to a chat the user belongs to.
        
        Arguments:
            note_id: `str`.
                **REQUIRED.** Internal identifier of a note to be updated
        
        Returns:
            `PatchNoteResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/notes/{note_id}',
            method = 'PATCH',
            model = PatchNoteResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def lock_note(self, note_id: str):
        """
        Lock Note
        
        Locks a note providing the user with the unique write access for 5 hours.
        
        Arguments:
            note_id: `str`.
                **REQUIRED.** Internal identifier of a note to be locked
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/notes/{note_id}/lock', method='POST', expected_codes=[ 204 ])
    
    async def unlock_note(self, note_id: str):
        """
        Unlock Note
        
        Unlocks a note letting other users edit this note. Once the note is locked (by another user) it
        cannot be unlocked during 5 hours since the lock datetime.
        
        Arguments:
            note_id: `str`.
                **REQUIRED.** Internal identifier of a note to be unlocked
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/notes/{note_id}/unlock', method='POST', expected_codes=[ 204 ])
    
    async def publish_note(self, note_id: str):
        """
        Publish Note
        
        Publishes a note making it visible to other users.
        
        Arguments:
            note_id: `str`.
                **REQUIRED.** Internal identifier of a note to be published
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/notes/{note_id}/publish', method='POST', expected_codes=[ 204 ])
    
    async def list_chat_tasks \
    (
        self,
        chat_id: str,
        *,
        creation_time_to: Optional[str] = 'now',
        creation_time_from: Optional[str] = None,
        creator_id: Optional[List[str]] = None,
        status: Optional[List[ListChatTasksStatusItem]] = None,
        assignment_status: Optional[ListChatTasksAssignmentStatus] = None,
        assignee_id: Optional[List[str]] = None,
        assignee_status: Optional[ListChatTasksAssigneeStatus] = None,
        page_token: Optional[str] = None,
        record_count: Optional[int] = 30,
    ) -> ListChatTasksResponse:
        """
        Get Chat Tasks
        
        Returns the list of tasks of the specified chat.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat
            
            creation_time_to: `Optional[str]`, default: `'now'`.
                Optional. The end datetime for resulting records in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g.
                2019-03-10T18:23:45Z
            
            creation_time_from: `Optional[str]`, default: `None`.
                Optional. The start datetime for resulting records in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g.
                2016-02-23T00:00:00
            
            creator_id: `Optional[List[str]]`, default: `None`.
                Optional. Internal identifier of a task creator
            
            status: `Optional[List[ListChatTasksStatusItem]]`, default: `None`.
                Optional. Task execution status
            
            assignment_status: `Optional[ListChatTasksAssignmentStatus]`, default: `None`.
                Optional. Task assignment status
            
            assignee_id: `Optional[List[str]]`, default: `None`.
                Optional. Internal identifier of a task assignee
            
            assignee_status: `Optional[ListChatTasksAssigneeStatus]`, default: `None`.
                Optional. Task execution status by assignee(-s) specified in assigneeId
            
            page_token: `Optional[str]`, default: `None`.
                Optional. Token of the current page. If token is omitted then the first page should be returned
            
            record_count: `Optional[int]`, default: `30`.
                Optional. Number of records to be returned per screen
        
        Returns:
            `ListChatTasksResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/chats/{chat_id}/tasks',
            query = filter_out_smart({'creationTimeTo': creation_time_to, 'creationTimeFrom': creation_time_from, 'creatorId': str(creator_id), 'status': str(status), 'assignmentStatus': str(assignment_status), 'assigneeId': str(assignee_id), 'assigneeStatus': str(assignee_status), 'pageToken': page_token, 'recordCount': str(record_count)}),
            model = ListChatTasksResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_task(self, chat_id: str, data: CreateTaskRequest) -> CreateTaskResponse:
        """
        Create Task
        
        Creates a task in the specified chat.
        
        Arguments:
            chat_id: `str`.
                **REQUIRED.** Internal identifier of a chat
            
            data: `CreateTaskRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateTaskResponse`. Task information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/chats/{chat_id}/tasks',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateTaskResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def read_task(self, task_id: str) -> ReadTaskResponse:
        """
        Get Task
        
        Returns information about the specified task(s) by ID(s).
        
        Arguments:
            task_id: `str`.
                **REQUIRED.** Internal identifier of a task, or comma separated list of task IDs
        
        Returns:
            `ReadTaskResponse`. Task Information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/tasks/{task_id}',
            model = ReadTaskResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_task(self, task_id: str):
        """
        Delete Task
        
        Deletes the specified task.
        
        Arguments:
            task_id: `str`.
                **REQUIRED.** Internal identifier of a task
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/tasks/{task_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def patch_task(self, task_id: str, data: PatchTaskRequest) -> PatchTaskResponse:
        """
        Patch Task
        
        Updates the specified task by ID.
        
        Arguments:
            task_id: `str`.
                **REQUIRED.** Internal identifier of a task
            
            data: `PatchTaskRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `PatchTaskResponse`. Updated Tasks
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/tasks/{task_id}',
            method = 'PATCH',
            encode_body = 'application/json',
            body = data,
            model = PatchTaskResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def complete_task(self, task_id: str, data: CompleteTaskRequest):
        """
        Complete Task
        
        Completes a task in the specified chat.
        
        Arguments:
            task_id: `str`.
                **REQUIRED.** Internal identifier of a task
            
            data: `CompleteTaskRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/tasks/{task_id}/complete', method='POST', encode_body='application/json', body=data, expected_codes=[ 204 ])
    
    async def read_glip_person(self, person_id: str) -> ReadGlipPersonResponse:
        """
        Get Person
        
        Returns a user or multiple users by their ID(s). Batch request is supported.
        
        Arguments:
            person_id: `str`.
                **REQUIRED.** Internal identifier of a user to be returned, the maximum number of IDs is 30
        
        Returns:
            `ReadGlipPersonResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/persons/{person_id}',
            model = ReadGlipPersonResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_glip_company(self, company_id: str) -> ReadGlipCompanyResponse:
        """
        Get Company Info
        
        Returns information about one or more companies by their IDs.
        
        Arguments:
            company_id: `str`.
                **REQUIRED.** Internal identifier of an RC account/Glip company, or tilde (~) to indicate a
                company the current user belongs to.
        
        Returns:
            `ReadGlipCompanyResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/companies/{company_id}',
            model = ReadGlipCompanyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_glip_group_webhooks(self, group_id: str) -> ListGlipGroupWebhooksResponse:
        """
        Get Webhooks in Group
        
        Returns webhooks which are available for the current user by group ID.
        
        Arguments:
            group_id: `str`.
                **REQUIRED.** Internal identifier of a group
        
        Returns:
            `ListGlipGroupWebhooksResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/groups/{group_id}/webhooks',
            model = ListGlipGroupWebhooksResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_glip_group_webhook(self, group_id: str) -> CreateGlipGroupWebhookResponse:
        """
        Create Webhook in Group
        
        Creates a new webhook
        
        Arguments:
            group_id: `str`.
                **REQUIRED.** Internal identifier of a group
        
        Returns:
            `CreateGlipGroupWebhookResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/groups/{group_id}/webhooks',
            method = 'POST',
            model = CreateGlipGroupWebhookResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_glip_webhooks(self) -> ListGlipWebhooksResponse:
        """
        Get Webhooks
        
        Returns a list of all webhooks associated with the current account.
        
        Returns:
            `ListGlipWebhooksResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/webhooks',
            model = ListGlipWebhooksResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_glip_webhook(self, webhook_id: List[str]) -> ReadGlipWebhookResponse:
        """
        Get Webhook
        
        Returns webhooks(s) with the specified id(s).
        
        Arguments:
            webhook_id: `List[str]`.
                **REQUIRED.** Internal identifier of a webhook or comma separated list of webhooks IDs
        
        Returns:
            `ReadGlipWebhookResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/webhooks/{webhook_id}',
            model = ReadGlipWebhookResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_glip_webhook(self, webhook_id: str):
        """
        Delete Webhook
        
        Deletes the webhook by ID.
        
        Arguments:
            webhook_id: `str`.
                **REQUIRED.** Internal identifier of a webhook
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/webhooks/{webhook_id}', method='DELETE', expected_codes=[ 200 ])
    
    async def activate_glip_webhook(self, webhook_id: str):
        """
        Activate Webhook
        
        Activates webhook by ID.
        
        Arguments:
            webhook_id: `str`.
                **REQUIRED.** Internal identifier of a webhook
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/webhooks/{webhook_id}/activate', method='POST', expected_codes=[ 200 ])
    
    async def suspend_glip_webhook(self, webhook_id: str):
        """
        Suspend Webhook
        
        Suspends webhook by ID.
        
        Arguments:
            webhook_id: `str`.
                **REQUIRED.** Internal identifier of a webhook
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/glip/webhooks/{webhook_id}/suspend', method='POST', expected_codes=[ 200 ])
    
    async def read_glip_preferences(self) -> ReadGlipPreferencesResponse:
        """
        Get Preferences
        
        Returns information about user preferences.
        
        Returns:
            `ReadGlipPreferencesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/preferences',
            model = ReadGlipPreferencesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_glip_groups \
    (
        self,
        *,
        type: Optional[ListGlipGroupsType] = None,
        record_count: Optional[int] = 30,
        page_token: Optional[str] = None,
    ) -> ListGlipGroupsResponse:
        """
        Get User Groups
        
        Returns the list of groups where the user is a member.
        
        Arguments:
            type: `Optional[ListGlipGroupsType]`, default: `None`.
                Optional. Type of groups to be fetched (by default all type of groups will be fetched)
            
            record_count: `Optional[int]`, default: `30`.
                Optional. Number of groups to be fetched by one request. The maximum value is 250, by default -
                30
            
            page_token: `Optional[str]`, default: `None`.
                Optional. Pagination token.
        
        Returns:
            `ListGlipGroupsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/groups',
            query = filter_out_smart({'type': str(type), 'recordCount': str(record_count), 'pageToken': page_token}),
            model = ListGlipGroupsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_glip_group(self, data: CreateGlipGroupRequest) -> CreateGlipGroupResponse:
        """
        Create Group
        
        Creates a new private chat/team.
        
        Returns:
            `CreateGlipGroupResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/groups',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateGlipGroupResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_glip_group(self, group_id: List[str]) -> ReadGlipGroupResponse:
        """
        Get Group
        
        Returns information about a group or multiple groups by their ID(s). Batch request is
        supported.
        
        Arguments:
            group_id: `List[str]`.
                **REQUIRED.** Internal identifier of a group to be returned, the maximum number of IDs is 30
        
        Returns:
            `ReadGlipGroupResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/groups/{group_id}',
            model = ReadGlipGroupResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def assign_glip_group_members(self, group_id: str, data: AssignGlipGroupMembersRequest) -> AssignGlipGroupMembersResponse:
        """
        Edit Group Members
        
        Updates group members. **Please note:** Only groups of 'Team' type can be updated. Currently
        only one operation at a time (either adding or removal) is supported.
        
        Arguments:
            group_id: `str`.
                **REQUIRED.** Internal identifier of a group
            
            data: `AssignGlipGroupMembersRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `AssignGlipGroupMembersResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/groups/{group_id}/bulk-assign',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = AssignGlipGroupMembersResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_glip_posts \
    (
        self,
        *,
        group_id: Optional[str] = None,
        page_token: Optional[str] = None,
        record_count: Optional[int] = 30,
    ) -> ListGlipPostsResponse:
        """
        Get Posts
        
        Returns posts available for the current user by group ID.
        
        Arguments:
            group_id: `Optional[str]`, default: `None`.
                Optional. Identifier of a group to filter posts
            
            page_token: `Optional[str]`, default: `None`.
                Optional. Token of a page to be returned
            
            record_count: `Optional[int]`, default: `30`.
                Optional. Number of records to be returned. The maximum value is 250, by default - 30
        
        Returns:
            `ListGlipPostsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/posts',
            query = filter_out_smart({'groupId': group_id, 'pageToken': page_token, 'recordCount': str(record_count)}),
            model = ListGlipPostsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_post(self, data: CreatePostRequest) -> CreatePostResponse:
        """
        Create Post
        
        Creates a post.
        
        Returns:
            `CreatePostResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/posts',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreatePostResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_unified_presence(self, account_id: str = None, extension_id: str = None) -> ReadUnifiedPresenceResponse:
        """
        Get Unified Presence
        
        Returns the unified presence status of the requested user(s). The set of parameters returned by
        this method differs whether you return the requester's presence or any other user presence.
        
        Arguments:
            account_id: `str`, default: `None`.
                Optional.
            
            extension_id: `str`, default: `None`.
                Optional.
        
        Returns:
            `ReadUnifiedPresenceResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/unified-presence',
            model = ReadUnifiedPresenceResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_unified_presence(self, data: UpdateUnifiedPresenceRequest, account_id: str = None, extension_id: str = None) -> UpdateUnifiedPresenceResponse:
        """
        Update Unified Presence
        
        Updates the unified presence for the current user specified in path.
        
        Arguments:
            account_id: `str`, default: `None`.
                Optional.
            
            extension_id: `str`, default: `None`.
                Optional.
            
            data: `UpdateUnifiedPresenceRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateUnifiedPresenceResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/unified-presence',
            method = 'PATCH',
            encode_body = 'application/json',
            body = data,
            model = UpdateUnifiedPresenceResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_meetings(self, extension_id: str, account_id: str) -> ListMeetingsResponse:
        """
        Get Scheduled Meetings
        
        Returns a list of meetings for a particular extension. The list of meetings does not include
        meetings of 'Instant' type.
        
        Arguments:
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ListMeetingsResponse`. OK: Scheduled Meeting List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting',
            model = ListMeetingsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_meeting(self, extension_id: str, account_id: str, data: CreateMeetingRequest) -> CreateMeetingResponse:
        """
        Create Meeting
        
        Creates a new meeting.
        
        Arguments:
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `CreateMeetingRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateMeetingResponse`. Created Meeting
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateMeetingResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def get_user_setting(self, extension_id: str, account_id: str) -> GetUserSettingResponse:
        """
        Get Meeting User Settings
        
        Returns user settings for meetings.
        
        Arguments:
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `GetUserSettingResponse`. OK: User Setting
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting/user-settings',
            model = GetUserSettingResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def get_account_locked_setting(self, account_id: str) -> GetAccountLockedSettingResponse:
        """
        Get Locked Meeting Settings
        
        Returns information on user meeting settings that are locked on account level and therefore
        cannot be changed by user.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of an account or tilde (~) to indicate the account logged-in
                within the current session
        
        Returns:
            `GetAccountLockedSettingResponse`. OK: Account Locked Meeting Settings
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/meeting/locked-settings',
            model = GetAccountLockedSettingResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_meeting(self, meeting_id: str, extension_id: str, account_id: str) -> ReadMeetingResponse:
        """
        Get Meeting Info
        
        Returns a particular meetings details by ID.
        
        Arguments:
            meeting_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral meeting
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ReadMeetingResponse`. OK: Meeting Info
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting/{meeting_id}',
            model = ReadMeetingResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_meeting(self, meeting_id: str, extension_id: str, account_id: str) -> UpdateMeetingResponse:
        """
        Update Meeting
        
        Modifies a particular meeting.
        
        Arguments:
            meeting_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral meeting
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `UpdateMeetingResponse`. OK: Updated Meeting Info
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting/{meeting_id}',
            method = 'PUT',
            model = UpdateMeetingResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_meeting(self, meeting_id: str, extension_id: str, account_id: str):
        """
        Delete Meeting
        
        Deletes a scheduled meeting.
        
        Arguments:
            meeting_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral meeting
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting/{meeting_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def end_meeting(self, meeting_id: str, extension_id: str, account_id: str):
        """
        End Meeting
        
        Ends a meetings which is in progress.
        
        Arguments:
            meeting_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral meeting
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.**
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting/{meeting_id}/end', method='POST', expected_codes=[ 204 ])
    
    async def read_meeting_service_info(self, extension_id: str, account_id: str) -> ReadMeetingServiceInfoResponse:
        """
        Get Meeting Service Info
        
        Returns information on dial-in numbers for meetings, support and international dial-in numbers
        URIs and meeting account information.
        
        Arguments:
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ReadMeetingServiceInfoResponse`. OK: Meeting Service Info
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting/service-info',
            model = ReadMeetingServiceInfoResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_meeting_service_info(self, extension_id: str, account_id: str, data: UpdateMeetingServiceInfoRequest) -> UpdateMeetingServiceInfoResponse:
        """
        Update Meeting Service Info
        
        Updates personal meeting identifier.
        
        Arguments:
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `UpdateMeetingServiceInfoRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateMeetingServiceInfoResponse`. OK: Meeting Service Info
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting/service-info',
            method = 'PATCH',
            encode_body = 'application/json',
            body = data,
            model = UpdateMeetingServiceInfoResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_assistants(self, account_id: str, extension_id: str) -> ReadAssistantsResponse:
        """
        Get Assistants
        
        Returns assistants information.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
        
        Returns:
            `ReadAssistantsResponse`. OK: Assistants Info
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meetings-configuration/assistants',
            model = ReadAssistantsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_assisted_users(self, account_id: str, extension_id: str) -> ReadAssistedUsersResponse:
        """
        Get Assisted Users
        
        Returns assisted users information.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
        
        Returns:
            `ReadAssistedUsersResponse`. Assisted User Info
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meetings-configuration/assisted',
            model = ReadAssistedUsersResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_meeting_invitation(self, meeting_id: int, extension_id: str, account_id: str) -> ReadMeetingInvitationResponse:
        """
        Get Meeting Invitation
        
        Returns a meeting invitation by ID.
        
        Arguments:
            meeting_id: `int`.
                **REQUIRED.** Internal identifier of a RingCentral meeting
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of an account or tilde (~) to indicate the account logged-in
                within the current session
        
        Returns:
            `ReadMeetingInvitationResponse`. OK: Meeting Invitation
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting/{meeting_id}/invitation',
            model = ReadMeetingInvitationResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_subscriptions(self) -> ListSubscriptionsResponse:
        """
        Get Subscriptions
        
        Returns a list of subscriptions created by a particular user on a particular client app.
        
        Returns:
            `ListSubscriptionsResponse`. List of Subscriptions
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/subscription',
            model = ListSubscriptionsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_subscription(self, data: CreateSubscriptionRequest) -> CreateSubscriptionResponse:
        """
        Create Subscription
        
        Creates a new subscription.
        
        Returns:
            `CreateSubscriptionResponse`. Created Subscription
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/subscription',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateSubscriptionResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_subscription(self, subscription_id: str) -> ReadSubscriptionResponse:
        """
        Get Subscription
        
        Returns the requested subscription.
        
        Arguments:
            subscription_id: `str`.
                **REQUIRED.** Internal identifier of a subscription
        
        Returns:
            `ReadSubscriptionResponse`. Existing Subscription
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/subscription/{subscription_id}',
            model = ReadSubscriptionResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_subscription(self, subscription_id: str, data: UpdateSubscriptionRequest, *, aggregated: Optional[bool] = None) -> UpdateSubscriptionResponse:
        """
        Renew Subscription / Update Event Filters
        
        Renews the existent subscription if the request body is empty. If event filters are specified,
        calling this method modifies the event filters for the existing subscription. The client
        application can extend or narrow the events for which it receives notifications in the frame of
        one subscription.
        
        Arguments:
            subscription_id: `str`.
                **REQUIRED.** Internal identifier of a subscription
            
            aggregated: `Optional[bool]`, default: `None`.
                Optional. If 'True' then aggregated presence status is returned in a notification payload
            
            data: `UpdateSubscriptionRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateSubscriptionResponse`. Updated Subscription
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/subscription/{subscription_id}',
            method = 'PUT',
            query = filter_out_smart({'aggregated': str(aggregated)}),
            encode_body = 'application/json',
            body = data,
            model = UpdateSubscriptionResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_subscription(self, subscription_id: str):
        """
        Cancel Subscription
        
        Cancels the existent subscription.
        
        Arguments:
            subscription_id: `str`.
                **REQUIRED.** Internal identifier of a subscription
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/subscription/{subscription_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def renew_subscription(self, subscription_id: str) -> RenewSubscriptionResponse:
        """
        Renew Subscription
        
        Renews an existent subscription by ID by posting request with an empty body.
        
        Arguments:
            subscription_id: `str`.
                **REQUIRED.**
        
        Returns:
            `RenewSubscriptionResponse`. Updated Subscription
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/subscription/{subscription_id}/renew',
            method = 'POST',
            model = RenewSubscriptionResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_authorization_profile(self, extension_id: str, account_id: str) -> ReadAuthorizationProfileResponse:
        """
        Get Authorization Profile
        
        Returns a list of user permissions granted at authorization procedure. Please note: Some
        permissions may be restricted by extension type.
        
        Arguments:
            extension_id: `str`.
                **REQUIRED.**
            
            account_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadAuthorizationProfileResponse`. successful operation
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/authz-profile',
            model = ReadAuthorizationProfileResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def check_user_permission \
    (
        self,
        extension_id: str,
        account_id: str,
        *,
        permission_id: Optional[str] = None,
        target_extension_id: Optional[str] = None,
    ) -> CheckUserPermissionResponse:
        """
        Check User Permission
        
        Checks if a certain user permission is activated for a particular extension.
        
        Arguments:
            permission_id: `Optional[str]`, default: `None`.
                Optional.
            
            target_extension_id: `Optional[str]`, default: `None`.
                Optional.
            
            extension_id: `str`.
                **REQUIRED.**
            
            account_id: `str`.
                **REQUIRED.**
        
        Returns:
            `CheckUserPermissionResponse`. Authorization Profile Resource
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/authz-profile/check',
            query = filter_out_smart({'permissionId': permission_id, 'targetExtensionId': target_extension_id}),
            model = CheckUserPermissionResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_user_business_hours(self, account_id: str = '~', extension_id: str = '~') -> ReadUserBusinessHoursResponse:
        """
        Get User Business Hours
        
        Returns the user hours when the call handling rules are applied. **Please note:** If user hours
        are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7
        days a week' an empty schedule is returned.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
        
        Returns:
            `ReadUserBusinessHoursResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/business-hours',
            model = ReadUserBusinessHoursResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_user_business_hours \
    (
        self,
        data: UpdateUserBusinessHoursRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> UpdateUserBusinessHoursResponse:
        """
        Update User Business Hours
        
        Updates the extension user hours when answering rules are to be applied.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `UpdateUserBusinessHoursRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateUserBusinessHoursResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/business-hours',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateUserBusinessHoursResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_company_business_hours(self, account_id: str = '~') -> ReadCompanyBusinessHoursResponse:
        """
        Get Company Business Hours
        
        Returns company hours when answering rules are to be applied.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ReadCompanyBusinessHoursResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/business-hours',
            model = ReadCompanyBusinessHoursResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_company_business_hours(self, data: UpdateCompanyBusinessHoursRequest, account_id: str = '~') -> UpdateCompanyBusinessHoursResponse:
        """
        Update Company Business Hours
        
        Updates company hours when answering rules are to be applied.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `UpdateCompanyBusinessHoursRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateCompanyBusinessHoursResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/business-hours',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateCompanyBusinessHoursResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_caller_blocking_settings(self, account_id: str, extension_id: str) -> ReadCallerBlockingSettingsResponse:
        """
        Get Caller Blocking Settings
        
        Returns the current caller blocking settings of a user.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            extension_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadCallerBlockingSettingsResponse`. OK
            Returns the lists of blocked and allowed phone numbers
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/caller-blocking',
            model = ReadCallerBlockingSettingsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_caller_blocking_settings \
    (
        self,
        account_id: str,
        extension_id: str,
        data: UpdateCallerBlockingSettingsRequest,
    ) -> UpdateCallerBlockingSettingsResponse:
        """
        Update Caller Blocking Settings
        
        Updates the current caller blocking settings of a user.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            extension_id: `str`.
                **REQUIRED.**
            
            data: `UpdateCallerBlockingSettingsRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
                Returns the lists of blocked and allowed phone numbers
        
        Returns:
            `UpdateCallerBlockingSettingsResponse`. OK
            Returns the lists of blocked and allowed phone numbers
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/caller-blocking',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateCallerBlockingSettingsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_blocked_allowed_numbers \
    (
        self,
        account_id: str,
        extension_id: str,
        *,
        page: Optional[int] = None,
        per_page: Optional[int] = None,
        status: Optional[ListBlockedAllowedNumbersStatus] = None,
    ) -> ListBlockedAllowedNumbersResponse:
        """
        Get Blocked/Allowed Phone Numbers
        
        Returns the lists of blocked and allowed phone numbers.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            extension_id: `str`.
                **REQUIRED.**
            
            page: `Optional[int]`, default: `None`.
                Optional.
            
            per_page: `Optional[int]`, default: `None`.
                Optional.
            
            status: `Optional[ListBlockedAllowedNumbersStatus]`, default: `None`.
                Optional.
        
        Returns:
            `ListBlockedAllowedNumbersResponse`. OK
            List of blocked or allowed phone numbers
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/caller-blocking/phone-numbers',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page), 'status': str(status)}),
            model = ListBlockedAllowedNumbersResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_blocked_allowed_number \
    (
        self,
        account_id: str,
        extension_id: str,
        data: CreateBlockedAllowedNumberRequest,
    ) -> CreateBlockedAllowedNumberResponse:
        """
        Add Blocked/Allowed Number
        
        Updates either blocked or allowed phone number list with a new phone number.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            extension_id: `str`.
                **REQUIRED.**
            
            data: `CreateBlockedAllowedNumberRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
                Updates either blocked or allowed phone number list with a new phone number.
        
        Returns:
            `CreateBlockedAllowedNumberResponse`. OK
            Information on a blocked/allowed phone number
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/caller-blocking/phone-numbers',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateBlockedAllowedNumberResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_blocked_allowed_number(self, account_id: str, extension_id: str, blocked_number_id: str) -> ReadBlockedAllowedNumberResponse:
        """
        Get Blocked/Allowed Number
        
        Returns blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            extension_id: `str`.
                **REQUIRED.**
            
            blocked_number_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadBlockedAllowedNumberResponse`. OK
            Information on a blocked/allowed phone number
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/caller-blocking/phone-numbers/{blocked_number_id}',
            model = ReadBlockedAllowedNumberResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_blocked_allowed_number \
    (
        self,
        account_id: str,
        extension_id: str,
        blocked_number_id: str,
        data: UpdateBlockedAllowedNumberRequest,
    ) -> UpdateBlockedAllowedNumberResponse:
        """
        Update Blocked/Allowed Number
        
        Updates blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            extension_id: `str`.
                **REQUIRED.**
            
            blocked_number_id: `str`.
                **REQUIRED.**
            
            data: `UpdateBlockedAllowedNumberRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
                Updates either blocked or allowed phone number list with a new phone number.
        
        Returns:
            `UpdateBlockedAllowedNumberResponse`. OK
            Information on a blocked/allowed phone number
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/caller-blocking/phone-numbers/{blocked_number_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateBlockedAllowedNumberResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_blocked_allowed_number(self, account_id: str, extension_id: str, blocked_number_id: str):
        """
        Delete Blocked/Allowed Number
        
        Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            extension_id: `str`.
                **REQUIRED.**
            
            blocked_number_id: `str`.
                **REQUIRED.**
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/caller-blocking/phone-numbers/{blocked_number_id}',
            method = 'DELETE',
            expected_codes = [ 200 ],
        )
    
    async def list_forwarding_numbers \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
    ) -> ListForwardingNumbersResponse:
        """
        Get Forwarding Number List
        
        Returns the list of extension phone numbers used for call forwarding and call flip. The
        returned list contains all the extension phone numbers used for call forwarding and call flip.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted.
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items).
        
        Returns:
            `ListForwardingNumbersResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/forwarding-number',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page)}),
            model = ListForwardingNumbersResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_forwarding_number \
    (
        self,
        data: CreateForwardingNumberRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> CreateForwardingNumberResponse:
        """
        Create Forwarding Number
        
        Adds a new forwarding number to the forwarding number list.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `CreateForwardingNumberRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateForwardingNumberResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/forwarding-number',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateForwardingNumberResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_forwarding_number(self, forwarding_number_id: str, extension_id: str, account_id: str) -> ReadForwardingNumberResponse:
        """
        Get Forwarding Number
        
        Returns a specific forwarding number.
        
        Arguments:
            forwarding_number_id: `str`.
                **REQUIRED.**
            
            extension_id: `str`.
                **REQUIRED.**
            
            account_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadForwardingNumberResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/forwarding-number/{forwarding_number_id}',
            model = ReadForwardingNumberResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_forwarding_number \
    (
        self,
        forwarding_number_id: str,
        data: UpdateForwardingNumberRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> UpdateForwardingNumberResponse:
        """
        Update Forwarding Number
        
        Updates the existing forwarding number from the forwarding number list.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            forwarding_number_id: `str`.
                **REQUIRED.** Internal identifier of a forwarding number; returned in response in the 'id'
                field
            
            data: `UpdateForwardingNumberRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateForwardingNumberResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/forwarding-number/{forwarding_number_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateForwardingNumberResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_forwarding_number(self, forwarding_number_id: str, account_id: str = '~', extension_id: str = '~'):
        """
        Delete Forwarding Number
        
        Deletes a forwarding number from the forwarding number list by its ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            forwarding_number_id: `str`.
                **REQUIRED.** Internal identifier of a forwarding number
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/forwarding-number/{forwarding_number_id}',
            method = 'DELETE',
            expected_codes = [ 200 ],
        )
    
    async def list_answering_rules \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        view: Optional[ListAnsweringRulesView] = 'Simple',
        enabled_only: Optional[bool] = False,
        page: Optional[str] = '1',
        per_page: Optional[str] = '100',
    ) -> ListAnsweringRulesResponse:
        """
        Get Call Handling Rules
        
        Returns the extension answering rules.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            view: `Optional[ListAnsweringRulesView]`, default: `'Simple'`.
                Optional.
            
            enabled_only: `Optional[bool]`, default: `False`.
                Optional. If true, then only active call handling rules are returned
            
            page: `Optional[str]`, default: `'1'`.
                Optional.
            
            per_page: `Optional[str]`, default: `'100'`.
                Optional.
        
        Returns:
            `ListAnsweringRulesResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/answering-rule',
            query = filter_out_smart({'view': str(view), 'enabledOnly': str(enabled_only), 'page': page, 'perPage': per_page}),
            model = ListAnsweringRulesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_answering_rule(self, data: CreateAnsweringRuleRequest, account_id: str = '~', extension_id: str = '~') -> CreateAnsweringRuleResponse:
        """
        Create Call Handling Rule
        
        Creates a custom answering rule for a particular caller ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `CreateAnsweringRuleRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateAnsweringRuleResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/answering-rule',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateAnsweringRuleResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_answering_rule \
    (
        self,
        rule_id: str,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        show_inactive_numbers: Optional[bool] = False,
    ) -> ReadAnsweringRuleResponse:
        """
        Get Call Handling Rule
        
        Returns an answering rule by ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            rule_id: `str`.
                **REQUIRED.** Internal identifier of an answering rule. The value can be standard digital ID or
                specific ID - either 'business-hours-rule' or 'after-hours-rule'
            
            show_inactive_numbers: `Optional[bool]`, default: `False`.
                Optional. Indicates whether inactive numbers should be returned or not
        
        Returns:
            `ReadAnsweringRuleResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/answering-rule/{rule_id}',
            query = filter_out_smart({'showInactiveNumbers': str(show_inactive_numbers)}),
            model = ReadAnsweringRuleResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_answering_rule \
    (
        self,
        rule_id: str,
        data: UpdateAnsweringRuleRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> UpdateAnsweringRuleResponse:
        """
        Update Call Handling Rule
        
        Updates a custom answering rule for a particular caller ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            rule_id: `str`.
                **REQUIRED.** Internal identifier of an answering rule
            
            data: `UpdateAnsweringRuleRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateAnsweringRuleResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/answering-rule/{rule_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateAnsweringRuleResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_answering_rule(self, rule_id: str, account_id: str = '~', extension_id: str = '~'):
        """
        Delete Call Handling Rule
        
        Deletes a custom answering rule by a particular ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            rule_id: `str`.
                **REQUIRED.** Internal identifier of an answering rule
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/answering-rule/{rule_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def list_company_answering_rules \
    (
        self,
        account_id: str = '~',
        *,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
    ) -> ListCompanyAnsweringRulesResponse:
        """
        Get Company Call Handling Rule List
        
        Returns a list of company answering rules.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items per page)
        
        Returns:
            `ListCompanyAnsweringRulesResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/answering-rule',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page)}),
            model = ListCompanyAnsweringRulesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_company_answering_rule(self, data: CreateCompanyAnsweringRuleRequest, account_id: str = '~') -> CreateCompanyAnsweringRuleResponse:
        """
        Create Company Call Handling Rule
        
        Creates a company answering rule for a particular caller ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `CreateCompanyAnsweringRuleRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateCompanyAnsweringRuleResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/answering-rule',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateCompanyAnsweringRuleResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_company_answering_rule(self, rule_id: str, account_id: str = '~') -> ReadCompanyAnsweringRuleResponse:
        """
        Get Company Call Handling Rule
        
        Returns a company answering rule by ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            rule_id: `str`.
                **REQUIRED.** Internal identifier of an answering rule. The value can be standard digital ID or
                specific ID - either 'business-hours-rule' or 'after-hours-rule'
        
        Returns:
            `ReadCompanyAnsweringRuleResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/answering-rule/{rule_id}',
            model = ReadCompanyAnsweringRuleResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_company_answering_rule \
    (
        self,
        rule_id: str,
        data: UpdateCompanyAnsweringRuleRequest,
        account_id: str = '~',
    ) -> UpdateCompanyAnsweringRuleResponse:
        """
        Update Company Call Handling Rule
        
        Updates a company answering rule.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            rule_id: `str`.
                **REQUIRED.** Internal identifier of an answering rule. The value can be standard digital ID or
                specific ID - either 'business-hours-rule' or 'after-hours-rule'
            
            data: `UpdateCompanyAnsweringRuleRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateCompanyAnsweringRuleResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/answering-rule/{rule_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateCompanyAnsweringRuleResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_company_answering_rule(self, rule_id: str, account_id: str = '~'):
        """
        Delete Company Call Handling Rule
        
        Deletes a company custom answering rule by a particular ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            rule_id: `str`.
                **REQUIRED.** Internal identifier of an answering rule
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/answering-rule/{rule_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def list_standard_greetings \
    (
        self,
        *,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        type: Optional[ListStandardGreetingsType] = None,
        usage_type: Optional[ListStandardGreetingsUsageType] = None,
    ) -> ListStandardGreetingsResponse:
        """
        Get Standard Greeting List
        
        Returns the list of predefined standard greetings. Custom greetings recorded by user are not
        returned in response to this request. See Get Extension Custom Greetings.
        
        Arguments:
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted.
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items).
            
            type: `Optional[ListStandardGreetingsType]`, default: `None`.
                Optional. Type of a greeting, specifying the case when the greeting is played
            
            usage_type: `Optional[ListStandardGreetingsUsageType]`, default: `None`.
                Optional. Usage type of a greeting, specifying if the greeting is applied for user extension or
                department extension
        
        Returns:
            `ListStandardGreetingsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/dictionary/greeting',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page), 'type': str(type), 'usageType': str(usage_type)}),
            model = ListStandardGreetingsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_standard_greeting(self, greeting_id: str) -> ReadStandardGreetingResponse:
        """
        Get Standard Greeting
        
        Returns a standard greeting by ID.
        
        Arguments:
            greeting_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadStandardGreetingResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/dictionary/greeting/{greeting_id}',
            model = ReadStandardGreetingResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_company_greeting(self, data: CreateCompanyGreetingRequest, account_id: str = '~') -> CreateCompanyGreetingResponse:
        """
        Create Company Greeting
        
        Creates a custom company greeting.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `CreateCompanyGreetingRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateCompanyGreetingResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/greeting',
            method = 'POST',
            encode_body = 'multipart/form-data',
            body = data,
            model = CreateCompanyGreetingResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_custom_user_greeting \
    (
        self,
        data: CreateCustomUserGreetingRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> CreateCustomUserGreetingResponse:
        """
        Create Custom User Greeting
        
        Creates custom greeting for an extension user.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `CreateCustomUserGreetingRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateCustomUserGreetingResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/greeting',
            method = 'POST',
            encode_body = 'multipart/form-data',
            body = data,
            model = CreateCustomUserGreetingResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_custom_greeting(self, greeting_id: int, account_id: str = '~', extension_id: str = '~') -> ReadCustomGreetingResponse:
        """
        Get Custom Greeting
        
        Returns a custom user greeting by ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            greeting_id: `int`.
                **REQUIRED.** Internal identifier of a greeting
        
        Returns:
            `ReadCustomGreetingResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/greeting/{greeting_id}',
            model = ReadCustomGreetingResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_ivr_prompts(self, account_id: str) -> ListIVRPromptsResponse:
        """
        Get IVR Prompt List
        
        Returns the list of IVR prompts.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ListIVRPromptsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/ivr-prompts',
            model = ListIVRPromptsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_ivr_prompt(self, account_id: str, data: CreateIVRPromptRequest) -> CreateIVRPromptResponse:
        """
        Create IVR Prompts
        
        Creates an IVR prompt.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            data: `CreateIVRPromptRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateIVRPromptResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/ivr-prompts',
            method = 'POST',
            encode_body = 'multipart/form-data',
            body = data,
            model = CreateIVRPromptResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_ivr_prompt(self, account_id: str, prompt_id: str) -> ReadIVRPromptResponse:
        """
        Get IVR Prompt
        
        Returns an IVR prompt by ID.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            prompt_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadIVRPromptResponse`. Prompt Information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/ivr-prompts/{prompt_id}',
            model = ReadIVRPromptResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_ivr_prompt(self, account_id: str, prompt_id: str, data: UpdateIVRPromptRequest) -> UpdateIVRPromptResponse:
        """
        Update IVR Prompt
        
        Updates an IVR prompt by ID
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            prompt_id: `str`.
                **REQUIRED.**
            
            data: `UpdateIVRPromptRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateIVRPromptResponse`. Updated Prompt Information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/ivr-prompts/{prompt_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateIVRPromptResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_ivr_prompt(self, account_id: str, prompt_id: str):
        """
        Delete IVR Prompt
        
        Deletes an IVR prompt by ID.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            prompt_id: `str`.
                **REQUIRED.**
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/ivr-prompts/{prompt_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def read_ivr_prompt_content(self, account_id: str, prompt_id: str) -> bytes:
        """
        Get IVR Prompt Content
        
        Returns media content of an IVR prompt by ID.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            prompt_id: `str`.
                **REQUIRED.**
        
        Returns:
            `bytes`. IVR Prompt Media Data
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_binary_data \
        (
            request = f'/restapi/v1.0/account/{account_id}/ivr-prompts/{prompt_id}/content',
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_ivr_menu(self, account_id: str, data: CreateIVRMenuRequest) -> CreateIVRMenuResponse:
        """
        Create IVR Menu
        
        Creates a company IVR menu.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            data: `CreateIVRMenuRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateIVRMenuResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/ivr-menus',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateIVRMenuResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_ivr_menu(self, account_id: str, ivr_menu_id: str) -> ReadIVRMenuResponse:
        """
        Get IVR Menu
        
        Returns a company IVR menu by ID.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            ivr_menu_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadIVRMenuResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/ivr-menus/{ivr_menu_id}',
            model = ReadIVRMenuResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_ivr_menu(self, account_id: str, ivr_menu_id: str) -> UpdateIVRMenuResponse:
        """
        Update IVR Menu
        
        Updates a company IVR menu by ID.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            ivr_menu_id: `str`.
                **REQUIRED.**
        
        Returns:
            `UpdateIVRMenuResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/ivr-menus/{ivr_menu_id}',
            method = 'PUT',
            model = UpdateIVRMenuResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_call_recording_settings(self, account_id: str) -> ReadCallRecordingSettingsResponse:
        """
        Get Call Recording Settings
        
        Returns call recording settings.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadCallRecordingSettingsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-recording',
            model = ReadCallRecordingSettingsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_call_recording_settings(self, account_id: str, data: UpdateCallRecordingSettingsRequest) -> UpdateCallRecordingSettingsResponse:
        """
        Update Call Recording Settings
        
        Updates current call recording settings.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            data: `UpdateCallRecordingSettingsRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateCallRecordingSettingsResponse`. OK: Updated Call Recording Settings
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-recording',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateCallRecordingSettingsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_call_recording_extensions(self, account_id: str) -> ListCallRecordingExtensionsResponse:
        """
        Get Call Recording Extension List
        
        Returns the list of extensions to be recorded.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ListCallRecordingExtensionsResponse`. Extension List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-recording/extensions',
            model = ListCallRecordingExtensionsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_call_recording_extension_list(self, account_id: str, data: UpdateCallRecordingExtensionListRequest):
        """
        Update Call Recording Extension List
        
        Creates or updates the list of extensions to be recorded.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            data: `UpdateCallRecordingExtensionListRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-recording/bulk-assign',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            expected_codes = [ 200 ],
        )
    
    async def list_call_recording_custom_greetings \
    (
        self,
        account_id: str,
        *,
        type: Optional[ListCallRecordingCustomGreetingsType] = None,
    ) -> ListCallRecordingCustomGreetingsResponse:
        """
        Get Call Recording Custom Greeting List
        
        Returns call recording custom greetings.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            type: `Optional[ListCallRecordingCustomGreetingsType]`, default: `None`.
                Optional.
        
        Returns:
            `ListCallRecordingCustomGreetingsResponse`. Success
            Returns data on call recording custom greetings.
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-recording/custom-greetings',
            query = filter_out_smart({'type': str(type)}),
            model = ListCallRecordingCustomGreetingsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_call_recording_custom_greeting_list(self, account_id: str):
        """
        Delete Call Recording Custom Greeting List
        
        Deletes call recording custom greetings.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/call-recording/custom-greetings', method='DELETE', expected_codes=[ 204 ])
    
    async def delete_call_recording_custom_greeting(self, account_id: str, greeting_id: str):
        """
        Delete Call Recording Custom Greeting
        
        Deletes call recording custom greeting(s).
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            greeting_id: `str`.
                **REQUIRED.**
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/call-recording/custom-greetings/{greeting_id}', method='DELETE', expected_codes=[ 200 ])
    
    async def create_sip_registration(self, data: CreateSIPRegistrationRequest) -> CreateSIPRegistrationResponse:
        """
        Register SIP Device
        
        Creates SIP registration of a device/application (WebPhone, Mobile, softphone)
        
        Returns:
            `CreateSIPRegistrationResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/client-info/sip-provision',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateSIPRegistrationResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_extension_phone_numbers \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        status: Optional[ListExtensionPhoneNumbersStatus] = None,
        usage_type: Optional[List[ListExtensionPhoneNumbersUsageTypeItem]] = None,
        page: Optional[int] = None,
        per_page: Optional[int] = None,
    ) -> ListExtensionPhoneNumbersResponse:
        """
        Get Extension Phone Number List
        
        Returns the list of phone numbers that are used by a particular extension, and can be filtered
        by the phone number type. The returned list contains all numbers which are directly mapped to a
        given extension plus the features and also company-level numbers which may be used when
        performing different operations on behalf of this extension.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            status: `Optional[ListExtensionPhoneNumbersStatus]`, default: `None`.
                Optional. Status of a phone number. Multiple values are supported
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            usage_type: `Optional[List[ListExtensionPhoneNumbersUsageTypeItem]]`, default: `None`.
                Optional. Usage type of a phone number
            
            page: `Optional[int]`, default: `None`.
                Optional. Indicates the page number to retrieve. Only positive number values are allowed.
                Default value is '1'
            
            per_page: `Optional[int]`, default: `None`.
                Optional. Indicates the page size (number of items). If not specified, the value is '100' by
                default
        
        Returns:
            `ListExtensionPhoneNumbersResponse`. OK: User Phone Number List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/phone-number',
            query = filter_out_smart({'status': str(status), 'usageType': str(usage_type), 'page': str(page), 'perPage': str(per_page)}),
            model = ListExtensionPhoneNumbersResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_extension(self, account_id: str = '~', extension_id: str = '~') -> ReadExtensionResponse:
        """
        Get Extension
        
        Returns basic information about a particular extension.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
        
        Returns:
            `ReadExtensionResponse`. Extension information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}',
            model = ReadExtensionResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def update_extension(self, data: UpdateExtensionRequest, account_id: str = '~', extension_id: str = '~') -> UpdateExtensionResponse:
        """
        Update Extension
        
        Updates user settings.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `UpdateExtensionRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateExtensionResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateExtensionResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def delete_extension(self, extension_id: str, account_id: str, *, save_phone_lines: Optional[bool] = False, save_phone_numbers: Optional[bool] = True):
        """
        Delete Extension
        
        Deletes extension(s) by ID(s). When an extension is being deleted the default API behaviour is
        as follows: ⋅⋅* user's direct numbers are preserved by becoming additional company numbers; ⋅⋅*
        user's digital lines (both device & associated phone number) are deleted. You can change this
        behaviour using the filters: ..* create unassigned extensions for each digital line of the
        deleted extension by setting the query parameter `savePhoneLines` to `true` in request path;
        ..* remove direct numbers of the deleted extension by setting the query parameter
        `savePhoneNumbers` to `false` in request path
        
        Arguments:
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            save_phone_lines: `Optional[bool]`, default: `False`.
                Optional.
            
            save_phone_numbers: `Optional[bool]`, default: `True`.
                Optional.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}',
            method = 'DELETE',
            query = filter_out_smart({'savePhoneLines': str(save_phone_lines), 'savePhoneNumbers': str(save_phone_numbers)}),
            expected_codes = [ 204 ],
        )
    
    async def read_extension_caller_id(self, account_id: str = '~', extension_id: str = '~') -> ReadExtensionCallerIdResponse:
        """
        Get Extension Caller ID
        
        Returns information on an outbound caller ID of an extension.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
        
        Returns:
            `ReadExtensionCallerIdResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/caller-id',
            model = ReadExtensionCallerIdResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def update_extension_caller_id \
    (
        self,
        data: UpdateExtensionCallerIdRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> UpdateExtensionCallerIdResponse:
        """
        Update Extension Caller ID
        
        Updates outbound caller ID information of an extension.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `UpdateExtensionCallerIdRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateExtensionCallerIdResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/caller-id',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateExtensionCallerIdResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_extension_grants \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        extension_type: Optional[ListExtensionGrantsExtensionType] = None,
        page: Optional[str] = '1',
        per_page: Optional[str] = '100',
    ) -> ListExtensionGrantsResponse:
        """
        Get Extension Grant List
        
        Returns the list of extensions with the information on grants given to the current extension
        regarding them. Currently the list of grants include: picking up a call, monitoring, calling or
        receiving a call on behalf of somebody, call delegation and calling paging groups.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            extension_type: `Optional[ListExtensionGrantsExtensionType]`, default: `None`.
                Optional. Type of extension to be returned. Multiple values are supported
            
            page: `Optional[str]`, default: `'1'`.
                Optional.
            
            per_page: `Optional[str]`, default: `'100'`.
                Optional.
        
        Returns:
            `ListExtensionGrantsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/grant',
            query = filter_out_smart({'extensionType': str(extension_type), 'page': page, 'perPage': per_page}),
            model = ListExtensionGrantsResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_automatic_location_updates_users \
    (
        self,
        account_id: str = '~',
        *,
        type: Optional[ListAutomaticLocationUpdatesUsersType] = None,
        search_string: Optional[str] = None,
        department: Optional[str] = None,
        site_id: Optional[str] = None,
        feature_enabled: Optional[bool] = None,
        order_by: Optional[str] = 'name',
        per_page: Optional[int] = None,
        page: Optional[int] = 1,
    ) -> ListAutomaticLocationUpdatesUsersResponse:
        """
        Get User List
        
        Returns the list of users with their status of Automatic Location Updates feature.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            type: `Optional[ListAutomaticLocationUpdatesUsersType]`, default: `None`.
                Optional. Extension type. Multiple values are supported
            
            search_string: `Optional[str]`, default: `None`.
                Optional. Filters entries containing the specified substring in user name, extension or
                department. The characters range is 0-64; not case-sensitive. If empty then the filter is
                ignored
            
            department: `Optional[str]`, default: `None`.
                Optional. Department name to filter the users. The value range is 0-64; not case-sensitive. If
                not specified then the parameter is ignored. Multiple values are supported
            
            site_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a site. To filter users of Main Site (Company) `main-site`
                must be specified. Supported only If Multi-Site feature is enabled for the account. Multiple
                values are supported
            
            feature_enabled: `Optional[bool]`, default: `None`.
                Optional. Filters entries by their status of Automatic Location Updates feature
            
            order_by: `Optional[str]`, default: `'name'`.
                Optional. Comma-separated list of fields to order results prefixed by plus sign '+' (ascending
                order) or minus sign '-' (descending order). Supported values: 'name', 'modelName', 'siteName',
                'featureEnabled'
            
            per_page: `Optional[int]`, default: `None`.
                Optional. Indicates the page size (number of items). The values supported: `Max` or numeric
                value. If not specified, 100 records are returned per one page
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are supported
        
        Returns:
            `ListAutomaticLocationUpdatesUsersResponse`. User List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/users',
            query = filter_out_smart({'type': str(type), 'searchString': search_string, 'department': department, 'siteId': site_id, 'featureEnabled': str(feature_enabled), 'orderBy': order_by, 'perPage': str(per_page), 'page': str(page)}),
            model = ListAutomaticLocationUpdatesUsersResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def assign_multiple_automatica_location_updates_users(self, data: AssignMultipleAutomaticaLocationUpdatesUsersRequest, account_id: str = '~'):
        """
        Enable Automatic Location Updates for Users
        
        Enables or disables Automatic Location Updates feature for multiple account users.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            data: `AssignMultipleAutomaticaLocationUpdatesUsersRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/users/bulk-assign',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            expected_codes = [ 204 ],
        )
    
    async def list_wireless_points \
    (
        self,
        account_id: str = '~',
        *,
        site_id: Optional[str] = None,
        search_string: Optional[str] = None,
        order_by: Optional[str] = None,
        per_page: Optional[int] = None,
        page: Optional[int] = 1,
    ) -> ListWirelessPointsResponse:
        """
        Get Wireless Point List
        
        Returns account wireless points configured and used for Automatic Location Updates feature.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            site_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a site. To filter Main Site (Company) 'main-site' must be
                specified. Supported only If multi-site feature is enabled for the account
            
            search_string: `Optional[str]`, default: `None`.
                Optional. Filters entries by the specified substring (search by chassis ID, switch name or
                address) The characters range is 0-64 (if empty the filter is ignored)
            
            order_by: `Optional[str]`, default: `None`.
                Optional. Comma-separated list of fields to order results prefixed by '+' sign (ascending
                order) or '-' sign (descending order). The default sorting is by `name`
            
            per_page: `Optional[int]`, default: `None`.
                Optional. Indicates the page size (number of items). The values supported: `Max` or numeric
                value. If not specified, 100 records are returned per one page
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are supported
        
        Returns:
            `ListWirelessPointsResponse`. Wireless Points
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/wireless-points',
            query = filter_out_smart({'siteId': site_id, 'searchString': search_string, 'orderBy': order_by, 'perPage': str(per_page), 'page': str(page)}),
            model = ListWirelessPointsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_wireless_point(self, data: CreateWirelessPointRequest, account_id: str = '~') -> CreateWirelessPointResponse:
        """
        Create Wireless Point
        
        Creates a new wireless point in network configuration with the emergency address assigned.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            data: `CreateWirelessPointRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateWirelessPointResponse`. Wireless Point
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/wireless-points',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateWirelessPointResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_wireless_point(self, point_id: str, account_id: str = '~') -> ReadWirelessPointResponse:
        """
        Get Wireless Point
        
        Returns the specified wireless access point of a corporate map with the emergency address
        assigned.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            point_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadWirelessPointResponse`. Wireless Point
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/wireless-points/{point_id}',
            model = ReadWirelessPointResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_wireless_point(self, point_id: str, data: UpdateWirelessPointRequest, account_id: str = '~') -> UpdateWirelessPointResponse:
        """
        Update Wireless Point
        
        Updates the specified wireless access point of a corporate map by ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            point_id: `str`.
                **REQUIRED.**
            
            data: `UpdateWirelessPointRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateWirelessPointResponse`. Wireless Point
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/wireless-points/{point_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateWirelessPointResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_wireless_point(self, point_id: List[str], account_id: str = '~'):
        """
        Delete Wireless Point
        
        Deletes wireless point(s) of a corporate map by ID(s).
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            point_id: `List[str]`.
                **REQUIRED.**
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/wireless-points/{point_id}',
            method = 'DELETE',
            expected_codes = [ 204 ],
        )
    
    async def list_networks(self, account_id: str = '~') -> ListNetworksResponse:
        """
        Get Network Map
        
        Returns corporate networks map with emergency addresses assigned to the current account.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ListNetworksResponse`. Networks List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/networks',
            model = ListNetworksResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def create_network(self, data: CreateNetworkRequest, account_id: str = '~') -> CreateNetworkResponse:
        """
        Create Network
        
        Creates a new network in corporate ethernet map for assignment of emergency addresses to
        network access points.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `CreateNetworkRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateNetworkResponse`. Created Network
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/networks',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateNetworkResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_network(self, network_id: str, account_id: str = '~') -> ReadNetworkResponse:
        """
        Get Network
        
        Returns the specified network with emergency addresses assigned to the current account.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            network_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadNetworkResponse`. Network information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/networks/{network_id}',
            model = ReadNetworkResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_network(self, network_id: str, data: UpdateNetworkRequest, account_id: str = '~'):
        """
        Update Network
        
        Updates network in corporate ethernet map for assignment of emergency addresses to network
        access points.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            network_id: `str`.
                **REQUIRED.**
            
            data: `UpdateNetworkRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/networks/{network_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            expected_codes = [ 200 ],
        )
    
    async def delete_network(self, network_id: List[str], account_id: str = '~'):
        """
        Delete Network
        
        Deletes network(s) in corporate ethernet map for Automatic Location Updates feature.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            network_id: `List[str]`.
                **REQUIRED.**
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/networks/{network_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def list_devices_automatic_location_updates \
    (
        self,
        account_id: str = '~',
        *,
        site_id: Optional[str] = None,
        feature_enabled: Optional[bool] = None,
        model: Optional[str] = None,
        compatible_only: Optional[bool] = None,
        search_string: Optional[str] = None,
        order_by: Optional[str] = 'name',
        per_page: Optional[int] = None,
        page: Optional[int] = 1,
    ) -> ListDevicesAutomaticLocationUpdatesResponse:
        """
        Get Device List
        
        Returns the list of common devices with their status of Automatic Location Updates feature.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            site_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a site. To filter devices of Main Site (Company) `main-site`
                must be specified. Supported only If Multi-Site feature is enabled for the account
            
            feature_enabled: `Optional[bool]`, default: `None`.
                Optional. Filters entries by their status of Automatic Location Updates feature
            
            model: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a device model for filtering. Multiple values are supported
            
            compatible_only: `Optional[bool]`, default: `None`.
                Optional. Filters devices which support HELD protocol
            
            search_string: `Optional[str]`, default: `None`.
                Optional. Filters entries which have device name or model name containing the mentioned
                substring. The value should be split by spaces; the range is 0 - 64 characters, not
                case-sensitive. If empty the filter is ignored
            
            order_by: `Optional[str]`, default: `'name'`.
                Optional. Comma-separated list of fields to order results prefixed by plus sign '+' (ascending
                order) or minus sign '-' (descending order). Supported values: 'name', 'modelName', 'siteName',
                'featureEnabled'
            
            per_page: `Optional[int]`, default: `None`.
                Optional. Indicates the page size (number of items). The values supported: `Max` or numeric
                value. If not specified, 100 records are returned per one page
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are supported
        
        Returns:
            `ListDevicesAutomaticLocationUpdatesResponse`. Device List with their status of Automatic
            Location Updates feature
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/devices',
            query = filter_out_smart({'siteId': site_id, 'featureEnabled': str(feature_enabled), 'model': model, 'compatibleOnly': str(compatible_only), 'searchString': search_string, 'orderBy': order_by, 'perPage': str(per_page), 'page': str(page)}),
            model = ListDevicesAutomaticLocationUpdatesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def assign_multiple_devices_automatic_location_updates(self, data: AssignMultipleDevicesAutomaticLocationUpdatesRequest, account_id: str = '~'):
        """
        Enable Automatic Location Updates for Devices
        
        Enables or disables Automatic Location Updates feature for the specified common phones.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            data: `AssignMultipleDevicesAutomaticLocationUpdatesRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/devices/bulk-assign',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            expected_codes = [ 204 ],
        )
    
    async def list_account_switches \
    (
        self,
        account_id: str = '~',
        *,
        site_id: Optional[str] = None,
        search_string: Optional[str] = None,
        order_by: Optional[str] = None,
        per_page: Optional[int] = None,
        page: Optional[int] = 1,
    ) -> ListAccountSwitchesResponse:
        """
        Get Account Switch List
        
        Returns corporate map of configured network switches with the assigned emergency addresses for
        the logged-in account.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            site_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a site. To filter Main Site (Company) main-site must be
                specified. Supported only If multi-site feature is enabled for the account
            
            search_string: `Optional[str]`, default: `None`.
                Optional. Filters entries by the specified substring (search by chassis ID, switch name or
                address) The characters range is 0-64 (if empty the filter is ignored)
            
            order_by: `Optional[str]`, default: `None`.
                Optional. Comma-separated list of fields to order results prefixed by '+' sign (ascending
                order) or '-' sign (descending order). The default sorting is by `name`
            
            per_page: `Optional[int]`, default: `None`.
                Optional. Indicates the page size (number of items). The values supported: `Max` or numeric
                value. If not specified, 100 records are returned per one page
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are supported
        
        Returns:
            `ListAccountSwitchesResponse`. Switches Map
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/switches',
            query = filter_out_smart({'siteId': site_id, 'searchString': search_string, 'orderBy': order_by, 'perPage': str(per_page), 'page': str(page)}),
            model = ListAccountSwitchesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_switch(self, data: CreateSwitchRequest, account_id: str = '~') -> CreateSwitchResponse:
        """
        Create Switch
        
        Creates a new switch in corporate map based on chassis ID and used for Automatic Locations
        Update feature.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `CreateSwitchRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateSwitchResponse`. Switch information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/switches',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateSwitchResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_switch(self, switch_id: str, account_id: str = '~') -> ReadSwitchResponse:
        """
        Get Switch
        
        Returns the specified switch with the assigned emergency address.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            switch_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadSwitchResponse`. Switch information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/switches/{switch_id}',
            model = ReadSwitchResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_switch(self, switch_id: str, data: UpdateSwitchRequest, account_id: str = '~') -> UpdateSwitchResponse:
        """
        Update Switch
        
        Updates switch. Partial update is not supported, all switch parameters should be specified. If
        null value is received or parameter is missing, its value is removed.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            switch_id: `str`.
                **REQUIRED.**
            
            data: `UpdateSwitchRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateSwitchResponse`. Switch information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/switches/{switch_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateSwitchResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_switch(self, switch_id: List[str], account_id: str = '~'):
        """
        Delete Switch
        
        Deletes wireless switch(es) in network configuration for Automatic Location Updates feature.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            switch_id: `List[str]`.
                **REQUIRED.**
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/switches/{switch_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def create_multiple_switches(self, data: CreateMultipleSwitchesRequest, account_id: str = '~') -> CreateMultipleSwitchesResponse:
        """
        Create Multiple Switches
        
        Creates multiple switches in corporate map. The maximum number of switches per request is 10
        000; limitation for account is 10 000.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            data: `CreateMultipleSwitchesRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateMultipleSwitchesResponse`. Multiple Switches Creation Task
            Information on the task for multiple switches creation
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/switches-bulk-create',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateMultipleSwitchesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 202 ],
        )
        return resp
    
    async def update_multiple_switches(self, data: UpdateMultipleSwitchesRequest, account_id: str = '~') -> UpdateMultipleSwitchesResponse:
        """
        Update Multiple Switches
        
        Updates multiple switches in corporate map. The maximum number of switches per request is 10
        000; limitation for account is 10 000.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            data: `UpdateMultipleSwitchesRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateMultipleSwitchesResponse`. Multiple Switches Update Task
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/switches-bulk-update',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = UpdateMultipleSwitchesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 202 ],
        )
        return resp
    
    async def create_multiple_wireless_points(self, data: CreateMultipleWirelessPointsRequest, account_id: str = '~') -> CreateMultipleWirelessPointsResponse:
        """
        Create Multiple Wireless Points
        
        Creates multiple wireless points in corporate map. The maximum number of wireless points per
        request is 10 000; limitation for account is 70 000.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            data: `CreateMultipleWirelessPointsRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateMultipleWirelessPointsResponse`. Multiple Wireless Points Creation Task
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/wireless-points-bulk-create',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateMultipleWirelessPointsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 202 ],
        )
        return resp
    
    async def update_multiple_wireless_points(self, data: UpdateMultipleWirelessPointsRequest, account_id: str = '~') -> UpdateMultipleWirelessPointsResponse:
        """
        Update Multiple Wireless Points
        
        Updates wireless points in corporate map. The maximum number of wireless points per request is
        10 000; limitation for account is 70 000.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            data: `UpdateMultipleWirelessPointsRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateMultipleWirelessPointsResponse`. Multiple Wireless Points Update Task
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/wireless-points-bulk-update',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = UpdateMultipleWirelessPointsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 202 ],
        )
        return resp
    
    async def validate_multiple_wireless_points \
    (
        self,
        data: ValidateMultipleWirelessPointsRequest,
        account_id: str = '~',
    ) -> ValidateMultipleWirelessPointsResponse:
        """
        Validate Multiple Wireless Points
        
        Validates wireless points before creation or update. The maximum number of wireless points per
        request is 10 000.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            data: `ValidateMultipleWirelessPointsRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `ValidateMultipleWirelessPointsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/wireless-points-bulk-validate',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = ValidateMultipleWirelessPointsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def validate_multiple_switches(self, data: ValidateMultipleSwitchesRequest, account_id: str = '~') -> ValidateMultipleSwitchesResponse:
        """
        Validate Multiple Switches
        
        Validates switches before creation or update. The maximum number of switches per request is 10
        000.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional.
            
            data: `ValidateMultipleSwitchesRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `ValidateMultipleSwitchesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/switches-bulk-validate',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = ValidateMultipleSwitchesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_automatic_location_updates_task(self, task_id: str, account_id: str = '~') -> ReadAutomaticLocationUpdatesTaskResponse:
        """
        Get Emergency Map Configuration Task
        
        Returns results of the task created within the frame of Automatic Location Updates feature.
        Currently four task types are supported: 'Wireless Points Bulk Create', 'Wireless Points Bulk
        Update', 'Switches Bulk Create', 'Switches Bulk Update'
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            task_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadAutomaticLocationUpdatesTaskResponse`. Task Information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-address-auto-update/tasks/{task_id}',
            model = ReadAutomaticLocationUpdatesTaskResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_emergency_locations \
    (
        self,
        account_id: str = '~',
        *,
        search_string: Optional[str] = None,
        site_id: Optional[str] = None,
        address_status: Optional[ListEmergencyLocationsAddressStatus] = None,
        usage_status: Optional[ListEmergencyLocationsUsageStatus] = None,
        domestic_country_id: Optional[str] = None,
        order_by: Optional[str] = 'address',
        per_page: Optional[int] = None,
        page: Optional[int] = 1,
    ) -> ListEmergencyLocationsResponse:
        """
        Get Emergency Location List
        
        Returns emergency response locations of the current account.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            search_string: `Optional[str]`, default: `None`.
                Optional. Filters entries containing the specified substring in address and name fields. The
                characters range is 0-64; not case-sensitive. If empty then the filter is ignored
            
            site_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a site for filtering. To filter by Main Site (Company)
                `main-site` value should be specified
            
            address_status: `Optional[ListEmergencyLocationsAddressStatus]`, default: `None`.
                Optional.
            
            usage_status: `Optional[ListEmergencyLocationsUsageStatus]`, default: `None`.
                Optional.
            
            domestic_country_id: `Optional[str]`, default: `None`.
                Optional.
            
            order_by: `Optional[str]`, default: `'address'`.
                Optional. Comma-separated list of fields to order results prefixed by plus sign '+' (ascending
                order) or minus sign '-' (descending order). Supported values: 'address'
            
            per_page: `Optional[int]`, default: `None`.
                Optional. Indicates the page size (number of items). The values supported: `Max` or numeric
                value. If not specified, 100 records are returned per one page
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are supported
        
        Returns:
            `ListEmergencyLocationsResponse`. Emergency Location List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-locations',
            query = filter_out_smart({'searchString': search_string, 'siteId': site_id, 'addressStatus': str(address_status), 'usageStatus': str(usage_status), 'domesticCountryId': domestic_country_id, 'orderBy': order_by, 'perPage': str(per_page), 'page': str(page)}),
            model = ListEmergencyLocationsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_emergency_location(self, account_id: str, data: CreateEmergencyLocationRequest):
        """
        Add Emergency Location
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            data: `CreateEmergencyLocationRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-locations',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            expected_codes = [ 200 ],
        )
    
    async def read_emergency_location(self, location_id: str, account_id: str = '~') -> ReadEmergencyLocationResponse:
        """
        Get Emergency Location
        
        Returns emergency response location by ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            location_id: `str`.
                **REQUIRED.** Internal identifier of the emergency location
        
        Returns:
            `ReadEmergencyLocationResponse`. Emergency Location Information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-locations/{location_id}',
            model = ReadEmergencyLocationResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_emergency_location(self, location_id: str, account_id: str = '~') -> UpdateEmergencyLocationResponse:
        """
        Update Emergency Location
        
        Updates the specified emergency response location.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            location_id: `str`.
                **REQUIRED.** Internal identifier of the emergency location
        
        Returns:
            `UpdateEmergencyLocationResponse`. Emergency Location Information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/emergency-locations/{location_id}',
            method = 'PUT',
            model = UpdateEmergencyLocationResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_notification_settings(self, extension_id: str, account_id: str = '~') -> ReadNotificationSettingsResponse:
        """
        Get Notification Settings
        
        Returns notification settings for the current extension.
        
        <p>Knowledge Article: <a
        href="https://success.ringcentral.com/articles/RC_Knowledge_Article/9740">User Settings - Set
        up Message Notifications</a></p>
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
        
        Returns:
            `ReadNotificationSettingsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/notification-settings',
            model = ReadNotificationSettingsResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def update_notification_settings \
    (
        self,
        extension_id: int,
        data: UpdateNotificationSettingsRequest,
        account_id: str = '~',
    ) -> UpdateNotificationSettingsResponse:
        """
        Update Notification Settings
        
        Updates notification settings for the current extension.
        
        <p>Knowledge Article: <a
        href="https://success.ringcentral.com/articles/RC_Knowledge_Article/9740">User Settings - Set
        up Message Notifications</a></p>
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `int`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            data: `UpdateNotificationSettingsRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateNotificationSettingsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/notification-settings',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateNotificationSettingsResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_user_profile_image(self, extension_id: str, account_id: str) -> bytes:
        """
        Get User Profile Image
        
        Returns a profile image of an extension.
        
        Arguments:
            extension_id: `str`.
                **REQUIRED.**
            
            account_id: `str`.
                **REQUIRED.**
        
        Returns:
            `bytes`. User Profile Image Media Data
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_binary_data(request=f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/profile-image', expected_codes=[ 200 ])
        return resp
    
    async def update_user_profile_image(self, extension_id: str, account_id: str, data: UpdateUserProfileImageRequest):
        """
        Update User Profile Image
        
        Updates the extension profile image
        
        Arguments:
            extension_id: `str`.
                **REQUIRED.**
            
            account_id: `str`.
                **REQUIRED.**
            
            data: `UpdateUserProfileImageRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/profile-image',
            method = 'PUT',
            encode_body = 'multipart/form-data',
            body = data,
            expected_codes = [ 204 ],
        )
    
    async def create_user_profile_image(self, extension_id: str, account_id: str, data: CreateUserProfileImageRequest):
        """
        Upload User Profile Image
        
        Uploads the extension profile image.
        
        Arguments:
            extension_id: `str`.
                **REQUIRED.**
            
            account_id: `str`.
                **REQUIRED.**
            
            data: `CreateUserProfileImageRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/profile-image',
            method = 'POST',
            encode_body = 'multipart/form-data',
            body = data,
            expected_codes = [ 204 ],
        )
    
    async def read_scaled_pofile_image(self, scale_size: str, account_id: str = '~', extension_id: str = '~') -> bytes:
        """
        Get Scaled User Profile Image
        
        Returns scaled profile image of an extension.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            scale_size: `str`.
                **REQUIRED.** Dimensions of a profile image which will be returned in response. If this path
                parameter is not specified in request URI then
        
        Returns:
            `bytes`. User Profile Image Media Data
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_binary_data \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/profile-image/{scale_size}',
            expected_content_type = 'image/jpeg',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_conferencing_settings \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        country_id: Optional[str] = None,
    ) -> ReadConferencingSettingsResponse:
        """
        Get User Conferencing Settings
        
        Returns the information on the Free Conference Calling (FCC) feature for a given extension.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            country_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a country. If not specified, the response is returned for the
                brand country
        
        Returns:
            `ReadConferencingSettingsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/conferencing',
            query = filter_out_smart({'countryId': country_id}),
            model = ReadConferencingSettingsResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def update_conferencing_settings \
    (
        self,
        data: UpdateConferencingSettingsRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> UpdateConferencingSettingsResponse:
        """
        Update User Conferencing Settings
        
        Updates the default conferencing number for the current extension. The number can be selected
        from conferencing numbers of the current extension. Updates the setting, allowing participants
        join the conference before host.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `UpdateConferencingSettingsRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateConferencingSettingsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/conferencing',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateConferencingSettingsResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_account_info(self, account_id: str = '~') -> ReadAccountInfoResponse:
        """
        Get Account Info
        
        Returns basic information about a particular RingCentral customer account.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ReadAccountInfoResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model(request=f'/restapi/v1.0/account/{account_id}', model=ReadAccountInfoResponse, expected_content_type='application/json')
        return resp
    
    async def read_account_business_address(self, account_id: str = '~') -> ReadAccountBusinessAddressResponse:
        """
        Get Account Business Address
        
        Returns business address of a company.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ReadAccountBusinessAddressResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/business-address',
            model = ReadAccountBusinessAddressResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def update_account_business_address(self, data: UpdateAccountBusinessAddressRequest, account_id: str = '~') -> UpdateAccountBusinessAddressResponse:
        """
        Update Company Business Address
        
        Updates the business address of a company that account is linked to. Batch request is
        supported.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `UpdateAccountBusinessAddressRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateAccountBusinessAddressResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/business-address',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateAccountBusinessAddressResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_account_service_info(self, account_id: str = '~') -> ReadAccountServiceInfoResponse:
        """
        Get Account Service Info
        
        Returns the information about service plan, available features and limitations for a particular
        RingCentral customer account.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ReadAccountServiceInfoResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/service-info',
            model = ReadAccountServiceInfoResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_languages(self) -> ListLanguagesResponse:
        """
        Get Language List
        
        Returns the information about supported languages.
        
        Returns:
            `ListLanguagesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model(request=f'/restapi/v1.0/dictionary/language', model=ListLanguagesResponse, expected_content_type='application/json')
        return resp
    
    async def read_language(self, language_id: int) -> ReadLanguageResponse:
        """
        Get Language
        
        Returns language by ID.
        
        Arguments:
            language_id: `int`.
                **REQUIRED.** Internal identifier of a language
        
        Returns:
            `ReadLanguageResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/dictionary/language/{language_id}',
            model = ReadLanguageResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_countries \
    (
        self,
        *,
        login_allowed: Optional[bool] = None,
        signup_allowed: Optional[bool] = None,
        number_selling: Optional[bool] = None,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        free_softphone_line: Optional[bool] = None,
    ) -> ListCountriesResponse:
        """
        Get Country List
        
        Returns all the countries available for calling.
        
        Arguments:
            login_allowed: `Optional[bool]`, default: `None`.
                Optional. Specifies whether login with the phone numbers of this country is enabled or not
            
            signup_allowed: `Optional[bool]`, default: `None`.
                Optional. Indicates whether signup/billing is allowed for a country. If not specified all
                countries are returned (according to other filters specified if any)
            
            number_selling: `Optional[bool]`, default: `None`.
                Optional. Specifies if RingCentral sells phone numbers of this country
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
            
            free_softphone_line: `Optional[bool]`, default: `None`.
                Optional. Specifies if free phone line for softphone is available for a country or not
        
        Returns:
            `ListCountriesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/dictionary/country',
            query = filter_out_smart({'loginAllowed': str(login_allowed), 'signupAllowed': str(signup_allowed), 'numberSelling': str(number_selling), 'page': str(page), 'perPage': str(per_page), 'freeSoftphoneLine': str(free_softphone_line)}),
            model = ListCountriesResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_country(self, country_id: int) -> ReadCountryResponse:
        """
        Get Country
        
        Returns the information on a specific country.
        
        Arguments:
            country_id: `int`.
                **REQUIRED.** Internal identifier of a country
        
        Returns:
            `ReadCountryResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/dictionary/country/{country_id}',
            model = ReadCountryResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_locations \
    (
        self,
        *,
        order_by: Optional[ListLocationsOrderBy] = 'City',
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        state_id: Optional[str] = None,
        with_nxx: Optional[bool] = None,
    ) -> ListLocationsResponse:
        """
        Get Location List
        
        Returns all available locations for a certain state.
        
        Arguments:
            order_by: `Optional[ListLocationsOrderBy]`, default: `'City'`.
                Optional. Sorts results by the property specified
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
            
            state_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a state
            
            with_nxx: `Optional[bool]`, default: `None`.
                Optional. Specifies if nxx codes are returned
        
        Returns:
            `ListLocationsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/dictionary/location',
            query = filter_out_smart({'orderBy': str(order_by), 'page': str(page), 'perPage': str(per_page), 'stateId': state_id, 'withNxx': str(with_nxx)}),
            model = ListLocationsResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_states \
    (
        self,
        *,
        all_countries: Optional[bool] = None,
        country_id: Optional[int] = None,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        with_phone_numbers: Optional[bool] = False,
    ) -> ListStatesResponse:
        """
        Get States List
        
        Returns all the states of a certain country
        
        Arguments:
            all_countries: `Optional[bool]`, default: `None`.
                Optional. If set to 'True' then states for all countries are returned and `countryId` is
                ignored, even if specified. If the value is empty then the parameter is ignored
            
            country_id: `Optional[int]`, default: `None`.
                Optional. Internal identifier of a country
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
            
            with_phone_numbers: `Optional[bool]`, default: `False`.
                Optional. If 'True', the list of states with phone numbers available for buying is returned
        
        Returns:
            `ListStatesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/dictionary/state',
            query = filter_out_smart({'allCountries': str(all_countries), 'countryId': str(country_id), 'page': str(page), 'perPage': str(per_page), 'withPhoneNumbers': str(with_phone_numbers)}),
            model = ListStatesResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_state(self, state_id: int) -> ReadStateResponse:
        """
        Get State
        
        Returns the information on a specific state.
        
        Arguments:
            state_id: `int`.
                **REQUIRED.** Internal identifier of a state
        
        Returns:
            `ReadStateResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model(request=f'/restapi/v1.0/dictionary/state/{state_id}', model=ReadStateResponse, expected_content_type='application/json')
        return resp
    
    async def list_timezones(self, *, page: Optional[str] = '1', per_page: Optional[str] = '100') -> ListTimezonesResponse:
        """
        Get Timezone List
        
        Returns all available timezones.
        
        Arguments:
            page: `Optional[str]`, default: `'1'`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[str]`, default: `'100'`.
                Optional. Indicates the page size (number of items)
        
        Returns:
            `ListTimezonesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/dictionary/timezone',
            query = filter_out_smart({'page': page, 'perPage': per_page}),
            model = ListTimezonesResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_timezone(self, timezone_id: int, *, page: Optional[str] = '1', per_page: Optional[str] = '100') -> ReadTimezoneResponse:
        """
        Get Timezone
        
        Returns the information on a certain timezone.
        
        Arguments:
            timezone_id: `int`.
                **REQUIRED.** Internal identifier of a timezone
            
            page: `Optional[str]`, default: `'1'`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[str]`, default: `'100'`.
                Optional. Indicates the page size (number of items)
        
        Returns:
            `ReadTimezoneResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/dictionary/timezone/{timezone_id}',
            query = filter_out_smart({'page': page, 'perPage': per_page}),
            model = ReadTimezoneResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_account_phone_numbers \
    (
        self,
        account_id: str = '~',
        *,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        usage_type: Optional[List[ListAccountPhoneNumbersUsageTypeItem]] = None,
        status: Optional[ListAccountPhoneNumbersStatus] = None,
    ) -> ListAccountPhoneNumbersResponse:
        """
        Get Company Phone Number List
        
        Returns the list of phone numbers assigned to RingCentral customer account. Both company-level
        and extension-level numbers are returned.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
            
            usage_type: `Optional[List[ListAccountPhoneNumbersUsageTypeItem]]`, default: `None`.
                Optional. Usage type of a phone number
            
            status: `Optional[ListAccountPhoneNumbersStatus]`, default: `None`.
                Optional. Status of a phone number. Multiple values are supported
        
        Returns:
            `ListAccountPhoneNumbersResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/phone-number',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page), 'usageType': str(usage_type), 'status': str(status)}),
            model = ListAccountPhoneNumbersResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_account_phone_number(self, phone_number_id: int, account_id: str = '~') -> ReadAccountPhoneNumberResponse:
        """
        Get Phone Number
        
        Returns the phone number(s) belonging to a certain account or extension by phoneNumberId(s).
        Batch request is supported.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            phone_number_id: `int`.
                **REQUIRED.** Internal identifier of a phone number
        
        Returns:
            `ReadAccountPhoneNumberResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/phone-number/{phone_number_id}',
            model = ReadAccountPhoneNumberResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_extensions \
    (
        self,
        account_id: str = '~',
        *,
        extension_number: Optional[str] = None,
        email: Optional[str] = None,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        status: Optional[List[ListExtensionsStatusItem]] = None,
        type: Optional[List[ListExtensionsTypeItem]] = None,
    ) -> ListExtensionsResponse:
        """
        Get Extension List
        
        Returns the list of extensions created for a particular account. All types of extensions are
        included in this list.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_number: `Optional[str]`, default: `None`.
                Optional. Number of extension to be retrieved
            
            email: `Optional[str]`, default: `None`.
                Optional. Extension email address
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are allowed
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
            
            status: `Optional[List[ListExtensionsStatusItem]]`, default: `None`.
                Optional. Extension current state. Multiple values are supported. If 'Unassigned' is specified,
                then extensions without `extensionNumber` attribute are returned. If not specified, then all
                extensions are returned.
            
            type: `Optional[List[ListExtensionsTypeItem]]`, default: `None`.
                Optional. Extension type. Multiple values are supported
        
        Returns:
            `ListExtensionsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension',
            query = filter_out_smart({'extensionNumber': extension_number, 'email': email, 'page': str(page), 'perPage': str(per_page), 'status': str(status), 'type': str(type)}),
            model = ListExtensionsResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def create_extension(self, data: CreateExtensionRequest, account_id: str = '~') -> CreateExtensionResponse:
        """
        Create Extension
        
        Creates an extension.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `CreateExtensionRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateExtensionResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateExtensionResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_user_templates \
    (
        self,
        account_id: str,
        *,
        type: Optional[ListUserTemplatesType] = None,
        page: Optional[str] = None,
        per_page: Optional[str] = None,
    ) -> ListUserTemplatesResponse:
        """
        Get User Template List
        
        Returns the list of user templates for the current account.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            type: `Optional[ListUserTemplatesType]`, default: `None`.
                Optional.
            
            page: `Optional[str]`, default: `None`.
                Optional.
            
            per_page: `Optional[str]`, default: `None`.
                Optional.
        
        Returns:
            `ListUserTemplatesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/templates',
            query = filter_out_smart({'type': str(type), 'page': page, 'perPage': per_page}),
            model = ListUserTemplatesResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_user_template(self, account_id: str, template_id: str) -> ReadUserTemplateResponse:
        """
        Get User Template
        
        Returns the user template by ID.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            template_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadUserTemplateResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/templates/{template_id}',
            model = ReadUserTemplateResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_user_video_configuration(self, account_id: str = '~', extension_id: str = '~') -> ReadUserVideoConfigurationResponse:
        """
        Get User Video Configuration
        
        Returns information about video configuration of the current user.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the current session account
        
        Returns:
            `ReadUserVideoConfigurationResponse`. User Video Configuration
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/video-configuration',
            model = ReadUserVideoConfigurationResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_user_video_configuration \
    (
        self,
        data: UpdateUserVideoConfigurationRequest,
        account_id: str = '~',
        extension_id: str = '~',
    ) -> UpdateUserVideoConfigurationResponse:
        """
        Update User Video Configuration
        
        Allows to update user video settings, for example video provider.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the current session account
            
            data: `UpdateUserVideoConfigurationRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateUserVideoConfigurationResponse`. Video Configuration
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/video-configuration',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateUserVideoConfigurationResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_call_queues \
    (
        self,
        account_id: str,
        *,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
        member_extension_id: Optional[str] = None,
    ) -> ListCallQueuesResponse:
        """
        Get Call Queue List
        
        Returns call queue group list.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
            
            member_extension_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of an extension that is a member of every group within the result
        
        Returns:
            `ListCallQueuesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-queues',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page), 'memberExtensionId': member_extension_id}),
            model = ListCallQueuesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_call_queue_info(self, account_id: str, group_id: str) -> ReadCallQueueInfoResponse:
        """
        Get Call Queue
        
        Returns basic information on a call queue group extension.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            group_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadCallQueueInfoResponse`. Call Queue Info
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-queues/{group_id}',
            model = ReadCallQueueInfoResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_call_queue_info(self, account_id: str, group_id: str, data: UpdateCallQueueInfoRequest) -> UpdateCallQueueInfoResponse:
        """
        Update Call Queue
        
        Updates information on a call queue group extension.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            group_id: `str`.
                **REQUIRED.**
            
            data: `UpdateCallQueueInfoRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateCallQueueInfoResponse`. Updated Call Queue Info
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-queues/{group_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateCallQueueInfoResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_call_queue_members \
    (
        self,
        account_id: str,
        group_id: str,
        *,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
    ) -> ListCallQueueMembersResponse:
        """
        Get Call Queue Members
        
        Returns call queue group members.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            group_id: `str`.
                **REQUIRED.**
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are allowed
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
        
        Returns:
            `ListCallQueueMembersResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-queues/{group_id}/members',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page)}),
            model = ListCallQueueMembersResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def assign_multiple_call_queue_members(self, account_id: str, group_id: str, data: AssignMultipleCallQueueMembersRequest):
        """
        Assign Multiple Call Queue Members
        
        Updates a call queue group.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            group_id: `str`.
                **REQUIRED.**
            
            data: `AssignMultipleCallQueueMembersRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-queues/{group_id}/bulk-assign',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            expected_codes = [ 204 ],
        )
    
    async def update_user_call_queues(self, data: UpdateUserCallQueuesRequest, account_id: str = '~', extension_id: str = '~') -> UpdateUserCallQueuesResponse:
        """
        Update User Call Queues
        
        Updates the list of call queues where the user is an agent. This is a full update request,
        which means that if any queue where the user is an agent is not mentioned in request, then the
        user is automatically removed from this queue.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            data: `UpdateUserCallQueuesRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateUserCallQueuesResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/call-queues',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateUserCallQueuesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_department_members \
    (
        self,
        department_id: int,
        account_id: str = '~',
        *,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
    ) -> ListDepartmentMembersResponse:
        """
        Get Department Member List
        
        Viewing user account info (including name, business name, address and phone number/account
        number)
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            department_id: `int`.
                **REQUIRED.** Internal identifier of a Department extension (same as extensionId but only the
                ID of a department extension is valid)
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
        
        Returns:
            `ListDepartmentMembersResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/department/{department_id}/members',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page)}),
            model = ListDepartmentMembersResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def assign_multiple_department_members(self, data: AssignMultipleDepartmentMembersRequest, account_id: str = '~'):
        """
        Assign Multiple Department Members
        
        Adds and/or removes multiple call queue members
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `AssignMultipleDepartmentMembersRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/department/bulk-assign', method='POST', encode_body='application/json', body=data)
    
    async def list_paging_group_users \
    (
        self,
        account_id: str,
        paging_only_group_id: str,
        *,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
    ) -> ListPagingGroupUsersResponse:
        """
        Get Paging Group Users
        
        Returns the list of users allowed to page this group.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            paging_only_group_id: `str`.
                **REQUIRED.** Internal identifier of a paging group
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
        
        Returns:
            `ListPagingGroupUsersResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/paging-only-groups/{paging_only_group_id}/users',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page)}),
            model = ListPagingGroupUsersResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_paging_group_devices \
    (
        self,
        account_id: str,
        paging_only_group_id: str,
        *,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
    ) -> ListPagingGroupDevicesResponse:
        """
        Get Paging Group Devices
        
        Returns the list of paging devices assigned to this group.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            paging_only_group_id: `str`.
                **REQUIRED.** Internal identifier of a paging group
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are accepted
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
        
        Returns:
            `ListPagingGroupDevicesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/paging-only-groups/{paging_only_group_id}/devices',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page)}),
            model = ListPagingGroupDevicesResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def assign_multiple_paging_group_users_devices(self, account_id: str, paging_only_group_id: str, data: AssignMultiplePagingGroupUsersDevicesRequest):
        """
        Assign Paging Group Users and Devices
        
        Adds and/or removes paging group users and devices.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            paging_only_group_id: `str`.
                **REQUIRED.** Internal identifier of a paging group
            
            data: `AssignMultiplePagingGroupUsersDevicesRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/paging-only-groups/{paging_only_group_id}/bulk-assign',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
        )
    
    async def list_call_monitoring_groups \
    (
        self,
        account_id: str,
        *,
        page: Optional[int] = '1',
        per_page: Optional[int] = '100',
        member_extension_id: Optional[str] = None,
    ) -> ListCallMonitoringGroupsResponse:
        """
        Get Call Monitoring Groups List
        
        Returns call monitoring groups that can be filtered by some extension.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            page: `Optional[int]`, default: `'1'`.
                Optional. Indicates the page number to retrieve. Only positive number values are allowed
            
            per_page: `Optional[int]`, default: `'100'`.
                Optional. Indicates the page size (number of items)
            
            member_extension_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of an extension that is a member of every group within the result
        
        Returns:
            `ListCallMonitoringGroupsResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-monitoring-groups',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page), 'memberExtensionId': member_extension_id}),
            model = ListCallMonitoringGroupsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_call_monitoring_group(self, account_id: str, data: CreateCallMonitoringGroupRequest) -> CreateCallMonitoringGroupResponse:
        """
        Create Call Monitoring Group
        
        Creates a new call monitoring group.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            data: `CreateCallMonitoringGroupRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateCallMonitoringGroupResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-monitoring-groups',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateCallMonitoringGroupResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_call_monitoring_group(self, account_id: str, group_id: str, data: UpdateCallMonitoringGroupRequest) -> UpdateCallMonitoringGroupResponse:
        """
        Updates Call Monitoring Group
        
        Updates call monitoring group name by ID.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            group_id: `str`.
                **REQUIRED.** Internal identifier of a call monitoring group
            
            data: `UpdateCallMonitoringGroupRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateCallMonitoringGroupResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-monitoring-groups/{group_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateCallMonitoringGroupResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_call_monitoring_group(self, account_id: str, group_id: str):
        """
        Delete Call Monitoring Group
        
        Remove infromation about the given call monitoring group.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            group_id: `str`.
                **REQUIRED.**
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/call-monitoring-groups/{group_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def read_user_features \
    (
        self,
        account_id: str,
        extension_id: str,
        *,
        available_only: Optional[bool] = False,
        feature_id: Optional[List[str]] = None,
    ) -> ReadUserFeaturesResponse:
        """
        Get User Features
        
        Returns the list of supported features and information on their availability for the current
        extension. Specific feature(s) might be checked by providing `featureId` query param. Multiple
        values supported, format: `?featureId=Feature1&featureId=Feature2`. To get only available
        features in order to decrease response size, `availableOnly=true` query param might be
        specified.
        
        In case the feature is available for the current user, `"available": true` is returned in the
        response for the record with corresponding feature `id`. Otherwise, additional attribute
        `reason` is returned with the appropriate code:
        
        * `ServicePlanLimitation` - the feature not included to the account service plan;
        
        * `AccountLimitation` - the feature is turned off for the account;
        
        * `ExtensionTypeLimitation` - the feature is not applicable for the extension type;
        
        * `ExtensionLimitation` - the feature is not available for the extension, e.g., additional
        license required;
        
        * `InsufficientPermissions` - required permission not granted to the current user (not the one,
        who is specified in the URL, but the one who's access token is used);
        
        * `ConfigurationLimitation` - the feature is turned off for the extension, e.g., by the account
        administrator.
        
        Also, some feature may have some additional parameters, e.g., limits, which are returned in
        `params` attribute as a name-value collection:
        
        {
        
        "id": "HUD",
        
        "available": true,
        
        "params": [
        
        {
        
        "name": "limitMax",
        
        "value": "100"
        
        }
        
        ]
        
        }
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            extension_id: `str`.
                **REQUIRED.**
            
            available_only: `Optional[bool]`, default: `False`.
                Optional.
            
            feature_id: `Optional[List[str]]`, default: `None`.
                Optional.
        
        Returns:
            `ReadUserFeaturesResponse`. Feature List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/features',
            query = filter_out_smart({'availableOnly': str(available_only), 'featureId': str(feature_id)}),
            model = ReadUserFeaturesResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_call_monitoring_group_members \
    (
        self,
        account_id: str,
        group_id: str,
        *,
        page: Optional[int] = 1,
        per_page: Optional[int] = 100,
    ) -> ListCallMonitoringGroupMembersResponse:
        """
        Get Call Monitoring Group Member List
        
        Returns call monitoring group members.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            group_id: `str`.
                **REQUIRED.**
            
            page: `Optional[int]`, default: `1`.
                Optional. Indicates the page number to retrieve. Only positive number values are allowed
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Indicates the page size (number of items)
        
        Returns:
            `ListCallMonitoringGroupMembersResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-monitoring-groups/{group_id}/members',
            query = filter_out_smart({'page': str(page), 'perPage': str(per_page)}),
            model = ListCallMonitoringGroupMembersResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_call_monitoring_group_list(self, account_id: str, group_id: str, data: UpdateCallMonitoringGroupListRequest):
        """
        Update Call Monitoring Group List
        
        Updates call monitoring groups.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            group_id: `str`.
                **REQUIRED.**
            
            data: `UpdateCallMonitoringGroupListRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/call-monitoring-groups/{group_id}/bulk-assign',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            expected_codes = [ 204 ],
        )
    
    async def parse_phone_number \
    (
        self,
        data: ParsePhoneNumberRequest,
        *,
        home_country: Optional[str] = None,
        national_as_priority: Optional[bool] = None,
    ) -> ParsePhoneNumberResponse:
        """
        Parse Phone Number
        
        Returns one or more parsed and/or formatted phone numbers that are passed as a string.
        
        Arguments:
            home_country: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a home country. The default value is ISO code (ISO 3166) of
                the user's home country or brand country, if the user is undefined
            
            national_as_priority: `Optional[bool]`, default: `None`.
                Optional. The default value is 'False'. If 'True', the numbers that are closer to the home
                country are given higher priority
            
            data: `ParsePhoneNumberRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `ParsePhoneNumberResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/number-parser/parse',
            method = 'POST',
            query = filter_out_smart({'homeCountry': home_country, 'nationalAsPriority': str(national_as_priority)}),
            encode_body = 'application/json',
            body = data,
            model = ParsePhoneNumberResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def read_device(self, device_id: int, account_id: str = '~', *, sync_emergency_address: Optional[bool] = False) -> ReadDeviceResponse:
        """
        Get Device
        
        Returns account device(s) by their ID(s).
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            device_id: `int`.
                **REQUIRED.** Internal identifier of a device
            
            sync_emergency_address: `Optional[bool]`, default: `False`.
                Optional. Specifies if emergency address should be synchronized or not
        
        Returns:
            `ReadDeviceResponse`. Account Device(s) Info
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/device/{device_id}',
            query = filter_out_smart({'syncEmergencyAddress': str(sync_emergency_address)}),
            model = ReadDeviceResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def update_device(self, device_id: str, account_id: str, data: UpdateDeviceRequest, *, prestatement: Optional[bool] = None) -> UpdateDeviceResponse:
        """
        Update Device
        
        Updates account device(s) by their ID(s).
        
        Arguments:
            device_id: `str`.
                **REQUIRED.**
            
            account_id: `str`.
                **REQUIRED.**
            
            prestatement: `Optional[bool]`, default: `None`.
                Optional.
            
            data: `UpdateDeviceRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateDeviceResponse`. successful operation
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/device/{device_id}',
            method = 'PUT',
            query = filter_out_smart({'prestatement': str(prestatement)}),
            encode_body = 'application/json',
            body = data,
            model = UpdateDeviceResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def list_extension_devices \
    (
        self,
        account_id: str = '~',
        extension_id: str = '~',
        *,
        line_pooling: Optional[ListExtensionDevicesLinePooling] = None,
        feature: Optional[ListExtensionDevicesFeature] = None,
    ) -> ListExtensionDevicesResponse:
        """
        Get Extension Device List
        
        Returns devices of the extension(s) by their ID(s). Batch request is supported
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`, default: `'~'`.
                Optional. Internal identifier of an extension or tilde (~) to indicate the extension assigned
                to the account logged-in within the current session
            
            line_pooling: `Optional[ListExtensionDevicesLinePooling]`, default: `None`.
                Optional. Pooling type of a device
            
            feature: `Optional[ListExtensionDevicesFeature]`, default: `None`.
                Optional. Device feature or multiple features supported
        
        Returns:
            `ListExtensionDevicesResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/device',
            query = filter_out_smart({'linePooling': str(line_pooling), 'feature': str(feature)}),
            model = ListExtensionDevicesResponse,
            expected_content_type = 'application/json',
        )
        return resp
    
    async def check_health(self):
        """ Check Health """
        
        await self.fetch(request=f'/scim/health', expected_codes=[ 200 ])
    
    async def check_health2(self):
        """ Check Health """
        
        await self.fetch(request=f'/scim/v2/health', expected_codes=[ 200 ])
    
    async def read_service_provider_config2(self) -> ReadServiceProviderConfig2Response:
        """
        Get Service Provider Config
        
        Returns:
            `ReadServiceProviderConfig2Response`. Service Provider Configuration
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/scim/v2/ServiceProviderConfig',
            model = ReadServiceProviderConfig2Response,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_service_provider_config(self) -> ReadServiceProviderConfigResponse:
        """
        Get Service Provider Config
        
        Returns:
            `ReadServiceProviderConfigResponse`. Service Provider Configuration
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/scim/ServiceProviderConfig',
            model = ReadServiceProviderConfigResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def search_via_get2(self, *, filter: Optional[str] = None, start_index: Optional[int] = 1, count: Optional[int] = 100) -> SearchViaGet2Response:
        """
        Search/List Users
        
        Arguments:
            filter: `Optional[str]`, default: `None`.
                Optional. only support 'userName' or 'email' filter expressions for now
            
            start_index: `Optional[int]`, default: `1`.
                Optional. start index (1-based)
            
            count: `Optional[int]`, default: `100`.
                Optional. page size
        
        Returns:
            `SearchViaGet2Response`. successful operation
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/scim/v2/Users',
            query = filter_out_smart({'filter': filter, 'startIndex': str(start_index), 'count': str(count)}),
            model = SearchViaGet2Response,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_user2(self, data: CreateUser2Request) -> CreateUser2Response:
        """
        Create User
        
        Returns:
            `CreateUser2Response`. successfully created user
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/scim/v2/Users',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateUser2Response,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def search_via_get(self, *, filter: Optional[str] = None, start_index: Optional[int] = 1, count: Optional[int] = 100) -> SearchViaGetResponse:
        """
        Search/List Users
        
        Arguments:
            filter: `Optional[str]`, default: `None`.
                Optional. only support 'userName' or 'email' filter expressions for now
            
            start_index: `Optional[int]`, default: `1`.
                Optional. start index (1-based)
            
            count: `Optional[int]`, default: `100`.
                Optional. page size
        
        Returns:
            `SearchViaGetResponse`. successful operation
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/scim/Users',
            query = filter_out_smart({'filter': filter, 'startIndex': str(start_index), 'count': str(count)}),
            model = SearchViaGetResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_user(self, data: CreateUserRequest) -> CreateUserResponse:
        """
        Create User
        
        Returns:
            `CreateUserResponse`. successfully created user
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/scim/Users',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateUserResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def search_via_post2(self, data: SearchViaPost2Request) -> SearchViaPost2Response:
        """
        Search/List Users
        
        Returns:
            `SearchViaPost2Response`. successful operation
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/scim/v2/Users/.search',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = SearchViaPost2Response,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_user2(self, id: str) -> ReadUser2Response:
        """
        Get User
        
        Arguments:
            id: `str`.
                **REQUIRED.** user id
        
        Returns:
            `ReadUser2Response`. successful operation
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/scim/v2/Users/{id}',
            model = ReadUser2Response,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def replace_user2(self, id: str, data: ReplaceUser2Request) -> ReplaceUser2Response:
        """
        Update/Replace User
        
        Arguments:
            id: `str`.
                **REQUIRED.** user id
            
            data: `ReplaceUser2Request`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `ReplaceUser2Response`. successfully fully updated a user
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/scim/v2/Users/{id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = ReplaceUser2Response,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_user2(self, id: str):
        """
        Delete User
        
        Arguments:
            id: `str`.
                **REQUIRED.** user id
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/scim/v2/Users/{id}', method='DELETE', expected_codes=[ 204 ])
    
    async def patch_user2(self, id: str, data: PatchUser2Request) -> PatchUser2Response:
        """
        Update/Patch User
        
        Arguments:
            id: `str`.
                **REQUIRED.** user id
            
            data: `PatchUser2Request`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `PatchUser2Response`. successfully partially updated user
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/scim/v2/Users/{id}',
            method = 'PATCH',
            encode_body = 'application/json',
            body = data,
            model = PatchUser2Response,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_call_out_call_session(self, data: CreateCallOutCallSessionRequest, account_id: str = '~') -> CreateCallOutCallSessionResponse:
        """
        Make CallOut
        
        Creates a new outbound call out session.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `CreateCallOutCallSessionRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateCallOutCallSessionResponse`. Created
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/call-out',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateCallOutCallSessionResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def read_call_session_status \
    (
        self,
        telephony_session_id: str,
        account_id: str = '~',
        *,
        timestamp: Optional[str] = None,
        timeout: Optional[str] = None,
    ) -> ReadCallSessionStatusResponse:
        """
        Get Call Session Status
        
        Returns the status of a call session by ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            timestamp: `Optional[str]`, default: `None`.
                Optional. The date and time of a call session latest change
            
            timeout: `Optional[str]`, default: `None`.
                Optional. The time frame of awaiting for a status change before sending the resulting one in
                response
        
        Returns:
            `ReadCallSessionStatusResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}',
            query = filter_out_smart({'timestamp': timestamp, 'timeout': timeout}),
            model = ReadCallSessionStatusResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_call_session(self, telephony_session_id: str, account_id: str = '~'):
        """
        Drop Call Session
        
        Drops a call session.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}', method='DELETE', expected_codes=[ 204 ])
    
    async def hold_call_party(self, telephony_session_id: str, party_id: str, account_id: str = '~') -> HoldCallPartyResponse:
        """
        Hold Call Party
        
        Puts the party to stand-alone mode and starts to play Hold Music according to configuration &
        state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with
        hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call
        Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold
        Music and bring media back.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
        
        Returns:
            `HoldCallPartyResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/hold',
            method = 'POST',
            model = HoldCallPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def unhold_call_party(self, telephony_session_id: str, party_id: str, account_id: str = '~') -> UnholdCallPartyResponse:
        """
        Unhold Call Party
        
        Brings a party back into a call and stops to play Hold Music. There is a known limitation for
        Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone.
        It means that if you muted participant via Call Control API and RingCentral Desktop app, then
        you need to unhold both endpoints to remove Hold Music and bring media back.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
        
        Returns:
            `UnholdCallPartyResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/unhold',
            method = 'POST',
            model = UnholdCallPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def reject_party(self, telephony_session_id: str, party_id: str, account_id: str = '~'):
        """
        Reject Call Party
        
        Rejects an inbound call in a "Setup" or "Proceeding" state
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/reject',
            method = 'POST',
            expected_codes = [ 204 ],
        )
    
    async def ignore_call_in_queue(self, telephony_session_id: str, party_id: str, data: IgnoreCallInQueueRequest, account_id: str = '~'):
        """
        Ignore Call in Queue
        
        Ignores a call to a call queue agent in `Setup` or `Proceeding` state.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            data: `IgnoreCallInQueueRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/ignore',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            expected_codes = [ 204 ],
        )
    
    async def transfer_call_party \
    (
        self,
        telephony_session_id: str,
        party_id: str,
        data: TransferCallPartyRequest,
        account_id: str = '~',
    ) -> TransferCallPartyResponse:
        """
        Transfer Call Party
        
        Transfers a party by placing a new call to the specified target
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            data: `TransferCallPartyRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `TransferCallPartyResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/transfer',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = TransferCallPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def bridge_call_party(self, telephony_session_id: str, party_id: str, data: BridgeCallPartyRequest, account_id: str = '~') -> BridgeCallPartyResponse:
        """
        Bridge Call Party
        
        Connects two parties from different call sessions.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            data: `BridgeCallPartyRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `BridgeCallPartyResponse`. Bridged Call Info
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/bridge',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = BridgeCallPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def answer_call_party(self, telephony_session_id: str, party_id: str, data: AnswerCallPartyRequest, account_id: str = '~') -> AnswerCallPartyResponse:
        """
        Answer Call Party
        
        Answers a call on a certain device by passing the corresponding device ID in request body.
        Supported for call forwarding, call transfer, call flip and call queues.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            data: `AnswerCallPartyRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `AnswerCallPartyResponse`. Call Session Information
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/answer',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = AnswerCallPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def pickup_call_party(self, telephony_session_id: str, party_id: str, data: PickupCallPartyRequest, account_id: str = '~') -> PickupCallPartyResponse:
        """
        Pickup Call
        
        Picks up a call parked to the specified park location.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            data: `PickupCallPartyRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `PickupCallPartyResponse`. Created
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/pickup',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = PickupCallPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def forward_call_party(self, telephony_session_id: str, party_id: str, data: ForwardCallPartyRequest, account_id: str = '~') -> ForwardCallPartyResponse:
        """
        Forward Call Party
        
        Distributes a non-answered call to the defined target. Applicable for "Setup" or "Proceeding"
        states
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            data: `ForwardCallPartyRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `ForwardCallPartyResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/forward',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = ForwardCallPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def reply_party(self, telephony_session_id: str, party_id: str, data: ReplyPartyRequest, account_id: str = '~') -> ReplyPartyResponse:
        """
        Reply with Text
        
        Replies with text/pattern without picking up a call.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            data: `ReplyPartyRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `ReplyPartyResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/reply',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = ReplyPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def call_flip_party(self, telephony_session_id: str, party_id: str, data: CallFlipPartyRequest, account_id: str = '~'):
        """
        Call Flip on Party
        
        Performs call flip procedure by holding opposite party and calling to the specified target
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            data: `CallFlipPartyRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/flip',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            expected_codes = [ 200 ],
        )
    
    async def call_park_party(self, telephony_session_id: str, party_id: str, account_id: str = '~') -> CallParkPartyResponse:
        """
        Call Park
        
        Parks a call to a virtual location from where it can further be retrieved by any user from any
        phone of the system. The call session and call party identifiers should be specified in path.
        Currently the users can park only their own incoming calls. Up to 50 calls can be parked
        simultaneously. Park location starts with asterisk (*) and ranges 801-899.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
        
        Returns:
            `CallParkPartyResponse`. Created
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/park',
            method = 'POST',
            model = CallParkPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def read_call_party_status(self, telephony_session_id: str, party_id: str, account_id: str = '~') -> ReadCallPartyStatusResponse:
        """
        Get Call Party Status
        
        Returns a party status of a call session by ID.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
        
        Returns:
            `ReadCallPartyStatusResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}',
            model = ReadCallPartyStatusResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_call_party(self, telephony_session_id: str, party_id: str, account_id: str = '~'):
        """
        Delete Call Party
        
        Deletes a party of a call session by ID. It is possible to delete only one conference
        participant per request.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}',
            method = 'DELETE',
            expected_codes = [ 204 ],
        )
    
    async def update_call_party(self, telephony_session_id: str, party_id: str, data: UpdateCallPartyRequest, account_id: str = '~') -> UpdateCallPartyResponse:
        """
        Update Call Party
        
        Modify the party of a call session by ID. There is a known limitation for Mute scenario - mute
        via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if
        you muted participant via Call Control API and Ringcentral Desktop app you need to unmute both
        endpoints to bring media back.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            data: `UpdateCallPartyRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateCallPartyResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}',
            method = 'PATCH',
            encode_body = 'application/json',
            body = data,
            model = UpdateCallPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def start_call_recording(self, telephony_session_id: str, party_id: str, account_id: str = '~'):
        """
        Create Recording
        
        Starts a new call recording for the party
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/recordings',
            method = 'POST',
            expected_codes = [ 201 ],
        )
    
    async def pause_resume_call_recording \
    (
        self,
        telephony_session_id: str,
        party_id: str,
        recording_id: str,
        data: PauseResumeCallRecordingRequest,
        account_id: str = '~',
        *,
        brand_id: str = '~',
    ) -> PauseResumeCallRecordingResponse:
        """
        Pause/Resume Recording
        
        Pause/resume recording
        
        Arguments:
            brand_id: `str`, default: `'~'`.
                Optional. Identifies a brand of a logged in user or a brand of a sign-up session
            
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            recording_id: `str`.
                **REQUIRED.** Internal identifier of a recording
            
            data: `PauseResumeCallRecordingRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `PauseResumeCallRecordingResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/recordings/{recording_id}',
            method = 'PATCH',
            query = filter_out_smart({'brandId': brand_id}),
            encode_body = 'application/json',
            body = data,
            model = PauseResumeCallRecordingResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def supervise_call_session(self, telephony_session_id: str, data: SuperviseCallSessionRequest, account_id: str = '~') -> SuperviseCallSessionResponse:
        """
        Supervise Call Session
        
        Allows to monitor a call session in 'Listen' mode. Input parameters should contain internal
        identifiers of a monitored user and a supervisor's device. Call session should be specified in
        path. Please note that this method supports single channel audio flow, which means that audio
        of both call participants is mixed and delivered to the supervisor in single audio channel.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            data: `SuperviseCallSessionRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `SuperviseCallSessionResponse`. Created
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/supervise',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = SuperviseCallSessionResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def supervise_call_party \
    (
        self,
        telephony_session_id: str,
        party_id: str,
        data: SuperviseCallPartyRequest,
        account_id: str = '~',
    ) -> SuperviseCallPartyResponse:
        """
        Supervise Call Party
        
        Allows to monitor a call party in 'Listen' mode. Input parameters are extension number of a
        monitored user and internal identifier of a supervisor's device. Call session and party
        identifiers should be specified in path. Please note that for this method dual channel audio
        flow is supported, which means that you need to make one more request for monitoring the second
        participant of a call. And as a result of each monitoring request the client recieves SIP
        invite with the following header `p-rc-api-monitoring-ids` containing IDs of the monitored
        party and session. The flow is supported for calls with no more than 2 participants.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            telephony_session_id: `str`.
                **REQUIRED.** Internal identifier of a call session
            
            party_id: `str`.
                **REQUIRED.** Internal identifier of a call party
            
            data: `SuperviseCallPartyRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `SuperviseCallPartyResponse`. Created
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/telephony/sessions/{telephony_session_id}/parties/{party_id}/supervise',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = SuperviseCallPartyResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 201 ],
        )
        return resp
    
    async def list_data_export_tasks \
    (
        self,
        *,
        status: Optional[ListDataExportTasksStatus] = None,
        page: Optional[int] = 1,
        per_page: Optional[int] = 30,
    ) -> ListDataExportTasksResponse:
        """
        Get Data Export Task List
        
        Returns the list of Glip data export tasks.
        
        Arguments:
            status: `Optional[ListDataExportTasksStatus]`, default: `None`.
                Optional. Status of the task(s) to be returned. Multiple values are supported
            
            page: `Optional[int]`, default: `1`.
                Optional. Page number to be retrieved; value range is > 0
            
            per_page: `Optional[int]`, default: `30`.
                Optional. Number of records to be returned per page; value range is 1 - 250
        
        Returns:
            `ListDataExportTasksResponse`. Data Export Task List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/data-export',
            query = filter_out_smart({'status': str(status), 'page': str(page), 'perPage': str(per_page)}),
            model = ListDataExportTasksResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_data_export_task(self, data: CreateDataExportTaskRequest) -> CreateDataExportTaskResponse:
        """
        Create Data Export Task
        
        Creates a task for Glip data export and returns a link at which the exported data will be
        available in future once the task is implemented. The exported data can be downloaded by
        calling Get Data Export Task method with the specified task ID. Simultaneously no more than 2
        tasks per company can be created.
        
        Returns:
            `CreateDataExportTaskResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/data-export',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateDataExportTaskResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_data_export_task(self, task_id: str) -> ReadDataExportTaskResponse:
        """
        Get Data Export Task
        
        Returns the links for downloading Glip data exported within the specified task. If the export
        task is still in progress, then only the task status will be returned. If the data is ready for
        downloading, then the list of URLs will be returned.
        
        Arguments:
            task_id: `str`.
                **REQUIRED.** Internal identifier of a task to be retrieved
        
        Returns:
            `ReadDataExportTaskResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/glip/data-export/{task_id}',
            model = ReadDataExportTaskResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_data_export_task_dataset(self, task_id: str, dataset_id: str) -> bytes:
        """
        Get Data Export Task Dataset
        
        Returns the specified dataset by ID. Each dataset is a ZIP archive the size of which is limited
        to 1 Gb.
        
        Arguments:
            task_id: `str`.
                **REQUIRED.** Internal identifier of a task
            
            dataset_id: `str`.
                **REQUIRED.** Internal identifier of a dataset
        
        Returns:
            `bytes`. Dataset Zip Archive
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_binary_data \
        (
            request = f'/restapi/v1.0/glip/data-export/{task_id}/datasets/{dataset_id}',
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_message_store_report(self, account_id: str, data: CreateMessageStoreReportRequest) -> CreateMessageStoreReportResponse:
        """
        Create Message Store Report
        
        Creates a task to collect all account messages within the specified time interval. Maximum
        number of simaltaneous tasks per account is 2.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            data: `CreateMessageStoreReportRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateMessageStoreReportResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/message-store-report',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateMessageStoreReportResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 202 ],
        )
        return resp
    
    async def read_message_store_report_task(self, account_id: str, task_id: str) -> ReadMessageStoreReportTaskResponse:
        """
        Get Message Store Report Task
        
        Returns the current status of a task on report creation.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            task_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadMessageStoreReportTaskResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/message-store-report/{task_id}',
            model = ReadMessageStoreReportTaskResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_message_store_report_archive(self, account_id: str, task_id: str) -> ReadMessageStoreReportArchiveResponse:
        """
        Get Message Store Report Archive
        
        Returns the created report with message data not including attachments.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            task_id: `str`.
                **REQUIRED.**
        
        Returns:
            `ReadMessageStoreReportArchiveResponse`. Success
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/message-store-report/{task_id}/archive',
            model = ReadMessageStoreReportArchiveResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def read_message_store_report_archive_content(self, account_id: str, task_id: str, archive_id: str) -> bytes:
        """
        Get Message Store Report Archive Content
        
        Returns one of the report archives with message contents in application/zip format.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.**
            
            task_id: `str`.
                **REQUIRED.**
            
            archive_id: `str`.
                **REQUIRED.**
        
        Returns:
            `bytes`. Archived Data
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_binary_data \
        (
            request = f'/restapi/v1.0/account/{account_id}/message-store-report/{task_id}/archive/{archive_id}',
            expected_content_type = 'application/zip',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_account_meeting_recordings \
    (
        self,
        account_id: str,
        *,
        meeting_id: Optional[str] = None,
        meeting_start_time_from: Optional[str] = None,
        meeting_start_time_to: Optional[str] = None,
        page: Optional[int] = None,
        per_page: Optional[int] = 100,
    ) -> ListAccountMeetingRecordingsResponse:
        """
        Get Account Meeting Recordings List
        
        Returns the list of meeting recordings for the current account.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            meeting_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a meeting. Either `meetingId` or
                `meetingStartTime`/`meetingEndTime` can be specified
            
            meeting_start_time_from: `Optional[str]`, default: `None`.
                Optional. Recordings of meetings started after the time specified will be returned. Either
                `meetingId` or `meetingStartTime`/`meetingEndTime` can be specified
            
            meeting_start_time_to: `Optional[str]`, default: `None`.
                Optional. Recordings of meetings started before the time specified will be returned. The
                default value is current time. Either `meetingId` or `meetingStartTime`/`meetingEndTime` can be
                specified
            
            page: `Optional[int]`, default: `None`.
                Optional. Page number
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Number of items per page. The `max` value is supported to indicate the maximum size -
                300
        
        Returns:
            `ListAccountMeetingRecordingsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/meeting-recordings',
            query = filter_out_smart({'meetingId': meeting_id, 'meetingStartTimeFrom': meeting_start_time_from, 'meetingStartTimeTo': meeting_start_time_to, 'page': str(page), 'perPage': str(per_page)}),
            model = ListAccountMeetingRecordingsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_user_meeting_recordings \
    (
        self,
        account_id: str,
        extension_id: str,
        *,
        meeting_id: Optional[str] = None,
        meeting_start_time_from: Optional[str] = None,
        meeting_start_time_to: Optional[str] = None,
        page: Optional[int] = None,
        per_page: Optional[int] = 100,
    ) -> ListUserMeetingRecordingsResponse:
        """
        Get User Meeting Recordings List
        
        Returns the list of meetings recordings for the current user.
        
        Arguments:
            account_id: `str`.
                **REQUIRED.** Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            extension_id: `str`.
                **REQUIRED.** Internal identifier of an extension or tilde (~) to indicate the extension
                assigned to the account logged-in within the current session
            
            meeting_id: `Optional[str]`, default: `None`.
                Optional. Internal identifier of a meeting. Either `meetingId` or
                `meetingStartTime`/`meetingEndTime` can be specified
            
            meeting_start_time_from: `Optional[str]`, default: `None`.
                Optional. Recordings of meetings started after the time specified will be returned. Either
                `meetingId` or `meetingStartTime`/`meetingEndTime` can be specified
            
            meeting_start_time_to: `Optional[str]`, default: `None`.
                Optional. Recordings of meetings started before the time specified will be returned. The
                default value is current time. Either `meetingId` or `meetingStartTime`/`meetingEndTime` can be
                specified
            
            page: `Optional[int]`, default: `None`.
                Optional. Page number
            
            per_page: `Optional[int]`, default: `100`.
                Optional. Number of items per page. The `max` value is supported to indicate the maximum size -
                300
        
        Returns:
            `ListUserMeetingRecordingsResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/extension/{extension_id}/meeting-recordings',
            query = filter_out_smart({'meetingId': meeting_id, 'meetingStartTimeFrom': meeting_start_time_from, 'meetingStartTimeTo': meeting_start_time_to, 'page': str(page), 'perPage': str(per_page)}),
            model = ListUserMeetingRecordingsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def list_custom_fields(self, account_id: str = '~') -> ListCustomFieldsResponse:
        """
        Get Custom Field List
        
        Returns the list of created custom fields.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
        
        Returns:
            `ListCustomFieldsResponse`. Custom Field List
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/custom-fields',
            model = ListCustomFieldsResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def create_custom_field(self, data: CreateCustomFieldRequest, account_id: str = '~') -> CreateCustomFieldResponse:
        """
        Create Custom Field
        
        Creates custom field attached to the object.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            data: `CreateCustomFieldRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `CreateCustomFieldResponse`. Custom Field
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/custom-fields',
            method = 'POST',
            encode_body = 'application/json',
            body = data,
            model = CreateCustomFieldResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def update_custom_field(self, field_id: str, data: UpdateCustomFieldRequest, account_id: str = '~') -> UpdateCustomFieldResponse:
        """
        Update Сustom Field
        
        Updates custom field by ID specified in path.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            field_id: `str`.
                **REQUIRED.** Custom field identifier
            
            data: `UpdateCustomFieldRequest`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Returns:
            `UpdateCustomFieldResponse`. Custom Field
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/restapi/v1.0/account/{account_id}/custom-fields/{field_id}',
            method = 'PUT',
            encode_body = 'application/json',
            body = data,
            model = UpdateCustomFieldResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def delete_custom_field(self, field_id: str, account_id: str = '~'):
        """
        Delete Custom Field
        
        Deletes custom field(s) by ID(s) with the corresponding values.
        
        Arguments:
            account_id: `str`, default: `'~'`.
                Optional. Internal identifier of a RingCentral account or tilde (~) to indicate the account
                logged-in within the current session
            
            field_id: `str`.
                **REQUIRED.** Custom field identifier
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/restapi/v1.0/account/{account_id}/custom-fields/{field_id}', method='DELETE', expected_codes=[ 204 ])
    
    # endregion
    

__all__ = \
[
    'RingcentralApiClient',
    'RingcentralApiClientServers',
]
