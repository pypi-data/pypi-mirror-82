from ._6 import *

class ListContactsSortByItem(Enum):
    FirstName = 'FirstName'
    LastName = 'LastName'
    Company = 'Company'

class ListContactsResponseRecordsItemAvailability(Enum):
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    
    Generated by Python OpenAPI Parser
    """
    
    Alive = 'Alive'
    Deleted = 'Deleted'
    Purged = 'Purged'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponseRecordsItemBusinessAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponseRecordsItemHomeAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponseRecordsItemOtherAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponseRecordsItem(DataClassJsonMixin):
    uri: Optional[str] = None
    """
    Canonical URI of the contact
    
    Example: `https://platform.ringcentral.com/restapi/v1.0/account/230919004/extension/230919004/address-book/contact/623045004`
    """
    
    availability: Optional[ListContactsResponseRecordsItemAvailability] = None
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    """
    
    email: Optional[str] = None
    """
    Email of the contact
    
    Example: `charlie.williams@example.com`
    """
    
    id: Optional[int] = None
    """
    Internal identifier of the contact
    
    Example: `623045004`
    """
    
    notes: Optional[str] = None
    """
    Notes for the contact
    
    Example: `#1 Customer`
    """
    
    company: Optional[str] = None
    """
    Company name of the contact
    
    Example: `Example, Inc.`
    """
    
    first_name: Optional[str] = None
    """
    First name of the contact
    
    Example: `Charlie`
    """
    
    last_name: Optional[str] = None
    """
    Last name of the contact
    
    Example: `Williams`
    """
    
    job_title: Optional[str] = None
    """
    Job title of the contact
    
    Example: `CEO`
    """
    
    birthday: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Date of birth of the contact """
    
    web_page: Optional[str] = None
    """
    The contact home page URL
    
    Example: `http://www.example.com`
    """
    
    middle_name: Optional[str] = None
    """
    Middle name of the contact
    
    Example: `J`
    """
    
    nick_name: Optional[str] = None
    """
    Nick name of the contact
    
    Example: `The Boss`
    """
    
    email2: Optional[str] = None
    """
    2nd email of the contact
    
    Example: `charlie-example@gmail.com`
    """
    
    email3: Optional[str] = None
    """
    3rd email of the contact
    
    Example: `theboss-example@hotmail.com`
    """
    
    home_phone: Optional[str] = None
    """
    Home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    home_phone2: Optional[str] = None
    """
    2nd home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone: Optional[str] = None
    """
    Business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone2: Optional[str] = None
    """
    2nd business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    mobile_phone: Optional[str] = None
    """
    Mobile phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_fax: Optional[str] = None
    """
    Business fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    company_phone: Optional[str] = None
    """
    Company number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    assistant_phone: Optional[str] = None
    """
    Phone number of the contact assistant in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    car_phone: Optional[str] = None
    """
    Car phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_phone: Optional[str] = None
    """
    Other phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_fax: Optional[str] = None
    """
    Other fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    callback_phone: Optional[str] = None
    """
    Callback phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_address: Optional[ListContactsResponseRecordsItemBusinessAddress] = None
    home_address: Optional[ListContactsResponseRecordsItemHomeAddress] = None
    other_address: Optional[ListContactsResponseRecordsItemOtherAddress] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponseNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponseNavigationNextPage(DataClassJsonMixin):
    """ Canonical URI for the next page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponseNavigationPreviousPage(DataClassJsonMixin):
    """ Canonical URI for the previous page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponseNavigationLastPage(DataClassJsonMixin):
    """ Canonical URI for the last page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponseNavigation(DataClassJsonMixin):
    """ Information on navigation """
    
    first_page: Optional[ListContactsResponseNavigationFirstPage] = None
    """ Canonical URI for the first page of the list """
    
    next_page: Optional[ListContactsResponseNavigationNextPage] = None
    """ Canonical URI for the next page of the list """
    
    previous_page: Optional[ListContactsResponseNavigationPreviousPage] = None
    """ Canonical URI for the previous page of the list """
    
    last_page: Optional[ListContactsResponseNavigationLastPage] = None
    """ Canonical URI for the last page of the list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponsePaging(DataClassJsonMixin):
    """ Information on paging """
    
    page: Optional[int] = None
    """
    The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result
    is empty (because non-existent page was specified or perPage=0 was requested)
    """
    
    per_page: Optional[int] = None
    """
    Current page size, describes how many items are in each page. Default value is 100. Maximum
    value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000)
    is applied
    """
    
    page_start: Optional[int] = None
    """
    The zero-based number of the first element on the current page. Omitted if the page is omitted
    or result is empty
    """
    
    page_end: Optional[int] = None
    """
    The zero-based index of the last element on the current page. Omitted if the page is omitted or
    result is empty
    """
    
    total_pages: Optional[int] = None
    """
    The total number of pages in a dataset. May be omitted for some resources due to performance
    reasons
    """
    
    total_elements: Optional[int] = None
    """
    The total number of elements in a dataset. May be omitted for some resource due to performance
    reasons
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponseGroups(DataClassJsonMixin):
    """ Information on address book groups """
    
    uri: Optional[str] = None
    """ Link to the list of address book groups """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListContactsResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ link to the list of user personal contacts """
    
    records: Optional[List[ListContactsResponseRecordsItem]] = None
    """ List of personal contacts from the extension address book """
    
    navigation: Optional[ListContactsResponseNavigation] = None
    """ Information on navigation """
    
    paging: Optional[ListContactsResponsePaging] = None
    """ Information on paging """
    
    groups: Optional[ListContactsResponseGroups] = None
    """ Information on address book groups """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateContactRequestHomeAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateContactRequestBusinessAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateContactRequestOtherAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateContactRequest(DataClassJsonMixin):
    first_name: Optional[str] = None
    """
    First name of the contact
    
    Example: `Charlie`
    """
    
    last_name: Optional[str] = None
    """
    Last name of the contact
    
    Example: `Williams`
    """
    
    middle_name: Optional[str] = None
    """
    Middle name of the contact
    
    Example: `J`
    """
    
    nick_name: Optional[str] = None
    """
    Nick name of the contact
    
    Example: `The Boss`
    """
    
    company: Optional[str] = None
    """
    Company name of the contact
    
    Example: `Example, Inc.`
    """
    
    job_title: Optional[str] = None
    """
    Job title of the contact
    
    Example: `CEO`
    """
    
    email: Optional[str] = None
    """
    Email of the contact
    
    Example: `charlie.williams@example.com`
    """
    
    email2: Optional[str] = None
    """
    2nd email of the contact
    
    Example: `charlie-example@gmail.com`
    """
    
    email3: Optional[str] = None
    """
    3rd email of the contact
    
    Example: `theboss-example@hotmail.com`
    """
    
    birthday: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Date of birth of the contact """
    
    web_page: Optional[str] = None
    """
    The contact home page URL
    
    Example: `http://www.example.com`
    """
    
    notes: Optional[str] = None
    """
    Notes for the contact
    
    Example: `#1 Customer`
    """
    
    home_phone: Optional[str] = None
    """
    Home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    home_phone2: Optional[str] = None
    """
    2nd home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone: Optional[str] = None
    """
    Business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone2: Optional[str] = None
    """
    2nd business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    mobile_phone: Optional[str] = None
    """
    Mobile phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_fax: Optional[str] = None
    """
    Business fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    company_phone: Optional[str] = None
    """
    Company number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    assistant_phone: Optional[str] = None
    """
    Phone number of the contact assistant in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    car_phone: Optional[str] = None
    """
    Car phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_phone: Optional[str] = None
    """
    Other phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_fax: Optional[str] = None
    """
    Other fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    callback_phone: Optional[str] = None
    """
    Callback phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    home_address: Optional[CreateContactRequestHomeAddress] = None
    business_address: Optional[CreateContactRequestBusinessAddress] = None
    other_address: Optional[CreateContactRequestOtherAddress] = None

class CreateContactResponseAvailability(Enum):
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    
    Generated by Python OpenAPI Parser
    """
    
    Alive = 'Alive'
    Deleted = 'Deleted'
    Purged = 'Purged'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateContactResponseBusinessAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateContactResponseHomeAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateContactResponseOtherAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateContactResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """
    Canonical URI of the contact
    
    Example: `https://platform.ringcentral.com/restapi/v1.0/account/230919004/extension/230919004/address-book/contact/623045004`
    """
    
    availability: Optional[CreateContactResponseAvailability] = None
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    """
    
    email: Optional[str] = None
    """
    Email of the contact
    
    Example: `charlie.williams@example.com`
    """
    
    id: Optional[int] = None
    """
    Internal identifier of the contact
    
    Example: `623045004`
    """
    
    notes: Optional[str] = None
    """
    Notes for the contact
    
    Example: `#1 Customer`
    """
    
    company: Optional[str] = None
    """
    Company name of the contact
    
    Example: `Example, Inc.`
    """
    
    first_name: Optional[str] = None
    """
    First name of the contact
    
    Example: `Charlie`
    """
    
    last_name: Optional[str] = None
    """
    Last name of the contact
    
    Example: `Williams`
    """
    
    job_title: Optional[str] = None
    """
    Job title of the contact
    
    Example: `CEO`
    """
    
    birthday: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Date of birth of the contact """
    
    web_page: Optional[str] = None
    """
    The contact home page URL
    
    Example: `http://www.example.com`
    """
    
    middle_name: Optional[str] = None
    """
    Middle name of the contact
    
    Example: `J`
    """
    
    nick_name: Optional[str] = None
    """
    Nick name of the contact
    
    Example: `The Boss`
    """
    
    email2: Optional[str] = None
    """
    2nd email of the contact
    
    Example: `charlie-example@gmail.com`
    """
    
    email3: Optional[str] = None
    """
    3rd email of the contact
    
    Example: `theboss-example@hotmail.com`
    """
    
    home_phone: Optional[str] = None
    """
    Home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    home_phone2: Optional[str] = None
    """
    2nd home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone: Optional[str] = None
    """
    Business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone2: Optional[str] = None
    """
    2nd business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    mobile_phone: Optional[str] = None
    """
    Mobile phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_fax: Optional[str] = None
    """
    Business fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    company_phone: Optional[str] = None
    """
    Company number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    assistant_phone: Optional[str] = None
    """
    Phone number of the contact assistant in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    car_phone: Optional[str] = None
    """
    Car phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_phone: Optional[str] = None
    """
    Other phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_fax: Optional[str] = None
    """
    Other fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    callback_phone: Optional[str] = None
    """
    Callback phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_address: Optional[CreateContactResponseBusinessAddress] = None
    home_address: Optional[CreateContactResponseHomeAddress] = None
    other_address: Optional[CreateContactResponseOtherAddress] = None

class ReadContactResponseAvailability(Enum):
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    
    Generated by Python OpenAPI Parser
    """
    
    Alive = 'Alive'
    Deleted = 'Deleted'
    Purged = 'Purged'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadContactResponseBusinessAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadContactResponseHomeAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadContactResponseOtherAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadContactResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """
    Canonical URI of the contact
    
    Example: `https://platform.ringcentral.com/restapi/v1.0/account/230919004/extension/230919004/address-book/contact/623045004`
    """
    
    availability: Optional[ReadContactResponseAvailability] = None
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    """
    
    email: Optional[str] = None
    """
    Email of the contact
    
    Example: `charlie.williams@example.com`
    """
    
    id: Optional[int] = None
    """
    Internal identifier of the contact
    
    Example: `623045004`
    """
    
    notes: Optional[str] = None
    """
    Notes for the contact
    
    Example: `#1 Customer`
    """
    
    company: Optional[str] = None
    """
    Company name of the contact
    
    Example: `Example, Inc.`
    """
    
    first_name: Optional[str] = None
    """
    First name of the contact
    
    Example: `Charlie`
    """
    
    last_name: Optional[str] = None
    """
    Last name of the contact
    
    Example: `Williams`
    """
    
    job_title: Optional[str] = None
    """
    Job title of the contact
    
    Example: `CEO`
    """
    
    birthday: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Date of birth of the contact """
    
    web_page: Optional[str] = None
    """
    The contact home page URL
    
    Example: `http://www.example.com`
    """
    
    middle_name: Optional[str] = None
    """
    Middle name of the contact
    
    Example: `J`
    """
    
    nick_name: Optional[str] = None
    """
    Nick name of the contact
    
    Example: `The Boss`
    """
    
    email2: Optional[str] = None
    """
    2nd email of the contact
    
    Example: `charlie-example@gmail.com`
    """
    
    email3: Optional[str] = None
    """
    3rd email of the contact
    
    Example: `theboss-example@hotmail.com`
    """
    
    home_phone: Optional[str] = None
    """
    Home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    home_phone2: Optional[str] = None
    """
    2nd home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone: Optional[str] = None
    """
    Business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone2: Optional[str] = None
    """
    2nd business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    mobile_phone: Optional[str] = None
    """
    Mobile phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_fax: Optional[str] = None
    """
    Business fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    company_phone: Optional[str] = None
    """
    Company number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    assistant_phone: Optional[str] = None
    """
    Phone number of the contact assistant in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    car_phone: Optional[str] = None
    """
    Car phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_phone: Optional[str] = None
    """
    Other phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_fax: Optional[str] = None
    """
    Other fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    callback_phone: Optional[str] = None
    """
    Callback phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_address: Optional[ReadContactResponseBusinessAddress] = None
    home_address: Optional[ReadContactResponseHomeAddress] = None
    other_address: Optional[ReadContactResponseOtherAddress] = None

class UpdateContactResponseAvailability(Enum):
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    
    Generated by Python OpenAPI Parser
    """
    
    Alive = 'Alive'
    Deleted = 'Deleted'
    Purged = 'Purged'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateContactResponseBusinessAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateContactResponseHomeAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateContactResponseOtherAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateContactResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """
    Canonical URI of the contact
    
    Example: `https://platform.ringcentral.com/restapi/v1.0/account/230919004/extension/230919004/address-book/contact/623045004`
    """
    
    availability: Optional[UpdateContactResponseAvailability] = None
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    """
    
    email: Optional[str] = None
    """
    Email of the contact
    
    Example: `charlie.williams@example.com`
    """
    
    id: Optional[int] = None
    """
    Internal identifier of the contact
    
    Example: `623045004`
    """
    
    notes: Optional[str] = None
    """
    Notes for the contact
    
    Example: `#1 Customer`
    """
    
    company: Optional[str] = None
    """
    Company name of the contact
    
    Example: `Example, Inc.`
    """
    
    first_name: Optional[str] = None
    """
    First name of the contact
    
    Example: `Charlie`
    """
    
    last_name: Optional[str] = None
    """
    Last name of the contact
    
    Example: `Williams`
    """
    
    job_title: Optional[str] = None
    """
    Job title of the contact
    
    Example: `CEO`
    """
    
    birthday: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Date of birth of the contact """
    
    web_page: Optional[str] = None
    """
    The contact home page URL
    
    Example: `http://www.example.com`
    """
    
    middle_name: Optional[str] = None
    """
    Middle name of the contact
    
    Example: `J`
    """
    
    nick_name: Optional[str] = None
    """
    Nick name of the contact
    
    Example: `The Boss`
    """
    
    email2: Optional[str] = None
    """
    2nd email of the contact
    
    Example: `charlie-example@gmail.com`
    """
    
    email3: Optional[str] = None
    """
    3rd email of the contact
    
    Example: `theboss-example@hotmail.com`
    """
    
    home_phone: Optional[str] = None
    """
    Home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    home_phone2: Optional[str] = None
    """
    2nd home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone: Optional[str] = None
    """
    Business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone2: Optional[str] = None
    """
    2nd business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    mobile_phone: Optional[str] = None
    """
    Mobile phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_fax: Optional[str] = None
    """
    Business fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    company_phone: Optional[str] = None
    """
    Company number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    assistant_phone: Optional[str] = None
    """
    Phone number of the contact assistant in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    car_phone: Optional[str] = None
    """
    Car phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_phone: Optional[str] = None
    """
    Other phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_fax: Optional[str] = None
    """
    Other fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    callback_phone: Optional[str] = None
    """
    Callback phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_address: Optional[UpdateContactResponseBusinessAddress] = None
    home_address: Optional[UpdateContactResponseHomeAddress] = None
    other_address: Optional[UpdateContactResponseOtherAddress] = None

class SyncAddressBookSyncTypeItem(Enum):
    FSync = 'FSync'
    ISync = 'ISync'

class SyncAddressBookResponseRecordsItemAvailability(Enum):
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    
    Generated by Python OpenAPI Parser
    """
    
    Alive = 'Alive'
    Deleted = 'Deleted'
    Purged = 'Purged'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncAddressBookResponseRecordsItemBusinessAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncAddressBookResponseRecordsItemHomeAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncAddressBookResponseRecordsItemOtherAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncAddressBookResponseRecordsItem(DataClassJsonMixin):
    uri: Optional[str] = None
    """
    Canonical URI of the contact
    
    Example: `https://platform.ringcentral.com/restapi/v1.0/account/230919004/extension/230919004/address-book/contact/623045004`
    """
    
    availability: Optional[SyncAddressBookResponseRecordsItemAvailability] = None
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    """
    
    email: Optional[str] = None
    """
    Email of the contact
    
    Example: `charlie.williams@example.com`
    """
    
    id: Optional[int] = None
    """
    Internal identifier of the contact
    
    Example: `623045004`
    """
    
    notes: Optional[str] = None
    """
    Notes for the contact
    
    Example: `#1 Customer`
    """
    
    company: Optional[str] = None
    """
    Company name of the contact
    
    Example: `Example, Inc.`
    """
    
    first_name: Optional[str] = None
    """
    First name of the contact
    
    Example: `Charlie`
    """
    
    last_name: Optional[str] = None
    """
    Last name of the contact
    
    Example: `Williams`
    """
    
    job_title: Optional[str] = None
    """
    Job title of the contact
    
    Example: `CEO`
    """
    
    birthday: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Date of birth of the contact """
    
    web_page: Optional[str] = None
    """
    The contact home page URL
    
    Example: `http://www.example.com`
    """
    
    middle_name: Optional[str] = None
    """
    Middle name of the contact
    
    Example: `J`
    """
    
    nick_name: Optional[str] = None
    """
    Nick name of the contact
    
    Example: `The Boss`
    """
    
    email2: Optional[str] = None
    """
    2nd email of the contact
    
    Example: `charlie-example@gmail.com`
    """
    
    email3: Optional[str] = None
    """
    3rd email of the contact
    
    Example: `theboss-example@hotmail.com`
    """
    
    home_phone: Optional[str] = None
    """
    Home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    home_phone2: Optional[str] = None
    """
    2nd home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone: Optional[str] = None
    """
    Business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone2: Optional[str] = None
    """
    2nd business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    mobile_phone: Optional[str] = None
    """
    Mobile phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_fax: Optional[str] = None
    """
    Business fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    company_phone: Optional[str] = None
    """
    Company number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    assistant_phone: Optional[str] = None
    """
    Phone number of the contact assistant in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    car_phone: Optional[str] = None
    """
    Car phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_phone: Optional[str] = None
    """
    Other phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_fax: Optional[str] = None
    """
    Other fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    callback_phone: Optional[str] = None
    """
    Callback phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_address: Optional[SyncAddressBookResponseRecordsItemBusinessAddress] = None
    home_address: Optional[SyncAddressBookResponseRecordsItemHomeAddress] = None
    other_address: Optional[SyncAddressBookResponseRecordsItemOtherAddress] = None

class SyncAddressBookResponseSyncInfoSyncType(Enum):
    FSync = 'FSync'
    ISync = 'ISync'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncAddressBookResponseSyncInfo(DataClassJsonMixin):
    sync_type: Optional[SyncAddressBookResponseSyncInfoSyncType] = None
    sync_token: Optional[str] = None
    sync_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    older_records_exist: Optional[bool] = False

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncAddressBookResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    records: Optional[List[SyncAddressBookResponseRecordsItem]] = None
    sync_info: Optional[SyncAddressBookResponseSyncInfo] = None
    next_page_id: Optional[int] = None
    next_page_uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListFavoriteContactsResponseRecordsItem(DataClassJsonMixin):
    id: Optional[int] = None
    extension_id: Optional[str] = None
    account_id: Optional[str] = None
    contact_id: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListFavoriteContactsResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    records: Optional[List[ListFavoriteContactsResponseRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateFavoriteContactListRequestRecordsItem(DataClassJsonMixin):
    id: Optional[int] = None
    extension_id: Optional[str] = None
    account_id: Optional[str] = None
    contact_id: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateFavoriteContactListRequest(DataClassJsonMixin):
    records: Optional[List[UpdateFavoriteContactListRequestRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateFavoriteContactListResponseRecordsItem(DataClassJsonMixin):
    id: Optional[int] = None
    extension_id: Optional[str] = None
    account_id: Optional[str] = None
    contact_id: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateFavoriteContactListResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    records: Optional[List[UpdateFavoriteContactListResponseRecordsItem]] = None

class SearchDirectoryEntriesRequestSearchFieldsItem(Enum):
    FirstName = 'firstName'
    LastName = 'lastName'
    ExtensionNumber = 'extensionNumber'
    PhoneNumber = 'phoneNumber'
    Email = 'email'
    JobTitle = 'jobTitle'
    Department = 'department'

class SearchDirectoryEntriesRequestExtensionType(Enum):
    """ Type of extension to filter the contacts """
    
    User = 'User'
    Department = 'Department'
    Announcement = 'Announcement'
    Voicemail = 'Voicemail'
    SharedLinesGroup = 'SharedLinesGroup'
    PagingOnly = 'PagingOnly'
    ParkLocation = 'ParkLocation'
    IvrMenu = 'IvrMenu'
    Limited = 'Limited'
    ApplicationExtension = 'ApplicationExtension'
    Site = 'Site'
    Bot = 'Bot'
    ProxyAdmin = 'ProxyAdmin'

class SearchDirectoryEntriesRequestOrderByItemFieldName(Enum):
    """ Field name by which to sort the contacts """
    
    FirstName = 'firstName'
    LastName = 'lastName'
    ExtensionNumber = 'extensionNumber'
    PhoneNumber = 'phoneNumber'
    Email = 'email'
    JobTitle = 'jobTitle'
    Department = 'department'

class SearchDirectoryEntriesRequestOrderByItemDirection(Enum):
    """ Sorting direction """
    
    Asc = 'Asc'
    Desc = 'Desc'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesRequestOrderByItem(DataClassJsonMixin):
    index: Optional[int] = None
    """
    Sorting priority index, starting from '1'. Optional if only one element in `orderBy` array is
    specified
    """
    
    field_name: Optional[SearchDirectoryEntriesRequestOrderByItemFieldName] = None
    """ Field name by which to sort the contacts """
    
    direction: Optional[SearchDirectoryEntriesRequestOrderByItemDirection] = None
    """ Sorting direction """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesRequest(DataClassJsonMixin):
    search_string: Optional[str] = None
    """
    String value to filter the contacts. The value specified is searched through the following
    fields: `firstName`, `lastName`, `extensionNumber`, `phoneNumber`, `email`, `jobTitle`,
    `department`
    """
    
    search_fields: Optional[List[SearchDirectoryEntriesRequestSearchFieldsItem]] = field(default_factory=lambda: ['firstName', 'lastName', 'extensionNumber', 'phoneNumber', 'email'])
    show_federated: Optional[bool] = True
    """
    If 'True' then contacts of all accounts in federation are returned. If 'False' then only
    contacts of the current account are returned, and account section is eliminated in this case
    """
    
    extension_type: Optional[SearchDirectoryEntriesRequestExtensionType] = None
    """ Type of extension to filter the contacts """
    
    order_by: Optional[List[SearchDirectoryEntriesRequestOrderByItem]] = None
    """ Sorting settings """
    
    page: Optional[int] = None
    per_page: Optional[int] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponsePaging(DataClassJsonMixin):
    page: Optional[int] = None
    total_pages: Optional[int] = None
    per_page: Optional[int] = None
    total_elements: Optional[int] = None
    page_start: Optional[int] = None
    page_end: Optional[int] = None

class SearchDirectoryEntriesResponseRecordsItemAccountMainNumberUsageType(Enum):
    """ Usage type of a phone number """
    
    MobileNumber = 'MobileNumber'
    ContactNumber = 'ContactNumber'
    DirectNumber = 'DirectNumber'
    ForwardedNumber = 'ForwardedNumber'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponseRecordsItemAccountMainNumber(DataClassJsonMixin):
    formatted_phone_number: Optional[str] = None
    phone_number: Optional[str] = None
    type: Optional[str] = None
    label: Optional[str] = None
    """ Custom user name of a phone number, if any """
    
    usage_type: Optional[SearchDirectoryEntriesResponseRecordsItemAccountMainNumberUsageType] = None
    """ Usage type of a phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponseRecordsItemAccount(DataClassJsonMixin):
    company_name: Optional[str] = None
    federated_name: Optional[str] = None
    id: Optional[str] = None
    main_number: Optional[SearchDirectoryEntriesResponseRecordsItemAccountMainNumber] = None

class SearchDirectoryEntriesResponseRecordsItemPhoneNumbersItemUsageType(Enum):
    """ Usage type of a phone number """
    
    MobileNumber = 'MobileNumber'
    ContactNumber = 'ContactNumber'
    DirectNumber = 'DirectNumber'
    ForwardedNumber = 'ForwardedNumber'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponseRecordsItemPhoneNumbersItem(DataClassJsonMixin):
    formatted_phone_number: Optional[str] = None
    phone_number: Optional[str] = None
    type: Optional[str] = None
    label: Optional[str] = None
    """ Custom user name of a phone number, if any """
    
    usage_type: Optional[SearchDirectoryEntriesResponseRecordsItemPhoneNumbersItemUsageType] = None
    """ Usage type of a phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponseRecordsItemProfileImage(DataClassJsonMixin):
    etag: Optional[str] = None
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponseRecordsItemSite(DataClassJsonMixin):
    id: Optional[str] = None
    name: Optional[str] = None
    code: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponseRecordsItem(DataClassJsonMixin):
    account: Optional[SearchDirectoryEntriesResponseRecordsItemAccount] = None
    department: Optional[str] = None
    email: Optional[str] = None
    extension_number: Optional[str] = None
    first_name: Optional[str] = None
    """ First name of a contact, for user extensions only """
    
    last_name: Optional[str] = None
    """ Last name of a contact, for user extensions only """
    
    name: Optional[str] = None
    """ Name of a contact, for non-user extensions """
    
    id: Optional[str] = None
    job_title: Optional[str] = None
    phone_numbers: Optional[List[SearchDirectoryEntriesResponseRecordsItemPhoneNumbersItem]] = None
    profile_image: Optional[SearchDirectoryEntriesResponseRecordsItemProfileImage] = None
    site: Optional[SearchDirectoryEntriesResponseRecordsItemSite] = None
    status: Optional[str] = None
    type: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponse(DataClassJsonMixin):
    paging: Optional[SearchDirectoryEntriesResponsePaging] = None
    records: Optional[List[SearchDirectoryEntriesResponseRecordsItem]] = None

class SearchDirectoryEntriesResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[SearchDirectoryEntriesResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[SearchDirectoryEntriesResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class SearchDirectoryEntriesResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[SearchDirectoryEntriesResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[SearchDirectoryEntriesResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class SearchDirectoryEntriesResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[SearchDirectoryEntriesResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[SearchDirectoryEntriesResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class ReadDirectoryEntryResponseAccountMainNumberUsageType(Enum):
    """ Usage type of a phone number """
    
    MobileNumber = 'MobileNumber'
    ContactNumber = 'ContactNumber'
    DirectNumber = 'DirectNumber'
    ForwardedNumber = 'ForwardedNumber'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponseAccountMainNumber(DataClassJsonMixin):
    formatted_phone_number: Optional[str] = None
    phone_number: Optional[str] = None
    type: Optional[str] = None
    label: Optional[str] = None
    """ Custom user name of a phone number, if any """
    
    usage_type: Optional[ReadDirectoryEntryResponseAccountMainNumberUsageType] = None
    """ Usage type of a phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponseAccount(DataClassJsonMixin):
    company_name: Optional[str] = None
    federated_name: Optional[str] = None
    id: Optional[str] = None
    main_number: Optional[ReadDirectoryEntryResponseAccountMainNumber] = None

class ReadDirectoryEntryResponsePhoneNumbersItemUsageType(Enum):
    """ Usage type of a phone number """
    
    MobileNumber = 'MobileNumber'
    ContactNumber = 'ContactNumber'
    DirectNumber = 'DirectNumber'
    ForwardedNumber = 'ForwardedNumber'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponsePhoneNumbersItem(DataClassJsonMixin):
    formatted_phone_number: Optional[str] = None
    phone_number: Optional[str] = None
    type: Optional[str] = None
    label: Optional[str] = None
    """ Custom user name of a phone number, if any """
    
    usage_type: Optional[ReadDirectoryEntryResponsePhoneNumbersItemUsageType] = None
    """ Usage type of a phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponseProfileImage(DataClassJsonMixin):
    etag: Optional[str] = None
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponseSite(DataClassJsonMixin):
    id: Optional[str] = None
    name: Optional[str] = None
    code: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponse(DataClassJsonMixin):
    account: Optional[ReadDirectoryEntryResponseAccount] = None
    department: Optional[str] = None
    email: Optional[str] = None
    extension_number: Optional[str] = None
    first_name: Optional[str] = None
    """ First name of a contact, for user extensions only """
    
    last_name: Optional[str] = None
    """ Last name of a contact, for user extensions only """
    
    name: Optional[str] = None
    """ Name of a contact, for non-user extensions """
    
    id: Optional[str] = None
    job_title: Optional[str] = None
    phone_numbers: Optional[List[ReadDirectoryEntryResponsePhoneNumbersItem]] = None
    profile_image: Optional[ReadDirectoryEntryResponseProfileImage] = None
    site: Optional[ReadDirectoryEntryResponseSite] = None
    status: Optional[str] = None
    type: Optional[str] = None

class ReadDirectoryEntryResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[ReadDirectoryEntryResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[ReadDirectoryEntryResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class ReadDirectoryEntryResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[ReadDirectoryEntryResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[ReadDirectoryEntryResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class ReadDirectoryEntryResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[ReadDirectoryEntryResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadDirectoryEntryResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[ReadDirectoryEntryResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class ListDirectoryEntriesType(Enum):
    User = 'User'
    Department = 'Department'
    Announcement = 'Announcement'
    Voicemail = 'Voicemail'
    SharedLinesGroup = 'SharedLinesGroup'
    PagingOnly = 'PagingOnly'
    IvrMenu = 'IvrMenu'
    ParkLocation = 'ParkLocation'
    Limited = 'Limited'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponsePaging(DataClassJsonMixin):
    page: Optional[int] = None
    total_pages: Optional[int] = None
    per_page: Optional[int] = None
    total_elements: Optional[int] = None
    page_start: Optional[int] = None
    page_end: Optional[int] = None

class ListDirectoryEntriesResponseRecordsItemAccountMainNumberUsageType(Enum):
    """ Usage type of a phone number """
    
    MobileNumber = 'MobileNumber'
    ContactNumber = 'ContactNumber'
    DirectNumber = 'DirectNumber'
    ForwardedNumber = 'ForwardedNumber'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponseRecordsItemAccountMainNumber(DataClassJsonMixin):
    formatted_phone_number: Optional[str] = None
    phone_number: Optional[str] = None
    type: Optional[str] = None
    label: Optional[str] = None
    """ Custom user name of a phone number, if any """
    
    usage_type: Optional[ListDirectoryEntriesResponseRecordsItemAccountMainNumberUsageType] = None
    """ Usage type of a phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponseRecordsItemAccount(DataClassJsonMixin):
    company_name: Optional[str] = None
    federated_name: Optional[str] = None
    id: Optional[str] = None
    main_number: Optional[ListDirectoryEntriesResponseRecordsItemAccountMainNumber] = None

class ListDirectoryEntriesResponseRecordsItemPhoneNumbersItemUsageType(Enum):
    """ Usage type of a phone number """
    
    MobileNumber = 'MobileNumber'
    ContactNumber = 'ContactNumber'
    DirectNumber = 'DirectNumber'
    ForwardedNumber = 'ForwardedNumber'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponseRecordsItemPhoneNumbersItem(DataClassJsonMixin):
    formatted_phone_number: Optional[str] = None
    phone_number: Optional[str] = None
    type: Optional[str] = None
    label: Optional[str] = None
    """ Custom user name of a phone number, if any """
    
    usage_type: Optional[ListDirectoryEntriesResponseRecordsItemPhoneNumbersItemUsageType] = None
    """ Usage type of a phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponseRecordsItemProfileImage(DataClassJsonMixin):
    etag: Optional[str] = None
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponseRecordsItemSite(DataClassJsonMixin):
    id: Optional[str] = None
    name: Optional[str] = None
    code: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponseRecordsItem(DataClassJsonMixin):
    account: Optional[ListDirectoryEntriesResponseRecordsItemAccount] = None
    department: Optional[str] = None
    email: Optional[str] = None
    extension_number: Optional[str] = None
    first_name: Optional[str] = None
    """ First name of a contact, for user extensions only """
    
    last_name: Optional[str] = None
    """ Last name of a contact, for user extensions only """
    
    name: Optional[str] = None
    """ Name of a contact, for non-user extensions """
    
    id: Optional[str] = None
    job_title: Optional[str] = None
    phone_numbers: Optional[List[ListDirectoryEntriesResponseRecordsItemPhoneNumbersItem]] = None
    profile_image: Optional[ListDirectoryEntriesResponseRecordsItemProfileImage] = None
    site: Optional[ListDirectoryEntriesResponseRecordsItemSite] = None
    status: Optional[str] = None
    type: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponse(DataClassJsonMixin):
    paging: Optional[ListDirectoryEntriesResponsePaging] = None
    records: Optional[List[ListDirectoryEntriesResponseRecordsItem]] = None

class ListDirectoryEntriesResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[ListDirectoryEntriesResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[ListDirectoryEntriesResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class ListDirectoryEntriesResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[ListDirectoryEntriesResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[ListDirectoryEntriesResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class ListDirectoryEntriesResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[ListDirectoryEntriesResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListDirectoryEntriesResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[ListDirectoryEntriesResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class ReadAccountFederationResponseAccountsItemMainNumberUsageType(Enum):
    """ Usage type of a phone number """
    
    MobileNumber = 'MobileNumber'
    ContactNumber = 'ContactNumber'
    DirectNumber = 'DirectNumber'
    ForwardedNumber = 'ForwardedNumber'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountFederationResponseAccountsItemMainNumber(DataClassJsonMixin):
    formatted_phone_number: Optional[str] = None
    phone_number: Optional[str] = None
    type: Optional[str] = None
    label: Optional[str] = None
    """ Custom user name of a phone number, if any """
    
    usage_type: Optional[ReadAccountFederationResponseAccountsItemMainNumberUsageType] = None
    """ Usage type of a phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountFederationResponseAccountsItem(DataClassJsonMixin):
    company_name: Optional[str] = None
    conflict_count: Optional[int] = None
    federated_name: Optional[str] = None
    id: Optional[str] = None
    link_creation_time: Optional[str] = None
    main_number: Optional[ReadAccountFederationResponseAccountsItemMainNumber] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountFederationResponse(DataClassJsonMixin):
    accounts: Optional[List[ReadAccountFederationResponseAccountsItem]] = None
    creation_time: Optional[str] = None
    display_name: Optional[str] = None
    id: Optional[str] = None
    last_modified_time: Optional[str] = None

class ReadAccountFederationResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountFederationResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[ReadAccountFederationResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountFederationResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[ReadAccountFederationResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class ReadAccountFederationResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountFederationResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[ReadAccountFederationResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountFederationResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[ReadAccountFederationResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class ReadAccountFederationResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountFederationResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[ReadAccountFederationResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountFederationResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[ReadAccountFederationResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

class ReadUserPresenceStatusResponseDndStatus(Enum):
    """
    Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take
    Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application
    Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and
    'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department;
    if these values are set for department outsiders, the 400 Bad Request error code is returned.
    The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and
    is available for some migrated accounts only.
    
    Generated by Python OpenAPI Parser
    """
    
    TakeAllCalls = 'TakeAllCalls'
    DoNotAcceptAnyCalls = 'DoNotAcceptAnyCalls'
    DoNotAcceptDepartmentCalls = 'DoNotAcceptDepartmentCalls'
    TakeDepartmentCallsOnly = 'TakeDepartmentCallsOnly'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserPresenceStatusResponseExtension(DataClassJsonMixin):
    """ Information on extension, for which this presence data is returned """
    
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Extension number (usually 3 or 4 digits) """
    

class ReadUserPresenceStatusResponsePresenceStatus(Enum):
    """ Aggregated presence status, calculated from a number of sources """
    
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

class ReadUserPresenceStatusResponseTelephonyStatus(Enum):
    """ Telephony presence status """
    
    NoCall = 'NoCall'
    CallConnected = 'CallConnected'
    Ringing = 'Ringing'
    OnHold = 'OnHold'
    ParkedCall = 'ParkedCall'

class ReadUserPresenceStatusResponseUserStatus(Enum):
    """ User-defined presence status (as previously published by the user) """
    
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

class ReadUserPresenceStatusResponseMeetingStatus(Enum):
    """ RingCentral Meetings presence """
    
    Connected = 'Connected'
    Disconnected = 'Disconnected'

class ReadUserPresenceStatusResponseActiveCallsItemDirection(Enum):
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class ReadUserPresenceStatusResponseActiveCallsItemTelephonyStatus(Enum):
    """ Telephony presence status """
    
    NoCall = 'NoCall'
    CallConnected = 'CallConnected'
    Ringing = 'Ringing'
    OnHold = 'OnHold'
    ParkedCall = 'ParkedCall'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserPresenceStatusResponseActiveCallsItemSipData(DataClassJsonMixin):
    call_id: Optional[str] = None
    to_tag: Optional[str] = None
    from_tag: Optional[str] = None
    remote_uri: Optional[str] = None
    local_uri: Optional[str] = None
    rc_session_id: Optional[str] = None

class ReadUserPresenceStatusResponseActiveCallsItemPrimaryType(Enum):
    """ Call information to be displayed as 'Line 1' for a call queue call session """
    
    PhoneNumberLabel = 'PhoneNumberLabel'
    PhoneNumber = 'PhoneNumber'
    QueueExtension = 'QueueExtension'
    QueueName = 'QueueName'
    CallerIdName = 'CallerIdName'
    CallerIdNumber = 'CallerIdNumber'
    None_ = 'None'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserPresenceStatusResponseActiveCallsItemPrimary(DataClassJsonMixin):
    """ Primary call session information. Supported for Call Queues only """
    
    type: Optional[ReadUserPresenceStatusResponseActiveCallsItemPrimaryType] = None
    """ Call information to be displayed as 'Line 1' for a call queue call session """
    
    value: Optional[str] = None
    """ Call information value """
    

class ReadUserPresenceStatusResponseActiveCallsItemAdditionalType(Enum):
    """ Call information to be displayed as 'Line 2' for a call queue call session """
    
    PhoneNumberLabel = 'PhoneNumberLabel'
    PhoneNumber = 'PhoneNumber'
    QueueExtension = 'QueueExtension'
    QueueName = 'QueueName'
    CallerIdName = 'CallerIdName'
    CallerIdNumber = 'CallerIdNumber'
    None_ = 'None'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserPresenceStatusResponseActiveCallsItemAdditional(DataClassJsonMixin):
    """ Additional call session information. Supported for Call Queues only """
    
    type: Optional[ReadUserPresenceStatusResponseActiveCallsItemAdditionalType] = None
    """ Call information to be displayed as 'Line 2' for a call queue call session """
    
    value: Optional[str] = None
    """ Call information value """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserPresenceStatusResponseActiveCallsItem(DataClassJsonMixin):
    id: Optional[str] = None
    direction: Optional[ReadUserPresenceStatusResponseActiveCallsItemDirection] = None
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Phone number or extension number of a caller. For GCM transport type '_from' property should be
    used
    """
    
    from_name: Optional[str] = None
    """ Name of a caller """
    
    to: Optional[str] = None
    """ Phone number or extension number of a callee """
    
    to_name: Optional[str] = None
    """ Name of a callee """
    
    start_time: Optional[str] = None
    """ Time when the call is actually started """
    
    telephony_status: Optional[ReadUserPresenceStatusResponseActiveCallsItemTelephonyStatus] = None
    """ Telephony presence status """
    
    sip_data: Optional[ReadUserPresenceStatusResponseActiveCallsItemSipData] = None
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    
    on_behalf_of: Optional[str] = None
    """ Extension ID of the call owner on whose behalf a call is performed """
    
    party_id: Optional[str] = None
    """ Internal identifier of a call party """
    
    termination_type: Optional[str] = None
    primary: Optional[ReadUserPresenceStatusResponseActiveCallsItemPrimary] = None
    """ Primary call session information. Supported for Call Queues only """
    
    additional: Optional[ReadUserPresenceStatusResponseActiveCallsItemAdditional] = None
    """ Additional call session information. Supported for Call Queues only """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserPresenceStatusResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI of a presence info resource """
    
    allow_see_my_presence: Optional[bool] = None
    """ If 'True' enables other extensions to see the extension presence status """
    
    dnd_status: Optional[ReadUserPresenceStatusResponseDndStatus] = None
    """
    Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take
    Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application
    Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and
    'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department;
    if these values are set for department outsiders, the 400 Bad Request error code is returned.
    The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and
    is available for some migrated accounts only.
    """
    
    extension: Optional[ReadUserPresenceStatusResponseExtension] = None
    """ Information on extension, for which this presence data is returned """
    
    message: Optional[str] = None
    """ Custom status message (as previously published by user) """
    
    pick_up_calls_on_hold: Optional[bool] = None
    """ If 'True' enables the extension user to pick up a monitored line on hold """
    
    presence_status: Optional[ReadUserPresenceStatusResponsePresenceStatus] = None
    """ Aggregated presence status, calculated from a number of sources """
    
    ring_on_monitored_call: Optional[bool] = None
    """ If 'True' enables to ring extension phone, if any user monitored by this extension is ringing """
    
    telephony_status: Optional[ReadUserPresenceStatusResponseTelephonyStatus] = None
    """ Telephony presence status """
    
    user_status: Optional[ReadUserPresenceStatusResponseUserStatus] = None
    """ User-defined presence status (as previously published by the user) """
    
    meeting_status: Optional[ReadUserPresenceStatusResponseMeetingStatus] = None
    """ RingCentral Meetings presence """
    
    active_calls: Optional[List[ReadUserPresenceStatusResponseActiveCallsItem]] = None
    """ Information on active calls """
    

class UpdateUserPresenceStatusRequestUserStatus(Enum):
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

class UpdateUserPresenceStatusRequestDndStatus(Enum):
    TakeAllCalls = 'TakeAllCalls'
    DoNotAcceptDepartmentCalls = 'DoNotAcceptDepartmentCalls'
    TakeDepartmentCallsOnly = 'TakeDepartmentCallsOnly'
    DoNotAcceptAnyCalls = 'DoNotAcceptAnyCalls'
    Unknown = 'Unknown'

class UpdateUserPresenceStatusRequestActiveCallsItemDirection(Enum):
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class UpdateUserPresenceStatusRequestActiveCallsItemTelephonyStatus(Enum):
    """ Telephony presence status """
    
    NoCall = 'NoCall'
    CallConnected = 'CallConnected'
    Ringing = 'Ringing'
    OnHold = 'OnHold'
    ParkedCall = 'ParkedCall'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusRequestActiveCallsItemSipData(DataClassJsonMixin):
    call_id: Optional[str] = None
    to_tag: Optional[str] = None
    from_tag: Optional[str] = None
    remote_uri: Optional[str] = None
    local_uri: Optional[str] = None
    rc_session_id: Optional[str] = None

class UpdateUserPresenceStatusRequestActiveCallsItemPrimaryType(Enum):
    """ Call information to be displayed as 'Line 1' for a call queue call session """
    
    PhoneNumberLabel = 'PhoneNumberLabel'
    PhoneNumber = 'PhoneNumber'
    QueueExtension = 'QueueExtension'
    QueueName = 'QueueName'
    CallerIdName = 'CallerIdName'
    CallerIdNumber = 'CallerIdNumber'
    None_ = 'None'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusRequestActiveCallsItemPrimary(DataClassJsonMixin):
    """ Primary call session information. Supported for Call Queues only """
    
    type: Optional[UpdateUserPresenceStatusRequestActiveCallsItemPrimaryType] = None
    """ Call information to be displayed as 'Line 1' for a call queue call session """
    
    value: Optional[str] = None
    """ Call information value """
    

class UpdateUserPresenceStatusRequestActiveCallsItemAdditionalType(Enum):
    """ Call information to be displayed as 'Line 2' for a call queue call session """
    
    PhoneNumberLabel = 'PhoneNumberLabel'
    PhoneNumber = 'PhoneNumber'
    QueueExtension = 'QueueExtension'
    QueueName = 'QueueName'
    CallerIdName = 'CallerIdName'
    CallerIdNumber = 'CallerIdNumber'
    None_ = 'None'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusRequestActiveCallsItemAdditional(DataClassJsonMixin):
    """ Additional call session information. Supported for Call Queues only """
    
    type: Optional[UpdateUserPresenceStatusRequestActiveCallsItemAdditionalType] = None
    """ Call information to be displayed as 'Line 2' for a call queue call session """
    
    value: Optional[str] = None
    """ Call information value """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusRequestActiveCallsItem(DataClassJsonMixin):
    id: Optional[str] = None
    direction: Optional[UpdateUserPresenceStatusRequestActiveCallsItemDirection] = None
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Phone number or extension number of a caller. For GCM transport type '_from' property should be
    used
    """
    
    from_name: Optional[str] = None
    """ Name of a caller """
    
    to: Optional[str] = None
    """ Phone number or extension number of a callee """
    
    to_name: Optional[str] = None
    """ Name of a callee """
    
    start_time: Optional[str] = None
    """ Time when the call is actually started """
    
    telephony_status: Optional[UpdateUserPresenceStatusRequestActiveCallsItemTelephonyStatus] = None
    """ Telephony presence status """
    
    sip_data: Optional[UpdateUserPresenceStatusRequestActiveCallsItemSipData] = None
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    
    on_behalf_of: Optional[str] = None
    """ Extension ID of the call owner on whose behalf a call is performed """
    
    party_id: Optional[str] = None
    """ Internal identifier of a call party """
    
    termination_type: Optional[str] = None
    primary: Optional[UpdateUserPresenceStatusRequestActiveCallsItemPrimary] = None
    """ Primary call session information. Supported for Call Queues only """
    
    additional: Optional[UpdateUserPresenceStatusRequestActiveCallsItemAdditional] = None
    """ Additional call session information. Supported for Call Queues only """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusRequest(DataClassJsonMixin):
    user_status: Optional[UpdateUserPresenceStatusRequestUserStatus] = None
    dnd_status: Optional[UpdateUserPresenceStatusRequestDndStatus] = None
    message: Optional[str] = None
    allow_see_my_presence: Optional[bool] = False
    ring_on_monitored_call: Optional[bool] = False
    pick_up_calls_on_hold: Optional[bool] = False
    active_calls: Optional[List[UpdateUserPresenceStatusRequestActiveCallsItem]] = None

class UpdateUserPresenceStatusResponseUserStatus(Enum):
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

class UpdateUserPresenceStatusResponseDndStatus(Enum):
    TakeAllCalls = 'TakeAllCalls'
    DoNotAcceptDepartmentCalls = 'DoNotAcceptDepartmentCalls'
    TakeDepartmentCallsOnly = 'TakeDepartmentCallsOnly'
    DoNotAcceptAnyCalls = 'DoNotAcceptAnyCalls'
    Unknown = 'Unknown'

class UpdateUserPresenceStatusResponseActiveCallsItemDirection(Enum):
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class UpdateUserPresenceStatusResponseActiveCallsItemTelephonyStatus(Enum):
    """ Telephony presence status """
    
    NoCall = 'NoCall'
    CallConnected = 'CallConnected'
    Ringing = 'Ringing'
    OnHold = 'OnHold'
    ParkedCall = 'ParkedCall'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusResponseActiveCallsItemSipData(DataClassJsonMixin):
    call_id: Optional[str] = None
    to_tag: Optional[str] = None
    from_tag: Optional[str] = None
    remote_uri: Optional[str] = None
    local_uri: Optional[str] = None
    rc_session_id: Optional[str] = None

class UpdateUserPresenceStatusResponseActiveCallsItemPrimaryType(Enum):
    """ Call information to be displayed as 'Line 1' for a call queue call session """
    
    PhoneNumberLabel = 'PhoneNumberLabel'
    PhoneNumber = 'PhoneNumber'
    QueueExtension = 'QueueExtension'
    QueueName = 'QueueName'
    CallerIdName = 'CallerIdName'
    CallerIdNumber = 'CallerIdNumber'
    None_ = 'None'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusResponseActiveCallsItemPrimary(DataClassJsonMixin):
    """ Primary call session information. Supported for Call Queues only """
    
    type: Optional[UpdateUserPresenceStatusResponseActiveCallsItemPrimaryType] = None
    """ Call information to be displayed as 'Line 1' for a call queue call session """
    
    value: Optional[str] = None
    """ Call information value """
    

class UpdateUserPresenceStatusResponseActiveCallsItemAdditionalType(Enum):
    """ Call information to be displayed as 'Line 2' for a call queue call session """
    
    PhoneNumberLabel = 'PhoneNumberLabel'
    PhoneNumber = 'PhoneNumber'
    QueueExtension = 'QueueExtension'
    QueueName = 'QueueName'
    CallerIdName = 'CallerIdName'
    CallerIdNumber = 'CallerIdNumber'
    None_ = 'None'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusResponseActiveCallsItemAdditional(DataClassJsonMixin):
    """ Additional call session information. Supported for Call Queues only """
    
    type: Optional[UpdateUserPresenceStatusResponseActiveCallsItemAdditionalType] = None
    """ Call information to be displayed as 'Line 2' for a call queue call session """
    
    value: Optional[str] = None
    """ Call information value """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusResponseActiveCallsItem(DataClassJsonMixin):
    id: Optional[str] = None
    direction: Optional[UpdateUserPresenceStatusResponseActiveCallsItemDirection] = None
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Phone number or extension number of a caller. For GCM transport type '_from' property should be
    used
    """
    
    from_name: Optional[str] = None
    """ Name of a caller """
    
    to: Optional[str] = None
    """ Phone number or extension number of a callee """
    
    to_name: Optional[str] = None
    """ Name of a callee """
    
    start_time: Optional[str] = None
    """ Time when the call is actually started """
    
    telephony_status: Optional[UpdateUserPresenceStatusResponseActiveCallsItemTelephonyStatus] = None
    """ Telephony presence status """
    
    sip_data: Optional[UpdateUserPresenceStatusResponseActiveCallsItemSipData] = None
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    
    on_behalf_of: Optional[str] = None
    """ Extension ID of the call owner on whose behalf a call is performed """
    
    party_id: Optional[str] = None
    """ Internal identifier of a call party """
    
    termination_type: Optional[str] = None
    primary: Optional[UpdateUserPresenceStatusResponseActiveCallsItemPrimary] = None
    """ Primary call session information. Supported for Call Queues only """
    
    additional: Optional[UpdateUserPresenceStatusResponseActiveCallsItemAdditional] = None
    """ Additional call session information. Supported for Call Queues only """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusResponseExtension(DataClassJsonMixin):
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Extension number (usually 3 or 4 digits) """
    

class UpdateUserPresenceStatusResponseMeetingStatus(Enum):
    """ Meetings presence status """
    
    Connected = 'Connected'
    Disconnected = 'Disconnected'

class UpdateUserPresenceStatusResponseTelephonyStatus(Enum):
    """ Telephony presence status. Returned if telephony status is changed """
    
    NoCall = 'NoCall'
    CallConnected = 'CallConnected'
    Ringing = 'Ringing'
    OnHold = 'OnHold'
    ParkedCall = 'ParkedCall'

class UpdateUserPresenceStatusResponsePresenceStatus(Enum):
    """ Aggregated presence status, calculated from a number of sources """
    
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUserPresenceStatusResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to the presence resource """
    
    user_status: Optional[UpdateUserPresenceStatusResponseUserStatus] = None
    dnd_status: Optional[UpdateUserPresenceStatusResponseDndStatus] = None
    message: Optional[str] = None
    allow_see_my_presence: Optional[bool] = False
    ring_on_monitored_call: Optional[bool] = False
    pick_up_calls_on_hold: Optional[bool] = False
    active_calls: Optional[List[UpdateUserPresenceStatusResponseActiveCallsItem]] = None
    extension: Optional[UpdateUserPresenceStatusResponseExtension] = None
    meeting_status: Optional[UpdateUserPresenceStatusResponseMeetingStatus] = None
    """ Meetings presence status """
    
    telephony_status: Optional[UpdateUserPresenceStatusResponseTelephonyStatus] = None
    """ Telephony presence status. Returned if telephony status is changed """
    
    presence_status: Optional[UpdateUserPresenceStatusResponsePresenceStatus] = None
    """ Aggregated presence status, calculated from a number of sources """
    

class ReadAccountPresenceResponseRecordsItemDndStatus(Enum):
    """
    Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take
    Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application
    Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and
    'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department;
    if these values are set for department outsiders, the 400 Bad Request error code is returned.
    The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and
    is available for some migrated accounts only.
    
    Generated by Python OpenAPI Parser
    """
    
    TakeAllCalls = 'TakeAllCalls'
    DoNotAcceptAnyCalls = 'DoNotAcceptAnyCalls'
    DoNotAcceptDepartmentCalls = 'DoNotAcceptDepartmentCalls'
    TakeDepartmentCallsOnly = 'TakeDepartmentCallsOnly'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseRecordsItemExtension(DataClassJsonMixin):
    """ Information on extension, for which this presence data is returned """
    
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Extension number (usually 3 or 4 digits) """
    

class ReadAccountPresenceResponseRecordsItemPresenceStatus(Enum):
    """ Aggregated presence status, calculated from a number of sources """
    
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

class ReadAccountPresenceResponseRecordsItemTelephonyStatus(Enum):
    """ Telephony presence status """
    
    NoCall = 'NoCall'
    CallConnected = 'CallConnected'
    Ringing = 'Ringing'
    OnHold = 'OnHold'
    ParkedCall = 'ParkedCall'

class ReadAccountPresenceResponseRecordsItemUserStatus(Enum):
    """ User-defined presence status (as previously published by the user) """
    
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

class ReadAccountPresenceResponseRecordsItemMeetingStatus(Enum):
    """ RingCentral Meetings presence """
    
    Connected = 'Connected'
    Disconnected = 'Disconnected'

class ReadAccountPresenceResponseRecordsItemActiveCallsItemDirection(Enum):
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class ReadAccountPresenceResponseRecordsItemActiveCallsItemTelephonyStatus(Enum):
    """ Telephony presence status """
    
    NoCall = 'NoCall'
    CallConnected = 'CallConnected'
    Ringing = 'Ringing'
    OnHold = 'OnHold'
    ParkedCall = 'ParkedCall'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseRecordsItemActiveCallsItemSipData(DataClassJsonMixin):
    call_id: Optional[str] = None
    to_tag: Optional[str] = None
    from_tag: Optional[str] = None
    remote_uri: Optional[str] = None
    local_uri: Optional[str] = None
    rc_session_id: Optional[str] = None

class ReadAccountPresenceResponseRecordsItemActiveCallsItemPrimaryType(Enum):
    """ Call information to be displayed as 'Line 1' for a call queue call session """
    
    PhoneNumberLabel = 'PhoneNumberLabel'
    PhoneNumber = 'PhoneNumber'
    QueueExtension = 'QueueExtension'
    QueueName = 'QueueName'
    CallerIdName = 'CallerIdName'
    CallerIdNumber = 'CallerIdNumber'
    None_ = 'None'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseRecordsItemActiveCallsItemPrimary(DataClassJsonMixin):
    """ Primary call session information. Supported for Call Queues only """
    
    type: Optional[ReadAccountPresenceResponseRecordsItemActiveCallsItemPrimaryType] = None
    """ Call information to be displayed as 'Line 1' for a call queue call session """
    
    value: Optional[str] = None
    """ Call information value """
    

class ReadAccountPresenceResponseRecordsItemActiveCallsItemAdditionalType(Enum):
    """ Call information to be displayed as 'Line 2' for a call queue call session """
    
    PhoneNumberLabel = 'PhoneNumberLabel'
    PhoneNumber = 'PhoneNumber'
    QueueExtension = 'QueueExtension'
    QueueName = 'QueueName'
    CallerIdName = 'CallerIdName'
    CallerIdNumber = 'CallerIdNumber'
    None_ = 'None'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseRecordsItemActiveCallsItemAdditional(DataClassJsonMixin):
    """ Additional call session information. Supported for Call Queues only """
    
    type: Optional[ReadAccountPresenceResponseRecordsItemActiveCallsItemAdditionalType] = None
    """ Call information to be displayed as 'Line 2' for a call queue call session """
    
    value: Optional[str] = None
    """ Call information value """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseRecordsItemActiveCallsItem(DataClassJsonMixin):
    id: Optional[str] = None
    direction: Optional[ReadAccountPresenceResponseRecordsItemActiveCallsItemDirection] = None
    from_: Optional[str] = field(metadata=config(field_name='from'), default=None)
    """
    Phone number or extension number of a caller. For GCM transport type '_from' property should be
    used
    """
    
    from_name: Optional[str] = None
    """ Name of a caller """
    
    to: Optional[str] = None
    """ Phone number or extension number of a callee """
    
    to_name: Optional[str] = None
    """ Name of a callee """
    
    start_time: Optional[str] = None
    """ Time when the call is actually started """
    
    telephony_status: Optional[ReadAccountPresenceResponseRecordsItemActiveCallsItemTelephonyStatus] = None
    """ Telephony presence status """
    
    sip_data: Optional[ReadAccountPresenceResponseRecordsItemActiveCallsItemSipData] = None
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    
    on_behalf_of: Optional[str] = None
    """ Extension ID of the call owner on whose behalf a call is performed """
    
    party_id: Optional[str] = None
    """ Internal identifier of a call party """
    
    termination_type: Optional[str] = None
    primary: Optional[ReadAccountPresenceResponseRecordsItemActiveCallsItemPrimary] = None
    """ Primary call session information. Supported for Call Queues only """
    
    additional: Optional[ReadAccountPresenceResponseRecordsItemActiveCallsItemAdditional] = None
    """ Additional call session information. Supported for Call Queues only """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseRecordsItem(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI of a presence info resource """
    
    allow_see_my_presence: Optional[bool] = None
    """ If 'True' enables other extensions to see the extension presence status """
    
    dnd_status: Optional[ReadAccountPresenceResponseRecordsItemDndStatus] = None
    """
    Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take
    Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application
    Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and
    'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department;
    if these values are set for department outsiders, the 400 Bad Request error code is returned.
    The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and
    is available for some migrated accounts only.
    """
    
    extension: Optional[ReadAccountPresenceResponseRecordsItemExtension] = None
    """ Information on extension, for which this presence data is returned """
    
    message: Optional[str] = None
    """ Custom status message (as previously published by user) """
    
    pick_up_calls_on_hold: Optional[bool] = None
    """ If 'True' enables the extension user to pick up a monitored line on hold """
    
    presence_status: Optional[ReadAccountPresenceResponseRecordsItemPresenceStatus] = None
    """ Aggregated presence status, calculated from a number of sources """
    
    ring_on_monitored_call: Optional[bool] = None
    """ If 'True' enables to ring extension phone, if any user monitored by this extension is ringing """
    
    telephony_status: Optional[ReadAccountPresenceResponseRecordsItemTelephonyStatus] = None
    """ Telephony presence status """
    
    user_status: Optional[ReadAccountPresenceResponseRecordsItemUserStatus] = None
    """ User-defined presence status (as previously published by the user) """
    
    meeting_status: Optional[ReadAccountPresenceResponseRecordsItemMeetingStatus] = None
    """ RingCentral Meetings presence """
    
    active_calls: Optional[List[ReadAccountPresenceResponseRecordsItemActiveCallsItem]] = None
    """ Information on active calls """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseNavigationNextPage(DataClassJsonMixin):
    """ Canonical URI for the next page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseNavigationPreviousPage(DataClassJsonMixin):
    """ Canonical URI for the previous page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseNavigationLastPage(DataClassJsonMixin):
    """ Canonical URI for the last page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponseNavigation(DataClassJsonMixin):
    """ Information on navigation """
    
    first_page: Optional[ReadAccountPresenceResponseNavigationFirstPage] = None
    """ Canonical URI for the first page of the list """
    
    next_page: Optional[ReadAccountPresenceResponseNavigationNextPage] = None
    """ Canonical URI for the next page of the list """
    
    previous_page: Optional[ReadAccountPresenceResponseNavigationPreviousPage] = None
    """ Canonical URI for the previous page of the list """
    
    last_page: Optional[ReadAccountPresenceResponseNavigationLastPage] = None
    """ Canonical URI for the last page of the list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponsePaging(DataClassJsonMixin):
    """ Information on paging """
    
    page: Optional[int] = None
    """
    The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result
    is empty (because non-existent page was specified or perPage=0 was requested)
    """
    
    per_page: Optional[int] = None
    """
    Current page size, describes how many items are in each page. Default value is 100. Maximum
    value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000)
    is applied
    """
    
    page_start: Optional[int] = None
    """
    The zero-based number of the first element on the current page. Omitted if the page is omitted
    or result is empty
    """
    
    page_end: Optional[int] = None
    """
    The zero-based index of the last element on the current page. Omitted if the page is omitted or
    result is empty
    """
    
    total_pages: Optional[int] = None
    """
    The total number of pages in a dataset. May be omitted for some resources due to performance
    reasons
    """
    
    total_elements: Optional[int] = None
    """
    The total number of elements in a dataset. May be omitted for some resource due to performance
    reasons
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAccountPresenceResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI of account presence resource """
    
    records: Optional[List[ReadAccountPresenceResponseRecordsItem]] = None
    """ List of Prompts """
    
    navigation: Optional[ReadAccountPresenceResponseNavigation] = None
    """ Information on navigation """
    
    paging: Optional[ReadAccountPresenceResponsePaging] = None
    """ Information on paging """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallQueuePresenceResponseRecordsItemMemberSite(DataClassJsonMixin):
    """ Extension site """
    
    id: Optional[str] = None
    """ Site extension identifier """
    
    name: Optional[str] = None
    """ Site extension name """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallQueuePresenceResponseRecordsItemMember(DataClassJsonMixin):
    """ Call queue member information """
    
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    name: Optional[str] = None
    """ Extension full name """
    
    extension_number: Optional[str] = None
    """ Extension number """
    
    site: Optional[ReadCallQueuePresenceResponseRecordsItemMemberSite] = None
    """ Extension site """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallQueuePresenceResponseRecordsItem(DataClassJsonMixin):
    member: Optional[ReadCallQueuePresenceResponseRecordsItemMember] = None
    """ Call queue member information """
    
    accept_queue_calls: Optional[bool] = None
    """ Private member telephony availability status applied to calls of all queues """
    
    accept_current_queue_calls: Optional[bool] = None
    """ Call queue member availability in this particular queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallQueuePresenceResponse(DataClassJsonMixin):
    records: Optional[List[ReadCallQueuePresenceResponseRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCallQueuePresenceRequestRecordsItemMember(DataClassJsonMixin):
    """ Call queue member information """
    
    id: Optional[str] = None
    """ Internal identifier of an extension - queue member """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCallQueuePresenceRequestRecordsItem(DataClassJsonMixin):
    member: Optional[UpdateCallQueuePresenceRequestRecordsItemMember] = None
    """ Call queue member information """
    
    accept_current_queue_calls: Optional[bool] = None
    """ Call queue member availability for calls of this queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCallQueuePresenceRequest(DataClassJsonMixin):
    records: Optional[List[UpdateCallQueuePresenceRequestRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCallQueuePresenceResponseRecordsItemMemberSite(DataClassJsonMixin):
    """ Extension site """
    
    id: Optional[str] = None
    """ Site extension identifier """
    
    name: Optional[str] = None
    """ Site extension name """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCallQueuePresenceResponseRecordsItemMember(DataClassJsonMixin):
    """ Call queue member information """
    
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    name: Optional[str] = None
    """ Extension full name """
    
    extension_number: Optional[str] = None
    """ Extension number """
    
    site: Optional[UpdateCallQueuePresenceResponseRecordsItemMemberSite] = None
    """ Extension site """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCallQueuePresenceResponseRecordsItem(DataClassJsonMixin):
    member: Optional[UpdateCallQueuePresenceResponseRecordsItemMember] = None
    """ Call queue member information """
    
    accept_queue_calls: Optional[bool] = None
    """ Private member telephony availability status applied to calls of all queues """
    
    accept_current_queue_calls: Optional[bool] = None
    """ Call queue member availability in this particular queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateCallQueuePresenceResponse(DataClassJsonMixin):
    records: Optional[List[UpdateCallQueuePresenceResponseRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadExtensionCallQueuePresenceResponseRecordsItemCallQueue(DataClassJsonMixin):
    """ Call queue information """
    
    id: Optional[str] = None
    """ Internal identifier of a call queue """
    
    name: Optional[str] = None
    """ Name of a call queue """
    
    extension_number: Optional[str] = None
    """ Extension number of a call queue """
    
    editable_member_status: Optional[bool] = None
    """ Flag allow members to change their queue status """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadExtensionCallQueuePresenceResponseRecordsItem(DataClassJsonMixin):
    call_queue: Optional[ReadExtensionCallQueuePresenceResponseRecordsItemCallQueue] = None
    """ Call queue information """
    
    accept_calls: Optional[bool] = None
    """ Call queue agent availability for calls of this queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadExtensionCallQueuePresenceResponse(DataClassJsonMixin):
    records: Optional[List[ReadExtensionCallQueuePresenceResponseRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateExtensionCallQueuePresenceRequestRecordsItemCallQueue(DataClassJsonMixin):
    """ Call queue information """
    
    id: Optional[str] = None
    """ Internal identifier of a call queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateExtensionCallQueuePresenceRequestRecordsItem(DataClassJsonMixin):
    call_queue: Optional[UpdateExtensionCallQueuePresenceRequestRecordsItemCallQueue] = None
    """ Call queue information """
    
    accept_calls: Optional[bool] = None
    """ Call queue agent availability for calls of this queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateExtensionCallQueuePresenceRequest(DataClassJsonMixin):
    records: Optional[List[UpdateExtensionCallQueuePresenceRequestRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateExtensionCallQueuePresenceResponseRecordsItemCallQueue(DataClassJsonMixin):
    """ Call queue information """
    
    id: Optional[str] = None
    """ Internal identifier of a call queue """
    
    name: Optional[str] = None
    """ Name of a call queue """
    
    extension_number: Optional[str] = None
    """ Extension number of a call queue """
    
    editable_member_status: Optional[bool] = None
    """ Flag allow members to change their queue status """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateExtensionCallQueuePresenceResponseRecordsItem(DataClassJsonMixin):
    call_queue: Optional[UpdateExtensionCallQueuePresenceResponseRecordsItemCallQueue] = None
    """ Call queue information """
    
    accept_calls: Optional[bool] = None
    """ Call queue agent availability for calls of this queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateExtensionCallQueuePresenceResponse(DataClassJsonMixin):
    records: Optional[List[UpdateExtensionCallQueuePresenceResponseRecordsItem]] = None

class ListGlipChatsTypeItem(Enum):
    Everyone = 'Everyone'
    Group = 'Group'
    Personal = 'Personal'
    Direct = 'Direct'
    Team = 'Team'

class ListGlipChatsResponseRecordsItemType(Enum):
    """ Type of a chat """
    
    Everyone = 'Everyone'
    Team = 'Team'
    Group = 'Group'
    Direct = 'Direct'
    Personal = 'Personal'

class ListGlipChatsResponseRecordsItemStatus(Enum):
    """ For 'Team' chat type only. Team status. """
    
    Active = 'Active'
    Archived = 'Archived'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipChatsResponseRecordsItemMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipChatsResponseRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a chat """
    
    type: Optional[ListGlipChatsResponseRecordsItemType] = None
    """ Type of a chat """
    
    public: Optional[bool] = None
    """ For 'Team' chat type only. Team access level. """
    
    name: Optional[str] = None
    """ For 'Team','Everyone' chats types only. Chat name. """
    
    description: Optional[str] = None
    """ For 'Team','Everyone' chats types only. Chat description. """
    
    status: Optional[ListGlipChatsResponseRecordsItemStatus] = None
    """ For 'Team' chat type only. Team status. """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat last change datetime in ISO 8601 format """
    
    members: Optional[List[ListGlipChatsResponseRecordsItemMembersItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipChatsResponseNavigation(DataClassJsonMixin):
    prev_page_token: Optional[str] = None
    """
    Previous page token. To get previous page, user should pass one of returned token in next
    request and, in turn, required page will be returned with new tokens
    """
    
    next_page_token: Optional[str] = None
    """
    Next page token. To get next page, user should pass one of returned token in next request and,
    in turn, required page will be returned with new tokens
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipChatsResponse(DataClassJsonMixin):
    """
    Required Properties:
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: List[ListGlipChatsResponseRecordsItem]
    """ List of chats """
    
    navigation: Optional[ListGlipChatsResponseNavigation] = None

class ReadGlipChatResponseType(Enum):
    """ Type of a chat """
    
    Everyone = 'Everyone'
    Team = 'Team'
    Group = 'Group'
    Direct = 'Direct'
    Personal = 'Personal'

class ReadGlipChatResponseStatus(Enum):
    """ For 'Team' chat type only. Team status. """
    
    Active = 'Active'
    Archived = 'Archived'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadGlipChatResponseMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadGlipChatResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a chat """
    
    type: Optional[ReadGlipChatResponseType] = None
    """ Type of a chat """
    
    public: Optional[bool] = None
    """ For 'Team' chat type only. Team access level. """
    
    name: Optional[str] = None
    """ For 'Team','Everyone' chats types only. Chat name. """
    
    description: Optional[str] = None
    """ For 'Team','Everyone' chats types only. Chat description. """
    
    status: Optional[ReadGlipChatResponseStatus] = None
    """ For 'Team' chat type only. Team status. """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat last change datetime in ISO 8601 format """
    
    members: Optional[List[ReadGlipChatResponseMembersItem]] = None

class ListGlipConversationsResponseRecordsItemType(Enum):
    """ Type of a conversation """
    
    Direct = 'Direct'
    Personal = 'Personal'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipConversationsResponseRecordsItemMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    
    email: Optional[str] = None
    """ Email of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipConversationsResponseRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a conversation """
    
    type: Optional[ListGlipConversationsResponseRecordsItemType] = None
    """ Type of a conversation """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Conversation creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Conversation last change datetime in ISO 8601 format """
    
    members: Optional[List[ListGlipConversationsResponseRecordsItemMembersItem]] = None
    """ List of glip members """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipConversationsResponseNavigation(DataClassJsonMixin):
    prev_page_token: Optional[str] = None
    """
    Previous page token. To get previous page, user should pass one of returned token in next
    request and, in turn, required page will be returned with new tokens
    """
    
    next_page_token: Optional[str] = None
    """
    Next page token. To get next page, user should pass one of returned token in next request and,
    in turn, required page will be returned with new tokens
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipConversationsResponse(DataClassJsonMixin):
    """
    Required Properties:
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: List[ListGlipConversationsResponseRecordsItem]
    """ List of conversations """
    
    navigation: Optional[ListGlipConversationsResponseNavigation] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateGlipConversationRequestMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    
    email: Optional[str] = None
    """ Email of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateGlipConversationRequest(DataClassJsonMixin):
    """
    Required Properties:
     - members
    
    Generated by Python OpenAPI Parser
    """
    
    members: List[CreateGlipConversationRequestMembersItem]
    """
    List of glip members. The maximum supported number of IDs is 15. User's own ID is optional. If
    `members` section is omitted then 'Personal' chat will be returned
    """
    

class CreateGlipConversationResponseType(Enum):
    """ Type of a conversation """
    
    Direct = 'Direct'
    Personal = 'Personal'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateGlipConversationResponseMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    
    email: Optional[str] = None
    """ Email of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateGlipConversationResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a conversation """
    
    type: Optional[CreateGlipConversationResponseType] = None
    """ Type of a conversation """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Conversation creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Conversation last change datetime in ISO 8601 format """
    
    members: Optional[List[CreateGlipConversationResponseMembersItem]] = None
    """ List of glip members """
    

class CreateGlipConversationResponseType(Enum):
    """ Type of a conversation """
    
    Direct = 'Direct'
    Personal = 'Personal'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateGlipConversationResponseMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    
    email: Optional[str] = None
    """ Email of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateGlipConversationResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a conversation """
    
    type: Optional[CreateGlipConversationResponseType] = None
    """ Type of a conversation """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Conversation creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Conversation last change datetime in ISO 8601 format """
    
    members: Optional[List[CreateGlipConversationResponseMembersItem]] = None
    """ List of glip members """
    

class ReadGlipConversationResponseType(Enum):
    """ Type of a conversation """
    
    Direct = 'Direct'
    Personal = 'Personal'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadGlipConversationResponseMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    
    email: Optional[str] = None
    """ Email of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadGlipConversationResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a conversation """
    
    type: Optional[ReadGlipConversationResponseType] = None
    """ Type of a conversation """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Conversation creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Conversation last change datetime in ISO 8601 format """
    
    members: Optional[List[ReadGlipConversationResponseMembersItem]] = None
    """ List of glip members """
    

class ListGlipTeamsResponseRecordsItemType(Enum):
    """ Type of a chat """
    
    Team = 'Team'

class ListGlipTeamsResponseRecordsItemStatus(Enum):
    """ Team status """
    
    Active = 'Active'
    Archived = 'Archived'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipTeamsResponseRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a team """
    
    type: Optional[ListGlipTeamsResponseRecordsItemType] = None
    """ Type of a chat """
    
    public: Optional[bool] = None
    """ Team access level """
    
    name: Optional[str] = None
    """ Team name """
    
    description: Optional[str] = None
    """ Team description """
    
    status: Optional[ListGlipTeamsResponseRecordsItemStatus] = None
    """ Team status """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Team creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Team last change datetime in ISO 8601 format """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipTeamsResponseNavigation(DataClassJsonMixin):
    prev_page_token: Optional[str] = None
    """
    Previous page token. To get previous page, user should pass one of returned token in next
    request and, in turn, required page will be returned with new tokens
    """
    
    next_page_token: Optional[str] = None
    """
    Next page token. To get next page, user should pass one of returned token in next request and,
    in turn, required page will be returned with new tokens
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListGlipTeamsResponse(DataClassJsonMixin):
    """
    Required Properties:
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: List[ListGlipTeamsResponseRecordsItem]
    """ List of teams """
    
    navigation: Optional[ListGlipTeamsResponseNavigation] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateGlipTeamRequestMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    
    email: Optional[str] = None
    """ Email of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateGlipTeamRequest(DataClassJsonMixin):
    """
    Required Properties:
     - name
    
    Generated by Python OpenAPI Parser
    """
    
    name: str
    """ Team name. """
    
    public: Optional[bool] = None
    """ Team access level. """
    
    description: Optional[str] = None
    """ Team description. """
    
    members: Optional[List[CreateGlipTeamRequestMembersItem]] = None
    """ List of glip members """
    

class CreateGlipTeamResponseType(Enum):
    """ Type of a chat """
    
    Team = 'Team'

class CreateGlipTeamResponseStatus(Enum):
    """ Team status """
    
    Active = 'Active'
    Archived = 'Archived'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateGlipTeamResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a team """
    
    type: Optional[CreateGlipTeamResponseType] = None
    """ Type of a chat """
    
    public: Optional[bool] = None
    """ Team access level """
    
    name: Optional[str] = None
    """ Team name """
    
    description: Optional[str] = None
    """ Team description """
    
    status: Optional[CreateGlipTeamResponseStatus] = None
    """ Team status """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Team creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Team last change datetime in ISO 8601 format """
    

class ReadGlipTeamResponseType(Enum):
    """ Type of a chat """
    
    Team = 'Team'

class ReadGlipTeamResponseStatus(Enum):
    """ Team status """
    
    Active = 'Active'
    Archived = 'Archived'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadGlipTeamResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a team """
    
    type: Optional[ReadGlipTeamResponseType] = None
    """ Type of a chat """
    
    public: Optional[bool] = None
    """ Team access level """
    
    name: Optional[str] = None
    """ Team name """
    
    description: Optional[str] = None
    """ Team description """
    
    status: Optional[ReadGlipTeamResponseStatus] = None
    """ Team status """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Team creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Team last change datetime in ISO 8601 format """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchGlipTeamRequest(DataClassJsonMixin):
    public: Optional[bool] = None
    """ Team access level """
    
    name: Optional[str] = None
    """ Team name. Maximum number of characters supported is 250 """
    
    description: Optional[str] = None
    """ Team description. Maximum number of characters supported is 1000 """
    

class PatchGlipTeamResponseType(Enum):
    """ Type of a chat """
    
    Team = 'Team'

class PatchGlipTeamResponseStatus(Enum):
    """ Team status """
    
    Active = 'Active'
    Archived = 'Archived'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchGlipTeamResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a team """
    
    type: Optional[PatchGlipTeamResponseType] = None
    """ Type of a chat """
    
    public: Optional[bool] = None
    """ Team access level """
    
    name: Optional[str] = None
    """ Team name """
    
    description: Optional[str] = None
    """ Team description """
    
    status: Optional[PatchGlipTeamResponseStatus] = None
    """ Team status """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Team creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Team last change datetime in ISO 8601 format """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AddGlipTeamMembersRequestMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    
    email: Optional[str] = None
    """ Email of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AddGlipTeamMembersRequest(DataClassJsonMixin):
    """
    Required Properties:
     - members
    
    Generated by Python OpenAPI Parser
    """
    
    members: List[AddGlipTeamMembersRequestMembersItem]
    """ List of glip members """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class RemoveGlipTeamMembersRequestMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class RemoveGlipTeamMembersRequest(DataClassJsonMixin):
    """
    Required Properties:
     - members
    
    Generated by Python OpenAPI Parser
    """
    
    members: List[RemoveGlipTeamMembersRequestMembersItem]
    """ Identifier(s) of chat members. """
    

class ReadGlipEveryoneResponseType(Enum):
    """ Type of a chat """
    
    Everyone = 'Everyone'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadGlipEveryoneResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a chat """
    
    type: Optional[ReadGlipEveryoneResponseType] = None
    """ Type of a chat """
    
    name: Optional[str] = None
    """ Chat name """
    
    description: Optional[str] = None
    """ Chat description """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat last change datetime in ISO 8601 format """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchGlipEveryoneRequest(DataClassJsonMixin):
    name: Optional[int] = None
    """ Everyone chat name. Maximum number of characters supported is 250 """
    
    description: Optional[str] = None
    """ Everyone chat description. Maximum number of characters supported is 1000 """
    

class PatchGlipEveryoneResponseType(Enum):
    """ Type of a chat """
    
    Everyone = 'Everyone'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchGlipEveryoneResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a chat """
    
    type: Optional[PatchGlipEveryoneResponseType] = None
    """ Type of a chat """
    
    name: Optional[str] = None
    """ Chat name """
    
    description: Optional[str] = None
    """ Chat description """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat last change datetime in ISO 8601 format """
    

class ListRecentChatsTypeItem(Enum):
    Everyone = 'Everyone'
    Group = 'Group'
    Personal = 'Personal'
    Direct = 'Direct'
    Team = 'Team'

class ListRecentChatsResponseRecordsItemType(Enum):
    """ Type of a chat """
    
    Everyone = 'Everyone'
    Team = 'Team'
    Group = 'Group'
    Direct = 'Direct'
    Personal = 'Personal'

class ListRecentChatsResponseRecordsItemStatus(Enum):
    """ For 'Team' chat type only. Team status. """
    
    Active = 'Active'
    Archived = 'Archived'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListRecentChatsResponseRecordsItemMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListRecentChatsResponseRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a chat """
    
    type: Optional[ListRecentChatsResponseRecordsItemType] = None
    """ Type of a chat """
    
    public: Optional[bool] = None
    """ For 'Team' chat type only. Team access level. """
    
    name: Optional[str] = None
    """ For 'Team','Everyone' chats types only. Chat name. """
    
    description: Optional[str] = None
    """ For 'Team','Everyone' chats types only. Chat description. """
    
    status: Optional[ListRecentChatsResponseRecordsItemStatus] = None
    """ For 'Team' chat type only. Team status. """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat last change datetime in ISO 8601 format """
    
    members: Optional[List[ListRecentChatsResponseRecordsItemMembersItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListRecentChatsResponse(DataClassJsonMixin):
    """
    Required Properties:
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: List[ListRecentChatsResponseRecordsItem]
    """ List of chats """
    

class ListFavoriteChatsResponseRecordsItemType(Enum):
    """ Type of a chat """
    
    Everyone = 'Everyone'
    Team = 'Team'
    Group = 'Group'
    Direct = 'Direct'
    Personal = 'Personal'

class ListFavoriteChatsResponseRecordsItemStatus(Enum):
    """ For 'Team' chat type only. Team status. """
    
    Active = 'Active'
    Archived = 'Archived'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListFavoriteChatsResponseRecordsItemMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListFavoriteChatsResponseRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a chat """
    
    type: Optional[ListFavoriteChatsResponseRecordsItemType] = None
    """ Type of a chat """
    
    public: Optional[bool] = None
    """ For 'Team' chat type only. Team access level. """
    
    name: Optional[str] = None
    """ For 'Team','Everyone' chats types only. Chat name. """
    
    description: Optional[str] = None
    """ For 'Team','Everyone' chats types only. Chat description. """
    
    status: Optional[ListFavoriteChatsResponseRecordsItemStatus] = None
    """ For 'Team' chat type only. Team status. """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat last change datetime in ISO 8601 format """
    
    members: Optional[List[ListFavoriteChatsResponseRecordsItemMembersItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListFavoriteChatsResponse(DataClassJsonMixin):
    """
    Required Properties:
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: List[ListFavoriteChatsResponseRecordsItem]
    """ List of chats """
    

class ReadGlipPostResponseType(Enum):
    """ Type of a post """
    
    TextMessage = 'TextMessage'
    PersonJoined = 'PersonJoined'
    PersonsAdded = 'PersonsAdded'

class ReadGlipPostResponseAttachmentsItemType(Enum):
    """ Type of an attachment """
    
    Card = 'Card'
    Event = 'Event'
    Note = 'Note'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadGlipPostResponseAttachmentsItemAuthor(DataClassJsonMixin):
    """ Information about the author """
    
    name: Optional[str] = None
    """ Name of a message author """
    
    uri: Optional[str] = None
    """ Link to an author's name """
    
    icon_uri: Optional[str] = None
    """ Link to an image displayed to the left of an author's name; sized 82x82px """
    

class ReadGlipPostResponseAttachmentsItemFieldsItemStyle(Enum):
    """ Style of width span applied to a field """
    
    Short = 'Short'
    Long = 'Long'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadGlipPostResponseAttachmentsItemFieldsItem(DataClassJsonMixin):
    title: Optional[str] = None
    """ Title of an individual field """
    
    value: Optional[str] = None
    """ Value of an individual field (supports Markdown) """
    
    style: Optional[ReadGlipPostResponseAttachmentsItemFieldsItemStyle] = 'Short'
    """ Style of width span applied to a field """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadGlipPostResponseAttachmentsItemFootnote(DataClassJsonMixin):
    """ Message Footer """
    
    text: Optional[str] = None
    """ Text of a footer """
    
    icon_uri: Optional[str] = None
    """ Link to an icon displayed to the left of a footer; sized 32x32px """
    
    time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    Message creation datetime in ISO 8601 format including timezone, for example
    *2016-03-10T18:07:52.534Z*
    """
    

class ReadGlipPostResponseAttachmentsItemRecurrence(Enum):
    """ Event recurrence settings. """
    
    None_ = 'None'
    Day = 'Day'
    Weekday = 'Weekday'
    Week = 'Week'
    Month = 'Month'
    Year = 'Year'

class ReadGlipPostResponseAttachmentsItemEndingOn(Enum):
    """ Iterations end datetime for periodic events """
    
    None_ = 'None'
    Count = 'Count'
    Date = 'Date'

class ReadGlipPostResponseAttachmentsItemColor(Enum):
    """
    Color of Event title, including its presentation in Calendar; or the color of the side border
    of an interactive message of a Card
    
    Generated by Python OpenAPI Parser
    """
    
    Black = 'Black'
    Red = 'Red'
    Orange = 'Orange'
    Yellow = 'Yellow'
    Green = 'Green'
    Blue = 'Blue'
    Purple = 'Purple'
    Magenta = 'Magenta'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadGlipPostResponseAttachmentsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an attachment """
    
    type: Optional[ReadGlipPostResponseAttachmentsItemType] = 'Card'
    """ Type of an attachment """
    
    fallback: Optional[str] = None
    """
    A string of default text that will be rendered in the case that the client does not support
    Interactive Messages
    """
    
    intro: Optional[str] = None
    """ A pretext to the message """
    
    author: Optional[ReadGlipPostResponseAttachmentsItemAuthor] = None
    """ Information about the author """
    
    title: Optional[str] = None
    """ Message title """
    
    text: Optional[str] = None
    """
    A large string field (up to 1000 chars) to be displayed as the body of a message (Supports
    GlipDown)
    """
    
    image_uri: Optional[str] = None
    """ Link to an image displayed at the bottom of a message """
    
    thumbnail_uri: Optional[str] = None
    """ Link to an image preview displayed to the right of a message (82x82) """
    
    fields: Optional[List[ReadGlipPostResponseAttachmentsItemFieldsItem]] = None
    """ Information on navigation """
    
    footnote: Optional[ReadGlipPostResponseAttachmentsItemFootnote] = None
    """ Message Footer """
    
    creator_id: Optional[str] = None
    """ Internal identifier of a person created an event """
    
    start_time: Optional[str] = None
    """ Datetime of starting an event """
    
    end_time: Optional[str] = None
    """ Datetime of ending an event """
    
    all_day: Optional[bool] = False
    """ Indicates whether an event has some specific time slot or lasts for the whole day(s) """
    
    recurrence: Optional[ReadGlipPostResponseAttachmentsItemRecurrence] = None
    """ Event recurrence settings. """
    
    ending_condition: Optional[str] = None
    """ Condition of ending """
    
    ending_after: Optional[int] = None
    """ Count of iterations. For periodic events only """
    
    ending_on: Optional[ReadGlipPostResponseAttachmentsItemEndingOn] = 'None'
    """ Iterations end datetime for periodic events """
    
    color: Optional[ReadGlipPostResponseAttachmentsItemColor] = 'Black'
    """
    Color of Event title, including its presentation in Calendar; or the color of the side border
    of an interactive message of a Card
    """
    
    location: Optional[str] = None
    """ Event location """
    
    description: Optional[str] = None
    """ Event details """
    
