from ..utils import datetime_decoder
from ..utils import discriminator_decoder
from dataclasses import dataclass
from dataclasses import field
from dataclasses_json.api import DataClassJsonMixin
from dataclasses_json.api import LetterCase
from dataclasses_json.api import dataclass_json
from dataclasses_json.cfg import config
from datetime import date
from datetime import datetime
from datetime import time
from enum import Enum
from typing import *

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetVersionsResponseApiVersionsItem(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI of API versions """
    
    version_string: Optional[str] = None
    """ Version of the RingCentral REST API """
    
    release_date: Optional[str] = None
    """ Release date of this version """
    
    uri_string: Optional[str] = None
    """ URI part determining the current version """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetVersionsResponse(DataClassJsonMixin):
    """
    Example:
        ```json
        {
            "application/json": {
                "uri": "https://platform.ringcentral.com/restapi",
                "apiVersions": [
                    {
                        "uri": "https://platform.ringcentral.com/restapi/v1.0",
                        "versionString": "1.0.34",
                        "releaseDate": "2018-02-09T00:00:00.000Z",
                        "uriString": "v1.0"
                    }
                ],
                "serverVersion": "10.0.4.7854",
                "serverRevision": "32f2a96b769c"
            }
        }
        ```
    
    Generated by Python OpenAPI Parser
    """
    
    uri: Optional[str] = None
    """ Canonical URI of the API version """
    
    api_versions: Optional[List[GetVersionsResponseApiVersionsItem]] = None
    """ Full API version information: uri, number, release date """
    
    server_version: Optional[str] = None
    """ Server version """
    
    server_revision: Optional[str] = None
    """ Server revision """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetVersionResponse(DataClassJsonMixin):
    """
    Example:
        ```json
        {
            "application/json": {
                "uri": "https://platform.ringcentral.com/restapi/v1.0",
                "versionString": "1.0.34",
                "releaseDate": "2018-02-09T00:00:00.000Z",
                "uriString": "v1.0"
            }
        }
        ```
    
    Generated by Python OpenAPI Parser
    """
    
    uri: Optional[str] = None
    """ Canonical URI of the version info resource """
    
    version_string: Optional[str] = None
    """ Version of the RingCentral REST API """
    
    release_date: Optional[str] = None
    """ Release date of this version """
    
    uri_string: Optional[str] = None
    """ URI part determining the current version """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseRecordsItemFromDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseRecordsItemFrom(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[UserCallLogResponseRecordsItemFromDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseRecordsItemExtension(DataClassJsonMixin):
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    

class UserCallLogResponseRecordsItemType(Enum):
    """ Call type """
    
    Voice = 'Voice'
    Fax = 'Fax'

class UserCallLogResponseRecordsItemTransport(Enum):
    """ For 'Detailed' view only. Call transport """
    
    PSTN = 'PSTN'
    VoIP = 'VoIP'

class UserCallLogResponseRecordsItemLegsItemAction(Enum):
    """ Action description of the call operation """
    
    Unknown = 'Unknown'
    Phone_Call = 'Phone Call'
    Phone_Login = 'Phone Login'
    Incoming_Fax = 'Incoming Fax'
    Accept_Call = 'Accept Call'
    External_Application = 'External Application'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    Outgoing_Fax = 'Outgoing Fax'
    CallOut_CallMe = 'CallOut-CallMe'
    Call_Return = 'Call Return'
    Calling_Card = 'Calling Card'
    Monitoring = 'Monitoring'
    Ring_Directly = 'Ring Directly'
    RingOut_Web = 'RingOut Web'
    Text_Relay = 'Text Relay'
    VoIP_Call = 'VoIP Call'
    RingOut_PC = 'RingOut PC'
    RingMe = 'RingMe'
    Transfer = 'Transfer'
    OBJECT_411_Info = '411 Info'
    Emergency = 'Emergency'
    E911_Update = 'E911 Update'
    Support = 'Support'
    RingOut_Mobile = 'RingOut Mobile'
    MeetingsCall = 'MeetingsCall'
    SilentMonitoring = 'SilentMonitoring'

class UserCallLogResponseRecordsItemLegsItemDirection(Enum):
    """ Call direction """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseRecordsItemLegsItemBilling(DataClassJsonMixin):
    """ Billing information related to the call """
    
    cost_included: Optional[float] = None
    """
    Cost per minute, paid and already included in your RingCentral Plan. For example International
    Calls
    """
    
    cost_purchased: Optional[float] = None
    """ Cost per minute, paid and not included in your RingCentral Plan """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseRecordsItemLegsItemDelegate(DataClassJsonMixin):
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    
    Generated by Python OpenAPI Parser
    """
    
    id: Optional[str] = None
    """ Internal identifier of a Secretary extension """
    
    name: Optional[str] = None
    """ Custom name of a Secretary extension """
    

class UserCallLogResponseRecordsItemLegsItemLegType(Enum):
    """ Leg type """
    
    SipForwarding = 'SipForwarding'
    ServiceMinus2 = 'ServiceMinus2'
    ServiceMinus3 = 'ServiceMinus3'
    PstnToSip = 'PstnToSip'
    Accept = 'Accept'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    TestCall = 'TestCall'
    FaxSent = 'FaxSent'
    CallBack = 'CallBack'
    CallingCard = 'CallingCard'
    RingDirectly = 'RingDirectly'
    RingOutWebToSubscriber = 'RingOutWebToSubscriber'
    RingOutWebToCaller = 'RingOutWebToCaller'
    SipToPstnMetered = 'SipToPstnMetered'
    RingOutClientToSubscriber = 'RingOutClientToSubscriber'
    RingOutClientToCaller = 'RingOutClientToCaller'
    RingMe = 'RingMe'
    TransferCall = 'TransferCall'
    SipToPstnUnmetered = 'SipToPstnUnmetered'
    RingOutDeviceToSubscriber = 'RingOutDeviceToSubscriber'
    RingOutDeviceToCaller = 'RingOutDeviceToCaller'
    RingOutOneLegToCaller = 'RingOutOneLegToCaller'
    ExtensionToExtension = 'ExtensionToExtension'
    CallPark = 'CallPark'
    PagingServer = 'PagingServer'
    Hunting = 'Hunting'
    OutgoingFreeSpDl = 'OutgoingFreeSpDl'
    ParkLocation = 'ParkLocation'
    ConferenceCall = 'ConferenceCall'
    MobileApp = 'MobileApp'
    Monitoring = 'Monitoring'
    MoveToConference = 'MoveToConference'
    Unknown = 'Unknown'

class UserCallLogResponseRecordsItemLegsItemType(Enum):
    """ Call type """
    
    Voice = 'Voice'
    Fax = 'Fax'

class UserCallLogResponseRecordsItemLegsItemResult(Enum):
    """ Status description of the call operation """
    
    Unknown = 'Unknown'
    Accepted = 'Accepted'
    CallConnected = 'Call connected'
    In_Progress = 'In Progress'
    Voicemail = 'Voicemail'
    Reply = 'Reply'
    Missed = 'Missed'
    Busy = 'Busy'
    Rejected = 'Rejected'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Blocked = 'Blocked'
    SuspendedAccount = 'Suspended account'
    Call_Failed = 'Call Failed'
    Call_Failure = 'Call Failure'
    Internal_Error = 'Internal Error'
    IP_Phone_Offline = 'IP Phone Offline'
    No_Calling_Credit = 'No Calling Credit'
    Not_Allowed = 'Not Allowed'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    Answered_Not_Accepted = 'Answered Not Accepted'
    Stopped = 'Stopped'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Abandoned = 'Abandoned'
    Declined = 'Declined'
    Received = 'Received'
    FaxOn_Demand = 'Fax on Demand'
    Partial_Receive = 'Partial Receive'
    Receive_Error = 'Receive Error'
    Fax_Receipt_Error = 'Fax Receipt Error'
    Sent = 'Sent'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Send_Error = 'Send Error'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'

class UserCallLogResponseRecordsItemLegsItemReason(Enum):
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    
    Generated by Python OpenAPI Parser
    """
    
    Accepted = 'Accepted'
    Connected = 'Connected'
    Line_Busy = 'line Busy'
    Not_Answered = 'Not Answered'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Stopped = 'Stopped'
    Internal_Error = 'Internal Error'
    No_Credit = 'No Credit'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Bad_Number = 'Bad Number'
    Info_411_Restricted = 'Info 411 Restricted'
    Customer_611_Restricted = 'Customer 611 Restricted'
    No_Digital_Line = 'No Digital Line'
    Failed_Try_Again = 'Failed Try Again'
    Max_Call_Limit = 'Max Call Limit'
    Too_Many_Calls = 'Too Many Calls'
    Calls_Not_Accepted = 'Calls Not Accepted'
    Number_Not_Allowed = 'Number Not Allowed'
    Number_Blocked = 'Number Blocked'
    Number_Disabled = 'Number Disabled'
    Not_Allowed = 'Not Allowed'
    Resource_Error = 'Resource Error'
    Call_Loop = 'Call Loop'
    Fax_Not_Received = 'Fax Not Received'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'
    Fax_Prepare_Error = 'Fax Prepare Error'
    Fax_Save_Error = 'Fax Save Error'
    Fax_Send_Error = 'Fax Send Error'

class UserCallLogResponseRecordsItemLegsItemTransport(Enum):
    """ Call transport """
    
    PSTN = 'PSTN'
    VoIP = 'VoIP'

class UserCallLogResponseRecordsItemLegsItemRecordingType(Enum):
    """ Indicates recording mode used """
    
    Automatic = 'Automatic'
    OnDemand = 'OnDemand'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseRecordsItemLegsItemRecording(DataClassJsonMixin):
    """ Call recording data. Returned if the call is recorded """
    
    id: Optional[str] = None
    """ Internal identifier of the call recording """
    
    uri: Optional[str] = None
    """ Link to the call recording metadata resource """
    
    type: Optional[UserCallLogResponseRecordsItemLegsItemRecordingType] = None
    """ Indicates recording mode used """
    
    content_uri: Optional[str] = None
    """ Link to the call recording binary content """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseRecordsItemLegsItemMessage(DataClassJsonMixin):
    """ Linked message (Fax/Voicemail) """
    
    id: Optional[str] = None
    """ Internal identifier of a message """
    
    type: Optional[str] = None
    """ Type of a message """
    
    uri: Optional[str] = None
    """ Link to a message resource """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseRecordsItemLegsItem(DataClassJsonMixin):
    action: Optional[UserCallLogResponseRecordsItemLegsItemAction] = None
    """ Action description of the call operation """
    
    direction: Optional[UserCallLogResponseRecordsItemLegsItemDirection] = None
    """ Call direction """
    
    billing: Optional[UserCallLogResponseRecordsItemLegsItemBilling] = None
    """ Billing information related to the call """
    
    delegate: Optional[UserCallLogResponseRecordsItemLegsItemDelegate] = None
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    duration: Optional[int] = None
    """ Call duration in seconds """
    
    extension: Optional[dict] = None
    """ Information on extension """
    
    leg_type: Optional[UserCallLogResponseRecordsItemLegsItemLegType] = None
    """ Leg type """
    
    start_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including
    timezone, for example 2016-03-10T18:07:52.534Z
    """
    
    type: Optional[UserCallLogResponseRecordsItemLegsItemType] = None
    """ Call type """
    
    result: Optional[UserCallLogResponseRecordsItemLegsItemResult] = None
    """ Status description of the call operation """
    
    reason: Optional[UserCallLogResponseRecordsItemLegsItemReason] = None
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    """
    
    reason_description: Optional[str] = None
    from_: Optional[dict] = field(metadata=config(field_name='from'), default=None)
    """ Caller information """
    
    to: Optional[dict] = None
    """ Callee information """
    
    transport: Optional[UserCallLogResponseRecordsItemLegsItemTransport] = None
    """ Call transport """
    
    recording: Optional[UserCallLogResponseRecordsItemLegsItemRecording] = None
    """ Call recording data. Returned if the call is recorded """
    
    short_recording: Optional[bool] = None
    """
    Indicates that the recording is too short and therefore wouldn't be returned. The flag is not
    returned if the value is false
    """
    
    master: Optional[bool] = None
    """ Returned for 'Detailed' call log. Specifies if the leg is master-leg """
    
    message: Optional[UserCallLogResponseRecordsItemLegsItemMessage] = None
    """ Linked message (Fax/Voicemail) """
    
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    

class UserCallLogResponseRecordsItemDirection(Enum):
    """ Call direction """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class UserCallLogResponseRecordsItemAction(Enum):
    """ Action description of the call operation """
    
    Unknown = 'Unknown'
    Phone_Login = 'Phone Login'
    Calling_Card = 'Calling Card'
    VoIP_Call = 'VoIP Call'
    Phone_Call = 'Phone Call'
    Paging = 'Paging'
    Hunting = 'Hunting'
    Call_Park = 'Call Park'
    Monitoring = 'Monitoring'
    Text_Relay = 'Text Relay'
    External_Application = 'External Application'
    Park_Location = 'Park Location'
    CallOut_CallMe = 'CallOut-CallMe'
    Conference_Call = 'Conference Call'
    Move = 'Move'
    RC_Meetings = 'RC Meetings'
    Accept_Call = 'Accept Call'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    RingMe = 'RingMe'
    Transfer = 'Transfer'
    Call_Return = 'Call Return'
    Ring_Directly = 'Ring Directly'
    RingOut_Web = 'RingOut Web'
    RingOut_PC = 'RingOut PC'
    RingOut_Mobile = 'RingOut Mobile'
    Emergency = 'Emergency'
    E911_Update = 'E911 Update'
    Support = 'Support'
    Incoming_Fax = 'Incoming Fax'
    Outgoing_Fax = 'Outgoing Fax'

class UserCallLogResponseRecordsItemResult(Enum):
    """ Status description of the call operation """
    
    Unknown = 'Unknown'
    Accepted = 'Accepted'
    CallConnected = 'Call connected'
    In_Progress = 'In Progress'
    Voicemail = 'Voicemail'
    Reply = 'Reply'
    Missed = 'Missed'
    Busy = 'Busy'
    Rejected = 'Rejected'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Blocked = 'Blocked'
    SuspendedAccount = 'Suspended account'
    Call_Failed = 'Call Failed'
    Call_Failure = 'Call Failure'
    Internal_Error = 'Internal Error'
    IP_Phone_Offline = 'IP Phone Offline'
    No_Calling_Credit = 'No Calling Credit'
    Not_Allowed = 'Not Allowed'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    Answered_Not_Accepted = 'Answered Not Accepted'
    Stopped = 'Stopped'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Abandoned = 'Abandoned'
    Declined = 'Declined'
    Received = 'Received'
    FaxOn_Demand = 'Fax on Demand'
    Partial_Receive = 'Partial Receive'
    Receive_Error = 'Receive Error'
    Fax_Receipt_Error = 'Fax Receipt Error'
    Sent = 'Sent'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Send_Error = 'Send Error'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'

class UserCallLogResponseRecordsItemReason(Enum):
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    
    Generated by Python OpenAPI Parser
    """
    
    Accepted = 'Accepted'
    Connected = 'Connected'
    Line_Busy = 'line Busy'
    Not_Answered = 'Not Answered'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Stopped = 'Stopped'
    Internal_Error = 'Internal Error'
    No_Credit = 'No Credit'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Bad_Number = 'Bad Number'
    Info_411_Restricted = 'Info 411 Restricted'
    Customer_611_Restricted = 'Customer 611 Restricted'
    No_Digital_Line = 'No Digital Line'
    Failed_Try_Again = 'Failed Try Again'
    Max_Call_Limit = 'Max Call Limit'
    Too_Many_Calls = 'Too Many Calls'
    Calls_Not_Accepted = 'Calls Not Accepted'
    Number_Not_Allowed = 'Number Not Allowed'
    Number_Blocked = 'Number Blocked'
    Number_Disabled = 'Number Disabled'
    Resource_Error = 'Resource Error'
    Call_Loop = 'Call Loop'
    Fax_Not_Received = 'Fax Not Received'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'
    Fax_Prepare_Error = 'Fax Prepare Error'
    Fax_Save_Error = 'Fax Save Error'
    Fax_Send_Error = 'Fax Send Error'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a cal log record """
    
    uri: Optional[str] = None
    """ Canonical URI of a call log record """
    
    session_id: Optional[str] = None
    """ Internal identifier of a call session """
    
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    
    from_: Optional[UserCallLogResponseRecordsItemFrom] = field(metadata=config(field_name='from'), default=None)
    extension: Optional[UserCallLogResponseRecordsItemExtension] = None
    type: Optional[UserCallLogResponseRecordsItemType] = None
    """ Call type """
    
    transport: Optional[UserCallLogResponseRecordsItemTransport] = None
    """ For 'Detailed' view only. Call transport """
    
    legs: Optional[List[UserCallLogResponseRecordsItemLegsItem]] = None
    """ For 'Detailed' view only. Leg description """
    
    billing: Optional[dict] = None
    """ Billing information related to the call """
    
    direction: Optional[UserCallLogResponseRecordsItemDirection] = None
    """ Call direction """
    
    message: Optional[dict] = None
    """ Linked message (Fax/Voicemail) """
    
    start_time: Optional[str] = None
    """
    The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including
    timezone, for example 2016-03-10T18:07:52.534Z
    """
    
    delegate: Optional[dict] = None
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    """
    
    deleted: Optional[bool] = None
    """ Indicates whether the record is deleted. Returned for deleted records, for ISync requests """
    
    duration: Optional[int] = None
    """ Call duration in seconds """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    For 'Detailed' view only. The datetime when the call log record was modified in (ISO
    8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
    2016-03-10T18:07:52.534Z
    """
    
    recording: Optional[dict] = None
    """ Call recording data. Returned if a call is recorded """
    
    short_recording: Optional[bool] = None
    """
    Indicates that the recording is too short and therefore wouldn't be returned. The flag is not
    returned if the value is false
    """
    
    action: Optional[UserCallLogResponseRecordsItemAction] = None
    """ Action description of the call operation """
    
    result: Optional[UserCallLogResponseRecordsItemResult] = None
    """ Status description of the call operation """
    
    reason: Optional[UserCallLogResponseRecordsItemReason] = None
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    """
    
    reason_description: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponseNavigation(DataClassJsonMixin):
    """ Information on navigation """
    
    first_page: Optional[UserCallLogResponseNavigationFirstPage] = None
    """ Canonical URI for the first page of the list """
    
    next_page: Optional[dict] = None
    """ Canonical URI for the next page of the list """
    
    previous_page: Optional[dict] = None
    """ Canonical URI for the previous page of the list """
    
    last_page: Optional[dict] = None
    """ Canonical URI for the last page of the list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponsePaging(DataClassJsonMixin):
    """ Information on paging """
    
    page: Optional[int] = None
    """
    The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result
    is empty (because non-existent page was specified or perPage=0 was requested)
    """
    
    per_page: Optional[int] = 100
    """
    Current page size, describes how many items are in each page. Maximum value is 1000. If perPage
    value in the request is greater than 1000, the maximum value (1000) is applied
    """
    
    page_start: Optional[int] = None
    """
    The zero-based number of the first element on the current page. Omitted if the page is omitted
    or result is empty
    """
    
    page_end: Optional[int] = None
    """
    The zero-based index of the last element on the current page. Omitted if the page is omitted or
    result is empty
    """
    
    total_pages: Optional[int] = None
    """
    The total number of pages in a dataset. May be omitted for some resources due to performance
    reasons
    """
    
    total_elements: Optional[int] = None
    """
    The total number of elements in a dataset. May be omitted for some resource due to performance
    reasons
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserCallLogResponse(DataClassJsonMixin):
    """
    Required Properties:
     - navigation
     - paging
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: List[UserCallLogResponseRecordsItem]
    """ List of call log records """
    
    navigation: UserCallLogResponseNavigation
    """ Information on navigation """
    
    paging: UserCallLogResponsePaging
    """ Information on paging """
    

class CompanyCallLogRecordTransport(Enum):
    """ Call transport """
    
    PSTN = 'PSTN'
    VoIP = 'VoIP'

class CompanyCallLogRecordType(Enum):
    """ Call type """
    
    Voice = 'Voice'
    Fax = 'Fax'

class CompanyCallLogRecordDirection(Enum):
    """ Call direction """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class CompanyCallLogRecordAction(Enum):
    """ Action description of the call operation """
    
    Unknown = 'Unknown'
    Phone_Login = 'Phone Login'
    Calling_Card = 'Calling Card'
    VoIP_Call = 'VoIP Call'
    Phone_Call = 'Phone Call'
    Paging = 'Paging'
    Hunting = 'Hunting'
    Call_Park = 'Call Park'
    Monitoring = 'Monitoring'
    Text_Relay = 'Text Relay'
    External_Application = 'External Application'
    Park_Location = 'Park Location'
    CallOut_CallMe = 'CallOut-CallMe'
    Conference_Call = 'Conference Call'
    Move = 'Move'
    RC_Meetings = 'RC Meetings'
    Accept_Call = 'Accept Call'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    RingMe = 'RingMe'
    Transfer = 'Transfer'
    Call_Return = 'Call Return'
    Ring_Directly = 'Ring Directly'
    RingOut_Web = 'RingOut Web'
    RingOut_PC = 'RingOut PC'
    RingOut_Mobile = 'RingOut Mobile'
    Emergency = 'Emergency'
    E911_Update = 'E911 Update'
    Support = 'Support'
    Incoming_Fax = 'Incoming Fax'
    Outgoing_Fax = 'Outgoing Fax'

class CompanyCallLogRecordResult(Enum):
    """ Status description of the call operation """
    
    Unknown = 'Unknown'
    Accepted = 'Accepted'
    CallConnected = 'Call connected'
    In_Progress = 'In Progress'
    Voicemail = 'Voicemail'
    Reply = 'Reply'
    Missed = 'Missed'
    Busy = 'Busy'
    Rejected = 'Rejected'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Blocked = 'Blocked'
    SuspendedAccount = 'Suspended account'
    Call_Failed = 'Call Failed'
    Call_Failure = 'Call Failure'
    Internal_Error = 'Internal Error'
    IP_Phone_Offline = 'IP Phone Offline'
    No_Calling_Credit = 'No Calling Credit'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    Answered_Not_Accepted = 'Answered Not Accepted'
    Stopped = 'Stopped'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Abandoned = 'Abandoned'
    Declined = 'Declined'
    Received = 'Received'
    FaxOn_Demand = 'Fax on Demand'
    Partial_Receive = 'Partial Receive'
    Receive_Error = 'Receive Error'
    Fax_Receipt_Error = 'Fax Receipt Error'
    Sent = 'Sent'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Send_Error = 'Send Error'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'

class CompanyCallLogRecordReason(Enum):
    Accepted = 'Accepted'
    Connected = 'Connected'
    Line_Busy = 'line Busy'
    Not_Answered = 'Not Answered'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Stopped = 'Stopped'
    Internal_Error = 'Internal Error'
    No_Credit = 'No Credit'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Bad_Number = 'Bad Number'
    Info_411_Restricted = 'Info 411 Restricted'
    Customer_611_Restricted = 'Customer 611 Restricted'
    No_Digital_Line = 'No Digital Line'
    Failed_Try_Again = 'Failed Try Again'
    Max_Call_Limit = 'Max Call Limit'
    Too_Many_Calls = 'Too Many Calls'
    Calls_Not_Accepted = 'Calls Not Accepted'
    Number_Not_Allowed = 'Number Not Allowed'
    Number_Blocked = 'Number Blocked'
    Number_Disabled = 'Number Disabled'
    Resource_Error = 'Resource Error'
    Call_Loop = 'Call Loop'
    Fax_Not_Received = 'Fax Not Received'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'
    Fax_Prepare_Error = 'Fax Prepare Error'
    Fax_Save_Error = 'Fax Save Error'
    Fax_Send_Error = 'Fax Send Error'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CompanyCallLogRecord(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a cal log record """
    
    uri: Optional[str] = None
    """ Canonical URI of a call log record """
    
    session_id: Optional[str] = None
    """ Internal identifier of a call session """
    
    extension: Optional[dict] = None
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    
    transport: Optional[CompanyCallLogRecordTransport] = None
    """ Call transport """
    
    from_: Optional[dict] = field(metadata=config(field_name='from'), default=None)
    """ Caller information """
    
    to: Optional[dict] = None
    """ Callee information """
    
    type: Optional[CompanyCallLogRecordType] = None
    """ Call type """
    
    direction: Optional[CompanyCallLogRecordDirection] = None
    """ Call direction """
    
    message: Optional[dict] = None
    """ Linked message (Fax/Voicemail) """
    
    delegate: Optional[dict] = None
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    """
    
    deleted: Optional[bool] = None
    """ Indicates whether the record is deleted. Returned for deleted records, for ISync requests """
    
    action: Optional[CompanyCallLogRecordAction] = None
    """ Action description of the call operation """
    
    result: Optional[CompanyCallLogRecordResult] = None
    """ Status description of the call operation """
    
    reason: Optional[CompanyCallLogRecordReason] = None
    reason_description: Optional[str] = None
    start_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including
    timezone, for example 2016-03-10T18:07:52.534Z
    """
    
    duration: Optional[int] = None
    """ Call duration in seconds """
    
    recording: Optional[dict] = None
    """ Call recording data. Returned if a call is recorded """
    
    short_recording: Optional[bool] = None
    """
    Indicates that the recording is too short and therefore wouldn't be returned. The flag is not
    returned if the value is false
    """
    
    legs: Optional[list] = None
    """ For 'Detailed' view only. Leg description """
    
    billing: Optional[dict] = None
    """ Billing information related to the call. Returned for 'Detailed' view only """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    For 'Detailed' view only. The datetime when the call log record was modified in (ISO
    8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
    2016-03-10T18:07:52.534Z
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CompanyActiveCallsResponse(DataClassJsonMixin):
    """
    Required Properties:
     - navigation
     - paging
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: list
    """ List of call log records """
    
    navigation: dict
    """ Information on navigation """
    
    paging: dict
    """ Information on paging """
    
    uri: Optional[str] = None
    """ Link to the list of company active call records """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetCallRecordingResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a call recording """
    
    content_uri: Optional[str] = None
    """ Link to a call recording binary content """
    
    content_type: Optional[str] = None
    """ Call recording file format. Supported format is audio/x-wav """
    
    duration: Optional[int] = None
    """ Recorded call duration """
    

class CallLogSyncSyncInfoSyncType(Enum):
    """ Type of synchronization """
    
    FSync = 'FSync'
    ISync = 'ISync'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallLogSyncSyncInfo(DataClassJsonMixin):
    """ Sync information (type, token and time) """
    
    sync_type: Optional[CallLogSyncSyncInfoSyncType] = None
    """ Type of synchronization """
    
    sync_token: Optional[str] = None
    """ Synchronization token """
    
    sync_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    The last synchronization datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format
    including timezone, for example 2016-03-10T18:07:52.534Z
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallLogSync(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to the list of call log records with sync information """
    
    records: Optional[list] = None
    """
    List of call log records with synchronization information. For ISync the total number of
    returned records is limited to 250; this includes both new records and the old ones, specified
    by the recordCount parameter
    """
    
    sync_info: Optional[CallLogSyncSyncInfo] = None
    """ Sync information (type, token and time) """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UserActiveCallsResponse(DataClassJsonMixin):
    """
    Required Properties:
     - navigation
     - paging
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: list
    """ List of call log records """
    
    navigation: dict
    """ Information on navigation """
    
    paging: dict
    """ Information on paging """
    
    uri: Optional[str] = None
    """ Link to the list of user active call records """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AccountCallLogResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to the list of company call log records """
    
    records: Optional[list] = None
    """ List of call log records """
    
    navigation: Optional[dict] = None
    """ Information on navigation """
    
    paging: Optional[dict] = None
    """ Information on paging """
    

class AccountCallLogSyncResponseSyncInfoSyncType(Enum):
    """ Type of synchronization """
    
    FSync = 'FSync'
    ISync = 'ISync'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AccountCallLogSyncResponseSyncInfo(DataClassJsonMixin):
    """ Sync information (type, token and time) """
    
    sync_type: Optional[AccountCallLogSyncResponseSyncInfoSyncType] = None
    """ Type of synchronization """
    
    sync_token: Optional[str] = None
    """ Synchronization token """
    
    sync_time: Optional[str] = None
    """
    Time of last synchronization in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format
    including timezone, for example *2016-03-10T18:07:52.534Z*
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AccountCallLogSyncResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to account call log sync resource """
    
    records: Optional[list] = None
    """
    List of call log records with synchronization information. For 'ISync' the total number of
    returned records is limited to 250; this includes both new records and the old ones, specified
    by the recordCount parameter
    """
    
    sync_info: Optional[AccountCallLogSyncResponseSyncInfo] = None
    """ Sync information (type, token and time) """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class FaxResponseFrom(DataClassJsonMixin):
    """ Sender information """
    
    phone_number: Optional[str] = None
    name: Optional[str] = None
    location: Optional[str] = None

class FaxResponseToItemMessageStatus(Enum):
    Sent = 'Sent'
    SendingFailed = 'SendingFailed'
    Queued = 'Queued'

class FaxResponseToItemFaxErrorCode(Enum):
    Undefined = 'Undefined'
    NoFaxSendPermission = 'NoFaxSendPermission'
    NoInternationalPermission = 'NoInternationalPermission'
    NoFaxMachine = 'NoFaxMachine'
    NoAnswer = 'NoAnswer'
    LineBusy = 'LineBusy'
    CallerHungUp = 'CallerHungUp'
    NotEnoughCredits = 'NotEnoughCredits'
    SentPartially = 'SentPartially'
    InternationalCallingDisabled = 'InternationalCallingDisabled'
    DestinationCountryDisabled = 'DestinationCountryDisabled'
    UnknownCountryCode = 'UnknownCountryCode'
    NotAccepted = 'NotAccepted'
    InvalidNumber = 'InvalidNumber'
    CallDeclined = 'CallDeclined'
    TooManyCallsPerLine = 'TooManyCallsPerLine'
    CallFailed = 'CallFailed'
    RenderingFailed = 'RenderingFailed'
    TooManyPages = 'TooManyPages'
    ReturnToDBQueue = 'ReturnToDBQueue'
    NoCallTime = 'NoCallTime'
    WrongNumber = 'WrongNumber'
    ProhibitedNumber = 'ProhibitedNumber'
    InternalError = 'InternalError'
    FaxSendingProhibited = 'FaxSendingProhibited'
    ThePhoneIsBlacklisted = 'ThePhoneIsBlacklisted'
    UserNotFound = 'UserNotFound'
    ConvertError = 'ConvertError'
    DBGeneralError = 'DBGeneralError'
    SkypeBillingFailed = 'SkypeBillingFailed'
    AccountSuspended = 'AccountSuspended'
    ProhibitedDestination = 'ProhibitedDestination'
    InternationalDisabled = 'InternationalDisabled'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class FaxResponseToItem(DataClassJsonMixin):
    phone_number: Optional[str] = None
    name: Optional[str] = None
    location: Optional[str] = None
    message_status: Optional[FaxResponseToItemMessageStatus] = None
    fax_error_code: Optional[FaxResponseToItemFaxErrorCode] = None

class FaxResponseReadStatus(Enum):
    """ Message read status """
    
    Read = 'Read'
    Unread = 'Unread'

class FaxResponsePriority(Enum):
    """ Message priority """
    
    Normal = 'Normal'
    High = 'High'

class FaxResponseAttachmentsItemType(Enum):
    """ Type of message attachment """
    
    AudioRecording = 'AudioRecording'
    AudioTranscription = 'AudioTranscription'
    Text = 'Text'
    SourceDocument = 'SourceDocument'
    RenderedDocument = 'RenderedDocument'
    MmsAttachment = 'MmsAttachment'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class FaxResponseAttachmentsItem(DataClassJsonMixin):
    id: Optional[int] = None
    """ Internal identifier of a message attachment """
    
    uri: Optional[str] = None
    """ Canonical URI of a message attachment """
    
    type: Optional[FaxResponseAttachmentsItemType] = None
    """ Type of message attachment """
    
    content_type: Optional[str] = None
    """ MIME type for a given attachment, for instance 'audio/wav' """
    
    vm_duration: Optional[int] = None
    """ Voicemail only Duration of the voicemail in seconds """
    
    filename: Optional[str] = None
    """ Name of a file attached """
    
    size: Optional[int] = None
    """ Size of attachment in bytes """
    

class FaxResponseDirection(Enum):
    """ Message direction """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class FaxResponseAvailability(Enum):
    """
    Message availability status. Message in 'Deleted' state is still preserved with all its
    attachments and can be restored. 'Purged' means that all attachments are already deleted and
    the message itself is about to be physically deleted shortly
    
    Generated by Python OpenAPI Parser
    """
    
    Alive = 'Alive'
    Deleted = 'Deleted'
    Purged = 'Purged'

class FaxResponseMessageStatus(Enum):
    """
    Message status. 'Queued' - the message is queued for sending; 'Sent' - a message is
    successfully sent; 'SendingFailed' - a message sending attempt has failed; 'Received' - a
    message is received (inbound messages have this status by default)
    
    Generated by Python OpenAPI Parser
    """
    
    Queued = 'Queued'
    Sent = 'Sent'
    SendingFailed = 'SendingFailed'
    Received = 'Received'

class FaxResponseFaxResolution(Enum):
    """
    Resolution of a fax message. ('High' for black and white image scanned at 200 dpi, 'Low' for
    black and white image scanned at 100 dpi)
    
    Generated by Python OpenAPI Parser
    """
    
    High = 'High'
    Low = 'Low'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class FaxResponse(DataClassJsonMixin):
    id: Optional[int] = None
    """ Internal identifier of a message """
    
    uri: Optional[str] = None
    """ Canonical URI of a message """
    
    type: Optional[str] = None
    """ Message type - 'Fax' """
    
    from_: Optional[FaxResponseFrom] = field(metadata=config(field_name='from'), default=None)
    """ Sender information """
    
    to: Optional[List[FaxResponseToItem]] = None
    """ Recipient information """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    Message creation datetime in ISO 8601 format including timezone, for example
    2016-03-10T18:07:52.534Z
    """
    
    read_status: Optional[FaxResponseReadStatus] = None
    """ Message read status """
    
    priority: Optional[FaxResponsePriority] = None
    """ Message priority """
    
    attachments: Optional[List[FaxResponseAttachmentsItem]] = None
    """ The list of message attachments """
    
    direction: Optional[FaxResponseDirection] = None
    """ Message direction """
    
    availability: Optional[FaxResponseAvailability] = None
    """
    Message availability status. Message in 'Deleted' state is still preserved with all its
    attachments and can be restored. 'Purged' means that all attachments are already deleted and
    the message itself is about to be physically deleted shortly
    """
    
    message_status: Optional[FaxResponseMessageStatus] = None
    """
    Message status. 'Queued' - the message is queued for sending; 'Sent' - a message is
    successfully sent; 'SendingFailed' - a message sending attempt has failed; 'Received' - a
    message is received (inbound messages have this status by default)
    """
    
    fax_resolution: Optional[FaxResponseFaxResolution] = None
    """
    Resolution of a fax message. ('High' for black and white image scanned at 200 dpi, 'Low' for
    black and white image scanned at 100 dpi)
    """
    
    fax_page_count: Optional[int] = None
    """ Page count in a fax message """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    Datetime when the message was modified on server in ISO 8601 format including timezone, for
    example 2016-03-10T18:07:52.534Z
    """
    
    cover_index: Optional[int] = None
    """
    Cover page identifier. For the list of available cover page identifiers please call the Fax
    Cover Pages method
    """
    
    cover_page_text: Optional[str] = None
    """
    Cover page text, entered by the fax sender and printed on the cover page. Maximum length is
    limited to 1024 symbols
    """
    

class GetMessageInfoResponseAvailability(Enum):
    """
    Message availability status. Message in 'Deleted' state is still preserved with all its
    attachments and can be restored. 'Purged' means that all attachments are already deleted and
    the message itself is about to be physically deleted shortly
    
    Generated by Python OpenAPI Parser
    """
    
    Alive = 'Alive'
    Deleted = 'Deleted'
    Purged = 'Purged'

class GetMessageInfoResponseDirection(Enum):
    """
    Message direction. Note that for some message types not all directions are allowed. For example
    voicemail messages can be only inbound
    
    Generated by Python OpenAPI Parser
    """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class GetMessageInfoResponseFaxResolution(Enum):
    """
    Fax only. Resolution of a fax message. 'High' for black and white image scanned at 200 dpi,
    'Low' for black and white image scanned at 100 dpi
    
    Generated by Python OpenAPI Parser
    """
    
    High = 'High'
    Low = 'Low'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetMessageInfoResponseFrom(DataClassJsonMixin):
    """ Sender information """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    

class GetMessageInfoResponseMessageStatus(Enum):
    """
    Message status. Different message types may have different allowed status values. For outbound
    faxes the aggregated message status is returned: If status for at least one recipient is
    'Queued', then 'Queued' value is returned If status for at least one recipient is
    'SendingFailed', then 'SendingFailed' value is returned In other cases Sent status is returned
    
    Generated by Python OpenAPI Parser
    """
    
    Queued = 'Queued'
    Sent = 'Sent'
    Delivered = 'Delivered'
    DeliveryFailed = 'DeliveryFailed'
    SendingFailed = 'SendingFailed'
    Received = 'Received'

class GetMessageInfoResponsePriority(Enum):
    """ Message priority """
    
    Normal = 'Normal'
    High = 'High'

class GetMessageInfoResponseReadStatus(Enum):
    """ Message read status """
    
    Read = 'Read'
    Unread = 'Unread'

class GetMessageInfoResponseToItemMessageStatus(Enum):
    """ Status of a message. Returned for outbound fax messages only """
    
    Queued = 'Queued'
    Sent = 'Sent'
    Delivered = 'Delivered'
    DeliveryFailed = 'DeliveryFailed'
    SendingFailed = 'SendingFailed'
    Received = 'Received'

class GetMessageInfoResponseToItemFaxErrorCode(Enum):
    """
    Error code returned in case of fax sending failure. Returned if messageStatus value is
    'SendingFailed'. Supported for fax messages only
    
    Generated by Python OpenAPI Parser
    """
    
    AllLinesInUse = 'AllLinesInUse'
    Undefined = 'Undefined'
    NoFaxSendPermission = 'NoFaxSendPermission'
    NoInternationalPermission = 'NoInternationalPermission'
    NoFaxMachine = 'NoFaxMachine'
    NoAnswer = 'NoAnswer'
    LineBusy = 'LineBusy'
    CallerHungUp = 'CallerHungUp'
    NotEnoughCredits = 'NotEnoughCredits'
    SentPartially = 'SentPartially'
    InternationalCallingDisabled = 'InternationalCallingDisabled'
    DestinationCountryDisabled = 'DestinationCountryDisabled'
    UnknownCountryCode = 'UnknownCountryCode'
    NotAccepted = 'NotAccepted'
    InvalidNumber = 'InvalidNumber'
    CallDeclined = 'CallDeclined'
    TooManyCallsPerLine = 'TooManyCallsPerLine'
    CallFailed = 'CallFailed'
    RenderingFailed = 'RenderingFailed'
    TooManyPages = 'TooManyPages'
    ReturnToDBQueue = 'ReturnToDBQueue'
    NoCallTime = 'NoCallTime'
    WrongNumber = 'WrongNumber'
    ProhibitedNumber = 'ProhibitedNumber'
    InternalError = 'InternalError'
    FaxSendingProhibited = 'FaxSendingProhibited'
    ThePhoneIsBlacklisted = 'ThePhoneIsBlacklisted'
    UserNotFound = 'UserNotFound'
    ConvertError = 'ConvertError'
    DBGeneralError = 'DBGeneralError'
    SkypeBillingFailed = 'SkypeBillingFailed'
    AccountSuspended = 'AccountSuspended'
    ProhibitedDestination = 'ProhibitedDestination'
    InternationalDisabled = 'InternationalDisabled'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetMessageInfoResponseToItem(DataClassJsonMixin):
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    target: Optional[bool] = None
    """
    'True' specifies that message is sent exactly to this recipient. Returned in to field for group
    MMS. Useful if one extension has several phone numbers
    """
    
    message_status: Optional[GetMessageInfoResponseToItemMessageStatus] = None
    """ Status of a message. Returned for outbound fax messages only """
    
    fax_error_code: Optional[GetMessageInfoResponseToItemFaxErrorCode] = None
    """
    Error code returned in case of fax sending failure. Returned if messageStatus value is
    'SendingFailed'. Supported for fax messages only
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    

class GetMessageInfoResponseType(Enum):
    """ Message type """
    
    Fax = 'Fax'
    SMS = 'SMS'
    VoiceMail = 'VoiceMail'
    Pager = 'Pager'
    Text = 'Text'

class GetMessageInfoResponseVmTranscriptionStatus(Enum):
    """
    Voicemail only. Status of voicemail to text transcription. If VoicemailToText feature is not
    activated for account, the 'NotAvailable' value is returned
    
    Generated by Python OpenAPI Parser
    """
    
    NotAvailable = 'NotAvailable'
    InProgress = 'InProgress'
    TimedOut = 'TimedOut'
    Completed = 'Completed'
    CompletedPartially = 'CompletedPartially'
    Failed = 'Failed'
    Unknown = 'Unknown'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetMessageInfoResponse(DataClassJsonMixin):
    id: Optional[int] = None
    """ Internal identifier of a message """
    
    uri: Optional[str] = None
    """ Canonical URI of a message """
    
    attachments: Optional[list] = None
    """ The list of message attachments """
    
    availability: Optional[GetMessageInfoResponseAvailability] = None
    """
    Message availability status. Message in 'Deleted' state is still preserved with all its
    attachments and can be restored. 'Purged' means that all attachments are already deleted and
    the message itself is about to be physically deleted shortly
    """
    
    conversation_id: Optional[int] = None
    """ SMS and Pager only. Identifier of a conversation the message belongs to """
    
    conversation: Optional[dict] = None
    """ SMS and Pager only. Identifier of a conversation the message belongs to """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    Message creation datetime in ISO 8601 format including timezone, for example
    2016-03-10T18:07:52.534Z
    """
    
    delivery_error_code: Optional[str] = None
    """ SMS only. Delivery error code returned by gateway """
    
    direction: Optional[GetMessageInfoResponseDirection] = None
    """
    Message direction. Note that for some message types not all directions are allowed. For example
    voicemail messages can be only inbound
    """
    
    fax_page_count: Optional[int] = None
    """ Fax only. Page count in a fax message """
    
    fax_resolution: Optional[GetMessageInfoResponseFaxResolution] = None
    """
    Fax only. Resolution of a fax message. 'High' for black and white image scanned at 200 dpi,
    'Low' for black and white image scanned at 100 dpi
    """
    
    from_: Optional[GetMessageInfoResponseFrom] = field(metadata=config(field_name='from'), default=None)
    """ Sender information """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    The datetime when the message was modified on server in ISO 8601 format including timezone, for
    example 2016-03-10T18:07:52.534Z
    """
    
    message_status: Optional[GetMessageInfoResponseMessageStatus] = None
    """
    Message status. Different message types may have different allowed status values. For outbound
    faxes the aggregated message status is returned: If status for at least one recipient is
    'Queued', then 'Queued' value is returned If status for at least one recipient is
    'SendingFailed', then 'SendingFailed' value is returned In other cases Sent status is returned
    """
    
    pg_to_department: Optional[bool] = None
    """ 'Pager' only. 'True' if at least one of the message recipients is 'Department' extension """
    
    priority: Optional[GetMessageInfoResponsePriority] = None
    """ Message priority """
    
    read_status: Optional[GetMessageInfoResponseReadStatus] = None
    """ Message read status """
    
    sms_delivery_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    SMS only. The datetime when outbound SMS was delivered to recipient's handset in ISO 8601
    format including timezone, for example 2016-03-10T18:07:52.534Z. It is filled only if the
    carrier sends a delivery receipt to RingCentral
    """
    
    sms_sending_attempts_count: Optional[int] = None
    """
    SMS only. Number of attempts made to send an outbound SMS to the gateway (if gateway is
    temporary unavailable)
    """
    
    subject: Optional[str] = None
    """
    Message subject. For SMS and Pager messages it replicates message text which is also returned
    as an attachment
    """
    
    to: Optional[List[GetMessageInfoResponseToItem]] = None
    """ Recipient information """
    
    type: Optional[GetMessageInfoResponseType] = None
    """ Message type """
    
    vm_transcription_status: Optional[GetMessageInfoResponseVmTranscriptionStatus] = None
    """
    Voicemail only. Status of voicemail to text transcription. If VoicemailToText feature is not
    activated for account, the 'NotAvailable' value is returned
    """
    
    cover_index: Optional[int] = None
    """
    Cover page identifier. For the list of available cover page identifiers please call the Fax
    Cover Pages method
    """
    
    cover_page_text: Optional[str] = None
    """
    Cover page text, entered by the fax sender and printed on the cover page. Maximum length is
    limited to 1024 symbols
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateInternalTextMessageRequestFrom(DataClassJsonMixin):
    """ Sender of a pager message. """
    
    extension_id: Optional[str] = None
    """
    Extension identifier
    
    Example: `123456789`
    """
    
    extension_number: Optional[str] = None
    """
    Extension number
    
    Example: `105`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateInternalTextMessageRequest(DataClassJsonMixin):
    """
    Required Properties:
     - text
    
    Generated by Python OpenAPI Parser
    """
    
    text: str
    """
    Text of a pager message. Max length is 1024 symbols (2-byte UTF-16 encoded). If a character is
    encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum
    message length to 512 symbols
    
    Example: `hello world`
    """
    
    from_: Optional[CreateInternalTextMessageRequestFrom] = field(metadata=config(field_name='from'), default=None)
    """ Sender of a pager message. """
    
    reply_on: Optional[int] = None
    """ Internal identifier of a message this message replies to """
    
    to: Optional[List[dict]] = None
    """ Optional if replyOn parameter is specified. Receiver of a pager message. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListFaxCoverPagesResponseRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """
    Internal identifier of a fax cover page. The possible value range is 0-13 (for language setting
    en-US) and 0, 15-28 (for all other languages)
    """
    
    name: Optional[str] = None
    """ Name of a fax cover page pattern """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListFaxCoverPagesResponseNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListFaxCoverPagesResponseNavigation(DataClassJsonMixin):
    """ Information on navigation """
    
    first_page: Optional[ListFaxCoverPagesResponseNavigationFirstPage] = None
    """ Canonical URI for the first page of the list """
    
    next_page: Optional[dict] = None
    """ Canonical URI for the next page of the list """
    
    previous_page: Optional[dict] = None
    """ Canonical URI for the previous page of the list """
    
    last_page: Optional[dict] = None
    """ Canonical URI for the last page of the list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListFaxCoverPagesResponsePaging(DataClassJsonMixin):
    """ Information on paging """
    
    page: Optional[int] = None
    """
    The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result
    is empty (because non-existent page was specified or perPage=0 was requested)
    """
    
    per_page: Optional[int] = None
    """
    Current page size, describes how many items are in each page. Default value is 100. Maximum
    value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000)
    is applied
    """
    
    page_start: Optional[int] = None
    """
    The zero-based number of the first element on the current page. Omitted if the page is omitted
    or result is empty
    """
    
    page_end: Optional[int] = None
    """
    The zero-based index of the last element on the current page. Omitted if the page is omitted or
    result is empty
    """
    
    total_pages: Optional[int] = None
    """
    The total number of pages in a dataset. May be omitted for some resources due to performance
    reasons
    """
    
    total_elements: Optional[int] = None
    """
    The total number of elements in a dataset. May be omitted for some resource due to performance
    reasons
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListFaxCoverPagesResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    records: Optional[List[ListFaxCoverPagesResponseRecordsItem]] = None
    navigation: Optional[ListFaxCoverPagesResponseNavigation] = None
    """ Information on navigation """
    
    paging: Optional[ListFaxCoverPagesResponsePaging] = None
    """ Information on paging """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetMessageList(DataClassJsonMixin):
    """
    Required Properties:
     - navigation
     - paging
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: list
    """ List of records with message information """
    
    navigation: dict
    """ Information on navigation """
    
    paging: dict
    """ Information on paging """
    
    uri: Optional[str] = None
    """ Link to the list of user messages """
    

class GetMessageMultiResponseItemBodyAvailability(Enum):
    """
    Message availability status. Message in 'Deleted' state is still preserved with all its
    attachments and can be restored. 'Purged' means that all attachments are already deleted and
    the message itself is about to be physically deleted shortly
    
    Generated by Python OpenAPI Parser
    """
    
    Alive = 'Alive'
    Deleted = 'Deleted'
    Purged = 'Purged'

class GetMessageMultiResponseItemBodyDirection(Enum):
    """
    Message direction. Note that for some message types not all directions are allowed. For example
    voicemail messages can be only inbound
    
    Generated by Python OpenAPI Parser
    """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class GetMessageMultiResponseItemBodyFaxResolution(Enum):
    """
    Fax only. Resolution of a fax message. 'High' for black and white image scanned at 200 dpi,
    'Low' for black and white image scanned at 100 dpi
    
    Generated by Python OpenAPI Parser
    """
    
    High = 'High'
    Low = 'Low'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetMessageMultiResponseItemBodyFrom(DataClassJsonMixin):
    """ Sender information """
    
    extension_number: Optional[str] = None
    extension_id: Optional[str] = None
    name: Optional[str] = None

class GetMessageMultiResponseItemBodyMessageStatus(Enum):
    """
    Message status. Different message types may have different allowed status values.For outbound
    faxes the aggregated message status is returned: If status for at least one recipient is
    'Queued', then 'Queued' value is returned If status for at least one recipient is
    'SendingFailed', then 'SendingFailed' value is returned In other cases Sent status is returned
    
    Generated by Python OpenAPI Parser
    """
    
    Queued = 'Queued'
    Sent = 'Sent'
    Delivered = 'Delivered'
    DeliveryFailed = 'DeliveryFailed'
    SendingFailed = 'SendingFailed'
    Received = 'Received'

class GetMessageMultiResponseItemBodyPriority(Enum):
    """ Message priority """
    
    Normal = 'Normal'
    High = 'High'

class GetMessageMultiResponseItemBodyReadStatus(Enum):
    """ Message read status """
    
    Read = 'Read'
    Unread = 'Unread'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetMessageMultiResponseItemBodyToItem(DataClassJsonMixin):
    extension_number: Optional[str] = None
    extension_id: Optional[str] = None
    name: Optional[str] = None

class GetMessageMultiResponseItemBodyType(Enum):
    """ Message type """
    
    Fax = 'Fax'
    SMS = 'SMS'
    VoiceMail = 'VoiceMail'
    Pager = 'Pager'
    Text = 'Text'

class GetMessageMultiResponseItemBodyVmTranscriptionStatus(Enum):
    """
    Voicemail only. Status of voicemail to text transcription. If VoicemailToText feature is not
    activated for account, the 'NotAvailable' value is returned
    
    Generated by Python OpenAPI Parser
    """
    
    NotAvailable = 'NotAvailable'
    InProgress = 'InProgress'
    TimedOut = 'TimedOut'
    Completed = 'Completed'
    CompletedPartially = 'CompletedPartially'
    Failed = 'Failed'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetMessageMultiResponseItemBody(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI of a message """
    
    id: Optional[str] = None
    """ Internal identifier of a message """
    
    attachments: Optional[list] = None
    """ The list of message attachments """
    
    availability: Optional[GetMessageMultiResponseItemBodyAvailability] = None
    """
    Message availability status. Message in 'Deleted' state is still preserved with all its
    attachments and can be restored. 'Purged' means that all attachments are already deleted and
    the message itself is about to be physically deleted shortly
    """
    
    conversation_id: Optional[int] = None
    """ SMS and Pager only. Identifier of a conversation the message belongs to """
    
    conversation: Optional[dict] = None
    """ SMS and Pager only. Identifier of a conversation the message belongs to """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    Message creation datetime in ISO 8601 format including timezone, for example
    2016-03-10T18:07:52.534Z
    """
    
    delivery_error_code: Optional[str] = None
    """ SMS only. Delivery error code returned by gateway """
    
    direction: Optional[GetMessageMultiResponseItemBodyDirection] = None
    """
    Message direction. Note that for some message types not all directions are allowed. For example
    voicemail messages can be only inbound
    """
    
    fax_page_count: Optional[int] = None
    """ Fax only. Page count in a fax message """
    
    fax_resolution: Optional[GetMessageMultiResponseItemBodyFaxResolution] = None
    """
    Fax only. Resolution of a fax message. 'High' for black and white image scanned at 200 dpi,
    'Low' for black and white image scanned at 100 dpi
    """
    
    from_: Optional[GetMessageMultiResponseItemBodyFrom] = field(metadata=config(field_name='from'), default=None)
    """ Sender information """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    The datetime when the message was modified on server in ISO 8601 format including timezone, for
    example 2016-03-10T18:07:52.534Z
    """
    
    message_status: Optional[GetMessageMultiResponseItemBodyMessageStatus] = None
    """
    Message status. Different message types may have different allowed status values.For outbound
    faxes the aggregated message status is returned: If status for at least one recipient is
    'Queued', then 'Queued' value is returned If status for at least one recipient is
    'SendingFailed', then 'SendingFailed' value is returned In other cases Sent status is returned
    """
    
    pg_to_department: Optional[bool] = None
    """ 'Pager' only. 'True' if at least one of the message recipients is 'Department' extension """
    
    priority: Optional[GetMessageMultiResponseItemBodyPriority] = None
    """ Message priority """
    
    read_status: Optional[GetMessageMultiResponseItemBodyReadStatus] = None
    """ Message read status """
    
    sms_delivery_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    SMS only. The datetime when outbound SMS was delivered to recipient's handset in ISO 8601
    format including timezone, for example 2016-03-10T18:07:52.534Z. It is filled only if the
    carrier sends a delivery receipt to RingCentral
    """
    
    sms_sending_attempts_count: Optional[int] = None
    """
    SMS only. Number of attempts made to send an outbound SMS to the gateway (if gateway is
    temporary unavailable)
    """
    
    subject: Optional[str] = None
    """
    Message subject. For SMS and Pager messages it replicates message text which is also returned
    as an attachment
    """
    
    to: Optional[List[GetMessageMultiResponseItemBodyToItem]] = None
    """ Recipient information """
    
    type: Optional[GetMessageMultiResponseItemBodyType] = None
    """ Message type """
    
    vm_transcription_status: Optional[GetMessageMultiResponseItemBodyVmTranscriptionStatus] = None
    """
    Voicemail only. Status of voicemail to text transcription. If VoicemailToText feature is not
    activated for account, the 'NotAvailable' value is returned
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetMessageMultiResponseItem(DataClassJsonMixin):
    resource_id: Optional[str] = None
    """ Internal identifier of a resource """
    
    status: Optional[int] = None
    """ Status code of resource retrieval """
    
    body: Optional[GetMessageMultiResponseItemBody] = None

class GetMessageSyncResponseSyncInfoSyncType(Enum):
    """ Type of synchronization """
    
    FSync = 'FSync'
    ISync = 'ISync'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetMessageSyncResponseSyncInfo(DataClassJsonMixin):
    """ Sync type, token and time """
    
    sync_type: Optional[GetMessageSyncResponseSyncInfoSyncType] = None
    """ Type of synchronization """
    
    sync_token: Optional[str] = None
    """ Synchronization token """
    
    sync_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    Last synchronization datetime in ISO 8601 format including timezone, for example
    2016-03-10T18:07:52.534Z
    """
    
    older_records_exist: Optional[bool] = False

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetMessageSyncResponse(DataClassJsonMixin):
    """
    Required Properties:
     - records
     - sync_info
    
    Generated by Python OpenAPI Parser
    """
    
    records: list
    """ List of message records with synchronization information """
    
    sync_info: GetMessageSyncResponseSyncInfo
    """ Sync type, token and time """
    
    uri: Optional[str] = None
    """ Link to the message sync resource """
    

class UpdateMessageRequestReadStatus(Enum):
    """ Read status of a message to be changed. Multiple values are accepted """
    
    Read = 'Read'
    Unread = 'Unread'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateMessageRequest(DataClassJsonMixin):
    read_status: Optional[UpdateMessageRequestReadStatus] = None
    """ Read status of a message to be changed. Multiple values are accepted """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MessageStoreConfiguration(DataClassJsonMixin):
    retention_period: Optional[int] = None
    """
    Retention policy setting, specifying how long to keep messages; the supported value range is
    7-90 days
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MakeRingOutRequestFrom(DataClassJsonMixin):
    """
    Phone number of the caller. This number corresponds to the 1st leg of the RingOut call. This
    number can be one of user's configured forwarding numbers or arbitrary number
    
    Generated by Python OpenAPI Parser
    """
    
    phone_number: Optional[str] = None
    """ Phone number in E.164 format """
    
    forwarding_number_id: Optional[str] = None
    """
    Internal identifier of a forwarding number; returned in response as an 'id' field value. Can be
    specified instead of the phoneNumber attribute
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MakeRingOutRequestTo(DataClassJsonMixin):
    """ Phone number of the called party. This number corresponds to the 2nd leg of a RingOut call """
    
    phone_number: Optional[str] = None
    """ Phone number in E.164 format """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MakeRingOutRequestCountry(DataClassJsonMixin):
    """
    Optional. Dialing plan country data. If not specified, then extension home country is applied
    by default
    
    Generated by Python OpenAPI Parser
    """
    
    id: Optional[str] = None
    """ Dialing plan country identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MakeRingOutRequest(DataClassJsonMixin):
    """
    Required Properties:
     - from_
     - to
    
    Generated by Python OpenAPI Parser
    """
    
    from_: MakeRingOutRequestFrom = field(metadata=config(field_name='from'))
    """
    Phone number of the caller. This number corresponds to the 1st leg of the RingOut call. This
    number can be one of user's configured forwarding numbers or arbitrary number
    """
    
    to: MakeRingOutRequestTo
    """ Phone number of the called party. This number corresponds to the 2nd leg of a RingOut call """
    
    caller_id: Optional[dict] = None
    """ The number which will be displayed to the called party """
    
    play_prompt: Optional[bool] = None
    """ The audio prompt that the calling party hears when the call is connected """
    
    country: Optional[MakeRingOutRequestCountry] = None
    """
    Optional. Dialing plan country data. If not specified, then extension home country is applied
    by default
    """
    

class GetRingOutStatusResponseStatusCallStatus(Enum):
    """ Status of a call """
    
    Invalid = 'Invalid'
    Success = 'Success'
    InProgress = 'InProgress'
    Busy = 'Busy'
    NoAnswer = 'NoAnswer'
    Rejected = 'Rejected'
    GenericError = 'GenericError'
    Finished = 'Finished'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'

class GetRingOutStatusResponseStatusCallerStatus(Enum):
    """ Status of a calling party """
    
    Invalid = 'Invalid'
    Success = 'Success'
    InProgress = 'InProgress'
    Busy = 'Busy'
    NoAnswer = 'NoAnswer'
    Rejected = 'Rejected'
    GenericError = 'GenericError'
    Finished = 'Finished'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'

class GetRingOutStatusResponseStatusCalleeStatus(Enum):
    """ Status of a called party """
    
    Invalid = 'Invalid'
    Success = 'Success'
    InProgress = 'InProgress'
    Busy = 'Busy'
    NoAnswer = 'NoAnswer'
    Rejected = 'Rejected'
    GenericError = 'GenericError'
    Finished = 'Finished'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetRingOutStatusResponseStatus(DataClassJsonMixin):
    """ RingOut status information """
    
    call_status: Optional[GetRingOutStatusResponseStatusCallStatus] = None
    """ Status of a call """
    
    caller_status: Optional[GetRingOutStatusResponseStatusCallerStatus] = None
    """ Status of a calling party """
    
    callee_status: Optional[GetRingOutStatusResponseStatusCalleeStatus] = None
    """ Status of a called party """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetRingOutStatusResponse(DataClassJsonMixin):
    id: Optional[int] = None
    """ Internal identifier of a RingOut call """
    
    uri: Optional[str] = None
    status: Optional[GetRingOutStatusResponseStatus] = None
    """ RingOut status information """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetRingOutStatusResponseIntId(DataClassJsonMixin):
    id: Optional[int] = None
    """ Internal identifier of a RingOut call """
    
    uri: Optional[str] = None
    status: Optional[dict] = None
    """ RingOut status information """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class FavoriteCollectionRecordsItem(DataClassJsonMixin):
    id: Optional[int] = None
    extension_id: Optional[str] = None
    account_id: Optional[str] = None
    contact_id: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class FavoriteCollection(DataClassJsonMixin):
    records: Optional[List[FavoriteCollectionRecordsItem]] = None

class ContactListRecordsItemAvailability(Enum):
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    
    Generated by Python OpenAPI Parser
    """
    
    Alive = 'Alive'
    Deleted = 'Deleted'
    Purged = 'Purged'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ContactListRecordsItemBusinessAddress(DataClassJsonMixin):
    street: Optional[str] = None
    """
    Street address
    
    Example: `20 Davis Dr.`
    """
    
    city: Optional[str] = None
    """
    City name
    
    Example: `Belmont`
    """
    
    country: Optional[str] = None
    """ Country name """
    
    state: Optional[str] = None
    """
    State/province name
    
    Example: `CA`
    """
    
    zip: Optional[str] = None
    """
    Zip/Postal code
    
    Example: `94002`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ContactListRecordsItem(DataClassJsonMixin):
    uri: Optional[str] = None
    """
    Canonical URI of the contact
    
    Example: `https://platform.ringcentral.com/restapi/v1.0/account/230919004/extension/230919004/address-book/contact/623045004`
    """
    
    availability: Optional[ContactListRecordsItemAvailability] = None
    """
    This property has a special meaning only on Address Book Sync (e.g. a contact can be
    `Deleted`). For simple contact list reading it has always the default value - `Alive`
    """
    
    email: Optional[str] = None
    """
    Email of the contact
    
    Example: `charlie.williams@example.com`
    """
    
    id: Optional[int] = None
    """
    Internal identifier of the contact
    
    Example: `623045004`
    """
    
    notes: Optional[str] = None
    """
    Notes for the contact
    
    Example: `#1 Customer`
    """
    
    company: Optional[str] = None
    """
    Company name of the contact
    
    Example: `Example, Inc.`
    """
    
    first_name: Optional[str] = None
    """
    First name of the contact
    
    Example: `Charlie`
    """
    
    last_name: Optional[str] = None
    """
    Last name of the contact
    
    Example: `Williams`
    """
    
    job_title: Optional[str] = None
    """
    Job title of the contact
    
    Example: `CEO`
    """
    
    birthday: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Date of birth of the contact """
    
    web_page: Optional[str] = None
    """
    The contact home page URL
    
    Example: `http://www.example.com`
    """
    
    middle_name: Optional[str] = None
    """
    Middle name of the contact
    
    Example: `J`
    """
    
    nick_name: Optional[str] = None
    """
    Nick name of the contact
    
    Example: `The Boss`
    """
    
    email2: Optional[str] = None
    """
    2nd email of the contact
    
    Example: `charlie-example@gmail.com`
    """
    
    email3: Optional[str] = None
    """
    3rd email of the contact
    
    Example: `theboss-example@hotmail.com`
    """
    
    home_phone: Optional[str] = None
    """
    Home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    home_phone2: Optional[str] = None
    """
    2nd home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone: Optional[str] = None
    """
    Business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone2: Optional[str] = None
    """
    2nd business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    mobile_phone: Optional[str] = None
    """
    Mobile phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_fax: Optional[str] = None
    """
    Business fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    company_phone: Optional[str] = None
    """
    Company number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    assistant_phone: Optional[str] = None
    """
    Phone number of the contact assistant in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    car_phone: Optional[str] = None
    """
    Car phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_phone: Optional[str] = None
    """
    Other phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_fax: Optional[str] = None
    """
    Other fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    callback_phone: Optional[str] = None
    """
    Callback phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_address: Optional[ContactListRecordsItemBusinessAddress] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ContactListNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ContactListNavigation(DataClassJsonMixin):
    """ Information on navigation """
    
    first_page: Optional[ContactListNavigationFirstPage] = None
    """ Canonical URI for the first page of the list """
    
    next_page: Optional[dict] = None
    """ Canonical URI for the next page of the list """
    
    previous_page: Optional[dict] = None
    """ Canonical URI for the previous page of the list """
    
    last_page: Optional[dict] = None
    """ Canonical URI for the last page of the list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ContactListPaging(DataClassJsonMixin):
    """ Information on paging """
    
    page: Optional[int] = None
    """
    The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result
    is empty (because non-existent page was specified or perPage=0 was requested)
    """
    
    per_page: Optional[int] = None
    """
    Current page size, describes how many items are in each page. Default value is 100. Maximum
    value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000)
    is applied
    """
    
    page_start: Optional[int] = None
    """
    The zero-based number of the first element on the current page. Omitted if the page is omitted
    or result is empty
    """
    
    page_end: Optional[int] = None
    """
    The zero-based index of the last element on the current page. Omitted if the page is omitted or
    result is empty
    """
    
    total_pages: Optional[int] = None
    """
    The total number of pages in a dataset. May be omitted for some resources due to performance
    reasons
    """
    
    total_elements: Optional[int] = None
    """
    The total number of elements in a dataset. May be omitted for some resource due to performance
    reasons
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ContactListGroups(DataClassJsonMixin):
    """ Information on address book groups """
    
    uri: Optional[str] = None
    """ Link to the list of address book groups """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ContactList(DataClassJsonMixin):
    uri: Optional[str] = None
    """ link to the list of user personal contacts """
    
    records: Optional[List[ContactListRecordsItem]] = None
    """ List of personal contacts from the extension address book """
    
    navigation: Optional[ContactListNavigation] = None
    """ Information on navigation """
    
    paging: Optional[ContactListPaging] = None
    """ Information on paging """
    
    groups: Optional[ContactListGroups] = None
    """ Information on address book groups """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PersonalContactRequest(DataClassJsonMixin):
    first_name: Optional[str] = None
    """
    First name of the contact
    
    Example: `Charlie`
    """
    
    last_name: Optional[str] = None
    """
    Last name of the contact
    
    Example: `Williams`
    """
    
    middle_name: Optional[str] = None
    """
    Middle name of the contact
    
    Example: `J`
    """
    
    nick_name: Optional[str] = None
    """
    Nick name of the contact
    
    Example: `The Boss`
    """
    
    company: Optional[str] = None
    """
    Company name of the contact
    
    Example: `Example, Inc.`
    """
    
    job_title: Optional[str] = None
    """
    Job title of the contact
    
    Example: `CEO`
    """
    
    email: Optional[str] = None
    """
    Email of the contact
    
    Example: `charlie.williams@example.com`
    """
    
    email2: Optional[str] = None
    """
    2nd email of the contact
    
    Example: `charlie-example@gmail.com`
    """
    
    email3: Optional[str] = None
    """
    3rd email of the contact
    
    Example: `theboss-example@hotmail.com`
    """
    
    birthday: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Date of birth of the contact """
    
    web_page: Optional[str] = None
    """
    The contact home page URL
    
    Example: `http://www.example.com`
    """
    
    notes: Optional[str] = None
    """
    Notes for the contact
    
    Example: `#1 Customer`
    """
    
    home_phone: Optional[str] = None
    """
    Home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    home_phone2: Optional[str] = None
    """
    2nd home phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone: Optional[str] = None
    """
    Business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_phone2: Optional[str] = None
    """
    2nd business phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    mobile_phone: Optional[str] = None
    """
    Mobile phone of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    business_fax: Optional[str] = None
    """
    Business fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    company_phone: Optional[str] = None
    """
    Company number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    assistant_phone: Optional[str] = None
    """
    Phone number of the contact assistant in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    car_phone: Optional[str] = None
    """
    Car phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_phone: Optional[str] = None
    """
    Other phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    other_fax: Optional[str] = None
    """
    Other fax number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    
    callback_phone: Optional[str] = None
    """
    Callback phone number of the contact in e.164 (with "+") format
    
    Example: `+15551234567`
    """
    

class AddressBookSyncSyncInfoSyncType(Enum):
    FSync = 'FSync'
    ISync = 'ISync'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AddressBookSyncSyncInfo(DataClassJsonMixin):
    sync_type: Optional[AddressBookSyncSyncInfoSyncType] = None
    sync_token: Optional[str] = None
    sync_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    older_records_exist: Optional[bool] = False

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AddressBookSync(DataClassJsonMixin):
    uri: Optional[str] = None
    records: Optional[list] = None
    sync_info: Optional[AddressBookSyncSyncInfo] = None
    next_page_id: Optional[int] = None
    next_page_uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class FavoriteContactList(DataClassJsonMixin):
    uri: Optional[str] = None
    records: Optional[list] = None

class SearchDirectoryEntriesRequestSearchFieldsItem(Enum):
    FirstName = 'firstName'
    LastName = 'lastName'
    ExtensionNumber = 'extensionNumber'
    PhoneNumber = 'phoneNumber'
    Email = 'email'
    JobTitle = 'jobTitle'
    Department = 'department'

class SearchDirectoryEntriesRequestExtensionType(Enum):
    """ Type of extension to filter the contacts """
    
    User = 'User'
    Department = 'Department'
    Announcement = 'Announcement'
    Voicemail = 'Voicemail'
    SharedLinesGroup = 'SharedLinesGroup'
    PagingOnly = 'PagingOnly'
    ParkLocation = 'ParkLocation'
    IvrMenu = 'IvrMenu'
    Limited = 'Limited'
    ApplicationExtension = 'ApplicationExtension'
    Site = 'Site'
    Bot = 'Bot'
    ProxyAdmin = 'ProxyAdmin'

class SearchDirectoryEntriesRequestOrderByItemFieldName(Enum):
    """ Field name by which to sort the contacts """
    
    FirstName = 'firstName'
    LastName = 'lastName'
    ExtensionNumber = 'extensionNumber'
    PhoneNumber = 'phoneNumber'
    Email = 'email'
    JobTitle = 'jobTitle'
    Department = 'department'

class SearchDirectoryEntriesRequestOrderByItemDirection(Enum):
    """ Sorting direction """
    
    Asc = 'Asc'
    Desc = 'Desc'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesRequestOrderByItem(DataClassJsonMixin):
    index: Optional[int] = None
    """
    Sorting priority index, starting from '1'. Optional if only one element in `orderBy` array is
    specified
    """
    
    field_name: Optional[SearchDirectoryEntriesRequestOrderByItemFieldName] = None
    """ Field name by which to sort the contacts """
    
    direction: Optional[SearchDirectoryEntriesRequestOrderByItemDirection] = None
    """ Sorting direction """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchDirectoryEntriesRequest(DataClassJsonMixin):
    search_string: Optional[str] = None
    """
    String value to filter the contacts. The value specified is searched through the following
    fields: `firstName`, `lastName`, `extensionNumber`, `phoneNumber`, `email`, `jobTitle`,
    `department`
    """
    
    search_fields: Optional[List[SearchDirectoryEntriesRequestSearchFieldsItem]] = field(default_factory=lambda: ['firstName', 'lastName', 'extensionNumber', 'phoneNumber', 'email'])
    show_federated: Optional[bool] = True
    """
    If 'True' then contacts of all accounts in federation are returned. If 'False' then only
    contacts of the current account are returned, and account section is eliminated in this case
    """
    
    extension_type: Optional[SearchDirectoryEntriesRequestExtensionType] = None
    """ Type of extension to filter the contacts """
    
    order_by: Optional[List[SearchDirectoryEntriesRequestOrderByItem]] = None
    """ Sorting settings """
    
    page: Optional[int] = None
    per_page: Optional[int] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DirectoryResourcePaging(DataClassJsonMixin):
    page: Optional[int] = None
    total_pages: Optional[int] = None
    per_page: Optional[int] = None
    total_elements: Optional[int] = None
    page_start: Optional[int] = None
    page_end: Optional[int] = None

class DirectoryResourceRecordsItemAccountMainNumberUsageType(Enum):
    """ Usage type of a phone number """
    
    MobileNumber = 'MobileNumber'
    ContactNumber = 'ContactNumber'
    DirectNumber = 'DirectNumber'
    ForwardedNumber = 'ForwardedNumber'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DirectoryResourceRecordsItemAccountMainNumber(DataClassJsonMixin):
    formatted_phone_number: Optional[str] = None
    phone_number: Optional[str] = None
    type: Optional[str] = None
    label: Optional[str] = None
    """ Custom user name of a phone number, if any """
    
    usage_type: Optional[DirectoryResourceRecordsItemAccountMainNumberUsageType] = None
    """ Usage type of a phone number """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DirectoryResourceRecordsItemAccount(DataClassJsonMixin):
    company_name: Optional[str] = None
    federated_name: Optional[str] = None
    id: Optional[str] = None
    main_number: Optional[DirectoryResourceRecordsItemAccountMainNumber] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DirectoryResourceRecordsItemProfileImage(DataClassJsonMixin):
    etag: Optional[str] = None
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DirectoryResourceRecordsItemSite(DataClassJsonMixin):
    id: Optional[str] = None
    name: Optional[str] = None
    code: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DirectoryResourceRecordsItem(DataClassJsonMixin):
    account: Optional[DirectoryResourceRecordsItemAccount] = None
    department: Optional[str] = None
    email: Optional[str] = None
    extension_number: Optional[str] = None
    first_name: Optional[str] = None
    """ First name of a contact, for user extensions only """
    
    last_name: Optional[str] = None
    """ Last name of a contact, for user extensions only """
    
    name: Optional[str] = None
    """ Name of a contact, for non-user extensions """
    
    id: Optional[str] = None
    job_title: Optional[str] = None
    phone_numbers: Optional[list] = None
    profile_image: Optional[DirectoryResourceRecordsItemProfileImage] = None
    site: Optional[DirectoryResourceRecordsItemSite] = None
    status: Optional[str] = None
    type: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DirectoryResource(DataClassJsonMixin):
    paging: Optional[DirectoryResourcePaging] = None
    records: Optional[List[DirectoryResourceRecordsItem]] = None

class ErrorResponseErrorsItemErrorCode(Enum):
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    ErrorCodeCode_ADG_000HttpStatus_503Description_ServiceTemporaryUnavailable = "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}"
    ErrorCodeCode_ADG_010HttpStatus_503Description_FederationDataTemporaryUnavailable = "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}"
    ErrorCodeCode_ADG_001HttpStatus_500Description_ServiceInternalError = "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}"
    ErrorCodeCode_ADG_100HttpStatus_403Description_InsufficientPermissions = "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}"
    ErrorCodeCode_ADG_101HttpStatus_403Description_UnauthorizedAccess = "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}"
    ErrorCodeCode_ADG_102HttpStatus_405Description_MethodNotAllowed = "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}"
    ErrorCodeCode_ADG_111HttpStatus_400Description_Need_Content_TypeHeader = "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}"
    ErrorCodeCode_ADG_112HttpStatus_400Description_RequestBodyIsInvalid = "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}"
    ErrorCodeCode_ADG_121HttpStatus_400Description_ParameterParamNameIsInvalidAdditionalInfo = "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}"
    ErrorCodeCode_ADG_115HttpStatus_415Description_Unsupported_Media_Type = "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}"
    ErrorCodeCode_ADG_105HttpStatus_404Description_CurrentAccountIsNotLinkedToAnyFederation = "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}"
    ErrorCodeCode_ADG_107HttpStatus_404Description_AccountNotFound = "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}"
    ErrorCodeCode_ADG_122HttpStatus_404Description_ContactNotFound = "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}"
    ErrorCodeCode_ADG_200HttpStatus_404Description_Invalid_URI = "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ErrorResponseErrorsItem(DataClassJsonMixin):
    """
    Description of an error occurred during request processing. This data type can be used only in
    readonly mode, no writing is allowed
    
    Generated by Python OpenAPI Parser
    """
    
    error_code: Optional[ErrorResponseErrorsItemErrorCode] = None
    """ Code that characterizes this error. Code uniqly identifies the source of the error. """
    
    message: Optional[str] = None
    """ Message that describes the error. This message can be used in UI. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ErrorResponse(DataClassJsonMixin):
    """ Format of response in case that any error occured during request processing """
    
    errors: Optional[List[ErrorResponseErrorsItem]] = None
    """ Collection of all gathered errors """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class FederationResourceAccountsItem(DataClassJsonMixin):
    company_name: Optional[str] = None
    conflict_count: Optional[int] = None
    federated_name: Optional[str] = None
    id: Optional[str] = None
    link_creation_time: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class FederationResource(DataClassJsonMixin):
    accounts: Optional[List[FederationResourceAccountsItem]] = None
    creation_time: Optional[str] = None
    display_name: Optional[str] = None
    id: Optional[str] = None
    last_modified_time: Optional[str] = None

class GetPresenceInfoDndStatus(Enum):
    """
    Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take
    Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application
    Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and
    'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department;
    if these values are set for department outsiders, the 400 Bad Request error code is returned.
    The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and
    is available for some migrated accounts only.
    
    Generated by Python OpenAPI Parser
    """
    
    TakeAllCalls = 'TakeAllCalls'
    DoNotAcceptAnyCalls = 'DoNotAcceptAnyCalls'
    DoNotAcceptDepartmentCalls = 'DoNotAcceptDepartmentCalls'
    TakeDepartmentCallsOnly = 'TakeDepartmentCallsOnly'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetPresenceInfoExtension(DataClassJsonMixin):
    """ Information on extension, for which this presence data is returned """
    
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    
    extension_number: Optional[str] = None
    """ Extension number (usually 3 or 4 digits) """
    

class GetPresenceInfoPresenceStatus(Enum):
    """ Aggregated presence status, calculated from a number of sources """
    
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

class GetPresenceInfoTelephonyStatus(Enum):
    """ Telephony presence status """
    
    NoCall = 'NoCall'
    CallConnected = 'CallConnected'
    Ringing = 'Ringing'
    OnHold = 'OnHold'
    ParkedCall = 'ParkedCall'

class GetPresenceInfoUserStatus(Enum):
    """ User-defined presence status (as previously published by the user) """
    
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

class GetPresenceInfoMeetingStatus(Enum):
    """ RingCentral Meetings presence """
    
    Connected = 'Connected'
    Disconnected = 'Disconnected'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GetPresenceInfo(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI of a presence info resource """
    
    allow_see_my_presence: Optional[bool] = None
    """ If 'True' enables other extensions to see the extension presence status """
    
    dnd_status: Optional[GetPresenceInfoDndStatus] = None
    """
    Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take
    Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application
    Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and
    'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department;
    if these values are set for department outsiders, the 400 Bad Request error code is returned.
    The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and
    is available for some migrated accounts only.
    """
    
    extension: Optional[GetPresenceInfoExtension] = None
    """ Information on extension, for which this presence data is returned """
    
    message: Optional[str] = None
    """ Custom status message (as previously published by user) """
    
    pick_up_calls_on_hold: Optional[bool] = None
    """ If 'True' enables the extension user to pick up a monitored line on hold """
    
    presence_status: Optional[GetPresenceInfoPresenceStatus] = None
    """ Aggregated presence status, calculated from a number of sources """
    
    ring_on_monitored_call: Optional[bool] = None
    """ If 'True' enables to ring extension phone, if any user monitored by this extension is ringing """
    
    telephony_status: Optional[GetPresenceInfoTelephonyStatus] = None
    """ Telephony presence status """
    
    user_status: Optional[GetPresenceInfoUserStatus] = None
    """ User-defined presence status (as previously published by the user) """
    
    meeting_status: Optional[GetPresenceInfoMeetingStatus] = None
    """ RingCentral Meetings presence """
    
    active_calls: Optional[list] = None
    """ Information on active calls """
    

class PresenceInfoResourceUserStatus(Enum):
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

class PresenceInfoResourceDndStatus(Enum):
    TakeAllCalls = 'TakeAllCalls'
    DoNotAcceptDepartmentCalls = 'DoNotAcceptDepartmentCalls'
    TakeDepartmentCallsOnly = 'TakeDepartmentCallsOnly'
    DoNotAcceptAnyCalls = 'DoNotAcceptAnyCalls'
    Unknown = 'Unknown'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PresenceInfoResource(DataClassJsonMixin):
    user_status: Optional[PresenceInfoResourceUserStatus] = None
    dnd_status: Optional[PresenceInfoResourceDndStatus] = None
    message: Optional[str] = None
    allow_see_my_presence: Optional[bool] = False
    ring_on_monitored_call: Optional[bool] = False
    pick_up_calls_on_hold: Optional[bool] = False
    active_calls: Optional[list] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallQueueUpdatePresenceRecordsItemMember(DataClassJsonMixin):
    """ Call queue member information """
    
    id: Optional[str] = None
    """ Internal identifier of an extension - queue member """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallQueueUpdatePresenceRecordsItem(DataClassJsonMixin):
    member: Optional[CallQueueUpdatePresenceRecordsItemMember] = None
    """ Call queue member information """
    
    accept_current_queue_calls: Optional[bool] = None
    """ Call queue member availability for calls of this queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallQueueUpdatePresence(DataClassJsonMixin):
    records: Optional[List[CallQueueUpdatePresenceRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AccountPresenceInfoNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AccountPresenceInfoNavigation(DataClassJsonMixin):
    """ Information on navigation """
    
    first_page: Optional[AccountPresenceInfoNavigationFirstPage] = None
    """ Canonical URI for the first page of the list """
    
    next_page: Optional[dict] = None
    """ Canonical URI for the next page of the list """
    
    previous_page: Optional[dict] = None
    """ Canonical URI for the previous page of the list """
    
    last_page: Optional[dict] = None
    """ Canonical URI for the last page of the list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AccountPresenceInfoPaging(DataClassJsonMixin):
    """ Information on paging """
    
    page: Optional[int] = None
    """
    The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result
    is empty (because non-existent page was specified or perPage=0 was requested)
    """
    
    per_page: Optional[int] = None
    """
    Current page size, describes how many items are in each page. Default value is 100. Maximum
    value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000)
    is applied
    """
    
    page_start: Optional[int] = None
    """
    The zero-based number of the first element on the current page. Omitted if the page is omitted
    or result is empty
    """
    
    page_end: Optional[int] = None
    """
    The zero-based index of the last element on the current page. Omitted if the page is omitted or
    result is empty
    """
    
    total_pages: Optional[int] = None
    """
    The total number of pages in a dataset. May be omitted for some resources due to performance
    reasons
    """
    
    total_elements: Optional[int] = None
    """
    The total number of elements in a dataset. May be omitted for some resource due to performance
    reasons
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AccountPresenceInfo(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI of account presence resource """
    
    records: Optional[list] = None
    """ List of Prompts """
    
    navigation: Optional[AccountPresenceInfoNavigation] = None
    """ Information on navigation """
    
    paging: Optional[AccountPresenceInfoPaging] = None
    """ Information on paging """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ExtensionCallQueuePresenceListRecordsItemCallQueue(DataClassJsonMixin):
    """ Call queue information """
    
    id: Optional[str] = None
    """ Internal identifier of a call queue """
    
    name: Optional[str] = None
    """ Name of a call queue """
    
    extension_number: Optional[str] = None
    """ Extension number of a call queue """
    
    editable_member_status: Optional[bool] = None
    """ Flag allow members to change their queue status """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ExtensionCallQueuePresenceListRecordsItem(DataClassJsonMixin):
    call_queue: Optional[ExtensionCallQueuePresenceListRecordsItemCallQueue] = None
    """ Call queue information """
    
    accept_calls: Optional[bool] = None
    """ Call queue agent availability for calls of this queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ExtensionCallQueuePresenceList(DataClassJsonMixin):
    records: Optional[List[ExtensionCallQueuePresenceListRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ExtensionCallQueueUpdatePresenceListRecordsItemCallQueue(DataClassJsonMixin):
    """ Call queue information """
    
    id: Optional[str] = None
    """ Internal identifier of a call queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ExtensionCallQueueUpdatePresenceListRecordsItem(DataClassJsonMixin):
    call_queue: Optional[ExtensionCallQueueUpdatePresenceListRecordsItemCallQueue] = None
    """ Call queue information """
    
    accept_calls: Optional[bool] = None
    """ Call queue agent availability for calls of this queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ExtensionCallQueueUpdatePresenceList(DataClassJsonMixin):
    records: Optional[List[ExtensionCallQueueUpdatePresenceListRecordsItem]] = None

class PresenceInfoResponseUserStatus(Enum):
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

class PresenceInfoResponseDndStatus(Enum):
    TakeAllCalls = 'TakeAllCalls'
    DoNotAcceptDepartmentCalls = 'DoNotAcceptDepartmentCalls'
    TakeDepartmentCallsOnly = 'TakeDepartmentCallsOnly'
    DoNotAcceptAnyCalls = 'DoNotAcceptAnyCalls'
    Unknown = 'Unknown'

class PresenceInfoResponseMeetingStatus(Enum):
    """ Meetings presence status """
    
    Connected = 'Connected'
    Disconnected = 'Disconnected'

class PresenceInfoResponseTelephonyStatus(Enum):
    """ Telephony presence status. Returned if telephony status is changed """
    
    NoCall = 'NoCall'
    CallConnected = 'CallConnected'
    Ringing = 'Ringing'
    OnHold = 'OnHold'
    ParkedCall = 'ParkedCall'

class PresenceInfoResponsePresenceStatus(Enum):
    """ Aggregated presence status, calculated from a number of sources """
    
    Offline = 'Offline'
    Busy = 'Busy'
    Available = 'Available'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PresenceInfoResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to the presence resource """
    
    user_status: Optional[PresenceInfoResponseUserStatus] = None
    dnd_status: Optional[PresenceInfoResponseDndStatus] = None
    message: Optional[str] = None
    allow_see_my_presence: Optional[bool] = False
    ring_on_monitored_call: Optional[bool] = False
    pick_up_calls_on_hold: Optional[bool] = False
    active_calls: Optional[list] = None
    extension: Optional[dict] = None
    meeting_status: Optional[PresenceInfoResponseMeetingStatus] = None
    """ Meetings presence status """
    
    telephony_status: Optional[PresenceInfoResponseTelephonyStatus] = None
    """ Telephony presence status. Returned if telephony status is changed """
    
    presence_status: Optional[PresenceInfoResponsePresenceStatus] = None
    """ Aggregated presence status, calculated from a number of sources """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallQueuePresenceRecordsItemMemberSite(DataClassJsonMixin):
    """ Extension site """
    
    id: Optional[str] = None
    """ Site extension identifier """
    
    name: Optional[str] = None
    """ Site extension name """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallQueuePresenceRecordsItemMember(DataClassJsonMixin):
    """ Call queue member information """
    
    id: Optional[str] = None
    """ Internal identifier of an extension """
    
    name: Optional[str] = None
    """ Extension full name """
    
    extension_number: Optional[str] = None
    """ Extension number """
    
    site: Optional[CallQueuePresenceRecordsItemMemberSite] = None
    """ Extension site """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallQueuePresenceRecordsItem(DataClassJsonMixin):
    member: Optional[CallQueuePresenceRecordsItemMember] = None
    """ Call queue member information """
    
    accept_queue_calls: Optional[bool] = None
    """ Private member telephony availability status applied to calls of all queues """
    
    accept_current_queue_calls: Optional[bool] = None
    """ Call queue member availability in this particular queue """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallQueuePresence(DataClassJsonMixin):
    records: Optional[List[CallQueuePresenceRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipPersonInfo(DataClassJsonMixin):
    """
    Required Properties:
     - id
    
    Generated by Python OpenAPI Parser
    """
    
    id: str
    """ Internal identifier of a user """
    
    first_name: Optional[str] = None
    """ First name of a user """
    
    last_name: Optional[str] = None
    """ Last name of a user """
    
    email: Optional[str] = None
    """ Email of a user """
    
    avatar: Optional[str] = None
    """ Photo of a user """
    
    company_id: Optional[str] = None
    """ Internal identifier of a company """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Time of creation in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Time of the last modification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipPostMembersIdsListBody(DataClassJsonMixin):
    """
    Required Properties:
     - members
    
    Generated by Python OpenAPI Parser
    """
    
    members: list
    """ Identifier(s) of chat members. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipPatchPostBody(DataClassJsonMixin):
    text: Optional[str] = None
    """ Post text. """
    

class GlipPostsRecordsItemType(Enum):
    """ Type of a post """
    
    TextMessage = 'TextMessage'
    PersonJoined = 'PersonJoined'
    PersonsAdded = 'PersonsAdded'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipPostsRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a post """
    
    group_id: Optional[str] = None
    """ Internal identifier of a group a post belongs to """
    
    type: Optional[GlipPostsRecordsItemType] = None
    """ Type of a post """
    
    text: Optional[str] = None
    """ For 'TextMessage' post type only. Text of a message """
    
    creator_id: Optional[str] = None
    """ Internal identifier of a user - author of a post """
    
    added_person_ids: Optional[List[str]] = None
    """ For 'PersonsAdded' post type only. Identifiers of persons added to a group """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Post creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Post last modification datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format """
    
    attachments: Optional[list] = None
    """ List of posted attachments """
    
    mentions: Optional[list] = None
    activity: Optional[str] = None
    """ Label of activity type """
    
    title: Optional[str] = None
    """ Title of a message. (Can be set for bot's messages only) """
    
    icon_uri: Optional[str] = None
    """ Link to an image used as an icon for this message """
    
    icon_emoji: Optional[str] = None
    """ Emoji used as an icon for this message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipPosts(DataClassJsonMixin):
    """
    Required Properties:
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: List[GlipPostsRecordsItem]
    """ List of posts """
    

class GlipTaskInfoType(Enum):
    """ Type of a task """
    
    Task = 'Task'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipTaskInfoCreator(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user who created a note/task """
    

class GlipTaskInfoStatus(Enum):
    """ Status of task execution """
    
    Pending = 'Pending'
    InProgress = 'InProgress'
    Completed = 'Completed'

class GlipTaskInfoAssigneesItemStatus(Enum):
    """ Status of the task execution by assignee """
    
    Pending = 'Pending'
    Completed = 'Completed'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipTaskInfoAssigneesItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an assignee """
    
    status: Optional[GlipTaskInfoAssigneesItemStatus] = None
    """ Status of the task execution by assignee """
    

class GlipTaskInfoCompletenessCondition(Enum):
    """ Specifies how to determine task completeness """
    
    Simple = 'Simple'
    AllAssignees = 'AllAssignees'
    Percentage = 'Percentage'

class GlipTaskInfoColor(Enum):
    """ Font color of a post with the current task """
    
    Black = 'Black'
    Red = 'Red'
    Orange = 'Orange'
    Yellow = 'Yellow'
    Green = 'Green'
    Blue = 'Blue'
    Purple = 'Purple'
    Magenta = 'Magenta'

class GlipTaskInfoRecurrenceSchedule(Enum):
    """ Task recurrence settings. For non-periodic tasks the value is 'None' """
    
    None_ = 'None'
    Daily = 'Daily'
    Weekdays = 'Weekdays'
    Weekly = 'Weekly'
    Monthly = 'Monthly'
    Yearly = 'Yearly'

class GlipTaskInfoRecurrenceEndingCondition(Enum):
    """ Task ending condition """
    
    None_ = 'None'
    Count = 'Count'
    Date = 'Date'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipTaskInfoRecurrence(DataClassJsonMixin):
    schedule: Optional[GlipTaskInfoRecurrenceSchedule] = None
    """ Task recurrence settings. For non-periodic tasks the value is 'None' """
    
    ending_condition: Optional[GlipTaskInfoRecurrenceEndingCondition] = None
    """ Task ending condition """
    
    ending_after: Optional[int] = None
    """ Count of iterations of periodic tasks """
    
    ending_on: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ End date of periodic task """
    

class GlipTaskInfoAttachmentsItemType(Enum):
    """ Attachment type (currently only `File` value is supported). """
    
    File = 'File'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipTaskInfoAttachmentsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a file """
    
    type: Optional[GlipTaskInfoAttachmentsItemType] = None
    """ Attachment type (currently only `File` value is supported). """
    
    name: Optional[str] = None
    """ Name of the attached file (including extension name). """
    
    content_uri: Optional[str] = None
    """ Link to an attachment content """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipTaskInfo(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a task """
    
    creation_time: Optional[str] = None
    """ Datetime of the task creation in UTC time zone. """
    
    last_modified_time: Optional[str] = None
    """ Datetime of the last modification of the task in UTC time zone. """
    
    type: Optional[GlipTaskInfoType] = None
    """ Type of a task """
    
    creator: Optional[GlipTaskInfoCreator] = None
    chat_ids: Optional[List[str]] = None
    """ Chat IDs where the task is posted or shared. """
    
    status: Optional[GlipTaskInfoStatus] = None
    """ Status of task execution """
    
    subject: Optional[str] = None
    """ Name/subject of a task """
    
    assignees: Optional[List[GlipTaskInfoAssigneesItem]] = None
    completeness_condition: Optional[GlipTaskInfoCompletenessCondition] = None
    """ Specifies how to determine task completeness """
    
    completeness_percentage: Optional[int] = None
    """
    Current completeness percentage of the task with the specified percentage completeness
    condition
    """
    
    start_date: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Task start date """
    
    due_date: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Task due date/time """
    
    color: Optional[GlipTaskInfoColor] = None
    """ Font color of a post with the current task """
    
    section: Optional[str] = None
    """ Task section to group/search by """
    
    description: Optional[str] = None
    """ Task details """
    
    recurrence: Optional[GlipTaskInfoRecurrence] = None
    attachments: Optional[List[GlipTaskInfoAttachmentsItem]] = None

class GlipPreferencesInfoChatsLeftRailMode(Enum):
    SeparateAllChatTypes = 'SeparateAllChatTypes'
    SeparateConversationsAndTeams = 'SeparateConversationsAndTeams'
    CombineAllChatTypes = 'CombineAllChatTypes'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipPreferencesInfoChats(DataClassJsonMixin):
    max_count: Optional[int] = 10
    left_rail_mode: Optional[GlipPreferencesInfoChatsLeftRailMode] = 'CombineAllChatTypes'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipPreferencesInfo(DataClassJsonMixin):
    chats: Optional[GlipPreferencesInfoChats] = None

class UnifiedPresenceStatus(Enum):
    """ Aggregated presence status of the user """
    
    Available = 'Available'
    Offline = 'Offline'
    DND = 'DND'
    Busy = 'Busy'

class UnifiedPresenceGlipStatus(Enum):
    """
    Glip connection status calculated from all user's apps. Returned always for the requester's
    extension; returned for another users if their glip visibility is set to 'Visible'
    
    Generated by Python OpenAPI Parser
    """
    
    Offline = 'Offline'
    Online = 'Online'

class UnifiedPresenceGlipVisibility(Enum):
    """
    Visibility setting allowing other users to see the user's Glip presence status; returned only
    for requester's extension
    
    Generated by Python OpenAPI Parser
    """
    
    Visible = 'Visible'
    Invisible = 'Invisible'

class UnifiedPresenceGlipAvailability(Enum):
    """ Shows whether user wants to receive Glip notifications or not. """
    
    Available = 'Available'
    DND = 'DND'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnifiedPresenceGlip(DataClassJsonMixin):
    """ Returned if *Glip* feature is switched on """
    
    status: Optional[UnifiedPresenceGlipStatus] = None
    """
    Glip connection status calculated from all user's apps. Returned always for the requester's
    extension; returned for another users if their glip visibility is set to 'Visible'
    """
    
    visibility: Optional[UnifiedPresenceGlipVisibility] = None
    """
    Visibility setting allowing other users to see the user's Glip presence status; returned only
    for requester's extension
    """
    
    availability: Optional[UnifiedPresenceGlipAvailability] = None
    """ Shows whether user wants to receive Glip notifications or not. """
    

class UnifiedPresenceTelephonyStatus(Enum):
    """
    Telephony status calculated from all user's phone numbers. Returned always for the requester's
    extension; returned for another users if their telephony visibility is set to 'Visible'
    
    Generated by Python OpenAPI Parser
    """
    
    NoCall = 'NoCall'
    Ringing = 'Ringing'
    CallConnected = 'CallConnected'
    OnHold = 'OnHold'
    ParkedCall = 'ParkedCall'

class UnifiedPresenceTelephonyVisibility(Enum):
    """
    Specifies if the user hardphone presence status is visible to other users; returned only for
    requester's extension
    
    Generated by Python OpenAPI Parser
    """
    
    Visible = 'Visible'
    Invisible = 'Invisible'

class UnifiedPresenceTelephonyAvailability(Enum):
    """ Telephony DND status. Returned if *DND* feature is switched on """
    
    TakeAllCalls = 'TakeAllCalls'
    DoNotAcceptAnyCalls = 'DoNotAcceptAnyCalls'
    DoNotAcceptQueueCalls = 'DoNotAcceptQueueCalls'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnifiedPresenceTelephony(DataClassJsonMixin):
    """ Returned if *BLF* feature is switched on """
    
    status: Optional[UnifiedPresenceTelephonyStatus] = None
    """
    Telephony status calculated from all user's phone numbers. Returned always for the requester's
    extension; returned for another users if their telephony visibility is set to 'Visible'
    """
    
    visibility: Optional[UnifiedPresenceTelephonyVisibility] = None
    """
    Specifies if the user hardphone presence status is visible to other users; returned only for
    requester's extension
    """
    
    availability: Optional[UnifiedPresenceTelephonyAvailability] = None
    """ Telephony DND status. Returned if *DND* feature is switched on """
    

class UnifiedPresenceMeetingStatus(Enum):
    """ Meeting status calculated from all user`s meetings """
    
    NoMeeting = 'NoMeeting'
    InMeeting = 'InMeeting'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnifiedPresenceMeeting(DataClassJsonMixin):
    """ Returned if *Meetings* feature is switched on """
    
    status: Optional[UnifiedPresenceMeetingStatus] = None
    """ Meeting status calculated from all user`s meetings """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnifiedPresence(DataClassJsonMixin):
    status: Optional[UnifiedPresenceStatus] = None
    """ Aggregated presence status of the user """
    
    glip: Optional[UnifiedPresenceGlip] = None
    """ Returned if *Glip* feature is switched on """
    
    telephony: Optional[UnifiedPresenceTelephony] = None
    """ Returned if *BLF* feature is switched on """
    
    meeting: Optional[UnifiedPresenceMeeting] = None
    """ Returned if *Meetings* feature is switched on """
    

class UpdateUnifiedPresenceGlipVisibility(Enum):
    """ Visibility setting allowing other users to see Glip presence status """
    
    Visible = 'Visible'
    Invisible = 'Invisible'

class UpdateUnifiedPresenceGlipAvailability(Enum):
    """ Availability setting specifing whether to receive Glip notifications or not """
    
    Available = 'Available'
    DND = 'DND'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUnifiedPresenceGlip(DataClassJsonMixin):
    visibility: Optional[UpdateUnifiedPresenceGlipVisibility] = None
    """ Visibility setting allowing other users to see Glip presence status """
    
    availability: Optional[UpdateUnifiedPresenceGlipAvailability] = None
    """ Availability setting specifing whether to receive Glip notifications or not """
    

class UpdateUnifiedPresenceTelephonyAvailability(Enum):
    """ Telephony DND status """
    
    TakeAllCalls = 'TakeAllCalls'
    DoNotAcceptAnyCalls = 'DoNotAcceptAnyCalls'
    DoNotAcceptQueueCalls = 'DoNotAcceptQueueCalls'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUnifiedPresenceTelephony(DataClassJsonMixin):
    availability: Optional[UpdateUnifiedPresenceTelephonyAvailability] = None
    """ Telephony DND status """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UpdateUnifiedPresence(DataClassJsonMixin):
    glip: Optional[UpdateUnifiedPresenceGlip] = None
    telephony: Optional[UpdateUnifiedPresenceTelephony] = None

class GlipTeamInfoType(Enum):
    """ Type of a chat """
    
    Team = 'Team'

class GlipTeamInfoStatus(Enum):
    """ Team status """
    
    Active = 'Active'
    Archived = 'Archived'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipTeamInfo(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a team """
    
    type: Optional[GlipTeamInfoType] = None
    """ Type of a chat """
    
    public: Optional[bool] = None
    """ Team access level """
    
    name: Optional[str] = None
    """ Team name """
    
    description: Optional[str] = None
    """ Team description """
    
    status: Optional[GlipTeamInfoStatus] = None
    """ Team status """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Team creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Team last change datetime in ISO 8601 format """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipNoteInfoLastModifiedBy(DataClassJsonMixin):
    """ Note last modification information """
    
    id: Optional[str] = None
    """ Internal identifier of the user who last updated the note """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipNoteInfoLockedBy(DataClassJsonMixin):
    """
    Returned for the note being edited (locked) at the current moment. Information on the user
    editing the note
    
    Generated by Python OpenAPI Parser
    """
    
    id: Optional[str] = None
    """ Internal identifier of the user editing the note """
    

class GlipNoteInfoStatus(Enum):
    """
    Note publishing status. Any note is created in 'Draft' status. After it is posted it becomes
    'Active'
    
    Generated by Python OpenAPI Parser
    """
    
    Active = 'Active'
    Draft = 'Draft'

class GlipNoteInfoType(Enum):
    Note = 'Note'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipNoteInfo(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a note """
    
    title: Optional[str] = None
    """ Title of a note """
    
    chat_ids: Optional[List[str]] = None
    """ Internal identifiers of the chat(s) where the note is posted or shared. """
    
    preview: Optional[str] = None
    """ Preview of a note (first 150 characters of a body) """
    
    creator: Optional[dict] = None
    """ Note creator information """
    
    last_modified_by: Optional[GlipNoteInfoLastModifiedBy] = None
    """ Note last modification information """
    
    locked_by: Optional[GlipNoteInfoLockedBy] = None
    """
    Returned for the note being edited (locked) at the current moment. Information on the user
    editing the note
    """
    
    status: Optional[GlipNoteInfoStatus] = None
    """
    Note publishing status. Any note is created in 'Draft' status. After it is posted it becomes
    'Active'
    """
    
    creation_time: Optional[str] = None
    """ Creation time """
    
    last_modified_time: Optional[str] = None
    """ Datetime of the note last update """
    
    type: Optional[GlipNoteInfoType] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipTaskList(DataClassJsonMixin):
    records: Optional[list] = None

class GlipEventCreateRecurrence(Enum):
    """
    Event recurrence settings. For non-periodic events the value is 'None'. Must be greater or
    equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year
    
    Generated by Python OpenAPI Parser
    """
    
    None_ = 'None'
    Day = 'Day'
    Weekday = 'Weekday'
    Week = 'Week'
    Month = 'Month'
    Year = 'Year'

class GlipEventCreateEndingOn(Enum):
    """ Iterations end datetime for periodic events. """
    
    None_ = 'None'
    Count = 'Count'
    Date = 'Date'

class GlipEventCreateColor(Enum):
    """ Color of Event title (including its presentation in Calendar) """
    
    Black = 'Black'
    Red = 'Red'
    Orange = 'Orange'
    Yellow = 'Yellow'
    Green = 'Green'
    Blue = 'Blue'
    Purple = 'Purple'
    Magenta = 'Magenta'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipEventCreate(DataClassJsonMixin):
    """
    Required Properties:
     - title
     - start_time
     - end_time
    
    Generated by Python OpenAPI Parser
    """
    
    title: str
    """ Event title """
    
    start_time: str
    """ Datetime of starting an event """
    
    end_time: str
    """ Datetime of ending an event """
    
    id: Optional[str] = None
    """ Internal identifier of an event """
    
    creator_id: Optional[str] = None
    """ Internal identifier of a person created an event """
    
    all_day: Optional[bool] = False
    """ Indicates whether event has some specific time slot or lasts for whole day(s) """
    
    recurrence: Optional[GlipEventCreateRecurrence] = None
    """
    Event recurrence settings. For non-periodic events the value is 'None'. Must be greater or
    equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year
    """
    
    ending_condition: Optional[str] = None
    """ Condition of ending """
    
    ending_after: Optional[int] = None
    """
    Count of iterations. For periodic events only. Value range is 1 - 10. Must be specified if
    'endingCondition' is 'Count'
    """
    
    ending_on: Optional[GlipEventCreateEndingOn] = 'None'
    """ Iterations end datetime for periodic events. """
    
    color: Optional[GlipEventCreateColor] = 'Black'
    """ Color of Event title (including its presentation in Calendar) """
    
    location: Optional[str] = None
    """ Event location """
    
    description: Optional[str] = None
    """ Event details """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipNoteCreate(DataClassJsonMixin):
    """
    Required Properties:
     - title
    
    Generated by Python OpenAPI Parser
    """
    
    title: str
    """ Title of a note. Max allowed legth is 250 characters """
    
    body: Optional[str] = None
    """ Contents of a note; HTML-markuped text. Max allowed length is 1048576 characters (1 Mb). """
    

class GlipCreateGroupType(Enum):
    """
    Type of a group to be created. 'PrivateChat' is a group of 2 members. 'Team' is a chat of 1 and
    more participants, the membership can be modified in future. 'PersonalChat' is a private chat
    thread of a user
    
    Generated by Python OpenAPI Parser
    """
    
    PrivateChat = 'PrivateChat'
    Team = 'Team'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipCreateGroup(DataClassJsonMixin):
    """
    Required Properties:
     - type
    
    Generated by Python OpenAPI Parser
    """
    
    type: GlipCreateGroupType
    """
    Type of a group to be created. 'PrivateChat' is a group of 2 members. 'Team' is a chat of 1 and
    more participants, the membership can be modified in future. 'PersonalChat' is a private chat
    thread of a user
    """
    
    is_public: Optional[bool] = None
    """ For 'Team' group type only. Team access level """
    
    name: Optional[str] = None
    """ For 'Team' group type only. Team name """
    
    description: Optional[str] = None
    """ For 'Team' group type only. Team description """
    
    members: Optional[list] = None
    """ “List of glip members. For 'PrivateChat' group type 2 members only are supported” """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnifiedPresenceListItem(DataClassJsonMixin):
    resource_id: Optional[str] = None
    """ Internal identifier of the resource """
    
    status: Optional[int] = None
    """ Status code of resource retrieval """
    
    body: Optional[dict] = None

class GlipConversationInfoType(Enum):
    """ Type of a conversation """
    
    Direct = 'Direct'
    Personal = 'Personal'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipConversationInfoMembersItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a user """
    
    email: Optional[str] = None
    """ Email of a user """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipConversationInfo(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a conversation """
    
    type: Optional[GlipConversationInfoType] = None
    """ Type of a conversation """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Conversation creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Conversation last change datetime in ISO 8601 format """
    
    members: Optional[List[GlipConversationInfoMembersItem]] = None
    """ List of glip members """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipTeamsList(DataClassJsonMixin):
    """
    Required Properties:
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: list
    """ List of teams """
    

class GlipChatsListWithoutNavigationRecordsItemType(Enum):
    """ Type of a chat """
    
    Everyone = 'Everyone'
    Team = 'Team'
    Group = 'Group'
    Direct = 'Direct'
    Personal = 'Personal'

class GlipChatsListWithoutNavigationRecordsItemStatus(Enum):
    """ For 'Team' chat type only. Team status. """
    
    Active = 'Active'
    Archived = 'Archived'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipChatsListWithoutNavigationRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a chat """
    
    type: Optional[GlipChatsListWithoutNavigationRecordsItemType] = None
    """ Type of a chat """
    
    public: Optional[bool] = None
    """ For 'Team' chat type only. Team access level. """
    
    name: Optional[str] = None
    """ For 'Team','Everyone' chats types only. Chat name. """
    
    description: Optional[str] = None
    """ For 'Team','Everyone' chats types only. Chat description. """
    
    status: Optional[GlipChatsListWithoutNavigationRecordsItemStatus] = None
    """ For 'Team' chat type only. Team status. """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat last change datetime in ISO 8601 format """
    
    members: Optional[list] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipChatsListWithoutNavigation(DataClassJsonMixin):
    """
    Required Properties:
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: List[GlipChatsListWithoutNavigationRecordsItem]
    """ List of chats """
    

class GlipPostPostBodyAttachmentsItemType(Enum):
    """ Type of an attachment """
    
    Event = 'Event'
    File = 'File'
    Note = 'Note'
    Task = 'Task'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipPostPostBodyAttachmentsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an attachment """
    
    type: Optional[GlipPostPostBodyAttachmentsItemType] = None
    """ Type of an attachment """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipPostPostBody(DataClassJsonMixin):
    """
    Required Properties:
     - text
    
    Generated by Python OpenAPI Parser
    """
    
    text: str
    """ Post text. """
    
    attachments: Optional[List[GlipPostPostBodyAttachmentsItem]] = None
    """ Identifier(s) of attachments. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipUpdateTaskAssigneesItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of an assignee """
    

class GlipUpdateTaskCompletenessCondition(Enum):
    Simple = 'Simple'
    AllAssignees = 'AllAssignees'
    Percentage = 'Percentage'

class GlipUpdateTaskColor(Enum):
    Black = 'Black'
    Red = 'Red'
    Orange = 'Orange'
    Yellow = 'Yellow'
    Green = 'Green'
    Blue = 'Blue'
    Purple = 'Purple'
    Magenta = 'Magenta'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipUpdateTask(DataClassJsonMixin):
    subject: Optional[str] = None
    """ Task name/subject. Max allowed length is 250 characters. """
    
    assignees: Optional[List[GlipUpdateTaskAssigneesItem]] = None
    completeness_condition: Optional[GlipUpdateTaskCompletenessCondition] = None
    start_date: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Task start date in UTC time zone """
    
    due_date: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Task due date/time in UTC time zone """
    
    color: Optional[GlipUpdateTaskColor] = None
    section: Optional[str] = None
    """ Task section to group/search by. Max allowed legth is 100 characters """
    
    description: Optional[str] = None
    """ Task details. Max allowed legth is 102400 characters (100kB) """
    
    recurrence: Optional[dict] = None
    attachments: Optional[List[dict]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipGroupList(DataClassJsonMixin):
    """
    Required Properties:
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: list
    """ List of groups/teams/private chats """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateGlipConversationRequest(DataClassJsonMixin):
    """
    Required Properties:
     - members
    
    Generated by Python OpenAPI Parser
    """
    
    members: List[dict]
    """
    List of glip members. The maximum supported number of IDs is 15. User's own ID is optional. If
    `members` section is omitted then 'Personal' chat will be returned
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipPostMembersListBody(DataClassJsonMixin):
    """
    Required Properties:
     - members
    
    Generated by Python OpenAPI Parser
    """
    
    members: List[dict]
    """ List of glip members """
    

class GlipCreateTaskCompletenessCondition(Enum):
    Simple = 'Simple'
    AllAssignees = 'AllAssignees'
    Percentage = 'Percentage'

class GlipCreateTaskColor(Enum):
    Black = 'Black'
    Red = 'Red'
    Orange = 'Orange'
    Yellow = 'Yellow'
    Green = 'Green'
    Blue = 'Blue'
    Purple = 'Purple'
    Magenta = 'Magenta'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipCreateTask(DataClassJsonMixin):
    """
    Required Properties:
     - subject
     - assignees
    
    Generated by Python OpenAPI Parser
    """
    
    subject: str
    """ Task name/subject. Max allowed length is 250 characters. """
    
    assignees: List[dict]
    completeness_condition: Optional[GlipCreateTaskCompletenessCondition] = 'Simple'
    start_date: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Task start date in UTC time zone. """
    
    due_date: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Task due date/time in UTC time zone. """
    
    color: Optional[GlipCreateTaskColor] = 'Black'
    section: Optional[str] = None
    """ Task section to group / search by. Max allowed legth is 100 characters. """
    
    description: Optional[str] = None
    """ Task details. Max allowed legth is 102400 characters (100kB). """
    
    recurrence: Optional[dict] = None
    attachments: Optional[List[dict]] = None

class GlipCompleteTaskStatus(Enum):
    """
    Completeness status. 'Mandatory' if `completenessCondition` is set to `Simple`, otherwise
    'Optional'
    
    Generated by Python OpenAPI Parser
    """
    
    Incomplete = 'Incomplete'
    Complete = 'Complete'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipCompleteTask(DataClassJsonMixin):
    status: Optional[GlipCompleteTaskStatus] = None
    """
    Completeness status. 'Mandatory' if `completenessCondition` is set to `Simple`, otherwise
    'Optional'
    """
    
    assignees: Optional[List[dict]] = None
    completeness_percentage: Optional[int] = None
    """
    Current completeness percentage of a task with the 'Percentage' completeness condition.
    'Mandatory' if `completenessCondition` is set to `Percentage`, otherwise 'Optional'
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipConversationsList(DataClassJsonMixin):
    """
    Required Properties:
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: list
    """ List of conversations """
    

class GlipEveryoneInfoType(Enum):
    """ Type of a chat """
    
    Everyone = 'Everyone'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipEveryoneInfo(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a chat """
    
    type: Optional[GlipEveryoneInfoType] = None
    """ Type of a chat """
    
    name: Optional[str] = None
    """ Chat name """
    
    description: Optional[str] = None
    """ Chat description """
    
    creation_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat creation datetime in ISO 8601 format """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """ Chat last change datetime in ISO 8601 format """
    

class GlipCreatePostAttachmentsItemType(Enum):
    """ Type of attachment """
    
    Card = 'Card'
    Event = 'Event'
    Note = 'Note'

class GlipCreatePostAttachmentsItemRecurrence(Enum):
    """
    Event recurrence settings. For non-periodic events the value is 'None'. Must be greater or
    equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year
    
    Generated by Python OpenAPI Parser
    """
    
    None_ = 'None'
    Day = 'Day'
    Weekday = 'Weekday'
    Week = 'Week'
    Month = 'Month'
    Year = 'Year'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GlipCreatePostAttachmentsItem(DataClassJsonMixin):
    type: Optional[GlipCreatePostAttachmentsItemType] = 'Card'
    """ Type of attachment """
    
    title: Optional[str] = None
    """ Attachment title """
    
    fallback: Optional[str] = None
    """ Default message returned in case the client does not support interactive messages """
    
    color: Optional[str] = None
    """
    Color of Event title, including its presentation in Calendar; or the color of the side border
    of an interactive message of a Card. The default color is 'Black'
    """
    
    intro: Optional[str] = None
    """ Introductory text displayed directly above a message """
    
    author: Optional[dict] = None
    """ Information about the author """
    
    text: Optional[str] = None
    """ Text of attachment (up to 1000 chars), supports GlipDown """
    
    image_uri: Optional[str] = None
    """ Link to an image displayed at the bottom of a message """
    
    thumbnail_uri: Optional[str] = None
    """ Link to an image preview displayed to the right of a message (82x82) """
    
    fields: Optional[list] = None
    """ Individual subsections within a message """
    
    footnote: Optional[dict] = None
    """ Message footer information """
    
    start_time: Optional[str] = None
    """ Datetime of starting an event """
    
    end_time: Optional[str] = None
    """ Datetime of ending an event """
    
    all_day: Optional[bool] = False
    """ Indicates whether an event has some specific time slot or lasts for the whole day(s) """
    
    recurrence: Optional[GlipCreatePostAttachmentsItemRecurrence] = None
    """
    Event recurrence settings. For non-periodic events the value is 'None'. Must be greater or
    equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year
    """
    
    ending_condition: Optional[str] = None
    """ Condition of ending an event """
    
