from ._3 import *

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ScimErrorResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ScimErrorResponseSchemasItem]] = None
    scim_type: Optional[ScimErrorResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class CreateUserSchemasItem(Enum):
    UrnIetfParamsScimSchemasCore_2_0_User = 'urn:ietf:params:scim:schemas:core:2.0:User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUser(DataClassJsonMixin):
    """
    Required Properties:
     - emails
     - name
     - schemas
     - user_name
    
    Generated by Python OpenAPI Parser
    """
    
    emails: list
    schemas: List[CreateUserSchemasItem]
    user_name: str
    """ MUST be same as work type email address """
    
    active: Optional[bool] = False
    """ User status """
    
    addresses: Optional[list] = None
    external_id: Optional[str] = None
    """ external unique resource id defined by provisioning client """
    
    phone_numbers: Optional[list] = None
    photos: Optional[list] = None

class SearchRequestSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_SearchRequest = 'urn:ietf:params:scim:api:messages:2.0:SearchRequest'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchRequest(DataClassJsonMixin):
    count: Optional[int] = None
    """ page size """
    
    filter: Optional[str] = None
    """ only support 'userName' or 'email' filter expressions for now """
    
    schemas: Optional[List[SearchRequestSchemasItem]] = None
    start_index: Optional[int] = None
    """ start index (1-based) """
    

class UserSchemasItem(Enum):
    UrnIetfParamsScimSchemasCore_2_0_User = 'urn:ietf:params:scim:schemas:core:2.0:User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class User(DataClassJsonMixin):
    """
    Required Properties:
     - emails
     - name
     - schemas
     - user_name
    
    Generated by Python OpenAPI Parser
    """
    
    emails: list
    schemas: List[UserSchemasItem]
    user_name: str
    """ MUST be same as work type email address """
    
    active: Optional[bool] = False
    """ user status """
    
    addresses: Optional[list] = None
    external_id: Optional[str] = None
    """ external unique resource id defined by provisioning client """
    
    id: Optional[str] = None
    """ unique resource id defined by RingCentral """
    
    phone_numbers: Optional[list] = None
    photos: Optional[list] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SuperviseCallSessionFrom(DataClassJsonMixin):
    """ Information about a call party that monitors a call """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

class SuperviseCallSessionDirection(Enum):
    """ Direction of a call """
    
    Outbound = 'Outbound'
    Inbound = 'Inbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SuperviseCallSessionOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class SuperviseCallSessionStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SuperviseCallSessionStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class SuperviseCallSessionStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SuperviseCallSessionStatus(DataClassJsonMixin):
    code: Optional[SuperviseCallSessionStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[SuperviseCallSessionStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[SuperviseCallSessionStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SuperviseCallSession(DataClassJsonMixin):
    from_: Optional[SuperviseCallSessionFrom] = field(metadata=config(field_name='from'), default=None)
    """ Information about a call party that monitors a call """
    
    to: Optional[dict] = None
    """ Information about a call party that is monitored """
    
    direction: Optional[SuperviseCallSessionDirection] = None
    """ Direction of a call """
    
    id: Optional[str] = None
    """ Internal identifier of a party that monitors a call """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    owner: Optional[SuperviseCallSessionOwner] = None
    """ Data on a call owner """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    status: Optional[SuperviseCallSessionStatus] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PartyUpdateRequestParty(DataClassJsonMixin):
    """ Party update data """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PartyUpdateRequest(DataClassJsonMixin):
    party: Optional[PartyUpdateRequestParty] = None
    """ Party update data """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallRecordingUpdate(DataClassJsonMixin):
    active: Optional[bool] = None
    """ Recording status """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallRecording(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a call recording """
    
    active: Optional[bool] = None
    """ Call recording status """
    

class PartySuperviseRequestMode(Enum):
    """
    Supervising mode
    
    Example: `Listen`
    Generated by Python OpenAPI Parser
    """
    
    Listen = 'Listen'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PartySuperviseRequest(DataClassJsonMixin):
    """
    Required Properties:
     - mode
     - supervisor_device_id
     - agent_extension_id
    
    Generated by Python OpenAPI Parser
    """
    
    mode: PartySuperviseRequestMode
    """
    Supervising mode
    
    Example: `Listen`
    """
    
    supervisor_device_id: str
    """
    Internal identifier of a supervisor's device
    
    Example: `191888004`
    """
    
    agent_extension_id: str
    """
    Mailbox ID of a user that will be monitored
    
    Example: `400378008008`
    """
    

class CallSessionSessionOriginType(Enum):
    """ Session origin type """
    
    Call = 'Call'
    RingOut = 'RingOut'
    RingMe = 'RingMe'
    Conference = 'Conference'
    GreetingsRecording = 'GreetingsRecording'
    VerificationCall = 'VerificationCall'
    Zoom = 'Zoom'
    CallOut = 'CallOut'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallSessionSessionOrigin(DataClassJsonMixin):
    """ Initial data of a call session """
    
    type: Optional[CallSessionSessionOriginType] = None
    """ Session origin type """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallSessionSessionPartiesItemPark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

class CallSessionSessionPartiesItemDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class CallSessionSessionPartiesItemConferenceRole(Enum):
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    Host = 'Host'
    Participant = 'Participant'

class CallSessionSessionPartiesItemRingOutRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

class CallSessionSessionPartiesItemRingMeRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallSessionSessionPartiesItemRecordingsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a Recording resource """
    
    active: Optional[bool] = None
    """ True if the recording is active. False if the recording is paused. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallSessionSessionPartiesItem(DataClassJsonMixin):
    """ Information on a party of a call session """
    
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[dict] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[CallSessionSessionPartiesItemPark] = None
    """ Call park information """
    
    from_: Optional[dict] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[dict] = None
    """ Data on a called party """
    
    owner: Optional[dict] = None
    """ Data on a call owner """
    
    direction: Optional[CallSessionSessionPartiesItemDirection] = None
    """ Direction of a call """
    
    conference_role: Optional[CallSessionSessionPartiesItemConferenceRole] = None
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    ring_out_role: Optional[CallSessionSessionPartiesItemRingOutRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    ring_me_role: Optional[CallSessionSessionPartiesItemRingMeRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    recordings: Optional[List[CallSessionSessionPartiesItemRecordingsItem]] = None
    """ Active recordings list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallSessionSession(DataClassJsonMixin):
    """ Call session information """
    
    id: Optional[str] = None
    """ Internal identifier of a call session """
    
    origin: Optional[CallSessionSessionOrigin] = None
    """ Initial data of a call session """
    
    voice_call_token: Optional[str] = None
    """ For calls of 'Conference' type only """
    
    parties: Optional[List[CallSessionSessionPartiesItem]] = None
    creation_time: Optional[str] = None
    """ Date and time of the latest session update represented in Unix time format """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallSession(DataClassJsonMixin):
    session: Optional[CallSessionSession] = None
    """ Call session information """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MakeCallOutRequestFrom(DataClassJsonMixin):
    """ Instance id of the caller. It corresponds to the 1st leg of the CallOut call. """
    
    device_id: Optional[str] = None
    """
    Internal identifier of a device
    
    Example: `59474004`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MakeCallOutRequestTo(DataClassJsonMixin):
    """ Phone number of the called party. This number corresponds to the 2nd leg of a CallOut call """
    
    phone_number: Optional[str] = None
    """
    Phone number in E.164 format
    
    Example: `+16502223366`
    """
    
    extension_number: Optional[str] = None
    """
    Extension number
    
    Example: `103`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MakeCallOutRequest(DataClassJsonMixin):
    """
    Required Properties:
     - from_
     - to
    
    Generated by Python OpenAPI Parser
    """
    
    from_: MakeCallOutRequestFrom = field(metadata=config(field_name='from'))
    """ Instance id of the caller. It corresponds to the 1st leg of the CallOut call. """
    
    to: MakeCallOutRequestTo
    """ Phone number of the called party. This number corresponds to the 2nd leg of a CallOut call """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class TransferTarget(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """ Phone number """
    
    voicemail: Optional[str] = None
    """ Voicemail owner extension identifier """
    
    park_orbit: Optional[str] = None
    """ Park orbit identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AnswerTarget(DataClassJsonMixin):
    device_id: Optional[str] = None
    """
    Device identifier that is used to answer the incoming call.
    
    Example: `400018633008`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ForwardTarget(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """ Phone number """
    
    voicemail: Optional[str] = None
    """ Voicemail owner extension identifier """
    

class ReplyPartyDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplyParty(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[dict] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[dict] = None
    """ Call park information """
    
    from_: Optional[dict] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[dict] = None
    """ Data on a called party """
    
    owner: Optional[dict] = None
    """ Data on a call owner """
    
    direction: Optional[ReplyPartyDirection] = None
    """ Direction of a call """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallPartyFlip(DataClassJsonMixin):
    call_flip_id: Optional[str] = None
    """ Call flip id """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class IgnoreRequestBody(DataClassJsonMixin):
    """
    Required Properties:
     - device_id
    
    Generated by Python OpenAPI Parser
    """
    
    device_id: str
    """
    Internal device identifier
    
    Example: `400020454008`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class BridgeTargetRequest(DataClassJsonMixin):
    """
    Required Properties:
     - telephony_session_id
     - party_id
    
    Generated by Python OpenAPI Parser
    """
    
    telephony_session_id: str
    """ Internal identifier of a call session to be connected to (bridged) """
    
    party_id: str
    """ Internal identifier of a call party to be connected to (bridged) """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PickupTarget(DataClassJsonMixin):
    """
    Required Properties:
     - device_id
    
    Generated by Python OpenAPI Parser
    """
    
    device_id: str
    """
    Device identifier that is used to pick up the parked call.
    
    Example: `400018633008`
    """
    

class CallPartyReplyReplyWithPatternPattern(Enum):
    """
    Predefined reply pattern name.
    
    Example: `OnMyWay`
    Generated by Python OpenAPI Parser
    """
    
    WillCallYouBack = 'WillCallYouBack'
    CallMeBack = 'CallMeBack'
    OnMyWay = 'OnMyWay'
    OnTheOtherLine = 'OnTheOtherLine'
    WillCallYouBackLater = 'WillCallYouBackLater'
    CallMeBackLater = 'CallMeBackLater'
    InAMeeting = 'InAMeeting'
    OnTheOtherLineNoCall = 'OnTheOtherLineNoCall'

class CallPartyReplyReplyWithPatternTimeUnit(Enum):
    """
    Time unit name.
    
    Example: `Minute`
    Generated by Python OpenAPI Parser
    """
    
    Minute = 'Minute'
    Hour = 'Hour'
    Day = 'Day'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallPartyReplyReplyWithPattern(DataClassJsonMixin):
    pattern: Optional[CallPartyReplyReplyWithPatternPattern] = None
    """
    Predefined reply pattern name.
    
    Example: `OnMyWay`
    """
    
    time: Optional[int] = None
    """
    Number of time units. Applicable only to WillCallYouBack, CallMeBack patterns.
    
    Example: `5`
    """
    
    time_unit: Optional[CallPartyReplyReplyWithPatternTimeUnit] = None
    """
    Time unit name.
    
    Example: `Minute`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallPartyReply(DataClassJsonMixin):
    reply_with_text: Optional[str] = None
    """ Text to reply """
    
    reply_with_pattern: Optional[CallPartyReplyReplyWithPattern] = None

class SuperviseCallSessionRequestMode(Enum):
    """
    Supervising mode
    
    Example: `Listen`
    Generated by Python OpenAPI Parser
    """
    
    Listen = 'Listen'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SuperviseCallSessionRequest(DataClassJsonMixin):
    """
    Required Properties:
     - mode
     - supervisor_device_id
    
    Generated by Python OpenAPI Parser
    """
    
    mode: SuperviseCallSessionRequestMode
    """
    Supervising mode
    
    Example: `Listen`
    """
    
    supervisor_device_id: str
    """
    Internal identifier of a supervisor's device which will be used for call session monitoring
    
    Example: `191888004`
    """
    
    agent_extension_number: Optional[str] = None
    """
    Extension number of the user that will be monitored
    
    Example: `105`
    """
    
    agent_extension_id: Optional[str] = None
    """
    Extension identifier of the user that will be monitored
    
    Example: `400378008008`
    """
    

class PartySuperviseResponseDirection(Enum):
    """ Direction of a call """
    
    Outbound = 'Outbound'
    Inbound = 'Inbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PartySuperviseResponse(DataClassJsonMixin):
    from_: Optional[dict] = field(metadata=config(field_name='from'), default=None)
    """ Information about a call party that monitors a call """
    
    to: Optional[dict] = None
    """ Information about a call party that is monitored """
    
    direction: Optional[PartySuperviseResponseDirection] = None
    """ Direction of a call """
    
    id: Optional[str] = None
    """ Internal identifier of a party that monitors a call """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    
    muted: Optional[bool] = None
    """ Specifies if a call party is muted """
    
    owner: Optional[dict] = None
    """ Deprecated. Infromation a call owner """
    
    stand_alone: Optional[bool] = None
    """ Specifies if a device is stand-alone """
    
    status: Optional[dict] = None

class DataExportTaskStatus(Enum):
    """ Task status """
    
    Accepted = 'Accepted'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Expired = 'Expired'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DataExportTaskSpecificContactsItem(DataClassJsonMixin):
    """
    List of users whose data is collected. The following data is exported: posts, tasks, events,
    etc. posted by the user(s); posts addressing the user(s) via direct and @Mentions; tasks
    assigned to the listed user(s)
    
    Generated by Python OpenAPI Parser
    """
    
    id: Optional[str] = None
    """ Internal identifier of a contact """
    
    email: Optional[str] = None
    """ Email address of a contact """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DataExportTaskSpecific(DataClassJsonMixin):
    """ Information specififed in request """
    
    time_from: Optional[str] = None
    """ Starting time for data collection """
    
    time_to: Optional[str] = None
    """ Ending time for data collection """
    
    contacts: Optional[List[DataExportTaskSpecificContactsItem]] = None
    chat_ids: Optional[List[str]] = None
    """ List of chats from which the data (posts, files, tasks, events, notes, etc.) will be collected """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DataExportTaskDatasetsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a dataset """
    
    uri: Optional[str] = None
    """ Link for downloading a dataset """
    
    size: Optional[int] = None
    """ Size of ta dataset in bytes """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DataExportTask(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI of a task """
    
    id: Optional[str] = None
    """ Internal identifier of a task """
    
    creation_time: Optional[str] = None
    """ Task creation datetime """
    
    last_modified_time: Optional[str] = None
    """ Task last modification datetime """
    
    status: Optional[DataExportTaskStatus] = None
    """ Task status """
    
    creator: Optional[dict] = None
    """ Task creator information """
    
    specific: Optional[DataExportTaskSpecific] = None
    """ Information specififed in request """
    
    datasets: Optional[List[DataExportTaskDatasetsItem]] = None
    """ Data collection sets. Returned by task ID """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DataExportTaskListNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DataExportTaskListNavigation(DataClassJsonMixin):
    first_page: Optional[DataExportTaskListNavigationFirstPage] = None
    """ Canonical URI for the first page of the list """
    
    next_page: Optional[dict] = None
    """ Canonical URI for the next page of the list """
    
    previous_page: Optional[dict] = None
    """ Canonical URI for the previous page of the list """
    
    last_page: Optional[dict] = None
    """ Canonical URI for the last page of the list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DataExportTaskListPaging(DataClassJsonMixin):
    page: Optional[int] = None
    """
    The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result
    is empty (because non-existent page was specified or perPage=0 was requested)
    """
    
    per_page: Optional[int] = None
    """
    Current page size, describes how many items are in each page. Default value is 100. Maximum
    value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000)
    is applied
    """
    
    page_start: Optional[int] = None
    """
    The zero-based number of the first element on the current page. Omitted if the page is omitted
    or result is empty
    """
    
    page_end: Optional[int] = None
    """
    The zero-based index of the last element on the current page. Omitted if the page is omitted or
    result is empty
    """
    
    total_pages: Optional[int] = None
    """
    The total number of pages in a dataset. May be omitted for some resources due to performance
    reasons
    """
    
    total_elements: Optional[int] = None
    """
    The total number of elements in a dataset. May be omitted for some resource due to performance
    reasons
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DataExportTaskList(DataClassJsonMixin):
    tasks: Optional[List[dict]] = None
    navigation: Optional[DataExportTaskListNavigation] = None
    paging: Optional[DataExportTaskListPaging] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateDataExportTaskRequest(DataClassJsonMixin):
    time_from: Optional[str] = None
    """
    Starting time for data collection. The default value is `timeTo` minus 24 hours. Max allowed
    time frame between `timeFrom` and `timeTo` is 6 months
    """
    
    time_to: Optional[str] = None
    """
    Ending time for data collection. The default value is current time. Max allowed time frame
    between `timeFrom` and `timeTo` is 6 months
    """
    
    contacts: Optional[List[dict]] = None
    chat_ids: Optional[List[str]] = None
    """
    List of chats from which the data (posts, files, tasks, events, notes, etc.) will be collected.
    Maximum number of chats supported is 10
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateMessageStoreReportRequest(DataClassJsonMixin):
    date_from: Optional[str] = None
    """
    Starting time for collecting messages. The default value equals to the current time minus 24
    hours
    """
    
    date_to: Optional[str] = None
    """ Ending time for collecting messages. The default value is the current time """
    

class MessageStoreReportStatus(Enum):
    """ Status of a message store report task """
    
    Accepted = 'Accepted'
    Pending = 'Pending'
    InProgress = 'InProgress'
    AttemptFailed = 'AttemptFailed'
    Failed = 'Failed'
    Completed = 'Completed'
    Cancelled = 'Cancelled'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MessageStoreReport(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a message store report task """
    
    uri: Optional[str] = None
    """ Link to a task """
    
    status: Optional[MessageStoreReportStatus] = None
    """ Status of a message store report task """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    creation_time: Optional[str] = None
    """ Task creation time """
    
    last_modified_time: Optional[str] = None
    """ Time of the last task modification """
    
    date_to: Optional[str] = None
    """ Ending time for collecting messages """
    
    date_from: Optional[str] = None
    """ Starting time for collecting messages """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MessageStoreReportArchiveRecordsItem(DataClassJsonMixin):
    size: Optional[int] = None
    """ Archive size in bytes """
    
    uri: Optional[str] = None
    """ Link for archive download """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class MessageStoreReportArchive(DataClassJsonMixin):
    records: Optional[List[MessageStoreReportArchiveRecordsItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListMeetingRecordingsResponseRecordsItemMeeting(DataClassJsonMixin):
    id: Optional[str] = None
    topic: Optional[str] = None
    start_time: Optional[str] = None

class ListMeetingRecordingsResponseRecordsItemRecordingItemContentType(Enum):
    VideoMp4 = 'video/mp4'
    AudioM4a = 'audio/m4a'
    TextVtt = 'text/vtt'

class ListMeetingRecordingsResponseRecordsItemRecordingItemStatus(Enum):
    Completed = 'Completed'
    Processing = 'Processing'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListMeetingRecordingsResponseRecordsItemRecordingItem(DataClassJsonMixin):
    id: Optional[str] = None
    content_download_uri: Optional[str] = None
    content_type: Optional[ListMeetingRecordingsResponseRecordsItemRecordingItemContentType] = None
    size: Optional[int] = None
    start_time: Optional[str] = None
    """ Starting time of a recording """
    
    end_time: Optional[str] = None
    """ Ending time of a recording """
    
    status: Optional[ListMeetingRecordingsResponseRecordsItemRecordingItemStatus] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListMeetingRecordingsResponseRecordsItem(DataClassJsonMixin):
    meeting: Optional[ListMeetingRecordingsResponseRecordsItemMeeting] = None
    recording: Optional[List[ListMeetingRecordingsResponseRecordsItemRecordingItem]] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListMeetingRecordingsResponsePaging(DataClassJsonMixin):
    page: Optional[int] = None
    """
    The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result
    is empty (because non-existent page was specified or perPage=0 was requested)
    """
    
    per_page: Optional[int] = None
    """
    Current page size, describes how many items are in each page. Default value is 100. Maximum
    value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000)
    is applied
    """
    
    page_start: Optional[int] = None
    """
    The zero-based number of the first element on the current page. Omitted if the page is omitted
    or result is empty
    """
    
    page_end: Optional[int] = None
    """
    The zero-based index of the last element on the current page. Omitted if the page is omitted or
    result is empty
    """
    
    total_pages: Optional[int] = None
    """
    The total number of pages in a dataset. May be omitted for some resources due to performance
    reasons
    """
    
    total_elements: Optional[int] = None
    """
    The total number of elements in a dataset. May be omitted for some resource due to performance
    reasons
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListMeetingRecordingsResponseNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListMeetingRecordingsResponseNavigation(DataClassJsonMixin):
    first_page: Optional[ListMeetingRecordingsResponseNavigationFirstPage] = None
    """ Canonical URI for the first page of the list """
    
    next_page: Optional[dict] = None
    """ Canonical URI for the next page of the list """
    
    previous_page: Optional[dict] = None
    """ Canonical URI for the previous page of the list """
    
    last_page: Optional[dict] = None
    """ Canonical URI for the last page of the list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListMeetingRecordingsResponse(DataClassJsonMixin):
    records: Optional[List[ListMeetingRecordingsResponseRecordsItem]] = None
    paging: Optional[ListMeetingRecordingsResponsePaging] = None
    navigation: Optional[ListMeetingRecordingsResponseNavigation] = None

class CustomFieldsResourceRecordsItemCategory(Enum):
    """ Object category to attach custom fields """
    
    User = 'User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CustomFieldsResourceRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Custom field identifier """
    
    category: Optional[CustomFieldsResourceRecordsItemCategory] = None
    """ Object category to attach custom fields """
    
    display_name: Optional[str] = None
    """ Custom field display name """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CustomFieldsResource(DataClassJsonMixin):
    records: Optional[List[CustomFieldsResourceRecordsItem]] = None

class CustomFieldCreateRequestCategory(Enum):
    """ Object category to attach custom fields """
    
    User = 'User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CustomFieldCreateRequest(DataClassJsonMixin):
    category: Optional[CustomFieldCreateRequestCategory] = None
    """ Object category to attach custom fields """
    
    display_name: Optional[str] = None
    """ Custom field display name """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CustomFieldUpdateRequest(DataClassJsonMixin):
    display_name: Optional[str] = None
    """ Custom field display name """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAPIVersionsResponseApiVersionsItem(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Canonical URI of API versions """
    
    version_string: Optional[str] = None
    """ Version of the RingCentral REST API """
    
    release_date: Optional[str] = None
    """ Release date of this version """
    
    uri_string: Optional[str] = None
    """ URI part determining the current version """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAPIVersionsResponse(DataClassJsonMixin):
    """
    Example:
        ```json
        {
            "application/json": {
                "uri": "https://platform.ringcentral.com/restapi",
                "apiVersions": [
                    {
                        "uri": "https://platform.ringcentral.com/restapi/v1.0",
                        "versionString": "1.0.34",
                        "releaseDate": "2018-02-09T00:00:00.000Z",
                        "uriString": "v1.0"
                    }
                ],
                "serverVersion": "10.0.4.7854",
                "serverRevision": "32f2a96b769c"
            }
        }
        ```
    
    Generated by Python OpenAPI Parser
    """
    
    uri: Optional[str] = None
    """ Canonical URI of the API version """
    
    api_versions: Optional[List[ReadAPIVersionsResponseApiVersionsItem]] = None
    """ Full API version information: uri, number, release date """
    
    server_version: Optional[str] = None
    """ Server version """
    
    server_revision: Optional[str] = None
    """ Server revision """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadAPIVersionResponse(DataClassJsonMixin):
    """
    Example:
        ```json
        {
            "application/json": {
                "uri": "https://platform.ringcentral.com/restapi/v1.0",
                "versionString": "1.0.34",
                "releaseDate": "2018-02-09T00:00:00.000Z",
                "uriString": "v1.0"
            }
        }
        ```
    
    Generated by Python OpenAPI Parser
    """
    
    uri: Optional[str] = None
    """ Canonical URI of the version info resource """
    
    version_string: Optional[str] = None
    """ Version of the RingCentral REST API """
    
    release_date: Optional[str] = None
    """ Release date of this version """
    
    uri_string: Optional[str] = None
    """ URI part determining the current version """
    

class ReadUserCallLogDirectionItem(Enum):
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class ReadUserCallLogTypeItem(Enum):
    Voice = 'Voice'
    Fax = 'Fax'

class ReadUserCallLogTransportItem(Enum):
    PSTN = 'PSTN'
    VoIP = 'VoIP'

class ReadUserCallLogView(Enum):
    Simple = 'Simple'
    Detailed = 'Detailed'

class ReadUserCallLogRecordingType(Enum):
    Automatic = 'Automatic'
    OnDemand = 'OnDemand'
    All = 'All'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemFromDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemFrom(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[ReadUserCallLogResponseRecordsItemFromDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemToDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemTo(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[ReadUserCallLogResponseRecordsItemToDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemExtension(DataClassJsonMixin):
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    

class ReadUserCallLogResponseRecordsItemType(Enum):
    """ Call type """
    
    Voice = 'Voice'
    Fax = 'Fax'

class ReadUserCallLogResponseRecordsItemTransport(Enum):
    """ For 'Detailed' view only. Call transport """
    
    PSTN = 'PSTN'
    VoIP = 'VoIP'

class ReadUserCallLogResponseRecordsItemLegsItemAction(Enum):
    """ Action description of the call operation """
    
    Unknown = 'Unknown'
    Phone_Call = 'Phone Call'
    Phone_Login = 'Phone Login'
    Incoming_Fax = 'Incoming Fax'
    Accept_Call = 'Accept Call'
    External_Application = 'External Application'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    Outgoing_Fax = 'Outgoing Fax'
    CallOut_CallMe = 'CallOut-CallMe'
    Call_Return = 'Call Return'
    Calling_Card = 'Calling Card'
    Monitoring = 'Monitoring'
    Ring_Directly = 'Ring Directly'
    RingOut_Web = 'RingOut Web'
    Text_Relay = 'Text Relay'
    VoIP_Call = 'VoIP Call'
    RingOut_PC = 'RingOut PC'
    RingMe = 'RingMe'
    Transfer = 'Transfer'
    OBJECT_411_Info = '411 Info'
    Emergency = 'Emergency'
    E911_Update = 'E911 Update'
    Support = 'Support'
    RingOut_Mobile = 'RingOut Mobile'
    MeetingsCall = 'MeetingsCall'
    SilentMonitoring = 'SilentMonitoring'

class ReadUserCallLogResponseRecordsItemLegsItemDirection(Enum):
    """ Call direction """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemLegsItemBilling(DataClassJsonMixin):
    """ Billing information related to the call """
    
    cost_included: Optional[float] = None
    """
    Cost per minute, paid and already included in your RingCentral Plan. For example International
    Calls
    """
    
    cost_purchased: Optional[float] = None
    """ Cost per minute, paid and not included in your RingCentral Plan """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemLegsItemDelegate(DataClassJsonMixin):
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    
    Generated by Python OpenAPI Parser
    """
    
    id: Optional[str] = None
    """ Internal identifier of a Secretary extension """
    
    name: Optional[str] = None
    """ Custom name of a Secretary extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemLegsItemExtension(DataClassJsonMixin):
    """ Information on extension """
    
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    

class ReadUserCallLogResponseRecordsItemLegsItemLegType(Enum):
    """ Leg type """
    
    SipForwarding = 'SipForwarding'
    ServiceMinus2 = 'ServiceMinus2'
    ServiceMinus3 = 'ServiceMinus3'
    PstnToSip = 'PstnToSip'
    Accept = 'Accept'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    TestCall = 'TestCall'
    FaxSent = 'FaxSent'
    CallBack = 'CallBack'
    CallingCard = 'CallingCard'
    RingDirectly = 'RingDirectly'
    RingOutWebToSubscriber = 'RingOutWebToSubscriber'
    RingOutWebToCaller = 'RingOutWebToCaller'
    SipToPstnMetered = 'SipToPstnMetered'
    RingOutClientToSubscriber = 'RingOutClientToSubscriber'
    RingOutClientToCaller = 'RingOutClientToCaller'
    RingMe = 'RingMe'
    TransferCall = 'TransferCall'
    SipToPstnUnmetered = 'SipToPstnUnmetered'
    RingOutDeviceToSubscriber = 'RingOutDeviceToSubscriber'
    RingOutDeviceToCaller = 'RingOutDeviceToCaller'
    RingOutOneLegToCaller = 'RingOutOneLegToCaller'
    ExtensionToExtension = 'ExtensionToExtension'
    CallPark = 'CallPark'
    PagingServer = 'PagingServer'
    Hunting = 'Hunting'
    OutgoingFreeSpDl = 'OutgoingFreeSpDl'
    ParkLocation = 'ParkLocation'
    ConferenceCall = 'ConferenceCall'
    MobileApp = 'MobileApp'
    Monitoring = 'Monitoring'
    MoveToConference = 'MoveToConference'
    Unknown = 'Unknown'

class ReadUserCallLogResponseRecordsItemLegsItemType(Enum):
    """ Call type """
    
    Voice = 'Voice'
    Fax = 'Fax'

class ReadUserCallLogResponseRecordsItemLegsItemResult(Enum):
    """ Status description of the call operation """
    
    Unknown = 'Unknown'
    Accepted = 'Accepted'
    CallConnected = 'Call connected'
    In_Progress = 'In Progress'
    Voicemail = 'Voicemail'
    Reply = 'Reply'
    Missed = 'Missed'
    Busy = 'Busy'
    Rejected = 'Rejected'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Blocked = 'Blocked'
    SuspendedAccount = 'Suspended account'
    Call_Failed = 'Call Failed'
    Call_Failure = 'Call Failure'
    Internal_Error = 'Internal Error'
    IP_Phone_Offline = 'IP Phone Offline'
    No_Calling_Credit = 'No Calling Credit'
    Not_Allowed = 'Not Allowed'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    Answered_Not_Accepted = 'Answered Not Accepted'
    Stopped = 'Stopped'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Abandoned = 'Abandoned'
    Declined = 'Declined'
    Received = 'Received'
    FaxOn_Demand = 'Fax on Demand'
    Partial_Receive = 'Partial Receive'
    Receive_Error = 'Receive Error'
    Fax_Receipt_Error = 'Fax Receipt Error'
    Sent = 'Sent'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Send_Error = 'Send Error'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'

class ReadUserCallLogResponseRecordsItemLegsItemReason(Enum):
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    
    Generated by Python OpenAPI Parser
    """
    
    Accepted = 'Accepted'
    Connected = 'Connected'
    Line_Busy = 'line Busy'
    Not_Answered = 'Not Answered'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Stopped = 'Stopped'
    Internal_Error = 'Internal Error'
    No_Credit = 'No Credit'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Bad_Number = 'Bad Number'
    Info_411_Restricted = 'Info 411 Restricted'
    Customer_611_Restricted = 'Customer 611 Restricted'
    No_Digital_Line = 'No Digital Line'
    Failed_Try_Again = 'Failed Try Again'
    Max_Call_Limit = 'Max Call Limit'
    Too_Many_Calls = 'Too Many Calls'
    Calls_Not_Accepted = 'Calls Not Accepted'
    Number_Not_Allowed = 'Number Not Allowed'
    Number_Blocked = 'Number Blocked'
    Number_Disabled = 'Number Disabled'
    Not_Allowed = 'Not Allowed'
    Resource_Error = 'Resource Error'
    Call_Loop = 'Call Loop'
    Fax_Not_Received = 'Fax Not Received'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'
    Fax_Prepare_Error = 'Fax Prepare Error'
    Fax_Save_Error = 'Fax Save Error'
    Fax_Send_Error = 'Fax Send Error'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemLegsItemFromDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemLegsItemFrom(DataClassJsonMixin):
    """ Caller information """
    
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[ReadUserCallLogResponseRecordsItemLegsItemFromDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemLegsItemToDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemLegsItemTo(DataClassJsonMixin):
    """ Callee information """
    
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[ReadUserCallLogResponseRecordsItemLegsItemToDevice] = None

class ReadUserCallLogResponseRecordsItemLegsItemTransport(Enum):
    """ Call transport """
    
    PSTN = 'PSTN'
    VoIP = 'VoIP'

class ReadUserCallLogResponseRecordsItemLegsItemRecordingType(Enum):
    """ Indicates recording mode used """
    
    Automatic = 'Automatic'
    OnDemand = 'OnDemand'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemLegsItemRecording(DataClassJsonMixin):
    """ Call recording data. Returned if the call is recorded """
    
    id: Optional[str] = None
    """ Internal identifier of the call recording """
    
    uri: Optional[str] = None
    """ Link to the call recording metadata resource """
    
    type: Optional[ReadUserCallLogResponseRecordsItemLegsItemRecordingType] = None
    """ Indicates recording mode used """
    
    content_uri: Optional[str] = None
    """ Link to the call recording binary content """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemLegsItemMessage(DataClassJsonMixin):
    """ Linked message (Fax/Voicemail) """
    
    id: Optional[str] = None
    """ Internal identifier of a message """
    
    type: Optional[str] = None
    """ Type of a message """
    
    uri: Optional[str] = None
    """ Link to a message resource """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemLegsItem(DataClassJsonMixin):
    action: Optional[ReadUserCallLogResponseRecordsItemLegsItemAction] = None
    """ Action description of the call operation """
    
    direction: Optional[ReadUserCallLogResponseRecordsItemLegsItemDirection] = None
    """ Call direction """
    
    billing: Optional[ReadUserCallLogResponseRecordsItemLegsItemBilling] = None
    """ Billing information related to the call """
    
    delegate: Optional[ReadUserCallLogResponseRecordsItemLegsItemDelegate] = None
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    duration: Optional[int] = None
    """ Call duration in seconds """
    
    extension: Optional[ReadUserCallLogResponseRecordsItemLegsItemExtension] = None
    """ Information on extension """
    
    leg_type: Optional[ReadUserCallLogResponseRecordsItemLegsItemLegType] = None
    """ Leg type """
    
    start_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including
    timezone, for example 2016-03-10T18:07:52.534Z
    """
    
    type: Optional[ReadUserCallLogResponseRecordsItemLegsItemType] = None
    """ Call type """
    
    result: Optional[ReadUserCallLogResponseRecordsItemLegsItemResult] = None
    """ Status description of the call operation """
    
    reason: Optional[ReadUserCallLogResponseRecordsItemLegsItemReason] = None
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    """
    
    reason_description: Optional[str] = None
    from_: Optional[ReadUserCallLogResponseRecordsItemLegsItemFrom] = field(metadata=config(field_name='from'), default=None)
    """ Caller information """
    
    to: Optional[ReadUserCallLogResponseRecordsItemLegsItemTo] = None
    """ Callee information """
    
    transport: Optional[ReadUserCallLogResponseRecordsItemLegsItemTransport] = None
    """ Call transport """
    
    recording: Optional[ReadUserCallLogResponseRecordsItemLegsItemRecording] = None
    """ Call recording data. Returned if the call is recorded """
    
    short_recording: Optional[bool] = None
    """
    Indicates that the recording is too short and therefore wouldn't be returned. The flag is not
    returned if the value is false
    """
    
    master: Optional[bool] = None
    """ Returned for 'Detailed' call log. Specifies if the leg is master-leg """
    
    message: Optional[ReadUserCallLogResponseRecordsItemLegsItemMessage] = None
    """ Linked message (Fax/Voicemail) """
    
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemBilling(DataClassJsonMixin):
    """ Billing information related to the call """
    
    cost_included: Optional[float] = None
    """
    Cost per minute, paid and already included in your RingCentral Plan. For example International
    Calls
    """
    
    cost_purchased: Optional[float] = None
    """ Cost per minute, paid and not included in your RingCentral Plan """
    

class ReadUserCallLogResponseRecordsItemDirection(Enum):
    """ Call direction """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemMessage(DataClassJsonMixin):
    """ Linked message (Fax/Voicemail) """
    
    id: Optional[str] = None
    """ Internal identifier of a message """
    
    type: Optional[str] = None
    """ Type of a message """
    
    uri: Optional[str] = None
    """ Link to a message resource """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemDelegate(DataClassJsonMixin):
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    
    Generated by Python OpenAPI Parser
    """
    
    id: Optional[str] = None
    """ Internal identifier of a Secretary extension """
    
    name: Optional[str] = None
    """ Custom name of a Secretary extension """
    

class ReadUserCallLogResponseRecordsItemRecordingType(Enum):
    """ Indicates recording mode used """
    
    Automatic = 'Automatic'
    OnDemand = 'OnDemand'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItemRecording(DataClassJsonMixin):
    """ Call recording data. Returned if a call is recorded """
    
    id: Optional[str] = None
    """ Internal identifier of the call recording """
    
    uri: Optional[str] = None
    """ Link to the call recording metadata resource """
    
    type: Optional[ReadUserCallLogResponseRecordsItemRecordingType] = None
    """ Indicates recording mode used """
    
    content_uri: Optional[str] = None
    """ Link to the call recording binary content """
    

class ReadUserCallLogResponseRecordsItemAction(Enum):
    """ Action description of the call operation """
    
    Unknown = 'Unknown'
    Phone_Login = 'Phone Login'
    Calling_Card = 'Calling Card'
    VoIP_Call = 'VoIP Call'
    Phone_Call = 'Phone Call'
    Paging = 'Paging'
    Hunting = 'Hunting'
    Call_Park = 'Call Park'
    Monitoring = 'Monitoring'
    Text_Relay = 'Text Relay'
    External_Application = 'External Application'
    Park_Location = 'Park Location'
    CallOut_CallMe = 'CallOut-CallMe'
    Conference_Call = 'Conference Call'
    Move = 'Move'
    RC_Meetings = 'RC Meetings'
    Accept_Call = 'Accept Call'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    RingMe = 'RingMe'
    Transfer = 'Transfer'
    Call_Return = 'Call Return'
    Ring_Directly = 'Ring Directly'
    RingOut_Web = 'RingOut Web'
    RingOut_PC = 'RingOut PC'
    RingOut_Mobile = 'RingOut Mobile'
    Emergency = 'Emergency'
    E911_Update = 'E911 Update'
    Support = 'Support'
    Incoming_Fax = 'Incoming Fax'
    Outgoing_Fax = 'Outgoing Fax'

class ReadUserCallLogResponseRecordsItemResult(Enum):
    """ Status description of the call operation """
    
    Unknown = 'Unknown'
    Accepted = 'Accepted'
    CallConnected = 'Call connected'
    In_Progress = 'In Progress'
    Voicemail = 'Voicemail'
    Reply = 'Reply'
    Missed = 'Missed'
    Busy = 'Busy'
    Rejected = 'Rejected'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Blocked = 'Blocked'
    SuspendedAccount = 'Suspended account'
    Call_Failed = 'Call Failed'
    Call_Failure = 'Call Failure'
    Internal_Error = 'Internal Error'
    IP_Phone_Offline = 'IP Phone Offline'
    No_Calling_Credit = 'No Calling Credit'
    Not_Allowed = 'Not Allowed'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    Answered_Not_Accepted = 'Answered Not Accepted'
    Stopped = 'Stopped'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Abandoned = 'Abandoned'
    Declined = 'Declined'
    Received = 'Received'
    FaxOn_Demand = 'Fax on Demand'
    Partial_Receive = 'Partial Receive'
    Receive_Error = 'Receive Error'
    Fax_Receipt_Error = 'Fax Receipt Error'
    Sent = 'Sent'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Send_Error = 'Send Error'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'

class ReadUserCallLogResponseRecordsItemReason(Enum):
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    
    Generated by Python OpenAPI Parser
    """
    
    Accepted = 'Accepted'
    Connected = 'Connected'
    Line_Busy = 'line Busy'
    Not_Answered = 'Not Answered'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Stopped = 'Stopped'
    Internal_Error = 'Internal Error'
    No_Credit = 'No Credit'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Bad_Number = 'Bad Number'
    Info_411_Restricted = 'Info 411 Restricted'
    Customer_611_Restricted = 'Customer 611 Restricted'
    No_Digital_Line = 'No Digital Line'
    Failed_Try_Again = 'Failed Try Again'
    Max_Call_Limit = 'Max Call Limit'
    Too_Many_Calls = 'Too Many Calls'
    Calls_Not_Accepted = 'Calls Not Accepted'
    Number_Not_Allowed = 'Number Not Allowed'
    Number_Blocked = 'Number Blocked'
    Number_Disabled = 'Number Disabled'
    Resource_Error = 'Resource Error'
    Call_Loop = 'Call Loop'
    Fax_Not_Received = 'Fax Not Received'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'
    Fax_Prepare_Error = 'Fax Prepare Error'
    Fax_Save_Error = 'Fax Save Error'
    Fax_Send_Error = 'Fax Send Error'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a cal log record """
    
    uri: Optional[str] = None
    """ Canonical URI of a call log record """
    
    session_id: Optional[str] = None
    """ Internal identifier of a call session """
    
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    
    from_: Optional[ReadUserCallLogResponseRecordsItemFrom] = field(metadata=config(field_name='from'), default=None)
    to: Optional[ReadUserCallLogResponseRecordsItemTo] = None
    extension: Optional[ReadUserCallLogResponseRecordsItemExtension] = None
    type: Optional[ReadUserCallLogResponseRecordsItemType] = None
    """ Call type """
    
    transport: Optional[ReadUserCallLogResponseRecordsItemTransport] = None
    """ For 'Detailed' view only. Call transport """
    
    legs: Optional[List[ReadUserCallLogResponseRecordsItemLegsItem]] = None
    """ For 'Detailed' view only. Leg description """
    
    billing: Optional[ReadUserCallLogResponseRecordsItemBilling] = None
    """ Billing information related to the call """
    
    direction: Optional[ReadUserCallLogResponseRecordsItemDirection] = None
    """ Call direction """
    
    message: Optional[ReadUserCallLogResponseRecordsItemMessage] = None
    """ Linked message (Fax/Voicemail) """
    
    start_time: Optional[str] = None
    """
    The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including
    timezone, for example 2016-03-10T18:07:52.534Z
    """
    
    delegate: Optional[ReadUserCallLogResponseRecordsItemDelegate] = None
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    """
    
    deleted: Optional[bool] = None
    """ Indicates whether the record is deleted. Returned for deleted records, for ISync requests """
    
    duration: Optional[int] = None
    """ Call duration in seconds """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    For 'Detailed' view only. The datetime when the call log record was modified in (ISO
    8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
    2016-03-10T18:07:52.534Z
    """
    
    recording: Optional[ReadUserCallLogResponseRecordsItemRecording] = None
    """ Call recording data. Returned if a call is recorded """
    
    short_recording: Optional[bool] = None
    """
    Indicates that the recording is too short and therefore wouldn't be returned. The flag is not
    returned if the value is false
    """
    
    action: Optional[ReadUserCallLogResponseRecordsItemAction] = None
    """ Action description of the call operation """
    
    result: Optional[ReadUserCallLogResponseRecordsItemResult] = None
    """ Status description of the call operation """
    
    reason: Optional[ReadUserCallLogResponseRecordsItemReason] = None
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    """
    
    reason_description: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseNavigationFirstPage(DataClassJsonMixin):
    """ Canonical URI for the first page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseNavigationNextPage(DataClassJsonMixin):
    """ Canonical URI for the next page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseNavigationPreviousPage(DataClassJsonMixin):
    """ Canonical URI for the previous page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseNavigationLastPage(DataClassJsonMixin):
    """ Canonical URI for the last page of the list """
    
    uri: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponseNavigation(DataClassJsonMixin):
    """ Information on navigation """
    
    first_page: Optional[ReadUserCallLogResponseNavigationFirstPage] = None
    """ Canonical URI for the first page of the list """
    
    next_page: Optional[ReadUserCallLogResponseNavigationNextPage] = None
    """ Canonical URI for the next page of the list """
    
    previous_page: Optional[ReadUserCallLogResponseNavigationPreviousPage] = None
    """ Canonical URI for the previous page of the list """
    
    last_page: Optional[ReadUserCallLogResponseNavigationLastPage] = None
    """ Canonical URI for the last page of the list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponsePaging(DataClassJsonMixin):
    """ Information on paging """
    
    page: Optional[int] = None
    """
    The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result
    is empty (because non-existent page was specified or perPage=0 was requested)
    """
    
    per_page: Optional[int] = 100
    """
    Current page size, describes how many items are in each page. Maximum value is 1000. If perPage
    value in the request is greater than 1000, the maximum value (1000) is applied
    """
    
    page_start: Optional[int] = None
    """
    The zero-based number of the first element on the current page. Omitted if the page is omitted
    or result is empty
    """
    
    page_end: Optional[int] = None
    """
    The zero-based index of the last element on the current page. Omitted if the page is omitted or
    result is empty
    """
    
    total_pages: Optional[int] = None
    """
    The total number of pages in a dataset. May be omitted for some resources due to performance
    reasons
    """
    
    total_elements: Optional[int] = None
    """
    The total number of elements in a dataset. May be omitted for some resource due to performance
    reasons
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallLogResponse(DataClassJsonMixin):
    """
    Required Properties:
     - navigation
     - paging
     - records
    
    Generated by Python OpenAPI Parser
    """
    
    records: List[ReadUserCallLogResponseRecordsItem]
    """ List of call log records """
    
    navigation: ReadUserCallLogResponseNavigation
    """ Information on navigation """
    
    paging: ReadUserCallLogResponsePaging
    """ Information on paging """
    

class DeleteUserCallLogTypeItem(Enum):
    Voice = 'Voice'
    Fax = 'Fax'

class DeleteUserCallLogDirectionItem(Enum):
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class SyncUserCallLogSyncTypeItem(Enum):
    FSync = 'FSync'
    ISync = 'ISync'

class SyncUserCallLogStatusGroupItem(Enum):
    Missed = 'Missed'
    All = 'All'

class SyncUserCallLogView(Enum):
    Simple = 'Simple'
    Detailed = 'Detailed'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemFromDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemFrom(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[SyncUserCallLogResponseRecordsItemFromDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemToDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemTo(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[SyncUserCallLogResponseRecordsItemToDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemExtension(DataClassJsonMixin):
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    

class SyncUserCallLogResponseRecordsItemType(Enum):
    """ Call type """
    
    Voice = 'Voice'
    Fax = 'Fax'

class SyncUserCallLogResponseRecordsItemTransport(Enum):
    """ For 'Detailed' view only. Call transport """
    
    PSTN = 'PSTN'
    VoIP = 'VoIP'

class SyncUserCallLogResponseRecordsItemLegsItemAction(Enum):
    """ Action description of the call operation """
    
    Unknown = 'Unknown'
    Phone_Call = 'Phone Call'
    Phone_Login = 'Phone Login'
    Incoming_Fax = 'Incoming Fax'
    Accept_Call = 'Accept Call'
    External_Application = 'External Application'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    Outgoing_Fax = 'Outgoing Fax'
    CallOut_CallMe = 'CallOut-CallMe'
    Call_Return = 'Call Return'
    Calling_Card = 'Calling Card'
    Monitoring = 'Monitoring'
    Ring_Directly = 'Ring Directly'
    RingOut_Web = 'RingOut Web'
    Text_Relay = 'Text Relay'
    VoIP_Call = 'VoIP Call'
    RingOut_PC = 'RingOut PC'
    RingMe = 'RingMe'
    Transfer = 'Transfer'
    OBJECT_411_Info = '411 Info'
    Emergency = 'Emergency'
    E911_Update = 'E911 Update'
    Support = 'Support'
    RingOut_Mobile = 'RingOut Mobile'
    MeetingsCall = 'MeetingsCall'
    SilentMonitoring = 'SilentMonitoring'

class SyncUserCallLogResponseRecordsItemLegsItemDirection(Enum):
    """ Call direction """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemLegsItemBilling(DataClassJsonMixin):
    """ Billing information related to the call """
    
    cost_included: Optional[float] = None
    """
    Cost per minute, paid and already included in your RingCentral Plan. For example International
    Calls
    """
    
    cost_purchased: Optional[float] = None
    """ Cost per minute, paid and not included in your RingCentral Plan """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemLegsItemDelegate(DataClassJsonMixin):
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    
    Generated by Python OpenAPI Parser
    """
    
    id: Optional[str] = None
    """ Internal identifier of a Secretary extension """
    
    name: Optional[str] = None
    """ Custom name of a Secretary extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemLegsItemExtension(DataClassJsonMixin):
    """ Information on extension """
    
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    

class SyncUserCallLogResponseRecordsItemLegsItemLegType(Enum):
    """ Leg type """
    
    SipForwarding = 'SipForwarding'
    ServiceMinus2 = 'ServiceMinus2'
    ServiceMinus3 = 'ServiceMinus3'
    PstnToSip = 'PstnToSip'
    Accept = 'Accept'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    TestCall = 'TestCall'
    FaxSent = 'FaxSent'
    CallBack = 'CallBack'
    CallingCard = 'CallingCard'
    RingDirectly = 'RingDirectly'
    RingOutWebToSubscriber = 'RingOutWebToSubscriber'
    RingOutWebToCaller = 'RingOutWebToCaller'
    SipToPstnMetered = 'SipToPstnMetered'
    RingOutClientToSubscriber = 'RingOutClientToSubscriber'
    RingOutClientToCaller = 'RingOutClientToCaller'
    RingMe = 'RingMe'
    TransferCall = 'TransferCall'
    SipToPstnUnmetered = 'SipToPstnUnmetered'
    RingOutDeviceToSubscriber = 'RingOutDeviceToSubscriber'
    RingOutDeviceToCaller = 'RingOutDeviceToCaller'
    RingOutOneLegToCaller = 'RingOutOneLegToCaller'
    ExtensionToExtension = 'ExtensionToExtension'
    CallPark = 'CallPark'
    PagingServer = 'PagingServer'
    Hunting = 'Hunting'
    OutgoingFreeSpDl = 'OutgoingFreeSpDl'
    ParkLocation = 'ParkLocation'
    ConferenceCall = 'ConferenceCall'
    MobileApp = 'MobileApp'
    Monitoring = 'Monitoring'
    MoveToConference = 'MoveToConference'
    Unknown = 'Unknown'

class SyncUserCallLogResponseRecordsItemLegsItemType(Enum):
    """ Call type """
    
    Voice = 'Voice'
    Fax = 'Fax'

class SyncUserCallLogResponseRecordsItemLegsItemResult(Enum):
    """ Status description of the call operation """
    
    Unknown = 'Unknown'
    Accepted = 'Accepted'
    CallConnected = 'Call connected'
    In_Progress = 'In Progress'
    Voicemail = 'Voicemail'
    Reply = 'Reply'
    Missed = 'Missed'
    Busy = 'Busy'
    Rejected = 'Rejected'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Blocked = 'Blocked'
    SuspendedAccount = 'Suspended account'
    Call_Failed = 'Call Failed'
    Call_Failure = 'Call Failure'
    Internal_Error = 'Internal Error'
    IP_Phone_Offline = 'IP Phone Offline'
    No_Calling_Credit = 'No Calling Credit'
    Not_Allowed = 'Not Allowed'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    Answered_Not_Accepted = 'Answered Not Accepted'
    Stopped = 'Stopped'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Abandoned = 'Abandoned'
    Declined = 'Declined'
    Received = 'Received'
    FaxOn_Demand = 'Fax on Demand'
    Partial_Receive = 'Partial Receive'
    Receive_Error = 'Receive Error'
    Fax_Receipt_Error = 'Fax Receipt Error'
    Sent = 'Sent'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Send_Error = 'Send Error'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'

class SyncUserCallLogResponseRecordsItemLegsItemReason(Enum):
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    
    Generated by Python OpenAPI Parser
    """
    
    Accepted = 'Accepted'
    Connected = 'Connected'
    Line_Busy = 'line Busy'
    Not_Answered = 'Not Answered'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Stopped = 'Stopped'
    Internal_Error = 'Internal Error'
    No_Credit = 'No Credit'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Bad_Number = 'Bad Number'
    Info_411_Restricted = 'Info 411 Restricted'
    Customer_611_Restricted = 'Customer 611 Restricted'
    No_Digital_Line = 'No Digital Line'
    Failed_Try_Again = 'Failed Try Again'
    Max_Call_Limit = 'Max Call Limit'
    Too_Many_Calls = 'Too Many Calls'
    Calls_Not_Accepted = 'Calls Not Accepted'
    Number_Not_Allowed = 'Number Not Allowed'
    Number_Blocked = 'Number Blocked'
    Number_Disabled = 'Number Disabled'
    Not_Allowed = 'Not Allowed'
    Resource_Error = 'Resource Error'
    Call_Loop = 'Call Loop'
    Fax_Not_Received = 'Fax Not Received'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'
    Fax_Prepare_Error = 'Fax Prepare Error'
    Fax_Save_Error = 'Fax Save Error'
    Fax_Send_Error = 'Fax Send Error'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemLegsItemFromDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemLegsItemFrom(DataClassJsonMixin):
    """ Caller information """
    
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[SyncUserCallLogResponseRecordsItemLegsItemFromDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemLegsItemToDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemLegsItemTo(DataClassJsonMixin):
    """ Callee information """
    
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[SyncUserCallLogResponseRecordsItemLegsItemToDevice] = None

class SyncUserCallLogResponseRecordsItemLegsItemTransport(Enum):
    """ Call transport """
    
    PSTN = 'PSTN'
    VoIP = 'VoIP'

class SyncUserCallLogResponseRecordsItemLegsItemRecordingType(Enum):
    """ Indicates recording mode used """
    
    Automatic = 'Automatic'
    OnDemand = 'OnDemand'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemLegsItemRecording(DataClassJsonMixin):
    """ Call recording data. Returned if the call is recorded """
    
    id: Optional[str] = None
    """ Internal identifier of the call recording """
    
    uri: Optional[str] = None
    """ Link to the call recording metadata resource """
    
    type: Optional[SyncUserCallLogResponseRecordsItemLegsItemRecordingType] = None
    """ Indicates recording mode used """
    
    content_uri: Optional[str] = None
    """ Link to the call recording binary content """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemLegsItemMessage(DataClassJsonMixin):
    """ Linked message (Fax/Voicemail) """
    
    id: Optional[str] = None
    """ Internal identifier of a message """
    
    type: Optional[str] = None
    """ Type of a message """
    
    uri: Optional[str] = None
    """ Link to a message resource """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemLegsItem(DataClassJsonMixin):
    action: Optional[SyncUserCallLogResponseRecordsItemLegsItemAction] = None
    """ Action description of the call operation """
    
    direction: Optional[SyncUserCallLogResponseRecordsItemLegsItemDirection] = None
    """ Call direction """
    
    billing: Optional[SyncUserCallLogResponseRecordsItemLegsItemBilling] = None
    """ Billing information related to the call """
    
    delegate: Optional[SyncUserCallLogResponseRecordsItemLegsItemDelegate] = None
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    duration: Optional[int] = None
    """ Call duration in seconds """
    
    extension: Optional[SyncUserCallLogResponseRecordsItemLegsItemExtension] = None
    """ Information on extension """
    
    leg_type: Optional[SyncUserCallLogResponseRecordsItemLegsItemLegType] = None
    """ Leg type """
    
    start_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including
    timezone, for example 2016-03-10T18:07:52.534Z
    """
    
    type: Optional[SyncUserCallLogResponseRecordsItemLegsItemType] = None
    """ Call type """
    
    result: Optional[SyncUserCallLogResponseRecordsItemLegsItemResult] = None
    """ Status description of the call operation """
    
    reason: Optional[SyncUserCallLogResponseRecordsItemLegsItemReason] = None
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    """
    
    reason_description: Optional[str] = None
    from_: Optional[SyncUserCallLogResponseRecordsItemLegsItemFrom] = field(metadata=config(field_name='from'), default=None)
    """ Caller information """
    
    to: Optional[SyncUserCallLogResponseRecordsItemLegsItemTo] = None
    """ Callee information """
    
    transport: Optional[SyncUserCallLogResponseRecordsItemLegsItemTransport] = None
    """ Call transport """
    
    recording: Optional[SyncUserCallLogResponseRecordsItemLegsItemRecording] = None
    """ Call recording data. Returned if the call is recorded """
    
    short_recording: Optional[bool] = None
    """
    Indicates that the recording is too short and therefore wouldn't be returned. The flag is not
    returned if the value is false
    """
    
    master: Optional[bool] = None
    """ Returned for 'Detailed' call log. Specifies if the leg is master-leg """
    
    message: Optional[SyncUserCallLogResponseRecordsItemLegsItemMessage] = None
    """ Linked message (Fax/Voicemail) """
    
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemBilling(DataClassJsonMixin):
    """ Billing information related to the call """
    
    cost_included: Optional[float] = None
    """
    Cost per minute, paid and already included in your RingCentral Plan. For example International
    Calls
    """
    
    cost_purchased: Optional[float] = None
    """ Cost per minute, paid and not included in your RingCentral Plan """
    

class SyncUserCallLogResponseRecordsItemDirection(Enum):
    """ Call direction """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemMessage(DataClassJsonMixin):
    """ Linked message (Fax/Voicemail) """
    
    id: Optional[str] = None
    """ Internal identifier of a message """
    
    type: Optional[str] = None
    """ Type of a message """
    
    uri: Optional[str] = None
    """ Link to a message resource """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemDelegate(DataClassJsonMixin):
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    
    Generated by Python OpenAPI Parser
    """
    
    id: Optional[str] = None
    """ Internal identifier of a Secretary extension """
    
    name: Optional[str] = None
    """ Custom name of a Secretary extension """
    

class SyncUserCallLogResponseRecordsItemRecordingType(Enum):
    """ Indicates recording mode used """
    
    Automatic = 'Automatic'
    OnDemand = 'OnDemand'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItemRecording(DataClassJsonMixin):
    """ Call recording data. Returned if a call is recorded """
    
    id: Optional[str] = None
    """ Internal identifier of the call recording """
    
    uri: Optional[str] = None
    """ Link to the call recording metadata resource """
    
    type: Optional[SyncUserCallLogResponseRecordsItemRecordingType] = None
    """ Indicates recording mode used """
    
    content_uri: Optional[str] = None
    """ Link to the call recording binary content """
    

class SyncUserCallLogResponseRecordsItemAction(Enum):
    """ Action description of the call operation """
    
    Unknown = 'Unknown'
    Phone_Login = 'Phone Login'
    Calling_Card = 'Calling Card'
    VoIP_Call = 'VoIP Call'
    Phone_Call = 'Phone Call'
    Paging = 'Paging'
    Hunting = 'Hunting'
    Call_Park = 'Call Park'
    Monitoring = 'Monitoring'
    Text_Relay = 'Text Relay'
    External_Application = 'External Application'
    Park_Location = 'Park Location'
    CallOut_CallMe = 'CallOut-CallMe'
    Conference_Call = 'Conference Call'
    Move = 'Move'
    RC_Meetings = 'RC Meetings'
    Accept_Call = 'Accept Call'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    RingMe = 'RingMe'
    Transfer = 'Transfer'
    Call_Return = 'Call Return'
    Ring_Directly = 'Ring Directly'
    RingOut_Web = 'RingOut Web'
    RingOut_PC = 'RingOut PC'
    RingOut_Mobile = 'RingOut Mobile'
    Emergency = 'Emergency'
    E911_Update = 'E911 Update'
    Support = 'Support'
    Incoming_Fax = 'Incoming Fax'
    Outgoing_Fax = 'Outgoing Fax'

class SyncUserCallLogResponseRecordsItemResult(Enum):
    """ Status description of the call operation """
    
    Unknown = 'Unknown'
    Accepted = 'Accepted'
    CallConnected = 'Call connected'
    In_Progress = 'In Progress'
    Voicemail = 'Voicemail'
    Reply = 'Reply'
    Missed = 'Missed'
    Busy = 'Busy'
    Rejected = 'Rejected'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Blocked = 'Blocked'
    SuspendedAccount = 'Suspended account'
    Call_Failed = 'Call Failed'
    Call_Failure = 'Call Failure'
    Internal_Error = 'Internal Error'
    IP_Phone_Offline = 'IP Phone Offline'
    No_Calling_Credit = 'No Calling Credit'
    Not_Allowed = 'Not Allowed'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    Answered_Not_Accepted = 'Answered Not Accepted'
    Stopped = 'Stopped'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Abandoned = 'Abandoned'
    Declined = 'Declined'
    Received = 'Received'
    FaxOn_Demand = 'Fax on Demand'
    Partial_Receive = 'Partial Receive'
    Receive_Error = 'Receive Error'
    Fax_Receipt_Error = 'Fax Receipt Error'
    Sent = 'Sent'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Send_Error = 'Send Error'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'

class SyncUserCallLogResponseRecordsItemReason(Enum):
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    
    Generated by Python OpenAPI Parser
    """
    
    Accepted = 'Accepted'
    Connected = 'Connected'
    Line_Busy = 'line Busy'
    Not_Answered = 'Not Answered'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Stopped = 'Stopped'
    Internal_Error = 'Internal Error'
    No_Credit = 'No Credit'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Bad_Number = 'Bad Number'
    Info_411_Restricted = 'Info 411 Restricted'
    Customer_611_Restricted = 'Customer 611 Restricted'
    No_Digital_Line = 'No Digital Line'
    Failed_Try_Again = 'Failed Try Again'
    Max_Call_Limit = 'Max Call Limit'
    Too_Many_Calls = 'Too Many Calls'
    Calls_Not_Accepted = 'Calls Not Accepted'
    Number_Not_Allowed = 'Number Not Allowed'
    Number_Blocked = 'Number Blocked'
    Number_Disabled = 'Number Disabled'
    Resource_Error = 'Resource Error'
    Call_Loop = 'Call Loop'
    Fax_Not_Received = 'Fax Not Received'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'
    Fax_Prepare_Error = 'Fax Prepare Error'
    Fax_Save_Error = 'Fax Save Error'
    Fax_Send_Error = 'Fax Send Error'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseRecordsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a cal log record """
    
    uri: Optional[str] = None
    """ Canonical URI of a call log record """
    
    session_id: Optional[str] = None
    """ Internal identifier of a call session """
    
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    
    from_: Optional[SyncUserCallLogResponseRecordsItemFrom] = field(metadata=config(field_name='from'), default=None)
    to: Optional[SyncUserCallLogResponseRecordsItemTo] = None
    extension: Optional[SyncUserCallLogResponseRecordsItemExtension] = None
    type: Optional[SyncUserCallLogResponseRecordsItemType] = None
    """ Call type """
    
    transport: Optional[SyncUserCallLogResponseRecordsItemTransport] = None
    """ For 'Detailed' view only. Call transport """
    
    legs: Optional[List[SyncUserCallLogResponseRecordsItemLegsItem]] = None
    """ For 'Detailed' view only. Leg description """
    
    billing: Optional[SyncUserCallLogResponseRecordsItemBilling] = None
    """ Billing information related to the call """
    
    direction: Optional[SyncUserCallLogResponseRecordsItemDirection] = None
    """ Call direction """
    
    message: Optional[SyncUserCallLogResponseRecordsItemMessage] = None
    """ Linked message (Fax/Voicemail) """
    
    start_time: Optional[str] = None
    """
    The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including
    timezone, for example 2016-03-10T18:07:52.534Z
    """
    
    delegate: Optional[SyncUserCallLogResponseRecordsItemDelegate] = None
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    """
    
    deleted: Optional[bool] = None
    """ Indicates whether the record is deleted. Returned for deleted records, for ISync requests """
    
    duration: Optional[int] = None
    """ Call duration in seconds """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    For 'Detailed' view only. The datetime when the call log record was modified in (ISO
    8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
    2016-03-10T18:07:52.534Z
    """
    
    recording: Optional[SyncUserCallLogResponseRecordsItemRecording] = None
    """ Call recording data. Returned if a call is recorded """
    
    short_recording: Optional[bool] = None
    """
    Indicates that the recording is too short and therefore wouldn't be returned. The flag is not
    returned if the value is false
    """
    
    action: Optional[SyncUserCallLogResponseRecordsItemAction] = None
    """ Action description of the call operation """
    
    result: Optional[SyncUserCallLogResponseRecordsItemResult] = None
    """ Status description of the call operation """
    
    reason: Optional[SyncUserCallLogResponseRecordsItemReason] = None
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    """
    
    reason_description: Optional[str] = None

class SyncUserCallLogResponseSyncInfoSyncType(Enum):
    """ Type of synchronization """
    
    FSync = 'FSync'
    ISync = 'ISync'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponseSyncInfo(DataClassJsonMixin):
    """ Sync information (type, token and time) """
    
    sync_type: Optional[SyncUserCallLogResponseSyncInfoSyncType] = None
    """ Type of synchronization """
    
    sync_token: Optional[str] = None
    """ Synchronization token """
    
    sync_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    The last synchronization datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format
    including timezone, for example 2016-03-10T18:07:52.534Z
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SyncUserCallLogResponse(DataClassJsonMixin):
    uri: Optional[str] = None
    """ Link to the list of call log records with sync information """
    
    records: Optional[List[SyncUserCallLogResponseRecordsItem]] = None
    """
    List of call log records with synchronization information. For ISync the total number of
    returned records is limited to 250; this includes both new records and the old ones, specified
    by the recordCount parameter
    """
    
    sync_info: Optional[SyncUserCallLogResponseSyncInfo] = None
    """ Sync information (type, token and time) """
    

class ReadUserCallRecordView(Enum):
    Simple = 'Simple'
    Detailed = 'Detailed'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseFromDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseFrom(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[ReadUserCallRecordResponseFromDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseToDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseTo(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[ReadUserCallRecordResponseToDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseExtension(DataClassJsonMixin):
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    

class ReadUserCallRecordResponseType(Enum):
    """ Call type """
    
    Voice = 'Voice'
    Fax = 'Fax'

class ReadUserCallRecordResponseTransport(Enum):
    """ For 'Detailed' view only. Call transport """
    
    PSTN = 'PSTN'
    VoIP = 'VoIP'

class ReadUserCallRecordResponseLegsItemAction(Enum):
    """ Action description of the call operation """
    
    Unknown = 'Unknown'
    Phone_Call = 'Phone Call'
    Phone_Login = 'Phone Login'
    Incoming_Fax = 'Incoming Fax'
    Accept_Call = 'Accept Call'
    External_Application = 'External Application'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    Outgoing_Fax = 'Outgoing Fax'
    CallOut_CallMe = 'CallOut-CallMe'
    Call_Return = 'Call Return'
    Calling_Card = 'Calling Card'
    Monitoring = 'Monitoring'
    Ring_Directly = 'Ring Directly'
    RingOut_Web = 'RingOut Web'
    Text_Relay = 'Text Relay'
    VoIP_Call = 'VoIP Call'
    RingOut_PC = 'RingOut PC'
    RingMe = 'RingMe'
    Transfer = 'Transfer'
    OBJECT_411_Info = '411 Info'
    Emergency = 'Emergency'
    E911_Update = 'E911 Update'
    Support = 'Support'
    RingOut_Mobile = 'RingOut Mobile'
    MeetingsCall = 'MeetingsCall'
    SilentMonitoring = 'SilentMonitoring'

class ReadUserCallRecordResponseLegsItemDirection(Enum):
    """ Call direction """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseLegsItemBilling(DataClassJsonMixin):
    """ Billing information related to the call """
    
    cost_included: Optional[float] = None
    """
    Cost per minute, paid and already included in your RingCentral Plan. For example International
    Calls
    """
    
    cost_purchased: Optional[float] = None
    """ Cost per minute, paid and not included in your RingCentral Plan """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseLegsItemDelegate(DataClassJsonMixin):
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    
    Generated by Python OpenAPI Parser
    """
    
    id: Optional[str] = None
    """ Internal identifier of a Secretary extension """
    
    name: Optional[str] = None
    """ Custom name of a Secretary extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseLegsItemExtension(DataClassJsonMixin):
    """ Information on extension """
    
    id: Optional[int] = None
    """ Internal identifier of an extension """
    
    uri: Optional[str] = None
    """ Canonical URI of an extension """
    

class ReadUserCallRecordResponseLegsItemLegType(Enum):
    """ Leg type """
    
    SipForwarding = 'SipForwarding'
    ServiceMinus2 = 'ServiceMinus2'
    ServiceMinus3 = 'ServiceMinus3'
    PstnToSip = 'PstnToSip'
    Accept = 'Accept'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    TestCall = 'TestCall'
    FaxSent = 'FaxSent'
    CallBack = 'CallBack'
    CallingCard = 'CallingCard'
    RingDirectly = 'RingDirectly'
    RingOutWebToSubscriber = 'RingOutWebToSubscriber'
    RingOutWebToCaller = 'RingOutWebToCaller'
    SipToPstnMetered = 'SipToPstnMetered'
    RingOutClientToSubscriber = 'RingOutClientToSubscriber'
    RingOutClientToCaller = 'RingOutClientToCaller'
    RingMe = 'RingMe'
    TransferCall = 'TransferCall'
    SipToPstnUnmetered = 'SipToPstnUnmetered'
    RingOutDeviceToSubscriber = 'RingOutDeviceToSubscriber'
    RingOutDeviceToCaller = 'RingOutDeviceToCaller'
    RingOutOneLegToCaller = 'RingOutOneLegToCaller'
    ExtensionToExtension = 'ExtensionToExtension'
    CallPark = 'CallPark'
    PagingServer = 'PagingServer'
    Hunting = 'Hunting'
    OutgoingFreeSpDl = 'OutgoingFreeSpDl'
    ParkLocation = 'ParkLocation'
    ConferenceCall = 'ConferenceCall'
    MobileApp = 'MobileApp'
    Monitoring = 'Monitoring'
    MoveToConference = 'MoveToConference'
    Unknown = 'Unknown'

class ReadUserCallRecordResponseLegsItemType(Enum):
    """ Call type """
    
    Voice = 'Voice'
    Fax = 'Fax'

class ReadUserCallRecordResponseLegsItemResult(Enum):
    """ Status description of the call operation """
    
    Unknown = 'Unknown'
    Accepted = 'Accepted'
    CallConnected = 'Call connected'
    In_Progress = 'In Progress'
    Voicemail = 'Voicemail'
    Reply = 'Reply'
    Missed = 'Missed'
    Busy = 'Busy'
    Rejected = 'Rejected'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Blocked = 'Blocked'
    SuspendedAccount = 'Suspended account'
    Call_Failed = 'Call Failed'
    Call_Failure = 'Call Failure'
    Internal_Error = 'Internal Error'
    IP_Phone_Offline = 'IP Phone Offline'
    No_Calling_Credit = 'No Calling Credit'
    Not_Allowed = 'Not Allowed'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    Answered_Not_Accepted = 'Answered Not Accepted'
    Stopped = 'Stopped'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Abandoned = 'Abandoned'
    Declined = 'Declined'
    Received = 'Received'
    FaxOn_Demand = 'Fax on Demand'
    Partial_Receive = 'Partial Receive'
    Receive_Error = 'Receive Error'
    Fax_Receipt_Error = 'Fax Receipt Error'
    Sent = 'Sent'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Send_Error = 'Send Error'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'

class ReadUserCallRecordResponseLegsItemReason(Enum):
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    
    Generated by Python OpenAPI Parser
    """
    
    Accepted = 'Accepted'
    Connected = 'Connected'
    Line_Busy = 'line Busy'
    Not_Answered = 'Not Answered'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Stopped = 'Stopped'
    Internal_Error = 'Internal Error'
    No_Credit = 'No Credit'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Bad_Number = 'Bad Number'
    Info_411_Restricted = 'Info 411 Restricted'
    Customer_611_Restricted = 'Customer 611 Restricted'
    No_Digital_Line = 'No Digital Line'
    Failed_Try_Again = 'Failed Try Again'
    Max_Call_Limit = 'Max Call Limit'
    Too_Many_Calls = 'Too Many Calls'
    Calls_Not_Accepted = 'Calls Not Accepted'
    Number_Not_Allowed = 'Number Not Allowed'
    Number_Blocked = 'Number Blocked'
    Number_Disabled = 'Number Disabled'
    Not_Allowed = 'Not Allowed'
    Resource_Error = 'Resource Error'
    Call_Loop = 'Call Loop'
    Fax_Not_Received = 'Fax Not Received'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'
    Fax_Prepare_Error = 'Fax Prepare Error'
    Fax_Save_Error = 'Fax Save Error'
    Fax_Send_Error = 'Fax Send Error'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseLegsItemFromDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseLegsItemFrom(DataClassJsonMixin):
    """ Caller information """
    
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[ReadUserCallRecordResponseLegsItemFromDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseLegsItemToDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseLegsItemTo(DataClassJsonMixin):
    """ Callee information """
    
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[ReadUserCallRecordResponseLegsItemToDevice] = None

class ReadUserCallRecordResponseLegsItemTransport(Enum):
    """ Call transport """
    
    PSTN = 'PSTN'
    VoIP = 'VoIP'

class ReadUserCallRecordResponseLegsItemRecordingType(Enum):
    """ Indicates recording mode used """
    
    Automatic = 'Automatic'
    OnDemand = 'OnDemand'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseLegsItemRecording(DataClassJsonMixin):
    """ Call recording data. Returned if the call is recorded """
    
    id: Optional[str] = None
    """ Internal identifier of the call recording """
    
    uri: Optional[str] = None
    """ Link to the call recording metadata resource """
    
    type: Optional[ReadUserCallRecordResponseLegsItemRecordingType] = None
    """ Indicates recording mode used """
    
    content_uri: Optional[str] = None
    """ Link to the call recording binary content """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseLegsItemMessage(DataClassJsonMixin):
    """ Linked message (Fax/Voicemail) """
    
    id: Optional[str] = None
    """ Internal identifier of a message """
    
    type: Optional[str] = None
    """ Type of a message """
    
    uri: Optional[str] = None
    """ Link to a message resource """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseLegsItem(DataClassJsonMixin):
    action: Optional[ReadUserCallRecordResponseLegsItemAction] = None
    """ Action description of the call operation """
    
    direction: Optional[ReadUserCallRecordResponseLegsItemDirection] = None
    """ Call direction """
    
    billing: Optional[ReadUserCallRecordResponseLegsItemBilling] = None
    """ Billing information related to the call """
    
    delegate: Optional[ReadUserCallRecordResponseLegsItemDelegate] = None
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    duration: Optional[int] = None
    """ Call duration in seconds """
    
    extension: Optional[ReadUserCallRecordResponseLegsItemExtension] = None
    """ Information on extension """
    
    leg_type: Optional[ReadUserCallRecordResponseLegsItemLegType] = None
    """ Leg type """
    
    start_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including
    timezone, for example 2016-03-10T18:07:52.534Z
    """
    
    type: Optional[ReadUserCallRecordResponseLegsItemType] = None
    """ Call type """
    
    result: Optional[ReadUserCallRecordResponseLegsItemResult] = None
    """ Status description of the call operation """
    
    reason: Optional[ReadUserCallRecordResponseLegsItemReason] = None
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    """
    
    reason_description: Optional[str] = None
    from_: Optional[ReadUserCallRecordResponseLegsItemFrom] = field(metadata=config(field_name='from'), default=None)
    """ Caller information """
    
    to: Optional[ReadUserCallRecordResponseLegsItemTo] = None
    """ Callee information """
    
    transport: Optional[ReadUserCallRecordResponseLegsItemTransport] = None
    """ Call transport """
    
    recording: Optional[ReadUserCallRecordResponseLegsItemRecording] = None
    """ Call recording data. Returned if the call is recorded """
    
    short_recording: Optional[bool] = None
    """
    Indicates that the recording is too short and therefore wouldn't be returned. The flag is not
    returned if the value is false
    """
    
    master: Optional[bool] = None
    """ Returned for 'Detailed' call log. Specifies if the leg is master-leg """
    
    message: Optional[ReadUserCallRecordResponseLegsItemMessage] = None
    """ Linked message (Fax/Voicemail) """
    
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseBilling(DataClassJsonMixin):
    """ Billing information related to the call """
    
    cost_included: Optional[float] = None
    """
    Cost per minute, paid and already included in your RingCentral Plan. For example International
    Calls
    """
    
    cost_purchased: Optional[float] = None
    """ Cost per minute, paid and not included in your RingCentral Plan """
    

class ReadUserCallRecordResponseDirection(Enum):
    """ Call direction """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseMessage(DataClassJsonMixin):
    """ Linked message (Fax/Voicemail) """
    
    id: Optional[str] = None
    """ Internal identifier of a message """
    
    type: Optional[str] = None
    """ Type of a message """
    
    uri: Optional[str] = None
    """ Link to a message resource """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseDelegate(DataClassJsonMixin):
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    
    Generated by Python OpenAPI Parser
    """
    
    id: Optional[str] = None
    """ Internal identifier of a Secretary extension """
    
    name: Optional[str] = None
    """ Custom name of a Secretary extension """
    

class ReadUserCallRecordResponseRecordingType(Enum):
    """ Indicates recording mode used """
    
    Automatic = 'Automatic'
    OnDemand = 'OnDemand'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponseRecording(DataClassJsonMixin):
    """ Call recording data. Returned if a call is recorded """
    
    id: Optional[str] = None
    """ Internal identifier of the call recording """
    
    uri: Optional[str] = None
    """ Link to the call recording metadata resource """
    
    type: Optional[ReadUserCallRecordResponseRecordingType] = None
    """ Indicates recording mode used """
    
    content_uri: Optional[str] = None
    """ Link to the call recording binary content """
    

class ReadUserCallRecordResponseAction(Enum):
    """ Action description of the call operation """
    
    Unknown = 'Unknown'
    Phone_Login = 'Phone Login'
    Calling_Card = 'Calling Card'
    VoIP_Call = 'VoIP Call'
    Phone_Call = 'Phone Call'
    Paging = 'Paging'
    Hunting = 'Hunting'
    Call_Park = 'Call Park'
    Monitoring = 'Monitoring'
    Text_Relay = 'Text Relay'
    External_Application = 'External Application'
    Park_Location = 'Park Location'
    CallOut_CallMe = 'CallOut-CallMe'
    Conference_Call = 'Conference Call'
    Move = 'Move'
    RC_Meetings = 'RC Meetings'
    Accept_Call = 'Accept Call'
    FindMe = 'FindMe'
    FollowMe = 'FollowMe'
    RingMe = 'RingMe'
    Transfer = 'Transfer'
    Call_Return = 'Call Return'
    Ring_Directly = 'Ring Directly'
    RingOut_Web = 'RingOut Web'
    RingOut_PC = 'RingOut PC'
    RingOut_Mobile = 'RingOut Mobile'
    Emergency = 'Emergency'
    E911_Update = 'E911 Update'
    Support = 'Support'
    Incoming_Fax = 'Incoming Fax'
    Outgoing_Fax = 'Outgoing Fax'

class ReadUserCallRecordResponseResult(Enum):
    """ Status description of the call operation """
    
    Unknown = 'Unknown'
    Accepted = 'Accepted'
    CallConnected = 'Call connected'
    In_Progress = 'In Progress'
    Voicemail = 'Voicemail'
    Reply = 'Reply'
    Missed = 'Missed'
    Busy = 'Busy'
    Rejected = 'Rejected'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Blocked = 'Blocked'
    SuspendedAccount = 'Suspended account'
    Call_Failed = 'Call Failed'
    Call_Failure = 'Call Failure'
    Internal_Error = 'Internal Error'
    IP_Phone_Offline = 'IP Phone Offline'
    No_Calling_Credit = 'No Calling Credit'
    Not_Allowed = 'Not Allowed'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    Answered_Not_Accepted = 'Answered Not Accepted'
    Stopped = 'Stopped'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Abandoned = 'Abandoned'
    Declined = 'Declined'
    Received = 'Received'
    FaxOn_Demand = 'Fax on Demand'
    Partial_Receive = 'Partial Receive'
    Receive_Error = 'Receive Error'
    Fax_Receipt_Error = 'Fax Receipt Error'
    Sent = 'Sent'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Send_Error = 'Send Error'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'

class ReadUserCallRecordResponseReason(Enum):
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    
    Generated by Python OpenAPI Parser
    """
    
    Accepted = 'Accepted'
    Connected = 'Connected'
    Line_Busy = 'line Busy'
    Not_Answered = 'Not Answered'
    No_Answer = 'No Answer'
    Hang_Up = 'Hang Up'
    Stopped = 'Stopped'
    Internal_Error = 'Internal Error'
    No_Credit = 'No Credit'
    Restricted_Number = 'Restricted Number'
    Wrong_Number = 'Wrong Number'
    International_Disabled = 'International Disabled'
    International_Restricted = 'International Restricted'
    Bad_Number = 'Bad Number'
    Info_411_Restricted = 'Info 411 Restricted'
    Customer_611_Restricted = 'Customer 611 Restricted'
    No_Digital_Line = 'No Digital Line'
    Failed_Try_Again = 'Failed Try Again'
    Max_Call_Limit = 'Max Call Limit'
    Too_Many_Calls = 'Too Many Calls'
    Calls_Not_Accepted = 'Calls Not Accepted'
    Number_Not_Allowed = 'Number Not Allowed'
    Number_Blocked = 'Number Blocked'
    Number_Disabled = 'Number Disabled'
    Resource_Error = 'Resource Error'
    Call_Loop = 'Call Loop'
    Fax_Not_Received = 'Fax Not Received'
    Fax_Partially_Sent = 'Fax Partially Sent'
    Fax_Not_Sent = 'Fax Not Sent'
    Fax_Poor_Line = 'Fax Poor Line'
    Fax_Prepare_Error = 'Fax Prepare Error'
    Fax_Save_Error = 'Fax Save Error'
    Fax_Send_Error = 'Fax Send Error'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUserCallRecordResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a cal log record """
    
    uri: Optional[str] = None
    """ Canonical URI of a call log record """
    
    session_id: Optional[str] = None
    """ Internal identifier of a call session """
    
    telephony_session_id: Optional[str] = None
    """ Telephony identifier of a call session """
    
    from_: Optional[ReadUserCallRecordResponseFrom] = field(metadata=config(field_name='from'), default=None)
    to: Optional[ReadUserCallRecordResponseTo] = None
    extension: Optional[ReadUserCallRecordResponseExtension] = None
    type: Optional[ReadUserCallRecordResponseType] = None
    """ Call type """
    
    transport: Optional[ReadUserCallRecordResponseTransport] = None
    """ For 'Detailed' view only. Call transport """
    
    legs: Optional[List[ReadUserCallRecordResponseLegsItem]] = None
    """ For 'Detailed' view only. Leg description """
    
    billing: Optional[ReadUserCallRecordResponseBilling] = None
    """ Billing information related to the call """
    
    direction: Optional[ReadUserCallRecordResponseDirection] = None
    """ Call direction """
    
    message: Optional[ReadUserCallRecordResponseMessage] = None
    """ Linked message (Fax/Voicemail) """
    
    start_time: Optional[str] = None
    """
    The call start datetime in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including
    timezone, for example 2016-03-10T18:07:52.534Z
    """
    
    delegate: Optional[ReadUserCallRecordResponseDelegate] = None
    """
    Information on a delegate extension that actually implemented a call action. For Secretary call
    log the field is returned if the current extension implemented a call. For Boss call log the
    field contains information on a Secretary extension which actually implemented a call on behalf
    of the current extension
    """
    
    deleted: Optional[bool] = None
    """ Indicates whether the record is deleted. Returned for deleted records, for ISync requests """
    
    duration: Optional[int] = None
    """ Call duration in seconds """
    
    last_modified_time: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    """
    For 'Detailed' view only. The datetime when the call log record was modified in (ISO
    8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example
    2016-03-10T18:07:52.534Z
    """
    
    recording: Optional[ReadUserCallRecordResponseRecording] = None
    """ Call recording data. Returned if a call is recorded """
    
    short_recording: Optional[bool] = None
    """
    Indicates that the recording is too short and therefore wouldn't be returned. The flag is not
    returned if the value is false
    """
    
    action: Optional[ReadUserCallRecordResponseAction] = None
    """ Action description of the call operation """
    
    result: Optional[ReadUserCallRecordResponseResult] = None
    """ Status description of the call operation """
    
    reason: Optional[ReadUserCallRecordResponseReason] = None
    """
    Reason of a call result:
    
    * `Accepted` - The call was connected to and accepted by this number
    
    * `Connected` - The call was answered, but there was no response on how to handle the call (for
    example, a voice mail system answered the call and did not push "1" to accept)
    
    * `Line Busy` - The phone number you dialed was busy
    
    * `Not Answered` - The phone number you dialed was not answered
    
    * `No Answer` - You did not answer the call
    
    * `Hang Up` - The caller hung up before the call was answered
    
    * `Stopped` - This attempt was stopped because the call was answered by another phone
    
    * `Internal Error` - An internal error occurred when making the call. Please try again
    
    * `No Credit` - There was not enough Calling Credit on your account to make this call
    
    * `Restricted Number` - The number you dialed is restricted by RingCentral
    
    * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone
    number. Please check the number and try again
    
    * `International Disabled` - International calling is not enabled on your account. Contact
    customer service to activate International Calling
    
    * `International Restricted` - The country and/or area you attempted to call has been
    prohibited by your administrator
    
    * `Bad Number` - An error occurred when making the call. Please check the number before trying
    again
    
    * `Info 411 Restricted` - Calling to 411 Information Services is restricted
    
    * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer
    service at <(888) 555-1212>
    
    * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet
    connection
    
    * `Failed Try Again` - Call failed. Please try again
    
    * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit
    
    * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other
    Phone has reached its limit. Please contact customer service
    
    * `Calls Not Accepted` - Your account was not accepting calls at this time
    
    * `Number Not Allowed` - The number that was dialed to access your account is not allowed
    
    * `Number Blocked` - This number is in your Blocked Numbers list
    
    * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by
    your administrator
    
    * `Resource Error` - An error occurred when making the call. Please try again
    
    * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please
    check that you are not forwarding calls back to your own account
    
    * `Fax Not Received` - An incoming fax could not be received because a proper connection with
    the sender's fax machine could not be established
    
    * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone
    line quality to poor to maintain the connection or the call was dropped
    
    * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the
    receiving fax machine
    
    * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too
    poor to send the fax
    
    * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again
    
    * `Fax Save Error` - An internal error occurred when saving the fax. Please try again
    
    * `Fax Send Error` - An error occurred when sending the fax. Please try again
    """
    
    reason_description: Optional[str] = None

class ListExtensionActiveCallsDirectionItem(Enum):
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class ListExtensionActiveCallsView(Enum):
    Simple = 'Simple'
    Detailed = 'Detailed'

class ListExtensionActiveCallsTypeItem(Enum):
    Voice = 'Voice'
    Fax = 'Fax'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListExtensionActiveCallsResponseRecordsItemFromDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListExtensionActiveCallsResponseRecordsItemFrom(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[ListExtensionActiveCallsResponseRecordsItemFromDevice] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListExtensionActiveCallsResponseRecordsItemToDevice(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a device """
    
    uri: Optional[str] = None
    """ string to a device """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ListExtensionActiveCallsResponseRecordsItemTo(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """
    Phone number of a party. Usually it is a plain number including country and area code like
    18661234567. But sometimes it could be returned from database with some formatting applied, for
    example (866)123-4567. This property is filled in all cases where parties communicate by means
    of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
    """
    
    extension_number: Optional[str] = None
    """
    Extension short number (usually 3 or 4 digits). This property is filled when parties
    communicate by means of short internal numbers, for example when calling to other extension or
    sending/receiving Company Pager message
    """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
    location: Optional[str] = None
    """
    Contains party location (city, state) if one can be determined from phoneNumber. This property
    is filled only when phoneNumber is not empty and server can calculate location information from
    it (for example, this information is unavailable for US toll-free numbers)
    """
    
    name: Optional[str] = None
    """
    Symbolic name associated with a party. If the phone does not belong to the known extension,
    only the location is returned, the name is not determined then
    """
    
    device: Optional[ListExtensionActiveCallsResponseRecordsItemToDevice] = None
