from ._14 import *

class SearchViaGetResponse_ResourcesItemEmailsItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse_ResourcesItemEmailsItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: SearchViaGetResponse_ResourcesItemEmailsItemType
    value: str

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse_ResourcesItemName(DataClassJsonMixin):
    """
    Required Properties:
     - family_name
     - given_name
    
    Generated by Python OpenAPI Parser
    """
    
    family_name: str
    given_name: str

class SearchViaGetResponse_ResourcesItemPhoneNumbersItemType(Enum):
    Work = 'work'
    Mobile = 'mobile'
    Other = 'other'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse_ResourcesItemPhoneNumbersItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: SearchViaGetResponse_ResourcesItemPhoneNumbersItemType
    value: str

class SearchViaGetResponse_ResourcesItemPhotosItemType(Enum):
    Photo = 'photo'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse_ResourcesItemPhotosItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: SearchViaGetResponse_ResourcesItemPhotosItemType
    value: str

class SearchViaGetResponse_ResourcesItemSchemasItem(Enum):
    UrnIetfParamsScimSchemasCore_2_0_User = 'urn:ietf:params:scim:schemas:core:2.0:User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse_ResourcesItemUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User(DataClassJsonMixin):
    department: Optional[str] = None

class SearchViaGetResponse_ResourcesItemMetaResourceType(Enum):
    User = 'User'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse_ResourcesItemMeta(DataClassJsonMixin):
    """ resource metadata """
    
    created: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    last_modified: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    location: Optional[str] = None
    """ resource location URI """
    
    resource_type: Optional[SearchViaGetResponse_ResourcesItemMetaResourceType] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse_ResourcesItem(DataClassJsonMixin):
    """
    Required Properties:
     - emails
     - name
     - schemas
     - user_name
    
    Generated by Python OpenAPI Parser
    """
    
    emails: List[SearchViaGetResponse_ResourcesItemEmailsItem]
    name: SearchViaGetResponse_ResourcesItemName
    schemas: List[SearchViaGetResponse_ResourcesItemSchemasItem]
    user_name: str
    """ MUST be same as work type email address """
    
    active: Optional[bool] = False
    """ user status """
    
    addresses: Optional[List[SearchViaGetResponse_ResourcesItemAddressesItem]] = None
    external_id: Optional[str] = None
    """ external unique resource id defined by provisioning client """
    
    id: Optional[str] = None
    """ unique resource id defined by RingCentral """
    
    phone_numbers: Optional[List[SearchViaGetResponse_ResourcesItemPhoneNumbersItem]] = None
    photos: Optional[List[SearchViaGetResponse_ResourcesItemPhotosItem]] = None
    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: Optional[SearchViaGetResponse_ResourcesItemUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User] = None
    meta: Optional[SearchViaGetResponse_ResourcesItemMeta] = None
    """ resource metadata """
    

class SearchViaGetResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_ListResponse = 'urn:ietf:params:scim:api:messages:2.0:ListResponse'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse(DataClassJsonMixin):
    resources: Optional[List[SearchViaGetResponse_ResourcesItem]] = None
    """ user list """
    
    items_per_page: Optional[int] = None
    schemas: Optional[List[SearchViaGetResponseSchemasItem]] = None
    start_index: Optional[int] = None
    total_results: Optional[int] = None

class SearchViaGetResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class SearchViaGetResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[SearchViaGetResponseSchemasItem]] = None
    scim_type: Optional[SearchViaGetResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class SearchViaGetResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class SearchViaGetResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[SearchViaGetResponseSchemasItem]] = None
    scim_type: Optional[SearchViaGetResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class SearchViaGetResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class SearchViaGetResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[SearchViaGetResponseSchemasItem]] = None
    scim_type: Optional[SearchViaGetResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class SearchViaGetResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class SearchViaGetResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[SearchViaGetResponseSchemasItem]] = None
    scim_type: Optional[SearchViaGetResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class SearchViaGetResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class SearchViaGetResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaGetResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[SearchViaGetResponseSchemasItem]] = None
    scim_type: Optional[SearchViaGetResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class CreateUserRequestAddressesItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserRequestAddressesItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
    
    Generated by Python OpenAPI Parser
    """
    
    type: CreateUserRequestAddressesItemType
    country: Optional[str] = None
    locality: Optional[str] = None
    postal_code: Optional[str] = None
    region: Optional[str] = None
    street_address: Optional[str] = None

class CreateUserRequestEmailsItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserRequestEmailsItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: CreateUserRequestEmailsItemType
    value: str

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserRequestName(DataClassJsonMixin):
    """
    Required Properties:
     - family_name
     - given_name
    
    Generated by Python OpenAPI Parser
    """
    
    family_name: str
    given_name: str

class CreateUserRequestPhoneNumbersItemType(Enum):
    Work = 'work'
    Mobile = 'mobile'
    Other = 'other'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserRequestPhoneNumbersItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: CreateUserRequestPhoneNumbersItemType
    value: str

class CreateUserRequestPhotosItemType(Enum):
    Photo = 'photo'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserRequestPhotosItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: CreateUserRequestPhotosItemType
    value: str

class CreateUserRequestSchemasItem(Enum):
    UrnIetfParamsScimSchemasCore_2_0_User = 'urn:ietf:params:scim:schemas:core:2.0:User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserRequestUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User(DataClassJsonMixin):
    department: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserRequest(DataClassJsonMixin):
    """
    Required Properties:
     - emails
     - name
     - schemas
     - user_name
    
    Generated by Python OpenAPI Parser
    """
    
    emails: List[CreateUserRequestEmailsItem]
    name: CreateUserRequestName
    schemas: List[CreateUserRequestSchemasItem]
    user_name: str
    """ MUST be same as work type email address """
    
    active: Optional[bool] = False
    """ User status """
    
    addresses: Optional[List[CreateUserRequestAddressesItem]] = None
    external_id: Optional[str] = None
    """ external unique resource id defined by provisioning client """
    
    phone_numbers: Optional[List[CreateUserRequestPhoneNumbersItem]] = None
    photos: Optional[List[CreateUserRequestPhotosItem]] = None
    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: Optional[CreateUserRequestUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User] = None

class CreateUserResponseAddressesItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponseAddressesItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
    
    Generated by Python OpenAPI Parser
    """
    
    type: CreateUserResponseAddressesItemType
    country: Optional[str] = None
    locality: Optional[str] = None
    postal_code: Optional[str] = None
    region: Optional[str] = None
    street_address: Optional[str] = None

class CreateUserResponseEmailsItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponseEmailsItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: CreateUserResponseEmailsItemType
    value: str

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponseName(DataClassJsonMixin):
    """
    Required Properties:
     - family_name
     - given_name
    
    Generated by Python OpenAPI Parser
    """
    
    family_name: str
    given_name: str

class CreateUserResponsePhoneNumbersItemType(Enum):
    Work = 'work'
    Mobile = 'mobile'
    Other = 'other'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponsePhoneNumbersItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: CreateUserResponsePhoneNumbersItemType
    value: str

class CreateUserResponsePhotosItemType(Enum):
    Photo = 'photo'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponsePhotosItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: CreateUserResponsePhotosItemType
    value: str

class CreateUserResponseSchemasItem(Enum):
    UrnIetfParamsScimSchemasCore_2_0_User = 'urn:ietf:params:scim:schemas:core:2.0:User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponseUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User(DataClassJsonMixin):
    department: Optional[str] = None

class CreateUserResponseMetaResourceType(Enum):
    User = 'User'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponseMeta(DataClassJsonMixin):
    """ resource metadata """
    
    created: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    last_modified: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    location: Optional[str] = None
    """ resource location URI """
    
    resource_type: Optional[CreateUserResponseMetaResourceType] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponse(DataClassJsonMixin):
    """
    Required Properties:
     - emails
     - name
     - schemas
     - user_name
    
    Generated by Python OpenAPI Parser
    """
    
    emails: List[CreateUserResponseEmailsItem]
    name: CreateUserResponseName
    schemas: List[CreateUserResponseSchemasItem]
    user_name: str
    """ MUST be same as work type email address """
    
    active: Optional[bool] = False
    """ user status """
    
    addresses: Optional[List[CreateUserResponseAddressesItem]] = None
    external_id: Optional[str] = None
    """ external unique resource id defined by provisioning client """
    
    id: Optional[str] = None
    """ unique resource id defined by RingCentral """
    
    phone_numbers: Optional[List[CreateUserResponsePhoneNumbersItem]] = None
    photos: Optional[List[CreateUserResponsePhotosItem]] = None
    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: Optional[CreateUserResponseUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User] = None
    meta: Optional[CreateUserResponseMeta] = None
    """ resource metadata """
    

class CreateUserResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class CreateUserResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[CreateUserResponseSchemasItem]] = None
    scim_type: Optional[CreateUserResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class CreateUserResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class CreateUserResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[CreateUserResponseSchemasItem]] = None
    scim_type: Optional[CreateUserResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class CreateUserResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class CreateUserResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[CreateUserResponseSchemasItem]] = None
    scim_type: Optional[CreateUserResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class CreateUserResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class CreateUserResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[CreateUserResponseSchemasItem]] = None
    scim_type: Optional[CreateUserResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class CreateUserResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class CreateUserResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[CreateUserResponseSchemasItem]] = None
    scim_type: Optional[CreateUserResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class CreateUserResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class CreateUserResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[CreateUserResponseSchemasItem]] = None
    scim_type: Optional[CreateUserResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class CreateUserResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class CreateUserResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateUserResponse(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[CreateUserResponseSchemasItem]] = None
    scim_type: Optional[CreateUserResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class SearchViaPost2RequestSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_SearchRequest = 'urn:ietf:params:scim:api:messages:2.0:SearchRequest'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Request(DataClassJsonMixin):
    count: Optional[int] = None
    """ page size """
    
    filter: Optional[str] = None
    """ only support 'userName' or 'email' filter expressions for now """
    
    schemas: Optional[List[SearchViaPost2RequestSchemasItem]] = None
    start_index: Optional[int] = None
    """ start index (1-based) """
    

class SearchViaPost2Response_ResourcesItemAddressesItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response_ResourcesItemAddressesItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
    
    Generated by Python OpenAPI Parser
    """
    
    type: SearchViaPost2Response_ResourcesItemAddressesItemType
    country: Optional[str] = None
    locality: Optional[str] = None
    postal_code: Optional[str] = None
    region: Optional[str] = None
    street_address: Optional[str] = None

class SearchViaPost2Response_ResourcesItemEmailsItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response_ResourcesItemEmailsItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: SearchViaPost2Response_ResourcesItemEmailsItemType
    value: str

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response_ResourcesItemName(DataClassJsonMixin):
    """
    Required Properties:
     - family_name
     - given_name
    
    Generated by Python OpenAPI Parser
    """
    
    family_name: str
    given_name: str

class SearchViaPost2Response_ResourcesItemPhoneNumbersItemType(Enum):
    Work = 'work'
    Mobile = 'mobile'
    Other = 'other'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response_ResourcesItemPhoneNumbersItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: SearchViaPost2Response_ResourcesItemPhoneNumbersItemType
    value: str

class SearchViaPost2Response_ResourcesItemPhotosItemType(Enum):
    Photo = 'photo'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response_ResourcesItemPhotosItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: SearchViaPost2Response_ResourcesItemPhotosItemType
    value: str

class SearchViaPost2Response_ResourcesItemSchemasItem(Enum):
    UrnIetfParamsScimSchemasCore_2_0_User = 'urn:ietf:params:scim:schemas:core:2.0:User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response_ResourcesItemUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User(DataClassJsonMixin):
    department: Optional[str] = None

class SearchViaPost2Response_ResourcesItemMetaResourceType(Enum):
    User = 'User'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response_ResourcesItemMeta(DataClassJsonMixin):
    """ resource metadata """
    
    created: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    last_modified: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    location: Optional[str] = None
    """ resource location URI """
    
    resource_type: Optional[SearchViaPost2Response_ResourcesItemMetaResourceType] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response_ResourcesItem(DataClassJsonMixin):
    """
    Required Properties:
     - emails
     - name
     - schemas
     - user_name
    
    Generated by Python OpenAPI Parser
    """
    
    emails: List[SearchViaPost2Response_ResourcesItemEmailsItem]
    name: SearchViaPost2Response_ResourcesItemName
    schemas: List[SearchViaPost2Response_ResourcesItemSchemasItem]
    user_name: str
    """ MUST be same as work type email address """
    
    active: Optional[bool] = False
    """ user status """
    
    addresses: Optional[List[SearchViaPost2Response_ResourcesItemAddressesItem]] = None
    external_id: Optional[str] = None
    """ external unique resource id defined by provisioning client """
    
    id: Optional[str] = None
    """ unique resource id defined by RingCentral """
    
    phone_numbers: Optional[List[SearchViaPost2Response_ResourcesItemPhoneNumbersItem]] = None
    photos: Optional[List[SearchViaPost2Response_ResourcesItemPhotosItem]] = None
    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: Optional[SearchViaPost2Response_ResourcesItemUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User] = None
    meta: Optional[SearchViaPost2Response_ResourcesItemMeta] = None
    """ resource metadata """
    

class SearchViaPost2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_ListResponse = 'urn:ietf:params:scim:api:messages:2.0:ListResponse'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response(DataClassJsonMixin):
    resources: Optional[List[SearchViaPost2Response_ResourcesItem]] = None
    """ user list """
    
    items_per_page: Optional[int] = None
    schemas: Optional[List[SearchViaPost2ResponseSchemasItem]] = None
    start_index: Optional[int] = None
    total_results: Optional[int] = None

class SearchViaPost2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class SearchViaPost2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[SearchViaPost2ResponseSchemasItem]] = None
    scim_type: Optional[SearchViaPost2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class SearchViaPost2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class SearchViaPost2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[SearchViaPost2ResponseSchemasItem]] = None
    scim_type: Optional[SearchViaPost2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class SearchViaPost2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class SearchViaPost2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[SearchViaPost2ResponseSchemasItem]] = None
    scim_type: Optional[SearchViaPost2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class SearchViaPost2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class SearchViaPost2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[SearchViaPost2ResponseSchemasItem]] = None
    scim_type: Optional[SearchViaPost2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class SearchViaPost2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class SearchViaPost2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SearchViaPost2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[SearchViaPost2ResponseSchemasItem]] = None
    scim_type: Optional[SearchViaPost2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReadUser2ResponseAddressesItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2ResponseAddressesItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReadUser2ResponseAddressesItemType
    country: Optional[str] = None
    locality: Optional[str] = None
    postal_code: Optional[str] = None
    region: Optional[str] = None
    street_address: Optional[str] = None

class ReadUser2ResponseEmailsItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2ResponseEmailsItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReadUser2ResponseEmailsItemType
    value: str

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2ResponseName(DataClassJsonMixin):
    """
    Required Properties:
     - family_name
     - given_name
    
    Generated by Python OpenAPI Parser
    """
    
    family_name: str
    given_name: str

class ReadUser2ResponsePhoneNumbersItemType(Enum):
    Work = 'work'
    Mobile = 'mobile'
    Other = 'other'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2ResponsePhoneNumbersItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReadUser2ResponsePhoneNumbersItemType
    value: str

class ReadUser2ResponsePhotosItemType(Enum):
    Photo = 'photo'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2ResponsePhotosItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReadUser2ResponsePhotosItemType
    value: str

class ReadUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimSchemasCore_2_0_User = 'urn:ietf:params:scim:schemas:core:2.0:User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2ResponseUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User(DataClassJsonMixin):
    department: Optional[str] = None

class ReadUser2ResponseMetaResourceType(Enum):
    User = 'User'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2ResponseMeta(DataClassJsonMixin):
    """ resource metadata """
    
    created: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    last_modified: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    location: Optional[str] = None
    """ resource location URI """
    
    resource_type: Optional[ReadUser2ResponseMetaResourceType] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2Response(DataClassJsonMixin):
    """
    Required Properties:
     - emails
     - name
     - schemas
     - user_name
    
    Generated by Python OpenAPI Parser
    """
    
    emails: List[ReadUser2ResponseEmailsItem]
    name: ReadUser2ResponseName
    schemas: List[ReadUser2ResponseSchemasItem]
    user_name: str
    """ MUST be same as work type email address """
    
    active: Optional[bool] = False
    """ user status """
    
    addresses: Optional[List[ReadUser2ResponseAddressesItem]] = None
    external_id: Optional[str] = None
    """ external unique resource id defined by provisioning client """
    
    id: Optional[str] = None
    """ unique resource id defined by RingCentral """
    
    phone_numbers: Optional[List[ReadUser2ResponsePhoneNumbersItem]] = None
    photos: Optional[List[ReadUser2ResponsePhotosItem]] = None
    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: Optional[ReadUser2ResponseUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User] = None
    meta: Optional[ReadUser2ResponseMeta] = None
    """ resource metadata """
    

class ReadUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReadUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReadUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReadUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReadUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReadUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReadUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReadUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReadUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReadUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReadUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReadUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReadUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReadUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReadUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReadUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReadUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReadUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReadUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReadUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReplaceUser2RequestAddressesItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2RequestAddressesItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReplaceUser2RequestAddressesItemType
    country: Optional[str] = None
    locality: Optional[str] = None
    postal_code: Optional[str] = None
    region: Optional[str] = None
    street_address: Optional[str] = None

class ReplaceUser2RequestEmailsItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2RequestEmailsItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReplaceUser2RequestEmailsItemType
    value: str

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2RequestName(DataClassJsonMixin):
    """
    Required Properties:
     - family_name
     - given_name
    
    Generated by Python OpenAPI Parser
    """
    
    family_name: str
    given_name: str

class ReplaceUser2RequestPhoneNumbersItemType(Enum):
    Work = 'work'
    Mobile = 'mobile'
    Other = 'other'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2RequestPhoneNumbersItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReplaceUser2RequestPhoneNumbersItemType
    value: str

class ReplaceUser2RequestPhotosItemType(Enum):
    Photo = 'photo'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2RequestPhotosItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReplaceUser2RequestPhotosItemType
    value: str

class ReplaceUser2RequestSchemasItem(Enum):
    UrnIetfParamsScimSchemasCore_2_0_User = 'urn:ietf:params:scim:schemas:core:2.0:User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2RequestUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User(DataClassJsonMixin):
    department: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2Request(DataClassJsonMixin):
    """
    Required Properties:
     - emails
     - name
     - schemas
     - user_name
    
    Generated by Python OpenAPI Parser
    """
    
    emails: List[ReplaceUser2RequestEmailsItem]
    name: ReplaceUser2RequestName
    schemas: List[ReplaceUser2RequestSchemasItem]
    user_name: str
    """ MUST be same as work type email address """
    
    active: Optional[bool] = False
    """ user status """
    
    addresses: Optional[List[ReplaceUser2RequestAddressesItem]] = None
    external_id: Optional[str] = None
    """ external unique resource id defined by provisioning client """
    
    id: Optional[str] = None
    """ unique resource id defined by RingCentral """
    
    phone_numbers: Optional[List[ReplaceUser2RequestPhoneNumbersItem]] = None
    photos: Optional[List[ReplaceUser2RequestPhotosItem]] = None
    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: Optional[ReplaceUser2RequestUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User] = None

class ReplaceUser2ResponseAddressesItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2ResponseAddressesItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReplaceUser2ResponseAddressesItemType
    country: Optional[str] = None
    locality: Optional[str] = None
    postal_code: Optional[str] = None
    region: Optional[str] = None
    street_address: Optional[str] = None

class ReplaceUser2ResponseEmailsItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2ResponseEmailsItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReplaceUser2ResponseEmailsItemType
    value: str

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2ResponseName(DataClassJsonMixin):
    """
    Required Properties:
     - family_name
     - given_name
    
    Generated by Python OpenAPI Parser
    """
    
    family_name: str
    given_name: str

class ReplaceUser2ResponsePhoneNumbersItemType(Enum):
    Work = 'work'
    Mobile = 'mobile'
    Other = 'other'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2ResponsePhoneNumbersItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReplaceUser2ResponsePhoneNumbersItemType
    value: str

class ReplaceUser2ResponsePhotosItemType(Enum):
    Photo = 'photo'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2ResponsePhotosItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: ReplaceUser2ResponsePhotosItemType
    value: str

class ReplaceUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimSchemasCore_2_0_User = 'urn:ietf:params:scim:schemas:core:2.0:User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2ResponseUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User(DataClassJsonMixin):
    department: Optional[str] = None

class ReplaceUser2ResponseMetaResourceType(Enum):
    User = 'User'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2ResponseMeta(DataClassJsonMixin):
    """ resource metadata """
    
    created: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    last_modified: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    location: Optional[str] = None
    """ resource location URI """
    
    resource_type: Optional[ReplaceUser2ResponseMetaResourceType] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2Response(DataClassJsonMixin):
    """
    Required Properties:
     - emails
     - name
     - schemas
     - user_name
    
    Generated by Python OpenAPI Parser
    """
    
    emails: List[ReplaceUser2ResponseEmailsItem]
    name: ReplaceUser2ResponseName
    schemas: List[ReplaceUser2ResponseSchemasItem]
    user_name: str
    """ MUST be same as work type email address """
    
    active: Optional[bool] = False
    """ user status """
    
    addresses: Optional[List[ReplaceUser2ResponseAddressesItem]] = None
    external_id: Optional[str] = None
    """ external unique resource id defined by provisioning client """
    
    id: Optional[str] = None
    """ unique resource id defined by RingCentral """
    
    phone_numbers: Optional[List[ReplaceUser2ResponsePhoneNumbersItem]] = None
    photos: Optional[List[ReplaceUser2ResponsePhotosItem]] = None
    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: Optional[ReplaceUser2ResponseUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User] = None
    meta: Optional[ReplaceUser2ResponseMeta] = None
    """ resource metadata """
    

class ReplaceUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReplaceUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReplaceUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReplaceUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReplaceUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReplaceUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReplaceUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReplaceUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReplaceUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReplaceUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReplaceUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReplaceUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReplaceUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReplaceUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReplaceUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReplaceUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReplaceUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReplaceUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReplaceUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReplaceUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReplaceUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReplaceUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReplaceUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReplaceUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class ReplaceUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class ReplaceUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplaceUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[ReplaceUser2ResponseSchemasItem]] = None
    scim_type: Optional[ReplaceUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class DeleteUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class DeleteUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DeleteUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[DeleteUser2ResponseSchemasItem]] = None
    scim_type: Optional[DeleteUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class DeleteUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class DeleteUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DeleteUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[DeleteUser2ResponseSchemasItem]] = None
    scim_type: Optional[DeleteUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class DeleteUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class DeleteUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DeleteUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[DeleteUser2ResponseSchemasItem]] = None
    scim_type: Optional[DeleteUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class DeleteUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class DeleteUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DeleteUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[DeleteUser2ResponseSchemasItem]] = None
    scim_type: Optional[DeleteUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class DeleteUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class DeleteUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DeleteUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[DeleteUser2ResponseSchemasItem]] = None
    scim_type: Optional[DeleteUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class PatchUser2Request_OperationsItemOp(Enum):
    Add = 'add'
    Replace = 'replace'
    Remove = 'remove'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2Request_OperationsItem(DataClassJsonMixin):
    """
    Required Properties:
     - op
    
    Generated by Python OpenAPI Parser
    """
    
    op: PatchUser2Request_OperationsItemOp
    path: Optional[str] = None
    value: Optional[str] = None
    """ corresponding 'value' of that field specified by 'path' """
    

class PatchUser2RequestSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_PatchOp = 'urn:ietf:params:scim:api:messages:2.0:PatchOp'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2Request(DataClassJsonMixin):
    """
    Required Properties:
     - operations
     - schemas
    
    Generated by Python OpenAPI Parser
    """
    
    operations: List[PatchUser2Request_OperationsItem]
    """ patch operations list """
    
    schemas: List[PatchUser2RequestSchemasItem]

class PatchUser2ResponseAddressesItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2ResponseAddressesItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
    
    Generated by Python OpenAPI Parser
    """
    
    type: PatchUser2ResponseAddressesItemType
    country: Optional[str] = None
    locality: Optional[str] = None
    postal_code: Optional[str] = None
    region: Optional[str] = None
    street_address: Optional[str] = None

class PatchUser2ResponseEmailsItemType(Enum):
    Work = 'work'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2ResponseEmailsItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: PatchUser2ResponseEmailsItemType
    value: str

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2ResponseName(DataClassJsonMixin):
    """
    Required Properties:
     - family_name
     - given_name
    
    Generated by Python OpenAPI Parser
    """
    
    family_name: str
    given_name: str

class PatchUser2ResponsePhoneNumbersItemType(Enum):
    Work = 'work'
    Mobile = 'mobile'
    Other = 'other'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2ResponsePhoneNumbersItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: PatchUser2ResponsePhoneNumbersItemType
    value: str

class PatchUser2ResponsePhotosItemType(Enum):
    Photo = 'photo'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2ResponsePhotosItem(DataClassJsonMixin):
    """
    Required Properties:
     - type
     - value
    
    Generated by Python OpenAPI Parser
    """
    
    type: PatchUser2ResponsePhotosItemType
    value: str

class PatchUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimSchemasCore_2_0_User = 'urn:ietf:params:scim:schemas:core:2.0:User'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2ResponseUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User(DataClassJsonMixin):
    department: Optional[str] = None

class PatchUser2ResponseMetaResourceType(Enum):
    User = 'User'
    Group = 'Group'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2ResponseMeta(DataClassJsonMixin):
    """ resource metadata """
    
    created: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    last_modified: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)
    location: Optional[str] = None
    """ resource location URI """
    
    resource_type: Optional[PatchUser2ResponseMetaResourceType] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2Response(DataClassJsonMixin):
    """
    Required Properties:
     - emails
     - name
     - schemas
     - user_name
    
    Generated by Python OpenAPI Parser
    """
    
    emails: List[PatchUser2ResponseEmailsItem]
    name: PatchUser2ResponseName
    schemas: List[PatchUser2ResponseSchemasItem]
    user_name: str
    """ MUST be same as work type email address """
    
    active: Optional[bool] = False
    """ user status """
    
    addresses: Optional[List[PatchUser2ResponseAddressesItem]] = None
    external_id: Optional[str] = None
    """ external unique resource id defined by provisioning client """
    
    id: Optional[str] = None
    """ unique resource id defined by RingCentral """
    
    phone_numbers: Optional[List[PatchUser2ResponsePhoneNumbersItem]] = None
    photos: Optional[List[PatchUser2ResponsePhotosItem]] = None
    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: Optional[PatchUser2ResponseUrnIetfParamsScimSchemasExtensionEnterprise_2_0_User] = None
    meta: Optional[PatchUser2ResponseMeta] = None
    """ resource metadata """
    

class PatchUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class PatchUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[PatchUser2ResponseSchemasItem]] = None
    scim_type: Optional[PatchUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class PatchUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class PatchUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[PatchUser2ResponseSchemasItem]] = None
    scim_type: Optional[PatchUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class PatchUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class PatchUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[PatchUser2ResponseSchemasItem]] = None
    scim_type: Optional[PatchUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class PatchUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class PatchUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[PatchUser2ResponseSchemasItem]] = None
    scim_type: Optional[PatchUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class PatchUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class PatchUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[PatchUser2ResponseSchemasItem]] = None
    scim_type: Optional[PatchUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class PatchUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class PatchUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[PatchUser2ResponseSchemasItem]] = None
    scim_type: Optional[PatchUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

class PatchUser2ResponseSchemasItem(Enum):
    UrnIetfParamsScimApiMessages_2_0_Error = 'urn:ietf:params:scim:api:messages:2.0:Error'

class PatchUser2ResponseScimType(Enum):
    """ bad request type when status code is 400 """
    
    Uniqueness = 'uniqueness'
    TooMany = 'tooMany'
    Mutability = 'mutability'
    Sensitive = 'sensitive'
    InvalidSyntax = 'invalidSyntax'
    InvalidFilter = 'invalidFilter'
    InvalidPath = 'invalidPath'
    InvalidValue = 'invalidValue'
    InvalidVers = 'invalidVers'
    NoTarget = 'noTarget'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PatchUser2Response(DataClassJsonMixin):
    detail: Optional[str] = None
    """ detail error message """
    
    schemas: Optional[List[PatchUser2ResponseSchemasItem]] = None
    scim_type: Optional[PatchUser2ResponseScimType] = None
    """ bad request type when status code is 400 """
    
    status: Optional[str] = None
    """ same as HTTP status code, e.g. 400, 401, etc. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionRequestFrom(DataClassJsonMixin):
    """ Instance id of the caller. It corresponds to the 1st leg of the CallOut call. """
    
    device_id: Optional[str] = None
    """
    Internal identifier of a device
    
    Example: `59474004`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionRequestTo(DataClassJsonMixin):
    """ Phone number of the called party. This number corresponds to the 2nd leg of a CallOut call """
    
    phone_number: Optional[str] = None
    """
    Phone number in E.164 format
    
    Example: `+16502223366`
    """
    
    extension_number: Optional[str] = None
    """
    Extension number
    
    Example: `103`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionRequest(DataClassJsonMixin):
    """
    Required Properties:
     - from_
     - to
    
    Generated by Python OpenAPI Parser
    """
    
    from_: CreateCallOutCallSessionRequestFrom = field(metadata=config(field_name='from'))
    """ Instance id of the caller. It corresponds to the 1st leg of the CallOut call. """
    
    to: CreateCallOutCallSessionRequestTo
    """ Phone number of the called party. This number corresponds to the 2nd leg of a CallOut call """
    

class CreateCallOutCallSessionResponseSessionOriginType(Enum):
    """ Session origin type """
    
    Call = 'Call'
    RingOut = 'RingOut'
    RingMe = 'RingMe'
    Conference = 'Conference'
    GreetingsRecording = 'GreetingsRecording'
    VerificationCall = 'VerificationCall'
    Zoom = 'Zoom'
    CallOut = 'CallOut'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponseSessionOrigin(DataClassJsonMixin):
    """ Initial data of a call session """
    
    type: Optional[CreateCallOutCallSessionResponseSessionOriginType] = None
    """ Session origin type """
    

class CreateCallOutCallSessionResponseSessionPartiesItemStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponseSessionPartiesItemStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class CreateCallOutCallSessionResponseSessionPartiesItemStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponseSessionPartiesItemStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[CreateCallOutCallSessionResponseSessionPartiesItemStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[CreateCallOutCallSessionResponseSessionPartiesItemStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[CreateCallOutCallSessionResponseSessionPartiesItemStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponseSessionPartiesItemPark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponseSessionPartiesItemFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponseSessionPartiesItemTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponseSessionPartiesItemOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class CreateCallOutCallSessionResponseSessionPartiesItemDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class CreateCallOutCallSessionResponseSessionPartiesItemConferenceRole(Enum):
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    Host = 'Host'
    Participant = 'Participant'

class CreateCallOutCallSessionResponseSessionPartiesItemRingOutRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

class CreateCallOutCallSessionResponseSessionPartiesItemRingMeRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponseSessionPartiesItemRecordingsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a Recording resource """
    
    active: Optional[bool] = None
    """ True if the recording is active. False if the recording is paused. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponseSessionPartiesItem(DataClassJsonMixin):
    """ Information on a party of a call session """
    
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[CreateCallOutCallSessionResponseSessionPartiesItemStatus] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[CreateCallOutCallSessionResponseSessionPartiesItemPark] = None
    """ Call park information """
    
    from_: Optional[CreateCallOutCallSessionResponseSessionPartiesItemFrom] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[CreateCallOutCallSessionResponseSessionPartiesItemTo] = None
    """ Data on a called party """
    
    owner: Optional[CreateCallOutCallSessionResponseSessionPartiesItemOwner] = None
    """ Data on a call owner """
    
    direction: Optional[CreateCallOutCallSessionResponseSessionPartiesItemDirection] = None
    """ Direction of a call """
    
    conference_role: Optional[CreateCallOutCallSessionResponseSessionPartiesItemConferenceRole] = None
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    ring_out_role: Optional[CreateCallOutCallSessionResponseSessionPartiesItemRingOutRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    ring_me_role: Optional[CreateCallOutCallSessionResponseSessionPartiesItemRingMeRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    recordings: Optional[List[CreateCallOutCallSessionResponseSessionPartiesItemRecordingsItem]] = None
    """ Active recordings list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponseSession(DataClassJsonMixin):
    """ Call session information """
    
    id: Optional[str] = None
    """ Internal identifier of a call session """
    
    origin: Optional[CreateCallOutCallSessionResponseSessionOrigin] = None
    """ Initial data of a call session """
    
    voice_call_token: Optional[str] = None
    """ For calls of 'Conference' type only """
    
    parties: Optional[List[CreateCallOutCallSessionResponseSessionPartiesItem]] = None
    creation_time: Optional[str] = None
    """ Date and time of the latest session update represented in Unix time format """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CreateCallOutCallSessionResponse(DataClassJsonMixin):
    session: Optional[CreateCallOutCallSessionResponseSession] = None
    """ Call session information """
    

class ReadCallSessionStatusResponseSessionOriginType(Enum):
    """ Session origin type """
    
    Call = 'Call'
    RingOut = 'RingOut'
    RingMe = 'RingMe'
    Conference = 'Conference'
    GreetingsRecording = 'GreetingsRecording'
    VerificationCall = 'VerificationCall'
    Zoom = 'Zoom'
    CallOut = 'CallOut'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponseSessionOrigin(DataClassJsonMixin):
    """ Initial data of a call session """
    
    type: Optional[ReadCallSessionStatusResponseSessionOriginType] = None
    """ Session origin type """
    

class ReadCallSessionStatusResponseSessionPartiesItemStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponseSessionPartiesItemStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class ReadCallSessionStatusResponseSessionPartiesItemStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponseSessionPartiesItemStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[ReadCallSessionStatusResponseSessionPartiesItemStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[ReadCallSessionStatusResponseSessionPartiesItemStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[ReadCallSessionStatusResponseSessionPartiesItemStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponseSessionPartiesItemPark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponseSessionPartiesItemFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponseSessionPartiesItemTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponseSessionPartiesItemOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class ReadCallSessionStatusResponseSessionPartiesItemDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class ReadCallSessionStatusResponseSessionPartiesItemConferenceRole(Enum):
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    Host = 'Host'
    Participant = 'Participant'

class ReadCallSessionStatusResponseSessionPartiesItemRingOutRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

class ReadCallSessionStatusResponseSessionPartiesItemRingMeRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponseSessionPartiesItemRecordingsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a Recording resource """
    
    active: Optional[bool] = None
    """ True if the recording is active. False if the recording is paused. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponseSessionPartiesItem(DataClassJsonMixin):
    """ Information on a party of a call session """
    
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[ReadCallSessionStatusResponseSessionPartiesItemStatus] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[ReadCallSessionStatusResponseSessionPartiesItemPark] = None
    """ Call park information """
    
    from_: Optional[ReadCallSessionStatusResponseSessionPartiesItemFrom] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[ReadCallSessionStatusResponseSessionPartiesItemTo] = None
    """ Data on a called party """
    
    owner: Optional[ReadCallSessionStatusResponseSessionPartiesItemOwner] = None
    """ Data on a call owner """
    
    direction: Optional[ReadCallSessionStatusResponseSessionPartiesItemDirection] = None
    """ Direction of a call """
    
    conference_role: Optional[ReadCallSessionStatusResponseSessionPartiesItemConferenceRole] = None
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    ring_out_role: Optional[ReadCallSessionStatusResponseSessionPartiesItemRingOutRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    ring_me_role: Optional[ReadCallSessionStatusResponseSessionPartiesItemRingMeRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    recordings: Optional[List[ReadCallSessionStatusResponseSessionPartiesItemRecordingsItem]] = None
    """ Active recordings list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponseSession(DataClassJsonMixin):
    """ Call session information """
    
    id: Optional[str] = None
    """ Internal identifier of a call session """
    
    origin: Optional[ReadCallSessionStatusResponseSessionOrigin] = None
    """ Initial data of a call session """
    
    voice_call_token: Optional[str] = None
    """ For calls of 'Conference' type only """
    
    parties: Optional[List[ReadCallSessionStatusResponseSessionPartiesItem]] = None
    creation_time: Optional[str] = None
    """ Date and time of the latest session update represented in Unix time format """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReadCallSessionStatusResponse(DataClassJsonMixin):
    session: Optional[ReadCallSessionStatusResponseSession] = None
    """ Call session information """
    

class HoldCallPartyResponseStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class HoldCallPartyResponseStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class HoldCallPartyResponseStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class HoldCallPartyResponseStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[HoldCallPartyResponseStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[HoldCallPartyResponseStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[HoldCallPartyResponseStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class HoldCallPartyResponsePark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class HoldCallPartyResponseFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class HoldCallPartyResponseTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class HoldCallPartyResponseOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class HoldCallPartyResponseDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class HoldCallPartyResponseConferenceRole(Enum):
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    Host = 'Host'
    Participant = 'Participant'

class HoldCallPartyResponseRingOutRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

class HoldCallPartyResponseRingMeRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class HoldCallPartyResponseRecordingsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a Recording resource """
    
    active: Optional[bool] = None
    """ True if the recording is active. False if the recording is paused. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class HoldCallPartyResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[HoldCallPartyResponseStatus] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[HoldCallPartyResponsePark] = None
    """ Call park information """
    
    from_: Optional[HoldCallPartyResponseFrom] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[HoldCallPartyResponseTo] = None
    """ Data on a called party """
    
    owner: Optional[HoldCallPartyResponseOwner] = None
    """ Data on a call owner """
    
    direction: Optional[HoldCallPartyResponseDirection] = None
    """ Direction of a call """
    
    conference_role: Optional[HoldCallPartyResponseConferenceRole] = None
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    ring_out_role: Optional[HoldCallPartyResponseRingOutRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    ring_me_role: Optional[HoldCallPartyResponseRingMeRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    recordings: Optional[List[HoldCallPartyResponseRecordingsItem]] = None
    """ Active recordings list """
    

class UnholdCallPartyResponseStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnholdCallPartyResponseStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class UnholdCallPartyResponseStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnholdCallPartyResponseStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[UnholdCallPartyResponseStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[UnholdCallPartyResponseStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[UnholdCallPartyResponseStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnholdCallPartyResponsePark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnholdCallPartyResponseFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnholdCallPartyResponseTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnholdCallPartyResponseOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class UnholdCallPartyResponseDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class UnholdCallPartyResponseConferenceRole(Enum):
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    Host = 'Host'
    Participant = 'Participant'

class UnholdCallPartyResponseRingOutRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

class UnholdCallPartyResponseRingMeRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnholdCallPartyResponseRecordingsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a Recording resource """
    
    active: Optional[bool] = None
    """ True if the recording is active. False if the recording is paused. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class UnholdCallPartyResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[UnholdCallPartyResponseStatus] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[UnholdCallPartyResponsePark] = None
    """ Call park information """
    
    from_: Optional[UnholdCallPartyResponseFrom] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[UnholdCallPartyResponseTo] = None
    """ Data on a called party """
    
    owner: Optional[UnholdCallPartyResponseOwner] = None
    """ Data on a call owner """
    
    direction: Optional[UnholdCallPartyResponseDirection] = None
    """ Direction of a call """
    
    conference_role: Optional[UnholdCallPartyResponseConferenceRole] = None
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    ring_out_role: Optional[UnholdCallPartyResponseRingOutRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    ring_me_role: Optional[UnholdCallPartyResponseRingMeRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    recordings: Optional[List[UnholdCallPartyResponseRecordingsItem]] = None
    """ Active recordings list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class IgnoreCallInQueueRequest(DataClassJsonMixin):
    """
    Required Properties:
     - device_id
    
    Generated by Python OpenAPI Parser
    """
    
    device_id: str
    """
    Internal device identifier
    
    Example: `400020454008`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class TransferCallPartyRequest(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """ Phone number """
    
    voicemail: Optional[str] = None
    """ Voicemail owner extension identifier """
    
    park_orbit: Optional[str] = None
    """ Park orbit identifier """
    

class TransferCallPartyResponseStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class TransferCallPartyResponseStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class TransferCallPartyResponseStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class TransferCallPartyResponseStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[TransferCallPartyResponseStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[TransferCallPartyResponseStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[TransferCallPartyResponseStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class TransferCallPartyResponsePark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class TransferCallPartyResponseFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class TransferCallPartyResponseTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class TransferCallPartyResponseOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class TransferCallPartyResponseDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class TransferCallPartyResponseConferenceRole(Enum):
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    Host = 'Host'
    Participant = 'Participant'

class TransferCallPartyResponseRingOutRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

class TransferCallPartyResponseRingMeRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class TransferCallPartyResponseRecordingsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a Recording resource """
    
    active: Optional[bool] = None
    """ True if the recording is active. False if the recording is paused. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class TransferCallPartyResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[TransferCallPartyResponseStatus] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[TransferCallPartyResponsePark] = None
    """ Call park information """
    
    from_: Optional[TransferCallPartyResponseFrom] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[TransferCallPartyResponseTo] = None
    """ Data on a called party """
    
    owner: Optional[TransferCallPartyResponseOwner] = None
    """ Data on a call owner """
    
    direction: Optional[TransferCallPartyResponseDirection] = None
    """ Direction of a call """
    
    conference_role: Optional[TransferCallPartyResponseConferenceRole] = None
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    ring_out_role: Optional[TransferCallPartyResponseRingOutRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    ring_me_role: Optional[TransferCallPartyResponseRingMeRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    recordings: Optional[List[TransferCallPartyResponseRecordingsItem]] = None
    """ Active recordings list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class BridgeCallPartyRequest(DataClassJsonMixin):
    """
    Required Properties:
     - telephony_session_id
     - party_id
    
    Generated by Python OpenAPI Parser
    """
    
    telephony_session_id: str
    """ Internal identifier of a call session to be connected to (bridged) """
    
    party_id: str
    """ Internal identifier of a call party to be connected to (bridged) """
    

class BridgeCallPartyResponseStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class BridgeCallPartyResponseStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class BridgeCallPartyResponseStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class BridgeCallPartyResponseStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[BridgeCallPartyResponseStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[BridgeCallPartyResponseStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[BridgeCallPartyResponseStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class BridgeCallPartyResponsePark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class BridgeCallPartyResponseFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class BridgeCallPartyResponseTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class BridgeCallPartyResponseOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class BridgeCallPartyResponseDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class BridgeCallPartyResponseConferenceRole(Enum):
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    Host = 'Host'
    Participant = 'Participant'

class BridgeCallPartyResponseRingOutRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

class BridgeCallPartyResponseRingMeRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class BridgeCallPartyResponseRecordingsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a Recording resource """
    
    active: Optional[bool] = None
    """ True if the recording is active. False if the recording is paused. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class BridgeCallPartyResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[BridgeCallPartyResponseStatus] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[BridgeCallPartyResponsePark] = None
    """ Call park information """
    
    from_: Optional[BridgeCallPartyResponseFrom] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[BridgeCallPartyResponseTo] = None
    """ Data on a called party """
    
    owner: Optional[BridgeCallPartyResponseOwner] = None
    """ Data on a call owner """
    
    direction: Optional[BridgeCallPartyResponseDirection] = None
    """ Direction of a call """
    
    conference_role: Optional[BridgeCallPartyResponseConferenceRole] = None
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    ring_out_role: Optional[BridgeCallPartyResponseRingOutRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    ring_me_role: Optional[BridgeCallPartyResponseRingMeRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    recordings: Optional[List[BridgeCallPartyResponseRecordingsItem]] = None
    """ Active recordings list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AnswerCallPartyRequest(DataClassJsonMixin):
    device_id: Optional[str] = None
    """
    Device identifier that is used to answer the incoming call.
    
    Example: `400018633008`
    """
    

class AnswerCallPartyResponseStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AnswerCallPartyResponseStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class AnswerCallPartyResponseStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AnswerCallPartyResponseStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[AnswerCallPartyResponseStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[AnswerCallPartyResponseStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[AnswerCallPartyResponseStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AnswerCallPartyResponsePark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AnswerCallPartyResponseFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AnswerCallPartyResponseTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AnswerCallPartyResponseOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class AnswerCallPartyResponseDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class AnswerCallPartyResponseConferenceRole(Enum):
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    Host = 'Host'
    Participant = 'Participant'

class AnswerCallPartyResponseRingOutRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

class AnswerCallPartyResponseRingMeRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AnswerCallPartyResponseRecordingsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a Recording resource """
    
    active: Optional[bool] = None
    """ True if the recording is active. False if the recording is paused. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class AnswerCallPartyResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[AnswerCallPartyResponseStatus] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[AnswerCallPartyResponsePark] = None
    """ Call park information """
    
    from_: Optional[AnswerCallPartyResponseFrom] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[AnswerCallPartyResponseTo] = None
    """ Data on a called party """
    
    owner: Optional[AnswerCallPartyResponseOwner] = None
    """ Data on a call owner """
    
    direction: Optional[AnswerCallPartyResponseDirection] = None
    """ Direction of a call """
    
    conference_role: Optional[AnswerCallPartyResponseConferenceRole] = None
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    ring_out_role: Optional[AnswerCallPartyResponseRingOutRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    ring_me_role: Optional[AnswerCallPartyResponseRingMeRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    recordings: Optional[List[AnswerCallPartyResponseRecordingsItem]] = None
    """ Active recordings list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PickupCallPartyRequest(DataClassJsonMixin):
    """
    Required Properties:
     - device_id
    
    Generated by Python OpenAPI Parser
    """
    
    device_id: str
    """
    Device identifier that is used to pick up the parked call.
    
    Example: `400018633008`
    """
    

class PickupCallPartyResponseStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PickupCallPartyResponseStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class PickupCallPartyResponseStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PickupCallPartyResponseStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[PickupCallPartyResponseStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[PickupCallPartyResponseStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[PickupCallPartyResponseStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PickupCallPartyResponsePark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PickupCallPartyResponseFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PickupCallPartyResponseTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PickupCallPartyResponseOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class PickupCallPartyResponseDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class PickupCallPartyResponseConferenceRole(Enum):
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    Host = 'Host'
    Participant = 'Participant'

class PickupCallPartyResponseRingOutRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

class PickupCallPartyResponseRingMeRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PickupCallPartyResponseRecordingsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a Recording resource """
    
    active: Optional[bool] = None
    """ True if the recording is active. False if the recording is paused. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PickupCallPartyResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[PickupCallPartyResponseStatus] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[PickupCallPartyResponsePark] = None
    """ Call park information """
    
    from_: Optional[PickupCallPartyResponseFrom] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[PickupCallPartyResponseTo] = None
    """ Data on a called party """
    
    owner: Optional[PickupCallPartyResponseOwner] = None
    """ Data on a call owner """
    
    direction: Optional[PickupCallPartyResponseDirection] = None
    """ Direction of a call """
    
    conference_role: Optional[PickupCallPartyResponseConferenceRole] = None
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    ring_out_role: Optional[PickupCallPartyResponseRingOutRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    ring_me_role: Optional[PickupCallPartyResponseRingMeRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    recordings: Optional[List[PickupCallPartyResponseRecordingsItem]] = None
    """ Active recordings list """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ForwardCallPartyRequest(DataClassJsonMixin):
    phone_number: Optional[str] = None
    """ Phone number """
    
    voicemail: Optional[str] = None
    """ Voicemail owner extension identifier """
    

class ForwardCallPartyResponseStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ForwardCallPartyResponseStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class ForwardCallPartyResponseStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ForwardCallPartyResponseStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[ForwardCallPartyResponseStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[ForwardCallPartyResponseStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[ForwardCallPartyResponseStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ForwardCallPartyResponsePark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ForwardCallPartyResponseFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ForwardCallPartyResponseTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ForwardCallPartyResponseOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class ForwardCallPartyResponseDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

class ForwardCallPartyResponseConferenceRole(Enum):
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    Host = 'Host'
    Participant = 'Participant'

class ForwardCallPartyResponseRingOutRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

class ForwardCallPartyResponseRingMeRole(Enum):
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    Initiator = 'Initiator'
    Target = 'Target'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ForwardCallPartyResponseRecordingsItem(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a Recording resource """
    
    active: Optional[bool] = None
    """ True if the recording is active. False if the recording is paused. """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ForwardCallPartyResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[ForwardCallPartyResponseStatus] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[ForwardCallPartyResponsePark] = None
    """ Call park information """
    
    from_: Optional[ForwardCallPartyResponseFrom] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[ForwardCallPartyResponseTo] = None
    """ Data on a called party """
    
    owner: Optional[ForwardCallPartyResponseOwner] = None
    """ Data on a call owner """
    
    direction: Optional[ForwardCallPartyResponseDirection] = None
    """ Direction of a call """
    
    conference_role: Optional[ForwardCallPartyResponseConferenceRole] = None
    """ A party's role in the conference scenarios. For calls of 'Conference' type only """
    
    ring_out_role: Optional[ForwardCallPartyResponseRingOutRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only """
    
    ring_me_role: Optional[ForwardCallPartyResponseRingMeRole] = None
    """ A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only """
    
    recordings: Optional[List[ForwardCallPartyResponseRecordingsItem]] = None
    """ Active recordings list """
    

class ReplyPartyRequestReplyWithPatternPattern(Enum):
    """
    Predefined reply pattern name.
    
    Example: `OnMyWay`
    Generated by Python OpenAPI Parser
    """
    
    WillCallYouBack = 'WillCallYouBack'
    CallMeBack = 'CallMeBack'
    OnMyWay = 'OnMyWay'
    OnTheOtherLine = 'OnTheOtherLine'
    WillCallYouBackLater = 'WillCallYouBackLater'
    CallMeBackLater = 'CallMeBackLater'
    InAMeeting = 'InAMeeting'
    OnTheOtherLineNoCall = 'OnTheOtherLineNoCall'

class ReplyPartyRequestReplyWithPatternTimeUnit(Enum):
    """
    Time unit name.
    
    Example: `Minute`
    Generated by Python OpenAPI Parser
    """
    
    Minute = 'Minute'
    Hour = 'Hour'
    Day = 'Day'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplyPartyRequestReplyWithPattern(DataClassJsonMixin):
    pattern: Optional[ReplyPartyRequestReplyWithPatternPattern] = None
    """
    Predefined reply pattern name.
    
    Example: `OnMyWay`
    """
    
    time: Optional[int] = None
    """
    Number of time units. Applicable only to WillCallYouBack, CallMeBack patterns.
    
    Example: `5`
    """
    
    time_unit: Optional[ReplyPartyRequestReplyWithPatternTimeUnit] = None
    """
    Time unit name.
    
    Example: `Minute`
    """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplyPartyRequest(DataClassJsonMixin):
    reply_with_text: Optional[str] = None
    """ Text to reply """
    
    reply_with_pattern: Optional[ReplyPartyRequestReplyWithPattern] = None

class ReplyPartyResponseStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplyPartyResponseStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class ReplyPartyResponseStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplyPartyResponseStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[ReplyPartyResponseStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[ReplyPartyResponseStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[ReplyPartyResponseStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplyPartyResponsePark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplyPartyResponseFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplyPartyResponseTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplyPartyResponseOwner(DataClassJsonMixin):
    """ Data on a call owner """
    
    account_id: Optional[str] = None
    """ Internal identifier of an account that monitors a call """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension that monitors a call """
    

class ReplyPartyResponseDirection(Enum):
    """ Direction of a call """
    
    Inbound = 'Inbound'
    Outbound = 'Outbound'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ReplyPartyResponse(DataClassJsonMixin):
    id: Optional[str] = None
    """ Internal identifier of a party """
    
    status: Optional[ReplyPartyResponseStatus] = None
    """ Status data of a call session """
    
    muted: Optional[bool] = None
    """
    Specifies if a call participant is muted or not. **Note:** If a call is also controlled via
    Hard phone or RingCentral App (not only through the API by calling call control methods) then
    it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via
    Hard phone/RC App interfaces
    """
    
    stand_alone: Optional[bool] = None
    """
    If 'True' then the party is not connected to a session voice conference, 'False' means the
    party is connected to other parties in a session
    """
    
    park: Optional[ReplyPartyResponsePark] = None
    """ Call park information """
    
    from_: Optional[ReplyPartyResponseFrom] = field(metadata=config(field_name='from'), default=None)
    """ Data on a calling party """
    
    to: Optional[ReplyPartyResponseTo] = None
    """ Data on a called party """
    
    owner: Optional[ReplyPartyResponseOwner] = None
    """ Data on a call owner """
    
    direction: Optional[ReplyPartyResponseDirection] = None
    """ Direction of a call """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallFlipPartyRequest(DataClassJsonMixin):
    call_flip_id: Optional[str] = None
    """ Call flip id """
    

class CallParkPartyResponseStatusCode(Enum):
    """ Status code of a call """
    
    Setup = 'Setup'
    Proceeding = 'Proceeding'
    Answered = 'Answered'
    Disconnected = 'Disconnected'
    Gone = 'Gone'
    Parked = 'Parked'
    Hold = 'Hold'
    VoiceMail = 'VoiceMail'
    FaxReceive = 'FaxReceive'
    VoiceMailScreening = 'VoiceMailScreening'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallParkPartyResponseStatusPeerId(DataClassJsonMixin):
    """ Peer session / party data.'Gone'state only """
    
    session_id: Optional[str] = None
    telephony_session_id: Optional[str] = None
    party_id: Optional[str] = None

class CallParkPartyResponseStatusReason(Enum):
    """ Reason of call termination. For 'Disconnected' code only """
    
    Pickup = 'Pickup'
    Supervising = 'Supervising'
    TakeOver = 'TakeOver'
    Timeout = 'Timeout'
    BlindTransfer = 'BlindTransfer'
    RccTransfer = 'RccTransfer'
    AttendedTransfer = 'AttendedTransfer'
    CallerInputRedirect = 'CallerInputRedirect'
    CallFlip = 'CallFlip'
    ParkLocation = 'ParkLocation'
    DtmfTransfer = 'DtmfTransfer'
    AgentAnswered = 'AgentAnswered'
    AgentDropped = 'AgentDropped'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'
    InternalError = 'InternalError'
    NoAnswer = 'NoAnswer'
    TargetBusy = 'TargetBusy'
    InvalidNumber = 'InvalidNumber'
    InternationalDisabled = 'InternationalDisabled'
    DestinationBlocked = 'DestinationBlocked'
    NotEnoughFunds = 'NotEnoughFunds'
    NoSuchUser = 'NoSuchUser'
    CallPark = 'CallPark'
    CallRedirected = 'CallRedirected'
    CallReplied = 'CallReplied'
    CallSwitch = 'CallSwitch'
    CallFinished = 'CallFinished'
    CallDropped = 'CallDropped'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallParkPartyResponseStatus(DataClassJsonMixin):
    """ Status data of a call session """
    
    code: Optional[CallParkPartyResponseStatusCode] = None
    """ Status code of a call """
    
    peer_id: Optional[CallParkPartyResponseStatusPeerId] = None
    """ Peer session / party data.'Gone'state only """
    
    reason: Optional[CallParkPartyResponseStatusReason] = None
    """ Reason of call termination. For 'Disconnected' code only """
    
    description: Optional[str] = None
    """ Optional message """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallParkPartyResponsePark(DataClassJsonMixin):
    """ Call park information """
    
    id: Optional[str] = None
    """ Call park identifier """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallParkPartyResponseFrom(DataClassJsonMixin):
    """ Data on a calling party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CallParkPartyResponseTo(DataClassJsonMixin):
    """ Data on a called party """
    
    phone_number: Optional[str] = None
    """ Phone number of a party """
    
    name: Optional[str] = None
    """ Displayed name of a party """
    
    device_id: Optional[str] = None
    """ Internal identifier of a device """
    
    extension_id: Optional[str] = None
    """ Internal identifier of an extension """
    
