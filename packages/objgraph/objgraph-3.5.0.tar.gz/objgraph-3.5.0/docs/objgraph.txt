:mod:`objgraph`
===============

.. automodule:: objgraph

.. currentmodule:: objgraph


Statistics
----------

.. autofunction:: count(typename[, objects])

.. autofunction:: typestats([objects, shortnames=True])

.. autofunction:: most_common_types([limit=10, objects, shortnames=True])

.. autofunction:: show_most_common_types([limit=10, objects, shortnames=True, file=sys.stdout])

.. autofunction:: growth([limit=10, peak_stats={}, shortnames=True, filter=None])

.. autofunction:: show_growth([limit=10, peak_stats={}, shortnames=True, file=sys.stdout, filter=None])

.. autofunction:: get_new_ids([skip_update=False, limit=10, sortby='deltas', shortnames=True, file=sys.stdout])


Locating and Filtering Objects
------------------------------

.. autofunction:: get_leaking_objects([objects])

.. autofunction:: by_type(typename[, objects])

.. autofunction:: at

.. autofunction:: at_addrs(address_set)

.. autofunction:: is_proper_module(obj)


Traversing and Displaying Object Graphs
---------------------------------------

.. autofunction:: find_ref_chain(obj, predicate[, max_depth=20, extra_ignore=()])

.. autofunction:: find_backref_chain(obj, predicate[, max_depth=20, extra_ignore=()])

.. autofunction:: show_chain(chain[, ..., highlight=None, filename=None, extra_info=None, refcounts=False, shortnames=True])

.. autofunction:: show_backrefs(objs[, max_depth=3, extra_ignore=(), filter=None, too_many=10, highlight=None, filename=None, extra_info=None, refcounts=False, shortnames=True])

.. autofunction:: show_refs(objs[, max_depth=3, extra_ignore=(), filter=None, too_many=10, highlight=None, filename=None, extra_info=None, refcounts=False, shortnames=True])
