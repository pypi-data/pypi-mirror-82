# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

import _xbcf_cpp_

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class XBCFcppParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    num_sweeps = property(_xbcf_cpp_.XBCFcppParams_num_sweeps_get, _xbcf_cpp_.XBCFcppParams_num_sweeps_set)
    burnin = property(_xbcf_cpp_.XBCFcppParams_burnin_get, _xbcf_cpp_.XBCFcppParams_burnin_set)
    max_depth = property(_xbcf_cpp_.XBCFcppParams_max_depth_get, _xbcf_cpp_.XBCFcppParams_max_depth_set)
    n_min = property(_xbcf_cpp_.XBCFcppParams_n_min_get, _xbcf_cpp_.XBCFcppParams_n_min_set)
    num_cutpoints = property(_xbcf_cpp_.XBCFcppParams_num_cutpoints_get, _xbcf_cpp_.XBCFcppParams_num_cutpoints_set)
    no_split_penalty = property(_xbcf_cpp_.XBCFcppParams_no_split_penalty_get, _xbcf_cpp_.XBCFcppParams_no_split_penalty_set)
    mtry_pr = property(_xbcf_cpp_.XBCFcppParams_mtry_pr_get, _xbcf_cpp_.XBCFcppParams_mtry_pr_set)
    mtry_trt = property(_xbcf_cpp_.XBCFcppParams_mtry_trt_get, _xbcf_cpp_.XBCFcppParams_mtry_trt_set)
    p_categorical_pr = property(_xbcf_cpp_.XBCFcppParams_p_categorical_pr_get, _xbcf_cpp_.XBCFcppParams_p_categorical_pr_set)
    p_categorical_trt = property(_xbcf_cpp_.XBCFcppParams_p_categorical_trt_get, _xbcf_cpp_.XBCFcppParams_p_categorical_trt_set)
    num_trees_pr = property(_xbcf_cpp_.XBCFcppParams_num_trees_pr_get, _xbcf_cpp_.XBCFcppParams_num_trees_pr_set)
    alpha_pr = property(_xbcf_cpp_.XBCFcppParams_alpha_pr_get, _xbcf_cpp_.XBCFcppParams_alpha_pr_set)
    beta_pr = property(_xbcf_cpp_.XBCFcppParams_beta_pr_get, _xbcf_cpp_.XBCFcppParams_beta_pr_set)
    tau_pr = property(_xbcf_cpp_.XBCFcppParams_tau_pr_get, _xbcf_cpp_.XBCFcppParams_tau_pr_set)
    kap_pr = property(_xbcf_cpp_.XBCFcppParams_kap_pr_get, _xbcf_cpp_.XBCFcppParams_kap_pr_set)
    s_pr = property(_xbcf_cpp_.XBCFcppParams_s_pr_get, _xbcf_cpp_.XBCFcppParams_s_pr_set)
    pr_scale = property(_xbcf_cpp_.XBCFcppParams_pr_scale_get, _xbcf_cpp_.XBCFcppParams_pr_scale_set)
    num_trees_trt = property(_xbcf_cpp_.XBCFcppParams_num_trees_trt_get, _xbcf_cpp_.XBCFcppParams_num_trees_trt_set)
    alpha_trt = property(_xbcf_cpp_.XBCFcppParams_alpha_trt_get, _xbcf_cpp_.XBCFcppParams_alpha_trt_set)
    beta_trt = property(_xbcf_cpp_.XBCFcppParams_beta_trt_get, _xbcf_cpp_.XBCFcppParams_beta_trt_set)
    tau_trt = property(_xbcf_cpp_.XBCFcppParams_tau_trt_get, _xbcf_cpp_.XBCFcppParams_tau_trt_set)
    kap_trt = property(_xbcf_cpp_.XBCFcppParams_kap_trt_get, _xbcf_cpp_.XBCFcppParams_kap_trt_set)
    s_trt = property(_xbcf_cpp_.XBCFcppParams_s_trt_get, _xbcf_cpp_.XBCFcppParams_s_trt_set)
    trt_scale = property(_xbcf_cpp_.XBCFcppParams_trt_scale_get, _xbcf_cpp_.XBCFcppParams_trt_scale_set)
    verbose = property(_xbcf_cpp_.XBCFcppParams_verbose_get, _xbcf_cpp_.XBCFcppParams_verbose_set)
    parallel = property(_xbcf_cpp_.XBCFcppParams_parallel_get, _xbcf_cpp_.XBCFcppParams_parallel_set)
    set_random_seed = property(_xbcf_cpp_.XBCFcppParams_set_random_seed_get, _xbcf_cpp_.XBCFcppParams_set_random_seed_set)
    random_seed = property(_xbcf_cpp_.XBCFcppParams_random_seed_get, _xbcf_cpp_.XBCFcppParams_random_seed_set)
    sample_weights_flag = property(_xbcf_cpp_.XBCFcppParams_sample_weights_flag_get, _xbcf_cpp_.XBCFcppParams_sample_weights_flag_set)
    a_scaling = property(_xbcf_cpp_.XBCFcppParams_a_scaling_get, _xbcf_cpp_.XBCFcppParams_a_scaling_set)
    b_scaling = property(_xbcf_cpp_.XBCFcppParams_b_scaling_get, _xbcf_cpp_.XBCFcppParams_b_scaling_set)

    def __init__(self):
        _xbcf_cpp_.XBCFcppParams_swiginit(self, _xbcf_cpp_.new_XBCFcppParams())
    __swig_destroy__ = _xbcf_cpp_.delete_XBCFcppParams

# Register XBCFcppParams in _xbcf_cpp_:
_xbcf_cpp_.XBCFcppParams_swigregister(XBCFcppParams)

class XBCFcpp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _xbcf_cpp_.XBCFcpp_swiginit(self, _xbcf_cpp_.new_XBCFcpp(*args))

    def _fit(self, n_t: "int", n_p: "int", n_y: "int", n_z: "int", p_cat: "size_t") -> "void":
        return _xbcf_cpp_.XBCFcpp__fit(self, n_t, n_p, n_y, n_z, p_cat)

    def _predict(self, n_t: "int") -> "void":
        return _xbcf_cpp_.XBCFcpp__predict(self, n_t)

    def get_muhats(self, size: "int") -> "void":
        return _xbcf_cpp_.XBCFcpp_get_muhats(self, size)

    def get_tauhats(self, size: "int") -> "void":
        return _xbcf_cpp_.XBCFcpp_get_tauhats(self, size)

    def get_tauhats_test(self, size: "int") -> "void":
        return _xbcf_cpp_.XBCFcpp_get_tauhats_test(self, size)

    def get_b(self, size: "int") -> "void":
        return _xbcf_cpp_.XBCFcpp_get_b(self, size)

    def get_a(self, size: "int") -> "void":
        return _xbcf_cpp_.XBCFcpp_get_a(self, size)
    __swig_destroy__ = _xbcf_cpp_.delete_XBCFcpp

# Register XBCFcpp in _xbcf_cpp_:
_xbcf_cpp_.XBCFcpp_swigregister(XBCFcpp)



