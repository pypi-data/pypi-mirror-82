import random, time, uuid, json, pendulum, string
from .vulnerability import Vulnerability
from .computer import Computer
from .dns import DNS


class VulnerabilityHost(Vulnerability):
    """A VulnerabilityHost object contains properties related a single vulnerabile host
    """
    def __init__(self, critical = 0, high = 0, medium = 0, low = 0, informational = 0):
        super(VulnerabilityHost, self).__init__()
        self.critical = critical
        self.high = high
        self.medium = medium
        self.low = low
        self.informational = informational

    @property
    def host_id(self):
        """Returns a random host ID

        Returns:
            int: Returns a random host ID
        """
        return self.random.randint(1, 899)

    @property
    def name(self):
        """Returns a computer name

        Returns:
            str: Returns a randomly generated computer name
        """
        return Computer().name

    @property
    def fqdn(self):
        """A host FQDN

        Returns:
            str: Returns a randomly generated DNS name
        """
        return DNS().name

    @property
    def mac_address(self):
        """A host MAC Address

        Returns:
            str: Returns a randomly generated MAC Address
        """
        return Computer().mac_address
        
    @property
    def checks_considered(self):
        """A count of how many vulnerability checks were considered for a host

        Returns:
            int: Returns a randomly integer for checks considered during a vulnerability scan
        """
        return self.random.randint(323, 839)

    @property
    def percentage(self):
        """Returns a percentage of vulnerabilities found on a host

        Returns:
            dict: Returns a percentage of vulnerabilities found on a host
        """
        return_dict = {}
        if self.critical:
            return_dict['critical'] = round(float(len(self.critical)) / float(self.checks_considered) * 100, 4)
        if self.high:
            return_dict['high'] = round(float(len(self.high)) / float(self.checks_considered) * 100, 4)
        if self.medium:
            return_dict['medium'] = round(float(len(self.medium)) / float(self.checks_considered) * 100, 4)
        if self.low:
            return_dict['low'] = round(float(len(self.low)) / float(self.checks_considered) * 100, 4)
        if self.informational:
            return_dict['informational'] = round(float(len(self.informational)) / float(self.checks_considered) * 100, 4)
        return return_dict

    @property
    def total_score(self):
        """The total score of a host during a vulnerability scan

        Returns:
            int: The total score for a host during a vulnerability scan
        """
        score = len(self.critical) * 5
        score += len(self.high) * 4
        score += len(self.medium) * 3
        score += len(self.low) * 2
        score += len(self.informational) * 1
        return score
