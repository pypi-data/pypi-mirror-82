import json, os
from .baseclass import BaseClass


class Vulnerability(BaseClass):

    """The Vulnerabiltiy class contains properties to access data related to vulnerabilities

    Returns:
        Vulnerability: An object containing properties about vulnerabilities
    """
    
    __DATA_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), 'data', 'nessus-plugin-samples' + '.json'))
    __DATA = None

    def __init__(self, host_count=1, critical = 1, high = 1, medium = 1, low = 1, informational = 1):
        super(Vulnerability, self).__init__()
        self.host_count = host_count
        self.critical = critical
        self.high = high
        self.medium = medium
        self.low = low
        self.informational = informational

    @property
    def host(self):
        """Retrieve information about hosts found in a vulnerability scan

        Returns:
            VulnerabilityHost: Returns an object with properties for a vulnerable host
        """
        from .vulnerabilityhost import VulnerabilityHost
        return VulnerabilityHost(
            critical=self.critical, 
            high=self.high,
            medium=self.medium,
            low=self.low,
            informational=self.informational
        )

    @property
    def scan(self):
        """A vulnerability scan

        Returns:
            VulnerabilityScan: Returns a vulnerability scan object with properties related a vulnerability scan
        """
        from .vulnerabilityscan import VulnerabilityScan
        return VulnerabilityScan(host_count=self.host_count)
        
    @property
    def data(self):
        """Returns all vulnerability data

        Returns:
            json: Returns json of all vulnerability data
        """
        if not self.__DATA:
            with open(self.__DATA_PATH) as json_file:
                self.__DATA = json.load(json_file)
        return self.__DATA
        
    @property
    def critical(self):
        """Returns a list of critical vulnerabilities based on counts provided when instantiating the class

        Returns:
            list: Returns a list of critical vulnerabilities
        """
        return self._critical

    @critical.setter
    def critical(self, value):
        count = 0
        self._critical = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'critical':
                self._critical.append(self.random.choice([vuln]))
                count += 1
            if count == value:
                break
       
    @property
    def high(self):
        """Returns a list of high vulnerabilities based on counts provided when instantiating the class

        Returns:
            list: Returns a list of high vulnerabilities
        """
        return self._high

    @high.setter
    def high(self, value):
        count = 0
        self._high = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'high':
                self._high.append(self.random.choice([vuln]))
                count += 1
            if count == value:
                break

    @property
    def medium(self):
        """Returns a list of medium vulnerabilities based on counts provided when instantiating the class

        Returns:
            list: Returns a list of medium vulnerabilities
        """
        return self._medium

    @medium.setter
    def medium(self, value):
        count = 0
        self._medium = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'medium':
                self._medium.append(self.random.choice([vuln]))
                count += 1
            if count == value:
                break

    @property
    def low(self):
        """Returns a list of low vulnerabilities based on counts provided when instantiating the class

        Returns:
            list: Returns a list of low vulnerabilities
        """
        return self._low

    @low.setter
    def low(self, value):
        count = 0
        self._low = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'low':
                self._low.append(self.random.choice([vuln]))
                count += 1
            if count == value:
                break

    @property
    def informational(self):
        """Returns a list of informational vulnerabilities based on counts provided when instantiating the class

        Returns:
            list: Returns a list of informational vulnerabilities
        """
        return self._informational

    @informational.setter
    def informational(self, value):
        count = 0
        self._informational = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'informational':
                self._informational.append(self.random.choice([vuln]))
                count += 1
            if count == value:
                break
