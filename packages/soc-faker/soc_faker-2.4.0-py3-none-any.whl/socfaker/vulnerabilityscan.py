import json
from .network import Network
from .baseclass import BaseClass
from .timestamp import Timestamp


class VulnerabilityScan(BaseClass):
    """A VulnerabilityScan object contains properties about a vulnerability scan
    """

    def __init__(self, host_count=1):
        super(VulnerabilityScan, self).__init__()
        self._host_count = host_count

    @property
    def id(self):
        """A vulnerability scan ID

        Returns:
            int: Returns a random vulnerability scan ID
        """
        return self.random.randint(1, 999)

    @property
    def scanner_name(self):
        """A vulnerability scaner name

        Returns:
            str: Returns a random vulnerability scanner name
        """
        return 'Local Scanner {}'.format(self.random.randint(1,5))

    @property
    def scanner_uuid(self):
        """A vulnerability scanner UUID

        Returns:
            str: A random UUID for a scanner
        """
        return str(self.uuid.uuid4())

    @property
    def name(self):
        """A vulnerability scan name

        Returns:
            str: A randomly selected vulnerability scan name
        """
        return self.random.choice(['Web Server Scan', 'Endpoint Scan', 'Container Scanner', 'Audit Scan', 'Vulnerability Patch List Scan', 'Random Scan'])

    @property
    def type(self):
        """The vulnerability scan type

        Returns:
            str: A randomly selected vulnerability scan type
        """
        return self.random.choice(['local', 'cloud', 'mssp'])

    @property
    def status(self):
        """Vulnerability scan status

        Returns:
            str: A randomly selected scan status
        """
        return self.random.choice(['complete'] * 4 + ['new', 'pending', 'running','incomplete', 'imported', 'scheduled', 'canceled'])

    @property
    def scan_uuid(self):
        """A vulnerability scan UUID

        Returns:
            str: A random UUID for a vulnerability scan
        """
        return str(self.uuid.uuid4())

    @property
    def host_count(self):
        """A vulnerability scan host count

        Returns:
            int: The provided vulnerability scan host count
        """
        return self._host_count

    @property
    def ip_list(self):
        """A list of host IPs during a Vulnerability scan

        Returns:
            list: A randomly generated list of host IPs during a vulnerability scan
        """
        count = 0
        ip_list = []
        network = Network()
        while count < self.host_count:
            ip_list.append(network.ipv4)
            count += 1
        return ip_list

    @property
    def start_time(self):
        """Start time of a vulnerability scan

        Returns:
            str: The start time of a vulnerability scan in the past
        """
        return Timestamp().in_the_past()

    @property
    def end_time(self):
        """End time of a vulnerability scan

        Returns:
            str: The end time of a vulnerability scan in the future
        """
        return Timestamp().in_the_future(
            hours=self.random.randint(1,4),
            minutes=self.random.randint(1, 59),
            seconds=self.random.randint(1,59))
