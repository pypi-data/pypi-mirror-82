{"version":3,"sources":["webpack:///./app/views/settings/incidentRules/details.tsx","webpack:///./app/views/settings/projectAlerts/edit.tsx"],"names":["IncidentRulesDetails","handleSubmitSuccess","router","props","orgId","params","push","actions","Map","this","projectId","ruleId","rule","state","onSubmitSuccess","AsyncView","ProjectAlertsEditor","hasMetricAlerts","location","organization","project","alertType","pathname","includes","title","t","Fragment","objSlug","orgSlug","slug","StyledPageHeader","PageHeader","space"],"mappings":"28BA2DeA,E,kLAtBbC,oBAAsB,WAAM,IACnBC,EAAU,EAAKC,MAAfD,OACAE,EAAS,EAAKD,MAAME,OAApBD,MAEPF,EAAOI,KAAP,yBAA8BF,EAA9B,oB,wDAhBA,O,iWAAA,6DAEEG,QAAS,IAAIC,Q,qCAIkB,MACEC,KAAKN,MAAME,OAAvCD,EAD0B,EAC1BA,MAAOM,EADmB,EACnBA,UAAWC,EADQ,EACRA,OAEzB,MAAO,CAAC,CAAC,OAAD,oBAAsBP,EAAtB,YAA+BM,EAA/B,wBAAwDC,EAAxD,S,mCAUG,IACJA,EAAUF,KAAKN,MAAME,OAArBM,OACAC,EAAQH,KAAKI,MAAbD,KAEP,OACE,YAAC,IAAD,OACMH,KAAKN,MADX,CAEEQ,OAAQA,EACRC,KAAMA,EACNE,gBAAiBL,KAAKR,2B,GA9BKc,K,6BCGnC,SAASC,EAAoBb,GAAc,IAClCc,EAA4Dd,EAA5Dc,gBAAiBC,EAA2Cf,EAA3Ce,SAAUb,EAAiCF,EAAjCE,OAAQc,EAAyBhB,EAAzBgB,aAAcC,EAAWjB,EAAXiB,QACjDV,EAAaL,EAAbK,UACDW,EAAYH,EAASI,SAASC,SAAS,yBACzC,SACA,QACEC,EAAQC,YAAE,mBAEhB,OACE,YAAC,IAAMC,SAAP,KACE,YAAC,IAAD,CAAqBF,MAAOA,EAAOG,QAASjB,IAC5C,YAAC,IAAD,KACE,YAAC,IAAD,CACEO,gBAAiBA,EACjBW,QAAST,EAAaU,KACtBL,MAAOA,IAET,YAACM,EAAD,KACE,YAAC,IAAD,KAAcN,MAEbP,GAAiC,UAAdI,IACpB,YAAC,IAAD,OAAiBlB,EAAjB,CAAwBiB,QAASA,KAGlCH,GAAiC,WAAdI,GAClB,YAAC,EAAD,OAA0BlB,EAA1B,CAAiCiB,QAASA,OAzB3CJ,E,kCAgCT,IAAMc,EAAmB,YAAOC,IAAP,8CAAH,iBACHC,YAAM,GADH,KAIPhB","file":"ProjectAlertsEdit.js","sourcesContent":["import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {IncidentRule} from 'app/views/settings/incidentRules/types';\nimport {Organization} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport RuleForm from 'app/views/settings/incidentRules/ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  rule: IncidentRule;\n  actions: Map<string, any>; // This is temp\n} & AsyncView['state'];\n\nclass IncidentRulesDetails extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      actions: new Map(),\n    };\n  }\n\n  getEndpoints(): [string, string][] {\n    const {orgId, projectId, ruleId} = this.props.params;\n\n    return [['rule', `/projects/${orgId}/${projectId}/alert-rules/${ruleId}/`]];\n  }\n\n  handleSubmitSuccess = () => {\n    const {router} = this.props;\n    const {orgId} = this.props.params;\n\n    router.push(`/organizations/${orgId}/alerts/rules/`);\n  };\n\n  renderBody() {\n    const {ruleId} = this.props.params;\n    const {rule} = this.state;\n\n    return (\n      <RuleForm\n        {...this.props}\n        ruleId={ruleId}\n        rule={rule}\n        onSubmitSuccess={this.handleSubmitSuccess}\n      />\n    );\n  }\n}\n\nexport default IncidentRulesDetails;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Organization, Project} from 'app/types';\nimport {PageContent, PageHeader} from 'app/styles/organization';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport IncidentRulesDetails from 'app/views/settings/incidentRules/details';\nimport IssueEditor from 'app/views/settings/projectAlerts/issueEditor';\nimport PageHeading from 'app/components/pageHeading';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\nfunction ProjectAlertsEditor(props: Props) {\n  const {hasMetricAlerts, location, params, organization, project} = props;\n  const {projectId} = params;\n  const alertType = location.pathname.includes('/alerts/metric-rules/')\n    ? 'metric'\n    : 'issue';\n  const title = t('Edit Alert Rule');\n\n  return (\n    <React.Fragment>\n      <SentryDocumentTitle title={title} objSlug={projectId} />\n      <PageContent>\n        <BuilderBreadCrumbs\n          hasMetricAlerts={hasMetricAlerts}\n          orgSlug={organization.slug}\n          title={title}\n        />\n        <StyledPageHeader>\n          <PageHeading>{title}</PageHeading>\n        </StyledPageHeader>\n        {(!hasMetricAlerts || alertType === 'issue') && (\n          <IssueEditor {...props} project={project} />\n        )}\n\n        {hasMetricAlerts && alertType === 'metric' && (\n          <IncidentRulesDetails {...props} project={project} />\n        )}\n      </PageContent>\n    </React.Fragment>\n  );\n}\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(4)};\n`;\n\nexport default ProjectAlertsEditor;\n"],"sourceRoot":""}