{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/components/charts/styles.tsx","webpack:///./app/components/layouts/thirds.tsx","webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/views/performance/realUserMonitoring/constants.tsx","webpack:///./app/components/events/rootSpanStatus.tsx","webpack:///./app/components/events/opsBreakdown.tsx","webpack:///./app/components/events/eventMetadata.tsx","webpack:///./app/components/tagsTable.tsx","webpack:///./app/utils/measurements/index.tsx","webpack:///./app/components/events/realUserMonitoring.tsx","webpack:////workspace/node_modules/lodash/isFinite.js"],"names":["SentryDocumentTitle","props","_title","title","objSlug","children","ChartControls","space","p","theme","borderLight","SectionHeading","gray600","fontSizeMedium","SectionValue","InlineContainer","Body","white","breakpoints","HeaderContent","HeaderActions","Title","headerFontSize","gray700","overflowEllipsis","Header","borderDark","Main","fullWidth","Side","Breadcrumbs","crumbs","linkLastItem","length","to","BreadcrumbList","map","index","label","preserveGlobalSelection","key","labelKey","mapKey","Fragment","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","gray500","IconChevron","NUM_BUCKETS","PERCENTILE","WEB_VITAL_DETAILS","WebVital","FP","slug","name","t","description","failureThreshold","type","measurementType","FCP","LCP","FID","CLS","TTFB","RequestTime","FILTER_OPTIONS","value","_VITAL_GROUPS","_COLORS","charts","getColorPalette","reduce","count","group","reverse","VITAL_GROUPS","colors","splice","ZOOM_KEYS","keys","forEach","vital","vitalSlug","push","RootSpanStatus","event","this","getTransactionEvent","traceContext","contexts","trace","status","tags","Array","isArray","tag","find","tagObject","getHttpStatusCode","getRootSpanStatus","trim","Container","React","Component","OtherOperation","Symbol","OpsBreakdown","spanEntry","entries","entry","spans","data","operationNameIntervals","op","timestamp","endTimestamp","start_timestamp","startTimestamp","trace_id","span_id","intervals","span","operationName","cover","operationNameInterval","sort","first","second","merged","currentInterval","lastInterval","lastIntervalEnd","currentIntervalStart","currentIntervalEnd","Math","max","mergeInterval","operationNameCoverage","Object","acc","duration","sum","start","end","abs","sortedOpsBreakdown","firstDuration","secondDuration","breakdown","slice","percentage","totalInterval","other","accOther","total","operationNameGroup","generateStats","StyledBreakdown","position","containerDisplayMode","currOp","isOther","durLabel","round","pctLabel","isFinite","opsColor","pickSpanBarColour","OpsLine","OpsNameContainer","OpsDot","style","backgroundColor","OpsName","OpsContent","Dur","Pct","EventMetadata","organization","projectId","eventJsonUrl","eventID","MetaDataID","MetadataContainer","data-test-id","date","getDynamicText","dateCreated","fixed","orgId","slugs","project","projects","StyledProjectBadge","avatarSize","MetadataJSON","href","className","bytes","ExternalLink","ProjectBadge","TagsTable","query","generateUrl","StyledTagsTable","StyledTable","tagInQuery","includes","target","undefined","renderTagValue","version","anchor","withPackage","StyledTr","TagKey","TagValue","gray100","formattedValue","record","getDuration","toFixed","LONG_MEASUREMENT_NAMES","fromEntries","values","RealUserMonitoring","measurements","filter","startsWith","failedThreshold","currentValue","thresholdValue","StyledPanel","Name","ValueRow","WarningIconContainer","Value","features","hasMeasurements","Measurements","renderMeasurements","Panel","red400","iconSizes","fontSizeExtraLarge","nativeIsFinite","module","exports"],"mappings":"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","file":"DiscoverV2Details~PerformanceTransactionDetails.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nexport const ChartControls = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  padding: ${space(1)} ${space(3)};\n  border-top: 1px solid ${p => p.theme.borderLight};\n`;\n\nexport const SubHeading = styled('h3')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: normal;\n  color: ${p => p.theme.gray800};\n  margin: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport const SectionHeading = styled('h4')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  align-items: center;\n  color: ${p => p.theme.gray600};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: ${space(1)} 0;\n  line-height: 1.3;\n`;\n\nexport const SectionValue = styled('span')`\n  color: ${p => p.theme.gray600};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-right: ${space(1)};\n`;\n\nexport const InlineContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  margin-right: ${space(2)};\n\n  > h4 {\n    margin-right: ${space(1)};\n  }\n\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport NavTabs from 'app/components/navTabs';\n\n/**\n * Base container for 66/33 containers.\n */\nexport const Body = styled('div')`\n  padding: ${space(2)};\n  margin: 0;\n  background-color: ${p => p.theme.white};\n  flex-grow: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    padding: ${space(2)} ${space(4)};\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    display: grid;\n    grid-template-columns: 66% auto;\n    align-content: start;\n    grid-gap: ${space(3)};\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    grid-template-columns: minmax(100px, auto) 325px;\n  }\n`;\n\n/**\n * Use HeaderContent to create horizontal regions in the header\n * that contain a heading/breadcrumbs and a button group.\n */\nexport const HeaderContent = styled('div')`\n  display: flex;\n  flex-direction: column;\n  justify-content: normal;\n  margin-bottom: ${space(2)};\n  overflow: hidden;\n  max-width: 100%;\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    margin-bottom: ${space(1)};\n  }\n`;\n\n/**\n * Container for action buttons and secondary information that\n * flows on the top right of the header.\n */\nexport const HeaderActions = styled('div')`\n  display: flex;\n  flex-direction: column;\n  justify-content: normal;\n  min-width: max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    width: max-content;\n    margin-bottom: ${space(2)};\n  }\n`;\n\n/**\n * Heading container that includes margins.\n */\nexport const Title = styled('h2')`\n  font-size: ${p => p.theme.headerFontSize};\n  font-weight: normal;\n  line-height: 1.2;\n  color: ${p => p.theme.gray700};\n  margin-top: ${space(3)};\n  /* TODO(bootstrap) Remove important when bootstrap headings are removed */\n  margin-bottom: 0 !important;\n  min-height: 30px;\n  align-self: center;\n  ${overflowEllipsis};\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    margin-top: ${space(1)};\n  }\n`;\n\n/**\n * Header container for header content and header actions.\n *\n * Uses a horizontal layout in wide viewports to put space between\n * the headings and the actions container. In narrow viewports these elements\n * are stacked vertically.\n */\nexport const Header = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  flex-grow: 0;\n  justify-content: space-between;\n  padding: ${space(2)} ${space(4)} 0 ${space(4)};\n  margin: 0;\n\n  background-color: transparent;\n  border-bottom: 1px solid ${p => p.theme.borderDark};\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    flex-direction: column;\n  }\n`;\n\n/**\n * Styled Nav Tabs for use inside a Layout.Header component\n */\nexport const HeaderNavTabs = styled(NavTabs)`\n  margin: 0;\n  border-bottom: 0 !important;\n  li {\n    margin-right: ${space(0.5)};\n  }\n  li > a {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\n/**\n * Containers for two column 66/33 layout.\n */\nexport const Main = styled('section')<{fullWidth?: boolean}>`\n  grid-column: ${p => (p.fullWidth ? '1/3' : '1/2')};\n  max-width: 100%;\n`;\nexport const Side = styled('aside')`\n  grid-column: 2/3;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {IconChevron} from 'app/icons';\nimport Link from 'app/components/links/link';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport {Theme} from 'app/utils/theme';\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: Crumb[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    crumbs[crumbs.length - 1].to = null;\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map(({label, to, preserveGlobalSelection, key}, index) => {\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <React.Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray500};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.gray700};\n  }\n`;\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nconst BreadcrumbLink = styled(({preserveGlobalSelection, ...props}) =>\n  preserveGlobalSelection ? <GlobalSelectionLink {...props} /> : <Link {...props} />\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.gray600};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray500};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import {t} from 'app/locale';\nimport {WebVital, measurementType} from 'app/utils/discover/fields';\nimport {SelectValue} from 'app/types';\nimport theme from 'app/utils/theme';\n\nimport {Vital} from './types';\n\nexport const NUM_BUCKETS = 100;\n\nexport const PERCENTILE = 0.75;\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    failureThreshold: 4000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    failureThreshold: 4000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    failureThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    failureThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    description: t(\n      'The sum total of all individual layout shift scores for every unexpected layout shift that occurs during the entire lifespan of the page.'\n    ),\n    failureThreshold: 0.1,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    failureThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    failureThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n};\n\nexport const FILTER_OPTIONS: SelectValue<string>[] = [\n  {label: t('Exclude Outliers'), value: 'exclude_outliers'},\n  {label: t('View All'), value: 'all'},\n];\n\n/**\n * This defines the grouping for histograms. Histograms that are in the same group\n * will be queried together on initial load for alignment. However, the zoom controls\n * are defined for each measurement independently.\n */\nconst _VITAL_GROUPS = [[WebVital.FP, WebVital.FCP, WebVital.LCP], [WebVital.FID]];\n\nconst _COLORS = [\n  ...theme.charts.getColorPalette(\n    _VITAL_GROUPS.reduce((count, group) => count + group.length, 0) - 1\n  ),\n].reverse();\n\nexport const VITAL_GROUPS = _VITAL_GROUPS.map(group => ({\n  group,\n  colors: _COLORS.splice(0, group.length),\n}));\n\nexport const ZOOM_KEYS = _VITAL_GROUPS.reduce((keys: string[], group) => {\n  group.forEach(vital => {\n    const vitalSlug = WEB_VITAL_DETAILS[vital].slug;\n    keys.push(`${vitalSlug}Start`);\n    keys.push(`${vitalSlug}End`);\n  });\n  return keys;\n}, []);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Event, SentryTransactionEvent} from 'app/types';\nimport {TraceContextType} from 'app/components/events/interfaces/spans/types';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype Props = {\n  event: Event;\n};\n\nclass RootSpanStatus extends React.Component<Props> {\n  getTransactionEvent(): SentryTransactionEvent | undefined {\n    const {event} = this.props;\n\n    if (event.type === 'transaction') {\n      return event as SentryTransactionEvent;\n    }\n\n    return undefined;\n  }\n\n  getRootSpanStatus(): string {\n    const event = this.getTransactionEvent();\n\n    const DEFAULT = '\\u2014';\n\n    if (!event) {\n      return DEFAULT;\n    }\n\n    const traceContext: TraceContextType | undefined = event?.contexts?.trace;\n\n    return traceContext?.status ?? DEFAULT;\n  }\n\n  getHttpStatusCode(): string {\n    const {event} = this.props;\n\n    const {tags} = event;\n\n    if (!Array.isArray(tags)) {\n      return '';\n    }\n\n    const tag = tags.find(tagObject => tagObject.key === 'http.status_code');\n\n    if (!tag) {\n      return '';\n    }\n\n    return tag.value;\n  }\n\n  render() {\n    const event = this.getTransactionEvent();\n\n    if (!event) {\n      return null;\n    }\n\n    const label = `${this.getHttpStatusCode()} ${this.getRootSpanStatus()}`.trim();\n\n    return (\n      <Container>\n        <Header>\n          <SectionHeading>{t('Status')}</SectionHeading>\n        </Header>\n        <div>{label}</div>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled('div')`\n  color: ${p => p.theme.gray600};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nexport default RootSpanStatus;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport isFinite from 'lodash/isFinite';\n\nimport {Event, SentryTransactionEvent} from 'app/types';\nimport {\n  SpanEntry,\n  RawSpanType,\n  TraceContextType,\n} from 'app/components/events/interfaces/spans/types';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport {pickSpanBarColour} from 'app/components/events/interfaces/spans/utils';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype StartTimestamp = number;\ntype EndTimestamp = number;\ntype Duration = number;\n\ntype TimeWindowSpan = [StartTimestamp, EndTimestamp];\n\nconst OtherOperation = Symbol('Other');\n\ntype OperationName = string | typeof OtherOperation;\n\n// mapping an operation name to a disjoint set of time intervals (start/end timestamp).\n// this is an intermediary data structure to help calculate the coverage of an operation name\n// with respect to the root transaction span's operation lifetime\ntype OperationNameIntervals = Record<OperationName, Array<TimeWindowSpan>>;\ntype OperationNameCoverage = Record<OperationName, Duration>;\n\ntype OpStats = {\n  name: OperationName;\n  percentage: number;\n  totalInterval: number;\n};\n\nconst TOP_N_SPANS = 4;\n\ntype OpBreakdownType = OpStats[];\n\ntype Props = {\n  event: Event;\n};\n\nclass OpsBreakdown extends React.Component<Props> {\n  getTransactionEvent(): SentryTransactionEvent | undefined {\n    const {event} = this.props;\n\n    if (event.type === 'transaction') {\n      return event as SentryTransactionEvent;\n    }\n\n    return undefined;\n  }\n\n  generateStats(): OpBreakdownType {\n    const event = this.getTransactionEvent();\n\n    if (!event) {\n      return [];\n    }\n\n    const traceContext: TraceContextType | undefined = event?.contexts?.trace;\n\n    if (!traceContext) {\n      return [];\n    }\n\n    const spanEntry: SpanEntry | undefined = event.entries.find(\n      (entry: {type: string}) => entry.type === 'spans'\n    );\n\n    let spans: RawSpanType[] = spanEntry?.data ?? [];\n\n    spans =\n      spans.length > 0\n        ? spans\n        : // if there are no descendent spans, then use the transaction root span\n          [\n            {\n              op: traceContext.op,\n              timestamp: event.endTimestamp,\n              start_timestamp: event.startTimestamp,\n              trace_id: traceContext.trace_id || '',\n              span_id: traceContext.span_id || '',\n              data: {},\n            },\n          ];\n\n    const operationNameIntervals = spans.reduce(\n      (intervals: Partial<OperationNameIntervals>, span: RawSpanType) => {\n        let startTimestamp = span.start_timestamp;\n        let endTimestamp = span.timestamp;\n\n        if (endTimestamp < startTimestamp) {\n          // reverse timestamps\n          startTimestamp = span.timestamp;\n          endTimestamp = span.start_timestamp;\n        }\n\n        // invariant: startTimestamp <= endTimestamp\n\n        let operationName = span.op;\n\n        if (typeof operationName !== 'string') {\n          // a span with no operation name is considered an 'unknown' op\n          operationName = 'unknown';\n        }\n\n        const cover: TimeWindowSpan = [startTimestamp, endTimestamp];\n\n        const operationNameInterval = intervals[operationName];\n\n        if (!Array.isArray(operationNameInterval)) {\n          intervals[operationName] = [cover];\n\n          return intervals;\n        }\n\n        operationNameInterval.push(cover);\n\n        intervals[operationName] = mergeInterval(operationNameInterval);\n\n        return intervals;\n      },\n      {}\n    ) as OperationNameIntervals;\n\n    const operationNameCoverage = Object.entries(operationNameIntervals).reduce(\n      (\n        acc: Partial<OperationNameCoverage>,\n        [operationName, intervals]: [OperationName, TimeWindowSpan[]]\n      ) => {\n        const duration = intervals.reduce((sum: number, [start, end]) => {\n          return sum + Math.abs(end - start);\n        }, 0);\n\n        acc[operationName] = duration;\n\n        return acc;\n      },\n      {}\n    ) as OperationNameCoverage;\n\n    const sortedOpsBreakdown = Object.entries(operationNameCoverage).sort(\n      (first: [OperationName, Duration], second: [OperationName, Duration]) => {\n        const firstDuration = first[1];\n        const secondDuration = second[1];\n\n        if (firstDuration === secondDuration) {\n          return 0;\n        }\n\n        if (firstDuration < secondDuration) {\n          // sort second before first\n          return 1;\n        }\n\n        // otherwise, sort first before second\n        return -1;\n      }\n    );\n\n    const breakdown = sortedOpsBreakdown.slice(0, TOP_N_SPANS).map(\n      ([operationName, duration]: [OperationName, Duration]): OpStats => {\n        return {\n          name: operationName,\n          // percentage to be recalculated after the ops breakdown group is decided\n          percentage: 0,\n          totalInterval: duration,\n        };\n      }\n    );\n\n    const other = sortedOpsBreakdown.slice(TOP_N_SPANS).reduce(\n      (accOther: OpStats, [_operationName, duration]: [OperationName, Duration]) => {\n        accOther.totalInterval += duration;\n\n        return accOther;\n      },\n      {\n        name: OtherOperation,\n        // percentage to be recalculated after the ops breakdown group is decided\n        percentage: 0,\n        totalInterval: 0,\n      }\n    );\n\n    if (other.totalInterval > 0) {\n      breakdown.push(other);\n    }\n\n    // calculate breakdown total duration\n\n    const total = breakdown.reduce((sum: number, operationNameGroup) => {\n      return sum + operationNameGroup.totalInterval;\n    }, 0);\n\n    // recalculate percentage values\n\n    breakdown.forEach(operationNameGroup => {\n      operationNameGroup.percentage = operationNameGroup.totalInterval / total;\n    });\n\n    return breakdown;\n  }\n\n  render() {\n    const event = this.getTransactionEvent();\n\n    if (!event) {\n      return null;\n    }\n\n    const breakdown = this.generateStats();\n\n    return (\n      <StyledBreakdown>\n        <SectionHeading>\n          {t('Operation Breakdown')}\n          <QuestionTooltip\n            position=\"top\"\n            size=\"sm\"\n            containerDisplayMode=\"block\"\n            title={t(\n              'Durations are calculated by summing span durations over the course of the transaction. Percentages are then calculated by dividing the individual op duration by the sum of total op durations. Overlapping/parallel spans are only counted once.'\n            )}\n          />\n        </SectionHeading>\n        {breakdown.map(currOp => {\n          const {name, percentage, totalInterval} = currOp;\n\n          const isOther = name === OtherOperation;\n          const operationName = typeof name === 'string' ? name : t('Other');\n\n          const durLabel = Math.round(totalInterval * 1000 * 100) / 100;\n          const pctLabel = isFinite(percentage) ? Math.round(percentage * 100) : '∞';\n          const opsColor: string = pickSpanBarColour(operationName);\n\n          return (\n            <OpsLine key={operationName}>\n              <OpsNameContainer>\n                <OpsDot style={{backgroundColor: isOther ? 'transparent' : opsColor}} />\n                <OpsName>{operationName}</OpsName>\n              </OpsNameContainer>\n              <OpsContent>\n                <Dur>{durLabel}ms</Dur>\n                <Pct>{pctLabel}%</Pct>\n              </OpsContent>\n            </OpsLine>\n          );\n        })}\n      </StyledBreakdown>\n    );\n  }\n}\n\nconst StyledBreakdown = styled('div')`\n  color: ${p => p.theme.gray600};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst OpsLine = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: ${space(0.5)};\n\n  * + * {\n    margin-left: ${space(0.5)};\n  }\n`;\n\nconst OpsDot = styled('div')`\n  content: '';\n  display: block;\n  width: 8px;\n  min-width: 8px;\n  height: 8px;\n  margin-right: ${space(1)};\n  border-radius: 100%;\n`;\n\nconst OpsContent = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst OpsNameContainer = styled(OpsContent)`\n  overflow: hidden;\n`;\n\nconst OpsName = styled('div')`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst Dur = styled('div')`\n  color: ${p => p.theme.gray500};\n`;\n\nconst Pct = styled('div')`\n  min-width: 40px;\n  text-align: right;\n`;\n\nfunction mergeInterval(intervals: TimeWindowSpan[]): TimeWindowSpan[] {\n  // sort intervals by start timestamps\n  intervals.sort((first: TimeWindowSpan, second: TimeWindowSpan) => {\n    if (first[0] < second[0]) {\n      // sort first before second\n      return -1;\n    }\n\n    if (second[0] < first[0]) {\n      // sort second before first\n      return 1;\n    }\n\n    return 0;\n  });\n\n  // array of disjoint intervals\n  const merged: TimeWindowSpan[] = [];\n\n  for (const currentInterval of intervals) {\n    if (merged.length === 0) {\n      merged.push(currentInterval);\n      continue;\n    }\n\n    const lastInterval = merged[merged.length - 1];\n    const lastIntervalEnd = lastInterval[1];\n\n    const [currentIntervalStart, currentIntervalEnd] = currentInterval;\n\n    if (lastIntervalEnd < currentIntervalStart) {\n      // if currentInterval does not overlap with lastInterval,\n      // then add currentInterval\n      merged.push(currentInterval);\n      continue;\n    }\n\n    // currentInterval and lastInterval overlaps; so we merge these intervals\n\n    // invariant: lastIntervalStart <= currentIntervalStart\n\n    lastInterval[1] = Math.max(lastIntervalEnd, currentIntervalEnd);\n  }\n\n  return merged;\n}\n\nexport default OpsBreakdown;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport {Event, OrganizationSummary} from 'app/types';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport DateTime from 'app/components/dateTime';\nimport ExternalLink from 'app/components/links/externalLink';\nimport FileSize from 'app/components/fileSize';\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport space from 'app/styles/space';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport Projects from 'app/utils/projects';\n\ntype Props = {\n  event: Event;\n  organization: OrganizationSummary;\n  projectId: string;\n};\n\n/**\n * Render metadata about the event and provide a link to the JSON blob.\n * Used in the sidebar of performance event details and discover2 event details.\n */\nfunction EventMetadata({event, organization, projectId}: Props) {\n  const eventJsonUrl = `/api/0/projects/${organization.slug}/${projectId}/events/${event.eventID}/json/`;\n\n  return (\n    <MetaDataID>\n      <SectionHeading>{t('Event ID')}</SectionHeading>\n      <MetadataContainer data-test-id=\"event-id\">{event.eventID}</MetadataContainer>\n      <MetadataContainer>\n        <DateTime\n          date={getDynamicText({\n            value: event.dateCreated || (event.endTimestamp || 0) * 1000,\n            fixed: 'Dummy timestamp',\n          })}\n        />\n      </MetadataContainer>\n      <Projects orgId={organization.slug} slugs={[projectId]}>\n        {({projects}) => {\n          const project = projects.find(p => p.slug === projectId);\n          return (\n            <StyledProjectBadge\n              project={project ? project : {slug: projectId}}\n              avatarSize={16}\n            />\n          );\n        }}\n      </Projects>\n      <MetadataJSON href={eventJsonUrl} className=\"json-link\">\n        {t('Preview JSON')} (<FileSize bytes={event.size} />)\n      </MetadataJSON>\n    </MetaDataID>\n  );\n}\n\nconst MetaDataID = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nconst MetadataContainer = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  color: ${p => p.theme.gray600};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst MetadataJSON = styled(ExternalLink)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StyledProjectBadge = styled(ProjectBadge)`\n  margin-bottom: ${space(2)};\n`;\n\nexport default EventMetadata;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport {SectionHeading} from 'app/components/charts/styles';\nimport Link from 'app/components/links/link';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport {Event, EventTag} from 'app/types';\nimport Version from 'app/components/version';\n\ntype Props = {\n  event: Event;\n  query: string;\n  generateUrl: (tag: EventTag) => LocationDescriptor;\n  title?: React.ReactNode;\n};\n\nconst TagsTable = ({\n  event,\n  query,\n  generateUrl,\n  title = t('Event Tag Details'),\n}: Props) => {\n  const tags = event.tags;\n\n  return (\n    <StyledTagsTable>\n      <SectionHeading>{title}</SectionHeading>\n      <StyledTable>\n        <tbody>\n          {tags.map(tag => {\n            const tagInQuery = query.includes(`${tag.key}:`);\n            const target = tagInQuery ? undefined : generateUrl(tag);\n\n            const renderTagValue = () => {\n              switch (tag.key) {\n                case 'release':\n                  return <Version version={tag.value} anchor={false} withPackage />;\n                default:\n                  return tag.value;\n              }\n            };\n\n            return (\n              <StyledTr key={tag.key}>\n                <TagKey>{tag.key}</TagKey>\n                <TagValue>\n                  {tagInQuery ? (\n                    <Tooltip title={t('This tag is in the current filter conditions')}>\n                      <span>{renderTagValue()}</span>\n                    </Tooltip>\n                  ) : (\n                    <Link to={target || ''}>{renderTagValue()}</Link>\n                  )}\n                </TagValue>\n              </StyledTr>\n            );\n          })}\n        </tbody>\n      </StyledTable>\n    </StyledTagsTable>\n  );\n};\n\nconst StyledTagsTable = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst StyledTable = styled('table')`\n  table-layout: fixed;\n  width: 100%;\n  max-width: 100%;\n`;\n\nconst StyledTr = styled('tr')`\n  &:nth-child(2n + 1) td {\n    background-color: ${p => p.theme.gray100};\n  }\n`;\n\nconst TagKey = styled('td')`\n  color: ${p => p.theme.gray600};\n  padding: ${space(0.5)} ${space(1)};\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst TagValue = styled(TagKey)`\n  text-align: right;\n  ${overflowEllipsis};\n`;\n\nexport default TagsTable;\n","import {Vital} from 'app/views/performance/realUserMonitoring/types';\nimport {getDuration} from 'app/utils/formatters';\n\nexport function formattedValue(record: Vital | undefined, value: number): string {\n  if (record && record.type === 'duration') {\n    return getDuration(value / 1000, 3);\n  }\n\n  return value.toFixed(3);\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Organization, Event} from 'app/types';\nimport {IconSize} from 'app/utils/theme';\nimport {t} from 'app/locale';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\nimport Tooltip from 'app/components/tooltip';\nimport {IconFire} from 'app/icons';\nimport {WEB_VITAL_DETAILS} from 'app/views/performance/realUserMonitoring/constants';\nimport {formattedValue} from 'app/utils/measurements/index';\n\n// translate known short form names into their long forms\nconst LONG_MEASUREMENT_NAMES = Object.fromEntries(\n  Object.values(WEB_VITAL_DETAILS).map(value => {\n    return [value.slug, value.name];\n  })\n);\n\ntype Props = {\n  organization: Organization;\n  event: Event;\n};\nclass RealUserMonitoring extends React.Component<Props> {\n  hasMeasurements() {\n    const {event} = this.props;\n\n    if (!event.measurements) {\n      return false;\n    }\n\n    return Object.keys(event.measurements).length > 0;\n  }\n\n  renderMeasurements() {\n    const {event} = this.props;\n\n    if (!event.measurements) {\n      return null;\n    }\n\n    const measurementNames = Object.keys(event.measurements)\n      .filter(name => {\n        // ignore marker measurements\n        return !name.startsWith('mark.');\n      })\n      .sort();\n\n    return measurementNames.map(name => {\n      const value = event.measurements![name].value;\n\n      const record = Object.values(WEB_VITAL_DETAILS).find(vital => vital.slug === name);\n\n      const failedThreshold = record ? value >= record.failureThreshold : false;\n\n      const currentValue = formattedValue(record, value);\n      const thresholdValue = formattedValue(record, record?.failureThreshold ?? 0);\n\n      return (\n        <div key={name}>\n          <StyledPanel failedThreshold={failedThreshold}>\n            <Name>{LONG_MEASUREMENT_NAMES[name] ?? name}</Name>\n            <ValueRow>\n              {failedThreshold ? (\n                <WarningIconContainer size=\"sm\">\n                  <Tooltip\n                    title={t('Fails threshold at %s.', thresholdValue)}\n                    position=\"top\"\n                    containerDisplayMode=\"inline-block\"\n                  >\n                    <IconFire size=\"sm\" />\n                  </Tooltip>\n                </WarningIconContainer>\n              ) : null}\n              <Value failedThreshold={failedThreshold}>{currentValue}</Value>\n            </ValueRow>\n          </StyledPanel>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    if (!organization.features.includes('measurements') || !this.hasMeasurements()) {\n      return null;\n    }\n\n    return (\n      <Container>\n        <SectionHeading>{t('Web Vitals')}</SectionHeading>\n        <Measurements>{this.renderMeasurements()}</Measurements>\n      </Container>\n    );\n  }\n}\n\nconst Measurements = styled('div')`\n  display: grid;\n  grid-column-gap: ${space(1)};\n`;\n\nconst Container = styled('div')`\n  color: ${p => p.theme.gray600};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst StyledPanel = styled(Panel)<{failedThreshold: boolean}>`\n  padding: ${space(1)};\n  margin-bottom: ${space(1)};\n\n  ${p => {\n    if (!p.failedThreshold) {\n      return null;\n    }\n\n    return `\n      border: 1px solid ${p.theme.red400};\n    `;\n  }};\n`;\n\nconst Name = styled('div')``;\n\nconst ValueRow = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst WarningIconContainer = styled('span')<{size: IconSize | string}>`\n  display: inline-block;\n  height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  line-height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  margin-right: ${space(1)};\n  color: ${p => p.theme.red400};\n`;\n\nconst Value = styled('span')<{failedThreshold: boolean}>`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  ${p => {\n    if (!p.failedThreshold) {\n      return null;\n    }\n\n    return `\n      color: ${p.theme.red400};\n    `;\n  }};\n`;\n\nexport default RealUserMonitoring;\n","var root = require('./_root');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite;\n\n/**\n * Checks if `value` is a finite primitive number.\n *\n * **Note:** This method is based on\n * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n * @example\n *\n * _.isFinite(3);\n * // => true\n *\n * _.isFinite(Number.MIN_VALUE);\n * // => true\n *\n * _.isFinite(Infinity);\n * // => false\n *\n * _.isFinite('3');\n * // => false\n */\nfunction isFinite(value) {\n  return typeof value == 'number' && nativeIsFinite(value);\n}\n\nmodule.exports = isFinite;\n"],"sourceRoot":""}