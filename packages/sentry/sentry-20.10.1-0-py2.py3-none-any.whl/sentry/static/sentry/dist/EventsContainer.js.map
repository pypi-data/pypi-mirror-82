{"version":3,"sources":["webpack:///./app/views/events/searchBar.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/events/index.jsx"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","getEventFieldValues","memoize","tag","query","endpointParams","props","api","organization","projectIdStrings","projectIds","map","String","fetchTagValues","slug","key","then","results","flatten","filter","name","defined","Error","prepareQuery","replace","this","cache","clear","prevProps","isEqual","fields","tags","omitTags","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","fieldTags","features","assign","omit","TRACING_FIELDS","combined","has","values","predefined","getTagList","css","hasRecentSearches","savedSearchType","SavedSearchType","EVENT","onGetTagValues","supportedTags","excludeEnvironment","dropdownClassName","React","PureComponent","withApi","withTags","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","listenTo","TagStore","getInitialState","getAllTags","onTagsUpdate","setState","render","state","EventsContainer","handleSearch","router","location","push","pathname","getParams","selection","loadOrganizationTags","projects","datetime","children","hookName","renderDisabled","resetParamsOnChange","Body","HeaderTitle","t","type","StyledSearchBar","placeholder","onSearch","Component","withOrganization","withGlobalSelection","p","theme","gray100","PageHeading","space"],"mappings":"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","file":"EventsContainer.js","sourcesContent":["import {ClassNames} from '@emotion/core';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';\nimport {defined} from 'app/utils';\nimport {fetchTagValues} from 'app/actionCreators/tags';\nimport SentryTypes from 'app/sentryTypes';\nimport {SavedSearchType, Organization, TagCollection} from 'app/types';\nimport SmartSearchBar from 'app/components/smartSearchBar';\nimport {Field, FIELD_TAGS, TRACING_FIELDS} from 'app/utils/discover/fields';\nimport withApi from 'app/utils/withApi';\nimport withTags from 'app/utils/withTags';\nimport {Client} from 'app/api';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\ntype SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  api: Client;\n  organization: Organization;\n  tags: TagCollection;\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n  fields?: Readonly<Field[]>;\n};\n\nclass SearchBar extends React.PureComponent<SearchBarProps> {\n  static propTypes: any = {\n    api: PropTypes.object,\n    organization: SentryTypes.Organization,\n    tags: PropTypes.objectOf(SentryTypes.Tag),\n    omitTags: PropTypes.arrayOf(PropTypes.string.isRequired),\n    projectIds: PropTypes.arrayOf(PropTypes.number.isRequired),\n    fields: PropTypes.arrayOf(PropTypes.object.isRequired) as any,\n  };\n\n  componentDidMount() {\n    // Clear memoized data on mount to make tests more consistent.\n    this.getEventFieldValues.cache.clear?.();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {\n      // Clear memoized data when projects change.\n      this.getEventFieldValues.cache.clear?.();\n    }\n  }\n\n  /**\n   * Returns array of tag values that substring match `query`; invokes `callback`\n   * with data when ready\n   */\n  getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const {api, organization, projectIds} = this.props;\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n\n  getTagList() {\n    const {fields, organization, tags, omitTags} = this.props;\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(item => !Object.keys(FIELD_TAGS).includes(item.field))\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  }\n\n  render() {\n    const tags = this.getTagList();\n    return (\n      <ClassNames>\n        {({css}) => (\n          <SmartSearchBar\n            {...this.props}\n            hasRecentSearches\n            savedSearchType={SavedSearchType.EVENT}\n            onGetTagValues={this.getEventFieldValues}\n            supportedTags={tags}\n            prepareQuery={this.prepareQuery}\n            excludeEnvironment\n            dropdownClassName={css`\n              max-height: 300px;\n              overflow-y: auto;\n            `}\n          />\n        )}\n      </ClassNames>\n    );\n  }\n}\n\nexport default withApi(withTags(SearchBar));\n","import React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\n\nimport getDisplayName from 'app/utils/getDisplayName';\nimport TagStore from 'app/stores/tagStore';\nimport {TagCollection} from 'app/types';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nconst withTags = <P extends InjectedTagsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTagsProps>, State>({\n    displayName: `withTags(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TagStore, 'onTagsUpdate') as any],\n\n    getInitialState() {\n      return {\n        tags: TagStore.getAllTags(),\n      };\n    },\n\n    onTagsUpdate(tags: TagCollection) {\n      this.setState({\n        tags,\n      });\n    },\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    },\n  });\n\nexport default withTags;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {loadOrganizationTags} from 'app/actionCreators/tags';\nimport {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';\nimport {t} from 'app/locale';\nimport FeatureBadge from 'app/components/featureBadge';\nimport Feature from 'app/components/acl/feature';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport SentryTypes from 'app/sentryTypes';\nimport PageHeading from 'app/components/pageHeading';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\nimport {PageContent, PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\nimport SearchBar from './searchBar';\n\nclass EventsContainer extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    organization: SentryTypes.Organization,\n    router: PropTypes.object,\n    selection: SentryTypes.GlobalSelection,\n  };\n\n  componentDidMount() {\n    const {api, organization, selection} = this.props;\n    loadOrganizationTags(api, organization.slug, selection);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {api, organization, selection} = this.props;\n\n    if (\n      !isEqual(prevProps.selection.projects, selection.projects) ||\n      !isEqual(prevProps.selection.datetime, selection.datetime)\n    ) {\n      loadOrganizationTags(api, organization.slug, selection);\n    }\n  }\n\n  handleSearch = query => {\n    const {router, location} = this.props;\n    router.push({\n      pathname: location.pathname,\n      query: getParams({\n        ...(location.query || {}),\n        query,\n      }),\n    });\n  };\n\n  render() {\n    const {organization, location, children, selection} = this.props;\n\n    return (\n      <Feature\n        features={['events']}\n        hookName=\"feature-disabled:events-page\"\n        renderDisabled\n      >\n        <GlobalSelectionHeader resetParamsOnChange={['cursor']}>\n          <PageContent>\n            <LightWeightNoProjectMessage organization={organization}>\n              <Body>\n                <PageHeader>\n                  <HeaderTitle>\n                    {t('Events')} <FeatureBadge type=\"beta\" />\n                  </HeaderTitle>\n                </PageHeader>\n                <div>\n                  <StyledSearchBar\n                    organization={organization}\n                    projectIds={selection.projects}\n                    query={(location.query && location.query.query) || ''}\n                    placeholder={t(\n                      'Search for events, users, tags, and everything else.'\n                    )}\n                    onSearch={this.handleSearch}\n                  />\n                </div>\n                {children}\n              </Body>\n            </LightWeightNoProjectMessage>\n          </PageContent>\n        </GlobalSelectionHeader>\n      </Feature>\n    );\n  }\n}\nexport default withApi(withOrganization(withGlobalSelection(EventsContainer)));\nexport {EventsContainer};\n\nconst Body = styled('div')`\n  background-color: ${p => p.theme.gray100};\n  flex-direction: column;\n  flex: 1;\n`;\n\nconst HeaderTitle = styled(PageHeading)`\n  flex: 1;\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex: 1;\n  margin-bottom: ${space(2)};\n`;\n"],"sourceRoot":""}