{"version":3,"sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/views/settings/organizationTeams/teamMembers.jsx"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","fetchDetails","teamId","request","orgId","success","data","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","createTeamSuccess","addSuccessMessage","tct","slug","organization","err","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","TeamMembers","state","loading","dropdownBusy","teamMemberList","orgMemberList","debouncedFetchMembersRequest","debounce","query","this","setState","fetchMembersRequest","a","props","t","duration","fetchData","errorResponse","addTeamMember","selection","value","orgMember","find","member","concat","handleMemberFilterChange","e","target","renderDropdown","access","existingMembers","Set","map","hasOpenMembership","openMembership","hasWriteAccess","has","canAddMembers","items","filter","m","searchKey","email","label","StyledUserListElement","StyledAvatar","user","size","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","to","onClick","openInviteMembersModal","source","data-test-id","onSelect","openTeamAccessRequestModal","emptyMessage","onChange","busy","onClose","isOpen","removeButton","icon","isCircled","removeMember","bind","nextProps","onRetry","config","hasButtons","style","textTransform","length","isSelf","canRemoveMember","StyledMemberContainer","key","avatarSize","useLink","React","Component","PanelItem","space","p","theme","fontSizeSmall","overflowEllipsis","fontSizeExtraSmall","Link","withConfig","withApi","withOrganization"],"mappings":"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","file":"TeamMembers.js","sourcesContent":["import {Client} from 'app/api';\nimport TeamActions from 'app/actions/teamActions';\nimport {tct} from 'app/locale';\nimport {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';\nimport {uniqueId} from 'app/utils/guid';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & MemberId,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport debounce from 'lodash/debounce';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelItem, PanelHeader} from 'app/components/panels';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {joinTeam, leaveTeam} from 'app/actionCreators/teams';\nimport {\n  openInviteMembersModal,\n  openTeamAccessRequestModal,\n} from 'app/actionCreators/modal';\nimport {t} from 'app/locale';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport Button from 'app/components/button';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport IdBadge from 'app/components/idBadge';\nimport {IconSubtract, IconUser} from 'app/icons';\nimport Link from 'app/components/links/link';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SentryTypes from 'app/sentryTypes';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport withConfig from 'app/utils/withConfig';\nimport withOrganization from 'app/utils/withOrganization';\n\nclass TeamMembers extends React.Component {\n  static propTypes = {\n    api: PropTypes.object.isRequired,\n    config: SentryTypes.Config.isRequired,\n    organization: SentryTypes.Organization.isRequired,\n  };\n\n  state = {\n    loading: true,\n    error: false,\n    dropdownBusy: false,\n    teamMemberList: null,\n    orgMemberList: null,\n  };\n\n  UNSAFE_componentWillMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const params = this.props.params;\n    if (\n      nextProps.params.teamId !== params.teamId ||\n      nextProps.params.orgId !== params.orgId\n    ) {\n      this.setState(\n        {\n          loading: true,\n          error: false,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  debouncedFetchMembersRequest = debounce(function (query) {\n    this.setState(\n      {\n        dropdownBusy: true,\n      },\n      () => this.fetchMembersRequest(query)\n    );\n  }, 200);\n\n  removeMember(member) {\n    const {params} = this.props;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMemberList: this.state.teamMemberList.filter(m => m.id !== member.id),\n          });\n          addSuccessMessage(t('Successfully removed member from team.'));\n        },\n        error: () => {\n          addErrorMessage(\n            t('There was an error while trying to remove a member from the team.')\n          );\n        },\n      }\n    );\n  }\n\n  fetchMembersRequest = async query => {\n    const {params, api} = this.props;\n    const {orgId} = params;\n\n    try {\n      const data = await api.requestPromise(`/organizations/${orgId}/members/`, {\n        query: {\n          query,\n        },\n      });\n      this.setState({\n        orgMemberList: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  fetchData = async () => {\n    const {api, params} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/teams/${params.orgId}/${params.teamId}/members/`\n      );\n      this.setState({\n        teamMemberList: data,\n        loading: false,\n        error: false,\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorResponse: err,\n      });\n    }\n\n    this.fetchMembersRequest('');\n  };\n\n  addTeamMember = selection => {\n    const {params} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = this.state.orgMemberList.find(\n            member => member.id === selection.value\n          );\n          this.setState({\n            loading: false,\n            error: false,\n            teamMemberList: this.state.teamMemberList.concat([orgMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n          });\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = e => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown = access => {\n    const {organization, params} = this.props;\n    const existingMembers = new Set(this.state.teamMemberList.map(member => member.id));\n\n    // members can add other members to a team if the `Open Membership` setting is enabled\n    // otherwise, `org:write` or `team:admin` permissions are required\n    const hasOpenMembership = organization && organization.openMembership;\n    const hasWriteAccess = access.has('org:write') || access.has('team:admin');\n    const canAddMembers = hasOpenMembership || hasWriteAccess;\n\n    const items = (this.state.orgMemberList || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => ({\n        searchKey: `${m.name} ${m.email}`,\n        value: m.id,\n        label: (\n          <StyledUserListElement>\n            <StyledAvatar user={m} size={24} className=\"avatar\" />\n            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n          </StyledUserListElement>\n        ),\n      }));\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          to=\"\"\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        items={items}\n        onSelect={\n          canAddMembers\n            ? this.addTeamMember\n            : selection =>\n                openTeamAccessRequestModal({\n                  teamId: params.teamId,\n                  orgId: params.orgId,\n                  memberId: selection.value,\n                })\n        }\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n      >\n        {({isOpen}) => (\n          <DropdownButton isOpen={isOpen} size=\"xsmall\" data-test-id=\"add-member\">\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  };\n\n  removeButton = member => (\n    <Button\n      size=\"small\"\n      icon={<IconSubtract size=\"xs\" isCircled />}\n      onClick={this.removeMember.bind(this, member)}\n      label={t('Remove')}\n    >\n      {t('Remove')}\n    </Button>\n  );\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {params, organization, config} = this.props;\n    const access = new Set(organization.access);\n    const hasWriteAccess = access.has('org:write') || access.has('team:admin');\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          <div>{t('Members')}</div>\n          <div style={{textTransform: 'none'}}>{this.renderDropdown(access)}</div>\n        </PanelHeader>\n        {this.state.teamMemberList.length ? (\n          this.state.teamMemberList.map(member => {\n            const isSelf = member.email === config.user.email;\n            const canRemoveMember = hasWriteAccess || isSelf;\n            return (\n              <StyledMemberContainer key={member.id}>\n                <IdBadge avatarSize={36} member={member} useLink orgId={params.orgId} />\n                {canRemoveMember && this.removeButton(member)}\n              </StyledMemberContainer>\n            );\n          })\n        ) : (\n          <EmptyMessage icon={<IconUser size=\"xl\" />} size=\"large\">\n            {t('This team has no members')}\n          </EmptyMessage>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst StyledMemberContainer = styled(PanelItem)`\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst StyledUserListElement = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n`;\n\nconst StyledMembersLabel = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  padding: ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  text-transform: none;\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n"],"sourceRoot":""}