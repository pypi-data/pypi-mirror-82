{"version":3,"sources":["webpack:///./app/views/performance/transactionSummary/utils.tsx","webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/discover/genericDiscoverQuery.tsx"],"names":["transactionSummaryRouteWithQuery","orgSlug","transaction","projectID","query","unselectedSeries","pathname","generateTransactionSummaryRoute","project","environment","statsPeriod","start","end","DiscoverQuery","props","route","keyTransactions","getRoute","withApi","GenericDiscoverQuery","state","isLoading","tableFetchID","undefined","error","tableData","pageLinks","_shouldRefetchData","prevProps","thisAPIPayload","getPayload","otherAPIPayload","isAPIPayloadSimilar","limit","cursor","fetchData","api","beforeFetch","afterFetch","eventView","isValid","url","Symbol","apiPayload","setState","per_page","requestPromise","method","includeAllArgs","then","data","jqXHR","prevState","getResponseHeader","err","responseJSON","detail","this","refetchCondition","eventViewValidation","shouldRefetchExternal","shouldRefetchData","getRequestPayload","getEventsAPIPayload","location","childrenProps","children","React","Component","defaultProps"],"mappings":"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","file":"PerformanceLanding.js","sourcesContent":["import {Query} from 'history';\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n}: {\n  orgSlug: string;\n  transaction: string;\n  query: Query;\n  unselectedSeries?: string | string[];\n  projectID?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      unselectedSeries,\n    },\n  };\n}\n","import React from 'react';\n\nimport withApi from 'app/utils/withApi';\nimport {MetaType} from 'app/utils/discover/eventView';\n\nimport GenericDiscoverQuery, {DiscoverQueryProps} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  id: string;\n  [key: string]: React.ReactText;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\ntype Props = DiscoverQueryProps & {\n  keyTransactions?: boolean;\n};\n\nfunction getRoute(keyTransactions?: boolean) {\n  if (keyTransactions) {\n    return 'key-transactions';\n  }\n  return 'eventsv2';\n}\n\nfunction DiscoverQuery(props: Props) {\n  const {keyTransactions} = props;\n  const route = getRoute(keyTransactions);\n  return <GenericDiscoverQuery<TableData, {}> route={route} {...props} />;\n}\n\nexport default withApi(DiscoverQuery);\n","import React from 'react';\nimport {Location} from 'history';\n\nimport {Client} from 'app/api';\nimport EventView, {\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'app/utils/discover/eventView';\nimport {EventQuery} from 'app/actionCreators/events';\n\nexport type GenericChildrenProps<T> = {\n  isLoading: boolean;\n  error: null | string;\n  tableData: T | null;\n  pageLinks: null | string;\n};\n\nexport type DiscoverQueryProps = {\n  api: Client;\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  eventView: EventView;\n  orgSlug: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n};\n\ntype RequestProps<P> = DiscoverQueryProps & P;\n\ntype ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype Props<T, P> = RequestProps<P> &\n  ReactProps<T> & {\n    /**\n     * Route to the endpoint\n     */\n    route: string;\n    /**\n     * Allows components to modify the payload before it is set.\n     */\n    getRequestPayload?: (props: Props<T, P>) => any;\n    /**\n     * An external hook in addition to the event view check to check if data should be refetched\n     */\n    shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n    /**\n     * A hook before fetch that can be used to do things like clearing the api\n     */\n    beforeFetch?: (api: Client) => void;\n    /**\n     * A hook to modify data into the correct output after data has been received\n     */\n    afterFetch?: (data: any, props: Props<T, P>) => T;\n  };\n\ntype State<T> = {\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass GenericDiscoverQuery<T, P> extends React.Component<Props<T, P>, State<T>> {\n  static defaultProps = {\n    keyTransactions: false,\n  };\n\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if we aren't already loading,\n    const refetchCondition = !this.state.isLoading && this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  getPayload(props: Props<T, P>) {\n    if (this.props.getRequestPayload) {\n      return this.props.getRequestPayload(props);\n    }\n    return props.eventView.getEventsAPIPayload(props.location);\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = this.getPayload(this.props);\n    const otherAPIPayload = this.getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  fetchData = () => {\n    const {\n      api,\n      beforeFetch,\n      afterFetch,\n      eventView,\n      orgSlug,\n      route,\n      limit,\n      cursor,\n    } = this.props;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = this.getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    if (limit) {\n      apiPayload.per_page = limit;\n    }\n    if (cursor) {\n      apiPayload.cursor = cursor;\n    }\n\n    beforeFetch?.(api);\n\n    api\n      .requestPromise(url, {\n        method: 'GET',\n        includeAllArgs: true,\n        query: {\n          // marking apiPayload as any so as to not cause typescript errors\n          ...(apiPayload as any),\n        },\n      })\n      .then(([data, _, jqXHR]) => {\n        if (this.state.tableFetchID !== tableFetchID) {\n          // invariant: a different request was initiated after this request\n          return;\n        }\n\n        const tableData = afterFetch ? afterFetch(data, this.props) : data;\n\n        this.setState(prevState => ({\n          isLoading: false,\n          tableFetchID: undefined,\n          error: null,\n          pageLinks: jqXHR ? jqXHR.getResponseHeader('Link') : prevState.pageLinks,\n          tableData,\n        }));\n      })\n      .catch(err => {\n        this.setState({\n          isLoading: false,\n          tableFetchID: undefined,\n          error: err?.responseJSON?.detail ?? null,\n          tableData: null,\n        });\n      });\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\nexport default GenericDiscoverQuery;\n"],"sourceRoot":""}