{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/components/searchBar.tsx","webpack:///./app/views/monitors/monitorIcon.jsx","webpack:///./app/views/monitors/monitors.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SearchBar","state","query","props","defaultQuery","dropdownVisible","searchInputRef","React","createRef","blur","current","onSubmit","evt","preventDefault","onSearch","clearSearch","setState","callIfFunction","onChange","onQueryFocus","onQueryBlur","onQueryChange","value","target","nextProps","className","width","classNames","Input","type","placeholder","name","ref","autoComplete","onBlur","StyledIconSearch","size","color","onClick","PureComponent","defaultProps","p","undefined","IconSearch","getBackgroundColor","status","theme","error","success","disabled","getSize","Monitors","handleSearch","location","context","router","push","pathname","getParams","params","orgId","monitorListPageLinks","organization","Fragment","HeaderTitle","t","NewMonitorButton","to","slug","priority","StyledSearchBar","monitorList","map","monitor","PanelItemCentered","key","id","StyledLink","nextCheckIn","date","lastCheckIn","pageLinks","contextTypes","PropTypes","object","isRequired","PageHeading","Button","space","PanelItem","Link","withRouter","withOrganization"],"mappings":"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","file":"Monitors.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\n\nimport {IconClose} from 'app/icons/iconClose';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {IconSearch} from 'app/icons';\n\ntype DefaultProps = {\n  query: string;\n  defaultQuery: string;\n  onSearch: (query: string) => void;\n};\n\ntype Props = DefaultProps & {\n  placeholder?: string;\n  className?: string;\n  onChange?: (query: string) => void;\n  width?: string;\n};\n\ntype State = {\n  query: string;\n  dropdownVisible: boolean;\n};\n\nclass SearchBar extends React.PureComponent<Props, State> {\n  static defaultProps: DefaultProps = {\n    query: '',\n    defaultQuery: '',\n    onSearch: function () {},\n  };\n\n  state = {\n    query: this.props.query || this.props.defaultQuery,\n    dropdownVisible: false,\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.query !== this.props.query) {\n      this.setState({\n        query: nextProps.query,\n      });\n    }\n  }\n\n  searchInputRef = React.createRef<HTMLInputElement>();\n\n  blur = () => {\n    if (this.searchInputRef.current) {\n      this.searchInputRef.current.blur();\n    }\n  };\n\n  onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    this.blur();\n    this.props.onSearch(this.state.query);\n  };\n\n  clearSearch = () => {\n    this.setState({query: this.props.defaultQuery}, () => {\n      this.props.onSearch(this.state.query);\n      callIfFunction(this.props.onChange, this.state.query);\n    });\n  };\n\n  onQueryFocus = () => {\n    this.setState({\n      dropdownVisible: true,\n    });\n  };\n\n  onQueryBlur = () => {\n    this.setState({dropdownVisible: false});\n  };\n\n  onQueryChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {value} = evt.target;\n\n    this.setState({query: value});\n    callIfFunction(this.props.onChange, value);\n  };\n\n  render() {\n    const {className, width} = this.props;\n\n    return (\n      <div className={classNames('search', className)}>\n        <form className=\"form-horizontal\" onSubmit={this.onSubmit}>\n          <div>\n            <Input\n              type=\"text\"\n              className=\"search-input form-control\"\n              placeholder={this.props.placeholder}\n              name=\"query\"\n              ref={this.searchInputRef}\n              autoComplete=\"off\"\n              value={this.state.query}\n              onBlur={this.onQueryBlur}\n              onChange={this.onQueryChange}\n              width={width}\n            />\n            <StyledIconSearch className=\"search-input-icon\" size=\"sm\" color=\"gray500\" />\n            {this.state.query !== this.props.defaultQuery && (\n              <div>\n                <a className=\"search-clear-form\" onClick={this.clearSearch}>\n                  <IconClose />\n                </a>\n              </div>\n            )}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst Input = styled('input')`\n  width: ${p => (p.width ? p.width : undefined)};\n`;\n\nconst StyledIconSearch = styled(IconSearch)`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  left: 14px;\n`;\n\nexport default SearchBar;\n","import styled from '@emotion/styled';\n\nconst getBackgroundColor = p => {\n  if (p.color) {\n    return `background: ${p.color};`;\n  }\n\n  return `background: ${\n    p.status === 'error'\n      ? p.theme.error\n      : p.status === 'ok'\n      ? p.theme.success\n      : p.theme.disabled\n  };`;\n};\n\nconst getSize = p => `\n  height: ${p.size}px;\n  width: ${p.size}px;\n`;\n\nexport default styled('div')`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  ${getSize};\n  ${getBackgroundColor};\n`;\n","import {Link, withRouter} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {PageHeader} from 'app/styles/organization';\nimport {Panel, PanelBody, PanelItem} from 'app/components/panels';\nimport {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport FeatureBadge from 'app/components/featureBadge';\nimport Button from 'app/components/button';\nimport PageHeading from 'app/components/pageHeading';\nimport Pagination from 'app/components/pagination';\nimport SearchBar from 'app/components/searchBar';\nimport SentryTypes from 'app/sentryTypes';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport MonitorIcon from './monitorIcon';\n\nclass Monitors extends AsyncView {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n    location: PropTypes.object.isRequired,\n  };\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  getEndpoints() {\n    const {params, location} = this.props;\n    return [\n      [\n        'monitorList',\n        `/organizations/${params.orgId}/monitors/`,\n        {\n          query: location.query,\n        },\n      ],\n    ];\n  }\n\n  getTitle() {\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  handleSearch = query => {\n    const {location} = this.props;\n    const {router} = this.context;\n    router.push({\n      pathname: location.pathname,\n      query: getParams({\n        ...(location.query || {}),\n        query,\n      }),\n    });\n  };\n\n  renderBody() {\n    const {monitorListPageLinks} = this.state;\n    const {organization} = this.props;\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <HeaderTitle>\n            <div>\n              {t('Monitors')} <FeatureBadge type=\"beta\" />\n            </div>\n            <NewMonitorButton\n              to={`/organizations/${organization.slug}/monitors/create/`}\n              priority=\"primary\"\n              size=\"xsmall\"\n            >\n              {t('New Monitor')}\n            </NewMonitorButton>\n          </HeaderTitle>\n          <StyledSearchBar\n            organization={organization}\n            query={(location.query && location.query.query) || ''}\n            placeholder={t('Search for monitors.')}\n            onSearch={this.handleSearch}\n          />\n        </PageHeader>\n        <Panel>\n          <PanelBody>\n            {this.state.monitorList.map(monitor => (\n              <PanelItemCentered key={monitor.id}>\n                <MonitorIcon status={monitor.status} size={16} />\n                <StyledLink\n                  to={`/organizations/${organization.slug}/monitors/${monitor.id}/`}\n                >\n                  {monitor.name}\n                </StyledLink>\n                {monitor.nextCheckIn ? (\n                  <TimeSince date={monitor.lastCheckIn} />\n                ) : (\n                  t('n/a')\n                )}\n              </PanelItemCentered>\n            ))}\n          </PanelBody>\n        </Panel>\n        {monitorListPageLinks && (\n          <Pagination pageLinks={monitorListPageLinks} {...this.props} />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst HeaderTitle = styled(PageHeading)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1;\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex: 1;\n`;\n\nconst NewMonitorButton = styled(Button)`\n  margin-right: ${space(2)};\n`;\n\nconst PanelItemCentered = styled(PanelItem)`\n  align-items: center;\n  padding: 0;\n  padding-left: ${space(2)};\n  padding-right: ${space(2)};\n`;\n\nconst StyledLink = styled(Link)`\n  flex: 1;\n  padding: ${space(2)};\n`;\n\nexport default withRouter(withOrganization(Monitors));\n"],"sourceRoot":""}