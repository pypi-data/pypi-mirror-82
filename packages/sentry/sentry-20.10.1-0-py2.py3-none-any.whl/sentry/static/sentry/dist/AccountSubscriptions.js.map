{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/account/accountSubscriptions.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","ENDPOINT","AccountSubscriptions","handleToggle","subscription","index","_e","subscribed","oldSubscriptions","state","subscriptions","setState","newSubscriptions","slice","subscribedDate","Date","api","request","method","data","listId","success","addSuccessMessage","listName","error","addErrorMessage","length","t","map","alignItems","key","SubscriptionDetails","SubscriptionName","listDescription","Description","SubscribedDescription","email","shortDate","date","isActive","size","toggle","bind","href","theme","fontSizeExtraLarge","fontSizeSmall","gray600","gray500"],"mappings":"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","file":"AccountSubscriptions.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport DateTime from 'app/components/dateTime';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport Switch from 'app/components/switch';\nimport space from 'app/styles/space';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst ENDPOINT = '/users/me/subscriptions/';\n\nclass AccountSubscriptions extends AsyncView {\n  getEndpoints() {\n    return [['subscriptions', ENDPOINT]];\n  }\n\n  getTitle() {\n    return 'Subscriptions';\n  }\n\n  handleToggle = (subscription, index, _e) => {\n    const subscribed = !subscription.subscribed;\n    const oldSubscriptions = this.state.subscriptions;\n\n    this.setState(state => {\n      const newSubscriptions = state.subscriptions.slice();\n      newSubscriptions[index] = {\n        ...subscription,\n        subscribed,\n        subscribedDate: new Date(),\n      };\n      return {\n        ...state,\n        subscriptions: newSubscriptions,\n      };\n    });\n\n    this.api.request(ENDPOINT, {\n      method: 'PUT',\n      data: {\n        listId: subscription.listId,\n        subscribed,\n      },\n      success: () => {\n        addSuccessMessage(\n          `${subscribed ? 'Subscribed' : 'Unsubscribed'} to ${subscription.listName}`\n        );\n      },\n      error: () => {\n        addErrorMessage(\n          `Unable to ${subscribed ? '' : 'un'}subscribe to ${subscription.listName}`\n        );\n        this.setState({subscriptions: oldSubscriptions});\n      },\n    });\n  };\n\n  renderBody() {\n    return (\n      <div>\n        <SettingsPageHeader title=\"Subscriptions\" />\n        <TextBlock>\n          Sentry is committed to respecting your inbox. Our goal is to provide useful\n          content and resources that make fixing errors less painful. Enjoyable even.\n        </TextBlock>\n\n        <TextBlock>\n          As part of our compliance with the EU’s General Data Protection Regulation\n          (GDPR), starting on 25 May 2018, we’ll only email you according to the marketing\n          categories to which you’ve explicitly opted-in.\n        </TextBlock>\n\n        <Panel>\n          {this.state.subscriptions.length ? (\n            <div>\n              <PanelHeader>{t('Subscription')}</PanelHeader>\n              <PanelBody>\n                {this.state.subscriptions.map((subscription, index) => (\n                  <PanelItem p={2} alignItems=\"center\" key={subscription.listId}>\n                    <SubscriptionDetails>\n                      <SubscriptionName>{subscription.listName}</SubscriptionName>\n                      {subscription.listDescription && (\n                        <Description>{subscription.listDescription}</Description>\n                      )}\n                      {subscription.subscribed ? (\n                        <SubscribedDescription>\n                          <div>\n                            {subscription.email} on{' '}\n                            <DateTime shortDate date={subscription.subscribedDate} />\n                          </div>\n                        </SubscribedDescription>\n                      ) : (\n                        <SubscribedDescription>\n                          Not currently subscribed\n                        </SubscribedDescription>\n                      )}\n                    </SubscriptionDetails>\n                    <div>\n                      <Switch\n                        isActive={subscription.subscribed}\n                        size=\"lg\"\n                        toggle={this.handleToggle.bind(this, subscription, index)}\n                      />\n                    </div>\n                  </PanelItem>\n                ))}{' '}\n              </PanelBody>\n            </div>\n          ) : (\n            <EmptyMessage>{t(\"There's no subscription backend present.\")}</EmptyMessage>\n          )}\n        </Panel>\n        <TextBlock>\n          We’re applying GDPR consent and privacy policies to all Sentry contacts,\n          regardless of location. You’ll be able to manage your subscriptions here and\n          from an Unsubscribe link in the footer of all marketing emails.\n        </TextBlock>\n\n        <TextBlock>\n          Please contact <a href=\"mailto:learn@sentry.io\">learn@sentry.io</a> with any\n          questions or suggestions.\n        </TextBlock>\n      </div>\n    );\n  }\n}\n\nconst SubscriptionDetails = styled('div')`\n  width: 50%;\n  padding-right: ${space(2)};\n`;\n\nconst SubscriptionName = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\nconst Description = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  margin-top: ${space(0.75)};\n  color: ${p => p.theme.gray600};\n`;\n\nconst SubscribedDescription = styled(Description)`\n  color: ${p => p.theme.gray500};\n`;\n\nexport default AccountSubscriptions;\n"],"sourceRoot":""}