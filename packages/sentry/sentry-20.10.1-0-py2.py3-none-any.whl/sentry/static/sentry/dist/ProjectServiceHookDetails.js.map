{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/components/forms/textCopyInput.jsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/views/settings/components/forms/booleanField.jsx","webpack:///./app/views/settings/components/forms/apiForm.jsx","webpack:///./app/views/settings/components/forms/controls/multipleCheckbox.jsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.jsx","webpack:///./app/views/settings/project/projectServiceHookDetails.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","Wrapper","StyledInput","inputStyles","theme","gray100","rtl","OverflowContainer","StyledCopyButton","Button","TextCopyInput","handleCopyClick","e","textRef","current","onCopy","handleSelectText","children","stopPropagation","node","ReactDOM","findDOMNode","setSelectionRange","value","length","selectText","createRef","style","inputValue","readOnly","ref","onClick","hideUnsupported","type","size","TextField","BooleanField","handleChange","onChange","onBlur","newValue","coerceValue","confirm","fieldProps","resetOnError","field","disabled","bind","switchProps","isActive","isDisabled","toggle","renderMessage","onConfirm","open","InputField","propTypes","PropTypes","shape","true","false","ApiForm","context","onSubmit","data","onSuccess","onError","addLoadingMessage","t","api","request","apiEndpoint","method","apiMethod","success","clearIndicators","error","Client","clear","otherProps","MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","selectedValue","target","checked","filter","v","choices","map","choiceValue","choiceLabel","key","width","defined","indexOf","EVENT_CHOICES","ServiceHookSettingsForm","onSubmitSuccess","orgId","projectId","browserHistory","push","initialData","hookId","endpoint","footerStyle","marginTop","paddingRight","submitLabel","name","label","required","help","inline","HookStats","until","Math","floor","Date","getTime","since","params","query","resolution","point","_pointIdx","chart","timeLabel","getTimeLabel","total","y","toLocaleString","className","emptyStats","stats","state","x","ts","description","points","height","barClasses","border","tooltip","renderTooltip","ProjectServiceHookDetails","onDelete","addErrorMessage","hook","status","flexibleControlStateSize","getDynamicText","secret","fixed","priority"],"mappings":"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","file":"ProjectServiceHookDetails.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from '@emotion/styled';\n\nimport {inputStyles} from 'app/styles/input';\nimport {selectText} from 'app/utils/selectText';\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport {IconCopy} from 'app/icons';\n\nconst Wrapper = styled('div')`\n  display: flex;\n`;\n\nconst StyledInput = styled('input')`\n  ${inputStyles};\n  background-color: ${p => p.theme.gray100};\n  border-right-width: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  direction: ${p => (p.rtl ? 'rtl' : 'ltr')};\n\n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.gray100};\n    border-right-width: 0;\n  }\n`;\n\nconst OverflowContainer = styled('div')`\n  flex-grow: 1;\n  border: none;\n`;\n\nconst StyledCopyButton = styled(Button)`\n  flex-shrink: 1;\n  border-radius: 0 0.25em 0.25em 0;\n  box-shadow: none;\n`;\n\nclass TextCopyInput extends React.Component {\n  static propTypes = {\n    /**\n     * Text to copy\n     */\n    children: PropTypes.string.isRequired,\n    /**\n     * CSS style object\n     */\n    style: PropTypes.object,\n    onCopy: PropTypes.func,\n    /**\n     * Always show the ending of a long overflowing text in input\n     */\n    rtl: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    onCopy: () => {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.textRef = React.createRef();\n  }\n\n  // Select text when copy button is clicked\n  handleCopyClick = e => {\n    if (!this.textRef.current) {\n      return;\n    }\n\n    const {onCopy} = this.props;\n\n    this.handleSelectText();\n\n    onCopy(this.props.children, e);\n\n    e.stopPropagation();\n  };\n\n  handleSelectText = () => {\n    const {rtl} = this.props;\n\n    if (!this.textRef.current) {\n      return;\n    }\n\n    // We use findDOMNode here because `this.textRef` is not a dom node,\n    // it's a ref to AutoSelectText\n    const node = ReactDOM.findDOMNode(this.textRef.current); // eslint-disable-line react/no-find-dom-node\n\n    if (rtl) {\n      // we don't want to select the first character - \\u202A, nor the last - \\u202C\n      node.setSelectionRange(1, node.value.length - 1);\n    } else {\n      selectText(node);\n    }\n  };\n\n  render() {\n    const {style, children, rtl} = this.props;\n\n    /**\n     * We are using direction: rtl; to always show the ending of a long overflowing text in input.\n     *\n     * This however means that the trailing characters with BiDi class O.N. ('Other Neutrals') goes to the other side.\n     * Hello! becomes !Hello and vice versa. This is a problem for us when we want to show path in this component, because\n     * /user/local/bin becomes user/local/bin/. Wrapping in unicode characters for left-to-righ embedding solves this,\n     * however we need to be aware of them when selecting the text - we are solving that by offseting the selectionRange.\n     */\n    const inputValue = rtl ? '\\u202A' + children + '\\u202C' : children;\n\n    return (\n      <Wrapper>\n        <OverflowContainer>\n          <StyledInput\n            readOnly\n            ref={this.textRef}\n            style={style}\n            value={inputValue}\n            onClick={this.handleSelectText}\n            rtl={rtl}\n          />\n        </OverflowContainer>\n        <Clipboard hideUnsupported onClick={this.handleCopyClick} value={children}>\n          <StyledCopyButton type=\"button\" size=\"xsmall\" onClick={this.handleCopyClick}>\n            <IconCopy />\n          </StyledCopyButton>\n        </Clipboard>\n      </Wrapper>\n    );\n  }\n}\n\nexport default TextCopyInput;\n","import React from 'react';\n\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n\nTextField.propTypes = {...InputField.propTypes};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport InputField from 'app/views/settings/components/forms/inputField';\nimport Switch from 'app/components/switch';\nimport Confirm from 'app/components/confirm';\n\nexport default class BooleanField extends InputField {\n  static propTypes = {\n    ...InputField.propTypes,\n    confirm: PropTypes.shape({\n      true: PropTypes.node,\n      false: PropTypes.node,\n    }),\n  };\n  coerceValue(value) {\n    return value ? true : false;\n  }\n\n  handleChange = (value, onChange, onBlur, e) => {\n    // We need to toggle current value because Switch is not an input\n    const newValue = this.coerceValue(!value);\n    onChange(newValue, e);\n    onBlur(newValue, e);\n  };\n\n  render() {\n    const {confirm, ...fieldProps} = this.props;\n\n    return (\n      <InputField\n        {...fieldProps}\n        resetOnError\n        field={({onChange, onBlur, value, disabled, ...props}) => {\n          // Create a function with required args bound\n          const handleChange = this.handleChange.bind(this, value, onChange, onBlur);\n\n          const switchProps = {\n            size: 'lg',\n            ...props,\n            isActive: !!value,\n            isDisabled: disabled,\n            toggle: handleChange,\n          };\n\n          if (confirm) {\n            return (\n              <Confirm\n                renderMessage={() => confirm[!value]}\n                onConfirm={() => handleChange({})}\n              >\n                {({open}) => (\n                  <Switch\n                    {...switchProps}\n                    toggle={e => {\n                      // If we have a `confirm` prop and enabling switch\n                      // Then show confirm dialog, otherwise propagate change as normal\n                      if (confirm[!value]) {\n                        // Open confirm modal\n                        open();\n                        return;\n                      }\n\n                      handleChange(e);\n                    }}\n                  />\n                )}\n              </Confirm>\n            );\n          }\n\n          return <Switch {...switchProps} />;\n        }}\n      />\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Client} from 'app/api';\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport Form from 'app/views/settings/components/forms/form';\n\nexport default class ApiForm extends React.Component {\n  static propTypes = {\n    ...Form.propTypes,\n    onSubmit: PropTypes.func,\n    apiMethod: PropTypes.string.isRequired,\n    apiEndpoint: PropTypes.string.isRequired,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.api = new Client();\n  }\n\n  componentWillUnmount() {\n    this.api.clear();\n  }\n\n  onSubmit = (data, onSuccess, onError) => {\n    this.props.onSubmit && this.props.onSubmit(data);\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(this.props.apiEndpoint, {\n      method: this.props.apiMethod,\n      data,\n      success: (...args) => {\n        clearIndicators();\n        onSuccess(...args);\n      },\n      error: (...args) => {\n        clearIndicators();\n        onError(...args);\n      },\n    });\n  };\n\n  render() {\n    const {\n      onSubmit: _onSubmit,\n      apiMethod: _apiMethod,\n      apiEndpoint: _apiEndpoint,\n      ...otherProps\n    } = this.props;\n\n    return <Form onSubmit={this.onSubmit} {...otherProps} />;\n  }\n}\n","import {Box} from 'reflexbox';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {defined} from 'app/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\nexport default class MultipleCheckbox extends React.Component {\n  static propTypes = {\n    value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool,\n    choices: PropTypes.array.isRequired,\n  };\n\n  onChange = (selectedValue, e) => {\n    const {value, onChange} = this.props;\n    let newValue;\n\n    if (typeof onChange !== 'function') {\n      return;\n    }\n\n    if (e.target.checked) {\n      newValue = value ? [...value, selectedValue] : [value];\n    } else {\n      newValue = value.filter(v => v !== selectedValue);\n    }\n\n    onChange(newValue, e);\n  };\n\n  render() {\n    const {disabled, choices, value} = this.props;\n\n    return (\n      <MultipleCheckboxWrapper>\n        {choices.map(([choiceValue, choiceLabel]) => (\n          <Box key={choiceValue} width={[1, 1 / 2, 1 / 3, 1 / 4]}>\n            <Label>\n              <input\n                type=\"checkbox\"\n                value={choiceValue}\n                onChange={this.onChange.bind(this, choiceValue)}\n                disabled={disabled}\n                checked={defined(value) && value.indexOf(choiceValue) !== -1}\n              />\n              <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n            </Label>\n          </Box>\n        ))}\n      </MultipleCheckboxWrapper>\n    );\n  }\n}\n","import {browserHistory} from 'react-router';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {t} from 'app/locale';\nimport ApiForm from 'app/views/settings/components/forms/apiForm';\nimport BooleanField from 'app/views/settings/components/forms/booleanField';\nimport FormField from 'app/views/settings/components/forms/formField';\nimport TextField from 'app/views/settings/components/forms/textField';\nimport MultipleCheckbox from 'app/views/settings/components/forms/controls/multipleCheckbox';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\n\nconst EVENT_CHOICES = ['event.alert', 'event.created'].map(e => [e, e]);\n\nexport default class ServiceHookSettingsForm extends React.Component {\n  static propTypes = {\n    orgId: PropTypes.string.isRequired,\n    projectId: PropTypes.string.isRequired,\n    hookId: PropTypes.string,\n    initialData: PropTypes.object.isRequired,\n  };\n\n  onSubmitSuccess = () => {\n    const {orgId, projectId} = this.props;\n    browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n  };\n\n  render() {\n    const {initialData, orgId, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`\n      : `/projects/${orgId}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              choices={EVENT_CHOICES}\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({value, onChange}) => (\n                <MultipleCheckbox\n                  onChange={onChange}\n                  value={value}\n                  choices={EVENT_CHOICES}\n                />\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n","import {browserHistory} from 'react-router';\nimport React from 'react';\n\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport Field from 'app/views/settings/components/forms/field';\nimport {IconFlag} from 'app/icons';\nimport ServiceHookSettingsForm from 'app/views/settings/project/serviceHookSettingsForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport StackedBarChart from 'app/components/stackedBarChart';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport getDynamicText from 'app/utils/getDynamicText';\n\nclass HookStats extends AsyncComponent {\n  getEndpoints() {\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 30;\n    const {hookId, orgId, projectId} = this.props.params;\n    return [\n      [\n        'stats',\n        `/projects/${orgId}/${projectId}/hooks/${hookId}/stats/`,\n        {\n          query: {\n            since,\n            until,\n            resolution: '1d',\n          },\n        },\n      ],\n    ];\n  }\n\n  renderTooltip(point, _pointIdx, chart) {\n    const timeLabel = chart.getTimeLabel(point);\n    const [total] = point.y;\n\n    const value = `${total.toLocaleString()} events`;\n\n    return (\n      <div style={{width: '150px'}}>\n        <div className=\"time-label\">{timeLabel}</div>\n        <div className=\"value-label\">{value}</div>\n      </div>\n    );\n  }\n\n  renderBody() {\n    let emptyStats = true;\n    const stats = this.state.stats.map(p => {\n      if (p.total) {\n        emptyStats = false;\n      }\n      return {\n        x: p.ts,\n        y: [p.total],\n      };\n    });\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Events in the last 30 days (by day)')}</PanelHeader>\n        <PanelBody>\n          {!emptyStats ? (\n            <StackedBarChart\n              points={stats}\n              height={150}\n              label=\"events\"\n              barClasses={['total']}\n              className=\"standard-barchart\"\n              style={{border: 'none'}}\n              tooltip={this.renderTooltip}\n            />\n          ) : (\n            <EmptyMessage\n              title={t('Nothing recorded in the last 30 days.')}\n              description={t('Total webhooks fired for this configuration.')}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport default class ProjectServiceHookDetails extends AsyncView {\n  getEndpoints() {\n    const {orgId, projectId, hookId} = this.props.params;\n    return [['hook', `/projects/${orgId}/${projectId}/hooks/${hookId}/`]];\n  }\n\n  onDelete = () => {\n    const {orgId, projectId, hookId} = this.props.params;\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hookId}/`, {\n      method: 'DELETE',\n      success: () => {\n        clearIndicators();\n        browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderBody() {\n    const {orgId, projectId, hookId} = this.props.params;\n    const {hook} = this.state;\n    return (\n      <div>\n        <SettingsPageHeader title={t('Service Hook Details')} />\n\n        <ErrorBoundary>\n          <HookStats params={this.props.params} />\n        </ErrorBoundary>\n\n        <ServiceHookSettingsForm\n          {...this.props}\n          orgId={orgId}\n          projectId={projectId}\n          hookId={hookId}\n          initialData={{\n            ...hook,\n            isActive: hook.status !== 'disabled',\n          }}\n        />\n        <Panel>\n          <PanelHeader>{t('Event Validation')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\" icon={<IconFlag size=\"md\" />}>\n              Sentry will send the <code>X-ServiceHook-Signature</code> header built using{' '}\n              <code>HMAC(SHA256, [secret], [payload])</code>. You should always verify\n              this signature before trusting the information provided in the webhook.\n            </PanelAlert>\n            <Field\n              label={t('Secret')}\n              flexibleControlStateSize\n              inline={false}\n              help={t('The shared secret used for generating event HMAC signatures.')}\n            >\n              <TextCopyInput>\n                {getDynamicText({\n                  value: hook.secret,\n                  fixed: 'a dynamic secret value',\n                })}\n              </TextCopyInput>\n            </Field>\n          </PanelBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>{t('Delete Hook')}</PanelHeader>\n          <PanelBody>\n            <Field\n              label={t('Delete Hook')}\n              help={t('Removing this hook is immediate and permanent.')}\n            >\n              <div>\n                <Button priority=\"danger\" onClick={this.onDelete}>\n                  Delete Hook\n                </Button>\n              </div>\n            </Field>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}