{"version":3,"sources":["webpack:///./app/views/organizationStats/index.jsx"],"names":["OrganizationStatsContainer","props","until","Math","floor","Date","getTime","since","state","projectsError","projectsLoading","projectsRequestsPending","statsError","statsLoading","statsRequestsPending","projectMap","rawProjectData","received","rejected","blacklisted","rawOrgData","orgStats","orgTotal","projectTotals","querySince","queryUntil","this","fetchData","nextProps","location","search","setState","prevProps","prevParams","params","currentParams","orgId","window","scrollTo","fetchProjectData","processOrgData","processProjectData","api","request","getOrganizationProjectsEndpoint","query","success","data","_textStatus","jqxhr","forEach","project","id","prevState","pageLinks","getResponseHeader","error","statEndpoint","getOrganizationStatsEndpoint","$","each","statName","resolution","stat","group","oReceived","oRejected","oBlacklisted","orgPoints","aReceived","idx","point","dReceived","dRejected","dBlacklisted","dAccepted","max","push","x","y","accepted","avgRate","parseInt","projectId","pReceived","pRejected","pBlacklisted","organization","title","slug","component","then","mod","React","Component","withApi","withOrganization"],"mappings":"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","file":"OrganizationStats.js","sourcesContent":["import $ from 'jquery';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport DocumentTitle from 'react-document-title';\n\nimport withApi from 'app/utils/withApi';\nimport LazyLoad from 'app/components/lazyLoad';\nimport withOrganization from 'app/utils/withOrganization';\nimport SentryTypes from 'app/sentryTypes';\n\nclass OrganizationStatsContainer extends React.Component {\n  static propTypes = {\n    api: PropTypes.object.isRequired,\n    routes: PropTypes.array.isRequired,\n    organization: SentryTypes.Organization.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 7;\n\n    this.state = {\n      projectsError: false,\n      projectsLoading: false,\n      projectsRequestsPending: 0,\n      statsError: false,\n      statsLoading: false,\n      statsRequestsPending: 0,\n      projectMap: null,\n      rawProjectData: {received: null, rejected: null, blacklisted: null},\n      rawOrgData: {received: null, rejected: null, blacklisted: null},\n      orgStats: null,\n      orgTotal: null,\n      projectTotals: null,\n      querySince: since,\n      queryUntil: until,\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // If query string changes, it will be due to pagination.\n    // Intentionally only fetch projects since stats are fetched for a fixed period during\n    // the initial payload\n    if (nextProps.location.search !== this.props.location.search) {\n      this.setState({\n        projectsError: false,\n        projectsRequestsPending: 1,\n        projectsLoading: true,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevParams = prevProps.params,\n      currentParams = this.props.params;\n\n    if (prevParams.orgId !== currentParams.orgId) {\n      this.fetchData();\n    }\n\n    // Query string is changed, probably due to pagination, re-fetch only project data\n    if (prevProps.location.search !== this.props.location.search) {\n      // Not sure why, but when we use pagination and the new results load and re-render,\n      // the scroll position does not reset to top like in Audit Log\n      if (window.scrollTo) {\n        window.scrollTo(0, 0);\n      }\n      this.fetchProjectData();\n    }\n    const state = this.state;\n    if (state.statsLoading && !state.statsRequestsPending) {\n      this.processOrgData();\n    }\n    if (state.projectsLoading && !state.projectsRequestsPending) {\n      this.processProjectData();\n    }\n  }\n\n  fetchProjectData() {\n    this.props.api.request(this.getOrganizationProjectsEndpoint(), {\n      query: this.props.location.query,\n      success: (data, _textStatus, jqxhr) => {\n        const projectMap = {};\n        data.forEach(project => {\n          projectMap[project.id] = project;\n        });\n\n        this.setState(prevState => ({\n          pageLinks: jqxhr.getResponseHeader('Link'),\n          projectMap,\n          projectsRequestsPending: prevState.projectsRequestsPending - 1,\n        }));\n      },\n      error: () => {\n        this.setState({\n          projectsError: true,\n        });\n      },\n    });\n  }\n\n  fetchData() {\n    this.setState({\n      statsError: false,\n      statsLoading: true,\n      statsRequestsPending: 3,\n      projectsError: false,\n      projectsLoading: true,\n      projectsRequestsPending: 4,\n    });\n\n    const statEndpoint = this.getOrganizationStatsEndpoint();\n\n    $.each(this.state.rawOrgData, statName => {\n      this.props.api.request(statEndpoint, {\n        query: {\n          since: this.state.querySince,\n          until: this.state.queryUntil,\n          resolution: '1h',\n          stat: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawOrgData = prevState.rawOrgData;\n            rawOrgData[statName] = data;\n\n            return {\n              rawOrgData,\n              statsRequestsPending: prevState.statsRequestsPending - 1,\n            };\n          });\n        },\n        error: () => {\n          this.setState({\n            statsError: true,\n          });\n        },\n      });\n    });\n\n    $.each(this.state.rawProjectData, statName => {\n      this.props.api.request(statEndpoint, {\n        query: {\n          since: this.state.querySince,\n          until: this.state.queryUntil,\n          stat: statName,\n          group: 'project',\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawProjectData = prevState.rawProjectData;\n            rawProjectData[statName] = data;\n\n            return {\n              rawProjectData,\n              projectsRequestsPending: prevState.projectsRequestsPending - 1,\n            };\n          });\n        },\n        error: () => {\n          this.setState({\n            projectsError: true,\n          });\n        },\n      });\n    });\n\n    this.fetchProjectData();\n  }\n\n  getOrganizationStatsEndpoint() {\n    const params = this.props.params;\n    return '/organizations/' + params.orgId + '/stats/';\n  }\n\n  getOrganizationProjectsEndpoint() {\n    const params = this.props.params;\n    return '/organizations/' + params.orgId + '/projects/';\n  }\n\n  processOrgData() {\n    let oReceived = 0;\n    let oRejected = 0;\n    let oBlacklisted = 0;\n    const orgPoints = []; // accepted, rejected, blacklisted\n    const aReceived = [0, 0]; // received, points\n    const rawOrgData = this.state.rawOrgData;\n    $.each(rawOrgData.received, (idx, point) => {\n      const dReceived = point[1];\n      const dRejected = rawOrgData.rejected[idx][1];\n      const dBlacklisted = rawOrgData.blacklisted[idx][1];\n      const dAccepted = Math.max(0, dReceived - dRejected - dBlacklisted);\n      orgPoints.push({\n        x: point[0],\n        y: [dAccepted, dRejected, dBlacklisted],\n      });\n      oReceived += dReceived;\n      oRejected += dRejected;\n      oBlacklisted += dBlacklisted;\n      if (dReceived > 0) {\n        aReceived[0] += dReceived;\n        aReceived[1] += 1;\n      }\n    });\n    this.setState({\n      orgStats: orgPoints,\n      orgTotal: {\n        received: oReceived,\n        rejected: oRejected,\n        blacklisted: oBlacklisted,\n        accepted: Math.max(0, oReceived - oRejected - oBlacklisted),\n        avgRate: aReceived[1] ? parseInt(aReceived[0] / aReceived[1] / 60, 10) : 0,\n      },\n      statsLoading: false,\n    });\n  }\n\n  processProjectData() {\n    const rawProjectData = this.state.rawProjectData;\n    const projectTotals = [];\n    $.each(rawProjectData.received, (projectId, data) => {\n      let pReceived = 0;\n      let pRejected = 0;\n      let pBlacklisted = 0;\n      $.each(data, (idx, point) => {\n        pReceived += point[1];\n        pRejected += rawProjectData.rejected[projectId][idx][1];\n        pBlacklisted += rawProjectData.blacklisted[projectId][idx][1];\n      });\n      projectTotals.push({\n        id: projectId,\n        received: pReceived,\n        rejected: pRejected,\n        blacklisted: pBlacklisted,\n        accepted: Math.max(0, pReceived - pRejected - pBlacklisted),\n      });\n    });\n    this.setState({\n      projectTotals,\n      projectsLoading: false,\n    });\n  }\n\n  render() {\n    const organization = this.props.organization;\n\n    return (\n      <DocumentTitle title={`Stats - ${organization.slug} - Sentry`}>\n        <LazyLoad\n          component={() =>\n            import(\n              /* webpackChunkName: \"organizationStats\" */ './organizationStatsDetails'\n            ).then(mod => mod.default)\n          }\n          organization={organization}\n          {...this.state}\n        />\n      </DocumentTitle>\n    );\n  }\n}\n\nexport {OrganizationStatsContainer};\n\nexport default withApi(withOrganization(OrganizationStatsContainer));\n"],"sourceRoot":""}