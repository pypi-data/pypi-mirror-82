{"version":3,"sources":["webpack:///./app/components/resultGrid.jsx","webpack:///./app/views/admin/adminOrganizations.jsx"],"names":["Filter","getCurrentLabel","selected","props","options","filter","item","value","name","getDefaultItem","query","$","extend","location","cursor","queryKey","key","isActive","to","pathname","path","getSelector","title","map","filterQuery","className","this","length","React","Component","SortBy","getCurrentSortLabel","getSortBySelector","sortBy","ResultGrid","createReactClass","displayName","getDefaultProps","endpoint","method","columns","sortOptions","filters","defaultSort","keyForRow","row","id","columnsForRow","defaultParams","per_page","hasPagination","hasSearch","getInitialState","queryParams","rows","loading","error","pageLinks","Object","assign","componentWillMount","fetchData","componentWillReceiveProps","nextProps","setState","remountComponent","refresh","state","api","request","data","success","_","jqXHR","getResponseHeader","onSearch","e","targetQueryParams","jQuery","preventDefault","browserHistory","push","onQueryChange","evt","target","renderLoading","colSpan","renderError","renderNoResults","renderResults","render","onSubmit","type","placeholder","style","width","autoComplete","onChange","size","keys","filterKey","withApi","AdminOrganizations","getRow","slug","t"],"mappings":"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","file":"AdminOrganizations.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport $ from 'jquery';\nimport {browserHistory} from 'react-router';\n\nimport withApi from 'app/utils/withApi';\nimport DropdownLink from 'app/components/dropdownLink';\nimport MenuItem from 'app/components/menuItem';\nimport Pagination from 'app/components/pagination';\nimport {IconSearch} from 'app/icons';\n\nclass Filter extends React.Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    queryKey: PropTypes.string.isRequired,\n    options: PropTypes.array.isRequired,\n    path: PropTypes.string.isRequired,\n    value: PropTypes.any,\n  };\n\n  getCurrentLabel = () => {\n    const selected = this.props.options.filter(\n      item => item[0] === (this.props.value || '')\n    )[0];\n    if (selected) {\n      return this.props.name + ': ' + selected[1];\n    }\n    return this.props.name + ': ' + 'Any';\n  };\n\n  getDefaultItem = () => {\n    const query = $.extend({}, this.props.location.query, {\n      cursor: '',\n    });\n    delete query[this.props.queryKey];\n\n    return (\n      <MenuItem\n        key=\"\"\n        isActive={this.props.value === '' || !this.props.value}\n        to={{pathname: this.props.path, query}}\n      >\n        Any\n      </MenuItem>\n    );\n  };\n\n  getSelector = () => (\n    <DropdownLink title={this.getCurrentLabel()}>\n      {this.getDefaultItem()}\n      {this.props.options.map(item => {\n        const filterQuery = {};\n        filterQuery[this.props.queryKey] = item[0];\n        filterQuery.cursor = '';\n        const query = $.extend({}, this.props.location.query, filterQuery);\n        return (\n          <MenuItem\n            key={item[0]}\n            isActive={this.props.value === item[0]}\n            to={{pathname: this.props.path, query}}\n          >\n            {item[1]}\n          </MenuItem>\n        );\n      })}\n    </DropdownLink>\n  );\n\n  render() {\n    return (\n      <div className=\"filter-options\">\n        {this.props.options.length === 1 ? (\n          <strong>{this.getCurrentLabel()}</strong>\n        ) : (\n          this.getSelector()\n        )}\n      </div>\n    );\n  }\n}\n\nclass SortBy extends React.Component {\n  static propTypes = {\n    options: PropTypes.array.isRequired,\n    path: PropTypes.string.isRequired,\n    location: PropTypes.object,\n    value: PropTypes.any,\n  };\n\n  getCurrentSortLabel = () =>\n    this.props.options.filter(item => item[0] === this.props.value)[0][1];\n\n  getSortBySelector = () => (\n    <DropdownLink title={this.getCurrentSortLabel()} className=\"sorted-by\">\n      {this.props.options.map(item => {\n        const query = $.extend({}, this.props.location.query, {\n          sortBy: item[0],\n          cursor: '',\n        });\n        return (\n          <MenuItem\n            isActive={this.props.value === item[0]}\n            key={item[0]}\n            to={{pathname: this.props.path, query}}\n          >\n            {item[1]}\n          </MenuItem>\n        );\n      })}\n    </DropdownLink>\n  );\n\n  render() {\n    if (this.props.options.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"sort-options\">\n        Showing results sorted by\n        {this.props.options.length === 1 ? (\n          <strong className=\"sorted-by\">{this.getCurrentSortLabel()}</strong>\n        ) : (\n          this.getSortBySelector()\n        )}\n      </div>\n    );\n  }\n}\n\nconst ResultGrid = createReactClass({\n  displayName: 'ResultGrid',\n\n  propTypes: {\n    api: PropTypes.object,\n    columns: PropTypes.array,\n    columnsForRow: PropTypes.func,\n    defaultSort: PropTypes.string,\n    defaultParams: PropTypes.object,\n    endpoint: PropTypes.string,\n    filters: PropTypes.object,\n    hasPagination: PropTypes.bool,\n    hasSearch: PropTypes.bool,\n    keyForRow: PropTypes.func,\n    location: PropTypes.object,\n    method: PropTypes.string,\n    options: PropTypes.array,\n    path: PropTypes.string,\n    sortOptions: PropTypes.array,\n  },\n\n  getDefaultProps() {\n    return {\n      path: '',\n      endpoint: '',\n      method: 'GET',\n      columns: [],\n      sortOptions: [],\n      filters: {},\n      defaultSort: '',\n      keyForRow: function (row) {\n        return row.id;\n      },\n      columnsForRow: function () {\n        return [];\n      },\n      defaultParams: {\n        per_page: 50,\n      },\n      hasPagination: true,\n      hasSearch: false,\n    };\n  },\n\n  getInitialState() {\n    const queryParams = (this.props.location || {}).query || {};\n\n    return {\n      rows: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      query: queryParams.query || '',\n      sortBy: queryParams.sortBy || this.props.defaultSort,\n      filters: Object.assign({}, queryParams),\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    const queryParams = (nextProps.location || {}).query || {};\n    this.setState(\n      {\n        query: queryParams.query || '',\n        sortBy: queryParams.sortBy || this.props.defaultSort,\n        filters: Object.assign({}, queryParams),\n        pageLinks: null,\n        loading: true,\n        error: false,\n      },\n      this.fetchData\n    );\n  },\n\n  remountComponent() {\n    this.setState(this.getInitialState(), this.fetchData);\n  },\n\n  refresh() {\n    this.setState(\n      {\n        loading: true,\n      },\n      this.fetchData()\n    );\n  },\n\n  fetchData() {\n    // TODO(dcramer): this should explicitly allow filters/sortBy/cursor/perPage\n    const queryParams = $.extend(\n      {},\n      this.props.defaultParams,\n      {sortBy: this.state.sortBy},\n      (this.props.location || {}).query || {}\n    );\n\n    this.props.api.request(this.props.endpoint, {\n      method: this.props.method,\n      data: queryParams,\n      success: (data, _, jqXHR) => {\n        this.setState({\n          loading: false,\n          error: false,\n          rows: data,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  },\n\n  onSearch(e) {\n    const location = this.props.location || {};\n    const {query} = this.state;\n    const targetQueryParams = jQuery.extend({}, location.query || {}, {\n      query,\n      cursor: '',\n    });\n\n    e.preventDefault();\n\n    browserHistory.push({\n      pathname: this.props.path,\n      query: targetQueryParams,\n    });\n  },\n\n  onQueryChange(evt) {\n    this.setState({query: evt.target.value});\n  },\n\n  renderLoading() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns.length}>\n          <div className=\"loading\">\n            <div className=\"loading-indicator\" />\n            <div className=\"loading-message\">Hold on to your butts!</div>\n          </div>\n        </td>\n      </tr>\n    );\n  },\n\n  renderError() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns.length}>\n          <div className=\"alert-block alert-error\">Something bad happened :(</div>\n        </td>\n      </tr>\n    );\n  },\n\n  renderNoResults() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns.length}>No results found.</td>\n      </tr>\n    );\n  },\n\n  renderResults() {\n    return this.state.rows.map(row => (\n      <tr key={this.props.keyForRow(row)}>{this.props.columnsForRow(row)}</tr>\n    ));\n  },\n\n  render() {\n    const {filters} = this.props;\n    return (\n      <div className=\"result-grid\">\n        <div className=\"table-options\">\n          {this.props.hasSearch && (\n            <div className=\"result-grid-search\">\n              <form onSubmit={this.onSearch}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control input-search\"\n                    placeholder=\"search\"\n                    style={{width: 300}}\n                    name=\"query\"\n                    autoComplete=\"off\"\n                    value={this.state.query}\n                    onChange={this.onQueryChange}\n                  />\n                  <button type=\"submit\" className=\"btn btn-sm btn-primary\">\n                    <IconSearch size=\"xs\" />\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n          <SortBy\n            options={this.props.sortOptions}\n            value={this.state.sortBy}\n            path={this.props.path}\n            location={this.props.location}\n          />\n          {Object.keys(filters).map(filterKey => (\n            <Filter\n              key={filterKey}\n              queryKey={filterKey}\n              value={this.state.filters[filterKey]}\n              path={this.props.path}\n              location={this.props.location}\n              {...filters[filterKey]}\n            />\n          ))}\n        </div>\n\n        <table className=\"table table-grid\">\n          <thead>\n            <tr>{this.props.columns}</tr>\n          </thead>\n          <tbody>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError()\n              : this.state.rows.length === 0\n              ? this.renderNoResults()\n              : this.renderResults()}\n          </tbody>\n        </table>\n        {this.props.hasPagination && this.state.pageLinks && (\n          <Pagination pageLinks={this.state.pageLinks} />\n        )}\n      </div>\n    );\n  },\n});\n\nexport {ResultGrid};\n\nexport default withApi(ResultGrid);\n","/* eslint-disable react/jsx-key */\nimport React from 'react';\nimport {Link} from 'react-router';\n\nimport ResultGrid from 'app/components/resultGrid';\nimport {t} from 'app/locale';\n\nclass AdminOrganizations extends React.Component {\n  getRow = row => [\n    <td>\n      <strong>\n        <Link to={`/${row.slug}/`}>{row.name}</Link>\n      </strong>\n      <br />\n      <small>{row.slug}</small>\n    </td>,\n  ];\n\n  render() {\n    const columns = [<th>Organization</th>];\n\n    return (\n      <div>\n        <h3>{t('Organizations')}</h3>\n        <ResultGrid\n          path=\"/manage/organizations/\"\n          endpoint=\"/organizations/?show=all\"\n          method=\"GET\"\n          columns={columns}\n          columnsForRow={this.getRow}\n          hasSearch\n          sortOptions={[\n            ['date', 'Date Joined'],\n            ['members', 'Members'],\n            ['events', 'Events'],\n            ['projects', 'Projects'],\n            ['employees', 'Employees'],\n          ]}\n          defaultSort=\"date\"\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AdminOrganizations;\n"],"sourceRoot":""}