{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/components/truncate.tsx","webpack:///./app/views/settings/project/projectServiceHooks.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","Truncate","state","isExpanded","onFocus","value","maxLength","length","setState","onBlur","leftTrim","isTruncated","shortValue","slice","className","onMouseOver","onMouseOut","ServiceHookRow","loading","error","orgId","projectId","hook","label","to","id","url","help","events","join","isActive","status","size","toggle","onToggleActive","ProjectServiceHooks","params","addLoadingMessage","t","api","request","method","data","success","clearIndicators","hookList","map","h","addErrorMessage","Fragment","key","type","bind","body","renderResults","renderEmpty","access","Set","context","organization","has","data-test-id","priority","isCircled","contextTypes","PropTypes","object","isRequired"],"mappings":"6qBAQqBA,E,uIAKjB,MAAO,K,+BAIP,IAAMC,EAAQC,KAAKC,WACnB,OACE,YAAC,IAAD,CAAeF,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,WACjBC,KAAKE,uB,GATJC,KAHWL,E,8nBCiBfM,E,qIAcK,MACsDJ,KAAKK,MAA3DC,EADA,EACAA,KAAMP,EADN,EACMA,MAAOQ,EADb,EACaA,OAAQC,EADrB,EACqBA,KAAMC,EAD3B,EAC2BA,cAAkBJ,EAD7C,wDAEP,OACE,kBAASA,EACP,YAACK,EAAD,KACGJ,GAAQ,YAACK,EAAD,KAAOL,GACfP,GACC,YAACa,EAAD,CAAOJ,KAAMA,EAAMK,OAAQJ,GACzB,YAAC,IAAD,KAAcV,IAGjBQ,GAAU,YAACO,EAAD,CAAQN,KAAMA,GAAOD,IAGjCC,GAAQ,uBAAMA,Q,GA5BWO,IAAMC,WAAlCZ,E,kCAAAA,EAUGa,aAAe,CACpBR,eAAe,GA4BnB,IAAMC,EAAkB,YAAO,MAAP,8CAAH,2DAKfE,EAAQ,YAAO,MAAP,qCACV,SAAAM,GAAC,OACAA,EAAEL,QAAH,mDAFO,YAMC,SAAAK,GAAC,OACTA,EAAEV,KAAF,UACOW,YAAM,GADb,YACmBA,YAAM,GADzB,YAC+BA,YAAM,GADrC,gBAEOA,YAAM,GAFb,YAEmBA,YAAM,GAFzB,YAE+BA,YAAM,GAFrC,QAPO,YAaLR,EAAO,YAAO,MAAP,mCAAH,gBACQQ,YAAM,GADd,KAIJL,EAAS,YAAO,MAAP,sCACX,SAAAI,GAAC,OAAKA,EAAEV,KAAF,sBAAwBW,YAAM,IAAO,OADnC,KAINC,EAA4B,YAAOhB,EAAP,wDAAH,8BAIde,YAAM,GAJQ,KAOhBC,O,6jBChFTC,E,kLAYJC,MAAQ,CACNC,YAAY,G,EAGdC,QAAU,WAAM,MACa,EAAKnB,MAAzBoB,EADO,EACPA,MAAOC,EADA,EACAA,UACVD,EAAME,QAAUD,GAGpB,EAAKE,SAAS,CAACL,YAAY,K,EAG7BM,OAAS,WACH,EAAKP,MAAMC,YACb,EAAKK,SAAS,CAACL,YAAY,K,+CAItB,MAC8BvB,KAAKK,MAAnCyB,EADA,EACAA,SAAUJ,EADV,EACUA,UAAWD,EADrB,EACqBA,MACtBM,EAAcN,EAAME,OAASD,EAC/BM,EAA8B,GAI9BA,EAFAD,EACED,EAEA,6BAASL,EAAMQ,MAAMR,EAAME,QAAUD,EAAY,GAAID,EAAME,SAGhD,wBAAOF,EAAMQ,MAAM,EAAGP,EAAY,GAAlC,MAGFD,EAGf,IAAIS,EAAYlC,KAAKK,MAAM6B,WAAa,GAMxC,OALAA,GAAa,aACTlC,KAAKsB,MAAMC,aACbW,GAAa,aAIb,oBACEA,UAAWA,EACXC,YAAanC,KAAKwB,QAClBY,WAAYpC,KAAK6B,OACjBL,QAASxB,KAAKwB,QACdK,OAAQ7B,KAAK6B,QAEb,oBAAMK,UAAU,eAAeF,GAC9BD,GAAe,oBAAMG,UAAU,cAAcT,Q,GA9D/BV,IAAMC,WAAvBK,E,uBAAAA,EAOGJ,aAA6B,CAClCS,UAAW,GACXI,UAAU,GA2DCT,O,qzCCjETgB,E,kLAQJf,MAAQ,CACNgB,SAAS,EACTC,OAAO,G,+CAGA,MAC0BvC,KAAKK,MAA/BmC,EADA,EACAA,MAAOC,EADP,EACOA,UAAWC,EADlB,EACkBA,KACzB,OACE,YAAC,IAAD,CACEC,MACE,YAAC,OAAD,CAAMC,GAAE,oBAAeJ,EAAf,qBAAiCC,EAAjC,kBAAoDC,EAAKG,GAAzD,MACN,YAAC,IAAD,CAAUpB,MAAOiB,EAAKI,OAG1BC,KACEL,EAAKM,QAAiC,IAAvBN,EAAKM,OAAOrB,OACzB,yBAAQe,EAAKM,OAAOC,KAAK,OAEzB,yBACE,gDAKN,YAAC,IAAD,CACEC,SAA0B,WAAhBR,EAAKS,OACfC,KAAK,KACLC,OAAQrD,KAAKK,MAAMiD,sB,GAnCAvC,IAAMC,WAA7BqB,E,iCA0CekB,E,kLAUnBD,eAAiB,SAAAZ,GAAQ,MACI,EAAKrC,MAAMmD,OAA/BhB,EADgB,EAChBA,MAAOC,EADS,EACTA,UAEdgB,YAAkBC,YAAE,oBAEpB,EAAKC,IAAIC,QAAT,oBAA8BpB,EAA9B,YAAuCC,EAAvC,kBAA0DC,EAAKG,GAA/D,KAAsE,CACpEgB,OAAQ,MACRC,KAAM,CACJZ,SAA0B,WAAhBR,EAAKS,QAEjBY,QAAS,SAAAD,GACPE,cACA,IAAMC,EAAW,EAAK3C,MAAM2C,SAASC,KAAI,SAAAC,GACvC,OAAIA,EAAEtB,KAAOiB,EAAKjB,GAChB,KACKsB,EADL,GAEKL,GAGAK,KAET,EAAKvC,SAAS,CAACqC,cAEjB1B,MAAO,WACL6B,YAAgBV,YAAE,wD,qDA7BT,MACc1D,KAAKK,MAAMmD,OAA/BhB,EADM,EACNA,MAAOC,EADD,EACCA,UACd,MAAO,CAAC,CAAC,WAAD,oBAA0BD,EAA1B,YAAmCC,EAAnC,e,oCAiCR,OACE,YAAC,IAAD,KACGiB,YAAE,+D,sCAKO,aACa1D,KAAKK,MAAMmD,OAA/BhB,EADO,EACPA,MAAOC,EADA,EACAA,UAEd,OACE,YAAC,IAAM4B,SAAP,KACE,YAAC,IAAD,CAAaC,IAAI,UAAUZ,YAAE,iBAC7B,YAAC,IAAD,CAAWY,IAAI,QACb,YAAC,IAAD,CAAYC,KAAK,OAAOjE,KAAM,YAAC,IAAD,CAAU8C,KAAK,QAC1CM,YACC,sFAGH1D,KAAKsB,MAAM2C,SAASC,KAAI,SAAAxB,GAAI,OAC3B,YAACL,EAAD,CACEiC,IAAK5B,EAAKG,GACVL,MAAOA,EACPC,UAAWA,EACXC,KAAMA,EACNY,eAAgB,EAAKA,eAAekB,KAAK,EAAM9B,Y,mCASzD,IAAI+B,EAEFA,EADEzE,KAAKsB,MAAM2C,SAAStC,OAAS,EACxB3B,KAAK0E,gBAEL1E,KAAK2E,cALH,MAQgB3E,KAAKK,MAAMmD,OAA/BhB,EARI,EAQJA,MAAOC,EARH,EAQGA,UACRmC,EAAS,IAAIC,IAAI7E,KAAK8E,QAAQC,aAAaH,QAEjD,OACE,mBAAK1C,UAAU,6BACb,YAAC,IAAD,CACEnC,MAAO2D,YAAE,iBACTnD,OACEqE,EAAOI,IAAI,iBACT,YAAC,IAAD,CACEC,eAAa,mBACbrC,GAAE,oBAAeJ,EAAf,qBAAiCC,EAAjC,eACFW,KAAK,QACL8B,SAAS,UACT5E,KAAM,YAAC,IAAD,CAAS8C,KAAK,KAAK+B,WAAS,KAEjCzB,YAAE,oBAEH,OAGR,YAAC,IAAD,KAAQe,Q,GAtGiC3E,KAA5ByD,EACZ6B,aAAe,CACpBL,aAAcM,IAAUC,OAAOC","file":"ProjectServiceHooks.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\ntype DefaultProps = {\n  maxLength: number;\n  leftTrim: boolean;\n};\n\ntype Props = DefaultProps & {\n  value: string;\n  className?: string;\n};\n\ntype State = {\n  isExpanded: boolean;\n};\n\nclass Truncate extends React.Component<Props, State> {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    leftTrim: PropTypes.bool,\n    maxLength: PropTypes.number,\n  };\n\n  static defaultProps: DefaultProps = {\n    maxLength: 50,\n    leftTrim: false,\n  };\n\n  state = {\n    isExpanded: false,\n  };\n\n  onFocus = () => {\n    const {value, maxLength} = this.props;\n    if (value.length <= maxLength) {\n      return;\n    }\n    this.setState({isExpanded: true});\n  };\n\n  onBlur = () => {\n    if (this.state.isExpanded) {\n      this.setState({isExpanded: false});\n    }\n  };\n\n  render() {\n    const {leftTrim, maxLength, value} = this.props;\n    const isTruncated = value.length > maxLength;\n    let shortValue: React.ReactNode = '';\n\n    if (isTruncated) {\n      if (leftTrim) {\n        shortValue = (\n          <span>… {value.slice(value.length - (maxLength - 4), value.length)}</span>\n        );\n      } else {\n        shortValue = <span>{value.slice(0, maxLength - 4)} …</span>;\n      }\n    } else {\n      shortValue = value;\n    }\n\n    let className = this.props.className || '';\n    className += ' truncated';\n    if (this.state.isExpanded) {\n      className += ' expanded';\n    }\n\n    return (\n      <span\n        className={className}\n        onMouseOver={this.onFocus}\n        onMouseOut={this.onBlur}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n      >\n        <span className=\"short-value\">{shortValue}</span>\n        {isTruncated && <span className=\"full-value\">{value}</span>}\n      </span>\n    );\n  }\n}\n\nexport default Truncate;\n","import {Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport Switch from 'app/components/switch';\nimport Truncate from 'app/components/truncate';\nimport {IconAdd, IconFlag} from 'app/icons';\n\nclass ServiceHookRow extends React.Component {\n  static propTypes = {\n    orgId: PropTypes.string.isRequired,\n    projectId: PropTypes.string.isRequired,\n    hook: PropTypes.object.isRequired,\n    onToggleActive: PropTypes.func.isRequired,\n  };\n\n  state = {\n    loading: false,\n    error: false,\n  };\n\n  render() {\n    const {orgId, projectId, hook} = this.props;\n    return (\n      <Field\n        label={\n          <Link to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}>\n            <Truncate value={hook.url} />\n          </Link>\n        }\n        help={\n          hook.events && hook.events.length !== 0 ? (\n            <small>{hook.events.join(', ')}</small>\n          ) : (\n            <small>\n              <em>no events configured</em>\n            </small>\n          )\n        }\n      >\n        <Switch\n          isActive={hook.status === 'active'}\n          size=\"lg\"\n          toggle={this.props.onToggleActive}\n        />\n      </Field>\n    );\n  }\n}\n\nexport default class ProjectServiceHooks extends AsyncView {\n  static contextTypes = {\n    organization: PropTypes.object.isRequired,\n  };\n\n  getEndpoints() {\n    const {orgId, projectId} = this.props.params;\n    return [['hookList', `/projects/${orgId}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = hook => {\n    const {orgId, projectId} = this.props.params;\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hook.id}/`, {\n      method: 'PUT',\n      data: {\n        isActive: hook.status !== 'active',\n      },\n      success: data => {\n        clearIndicators();\n        const hookList = this.state.hookList.map(h => {\n          if (h.id === data.id) {\n            return {\n              ...h,\n              ...data,\n            };\n          }\n          return h;\n        });\n        this.setState({hookList});\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <React.Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" icon={<IconFlag size=\"md\" />}>\n            {t(\n              'Service Hooks are an early adopter preview feature and will change in the future.'\n            )}\n          </PanelAlert>\n          {this.state.hookList.map(hook => (\n            <ServiceHookRow\n              key={hook.id}\n              orgId={orgId}\n              projectId={projectId}\n              hook={hook}\n              onToggleActive={this.onToggleActive.bind(this, hook)}\n            />\n          ))}\n        </PanelBody>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    let body;\n    if (this.state.hookList.length > 0) {\n      body = this.renderResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    const {orgId, projectId} = this.props.params;\n    const access = new Set(this.context.organization.access);\n\n    return (\n      <div className=\"ref-project-service-hooks\">\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${orgId}/projects/${projectId}/hooks/new/`}\n                size=\"small\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}