{"version":3,"sources":["webpack:///./app/components/charts/utils.tsx","webpack:///./app/components/charts/components/grid.tsx","webpack:///./app/components/charts/components/tooltip.tsx","webpack:///./app/components/charts/components/xAxis.tsx","webpack:///./app/components/charts/components/yAxis.tsx","webpack:///./app/components/charts/baseChart.tsx","webpack:///./app/components/charts/loadingPanel.tsx","webpack:///./app/components/charts/series/lineSeries.tsx","webpack:///./app/components/loadingMask.tsx","webpack:///./app/components/charts/components/legend.tsx"],"names":["truncationFormatter","value","truncate","escape","truncationLength","truncated","length","substring","useShortInterval","datetimeObj","getDiffInMinutes","getInterval","highFidelity","diffInMinutes","period","start","end","moment","diff","parsePeriodToHours","DEFAULT_STATS_PERIOD","canIncludePreviousPeriod","includePrevious","Grid","props","top","bottom","left","right","containLabel","defaultFormatAxisLabel","isTimestamp","utc","showTimeInTooltip","bucketSize","format","getTimeFormat","trim","getFormattedDate","local","now","bucketStart","bucketEnd","showYear","year","showEndDate","date","formatStart","formatEnd","defaultValueFormatter","toLocaleString","defaultNameFormatter","getSeriesValue","series","offset","data","Array","isArray","getFormatter","filter","isGroupedByDate","formatAxisLabel","valueFormatter","nameFormatter","getFilter","seriesParam","seriesParamsOrParam","axisFormatterOrDefault","componentType","label","coord","truncatedName","labelForValue","formattedValue","name","join","seriesParams","timestamp","axisValue","map","s","formattedLabel","seriesName","marker","Tooltip","formatter","show","trigger","backgroundColor","transitionDuration","padding","position","pos","_params","dom","_rec","_size","tipWidth","clientWidth","tipHeight","clientHeight","chartLeft","parentNode","Element","getBoundingClientRect","leftPos","Number","arrowPosition","rightEdge","window","innerWidth","arrow","querySelector","style","XAxis","useShortDate","axisLabel","axisTick","axisLine","axisLabelFormatter","index","timeFormat","dateFormat","firstItem","type","boundaryGap","lineStyle","color","theme","gray400","splitLine","margin","showMaxLabel","showMinLabel","axisPointer","width","YAxis","borderLighter","getDimensionValue","dimension","BaseChart","state","chartDeps","undefined","_isMounted","getEventsMap","click","instance","handleClick","onClick","highlight","onHighlight","mouseover","onMouseOver","datazoom","onDataZoom","restore","onRestore","finished","onFinished","legendselectchanged","onLegendSelectChanged","this","loadEcharts","setState","charts","getColorPalette","colors","options","grid","tooltip","legend","yAxis","xAxis","dataZoom","toolBox","graphic","previousPeriod","yAxes","xAxes","devicePixelRatio","height","renderer","notMerge","lazyUpdate","forwardedRef","onChartReady","data-test-id","yAxisOrCustom","xAxisOrCustom","axis","seriesData","ChartContainer","ReactEchartsCore","ref","echarts","onEvents","opts","option","animation","IS_CI","useUTC","Legend","previous","LineSeries","itemStyle","toolbox","React","Component","defaultProps","p","gray500","text","family","gray800","space","borderRadius","gray600","borderRadiusBottom","BaseChartRef","forwardRef","displayName","LoadingPanel","showSymbol","symbolSize","LoadingMask","gray200","rest"],"mappings":"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","file":"AlertsDetails~DiscoverContainer~DiscoverV2Landing~DiscoverV2Results~Events~OverviewDashboard~Perform~aa3f942d.js","sourcesContent":["import moment from 'moment';\n\nimport {GlobalSelection} from 'app/types';\nimport {DEFAULT_STATS_PERIOD} from 'app/constants';\nimport {parsePeriodToHours} from 'app/utils/dates';\nimport {escape} from 'app/utils';\n\nconst DEFAULT_TRUNCATE_LENGTH = 80;\n\n// In minutes\nexport const THIRTY_DAYS = 43200;\nexport const TWO_WEEKS = 20160;\nexport const ONE_WEEK = 10080;\nexport const TWENTY_FOUR_HOURS = 1440;\nexport const ONE_HOUR = 60;\n\nexport type DateTimeObject = Partial<GlobalSelection['datetime']>;\n\nexport function truncationFormatter(value: string, truncate: number | undefined): string {\n  if (!truncate) {\n    return escape(value);\n  }\n  const truncationLength =\n    truncate && typeof truncate === 'number' ? truncate : DEFAULT_TRUNCATE_LENGTH;\n  const truncated =\n    value.length > truncationLength ? value.substring(0, truncationLength) + '…' : value;\n  return escape(truncated);\n}\n\n/**\n * Use a shorter interval if the time difference is <= 24 hours.\n */\nexport function useShortInterval(datetimeObj: DateTimeObject): boolean {\n  const diffInMinutes = getDiffInMinutes(datetimeObj);\n\n  return diffInMinutes <= TWENTY_FOUR_HOURS;\n}\n\nexport function getInterval(datetimeObj: DateTimeObject, highFidelity = false) {\n  const diffInMinutes = getDiffInMinutes(datetimeObj);\n\n  if (diffInMinutes >= THIRTY_DAYS) {\n    // Greater than or equal to 30 days\n    if (highFidelity) {\n      return '1h';\n    } else {\n      return '24h';\n    }\n  }\n\n  if (diffInMinutes > TWENTY_FOUR_HOURS) {\n    // Greater than 24 hours\n    if (highFidelity) {\n      return '30m';\n    } else {\n      return '24h';\n    }\n  }\n\n  if (diffInMinutes <= ONE_HOUR) {\n    // Less than or equal to 1 hour\n    if (highFidelity) {\n      return '1m';\n    } else {\n      return '5m';\n    }\n  }\n\n  // Between 1 hour and 24 hours\n  if (highFidelity) {\n    return '5m';\n  } else {\n    return '15m';\n  }\n}\n\nexport function getDiffInMinutes(datetimeObj: DateTimeObject): number {\n  const {period, start, end} = datetimeObj;\n\n  if (start && end) {\n    return moment(end).diff(start, 'minutes');\n  }\n\n  return (\n    parsePeriodToHours(typeof period === 'string' ? period : DEFAULT_STATS_PERIOD) * 60\n  );\n}\n\n// Max period (in hours) before we can no long include previous period\nconst MAX_PERIOD_HOURS_INCLUDE_PREVIOUS = 45 * 24;\n\nexport function canIncludePreviousPeriod(\n  includePrevious: boolean | undefined,\n  period: string | undefined\n) {\n  if (!includePrevious) {\n    return false;\n  }\n\n  if (period && parsePeriodToHours(period) > MAX_PERIOD_HOURS_INCLUDE_PREVIOUS) {\n    return false;\n  }\n\n  // otherwise true\n  return !!includePrevious;\n}\n","import {EChartOption} from 'echarts';\n\n/**\n * Drawing grid in rectangular coordinates\n *\n * e.g. alignment of your chart?\n */\nexport default function Grid(props: EChartOption.Grid = {}): EChartOption.Grid {\n  return {\n    top: 20,\n    bottom: 20,\n    // This should allow for sufficient space for Y-axis labels\n    left: '0%',\n    right: '0%',\n    containLabel: true,\n    ...props,\n  };\n}\n","import {EChartOption} from 'echarts';\nimport moment from 'moment';\n\nimport {getFormattedDate, getTimeFormat} from 'app/utils/dates';\nimport BaseChart from 'app/components/charts/baseChart';\n\nimport {truncationFormatter} from '../utils';\n\ntype ChartProps = React.ComponentProps<typeof BaseChart>;\n\nfunction defaultFormatAxisLabel(\n  value: number,\n  isTimestamp: boolean,\n  utc: boolean,\n  showTimeInTooltip: boolean,\n  bucketSize?: number\n) {\n  if (!isTimestamp) {\n    return value;\n  }\n\n  if (!bucketSize) {\n    const format = `MMM D, YYYY ${showTimeInTooltip ? getTimeFormat() : ''}`.trim();\n    return getFormattedDate(value, format, {local: !utc});\n  }\n\n  const now = moment();\n  const bucketStart = moment(value);\n  const bucketEnd = moment(value + bucketSize);\n\n  const showYear = now.year() !== bucketStart.year() || now.year() !== bucketEnd.year();\n  const showEndDate = bucketStart.date() !== bucketEnd.date();\n\n  const formatStart = `MMM D${showYear ? ', YYYY' : ''} ${\n    showTimeInTooltip ? getTimeFormat() : ''\n  }`.trim();\n  const formatEnd = `${showEndDate ? `MMM D${showYear ? ', YYYY' : ''} ` : ''}${\n    showTimeInTooltip ? getTimeFormat() : ''\n  }`.trim();\n\n  return `${getFormattedDate(bucketStart, formatStart, {\n    local: !utc,\n  })} — ${getFormattedDate(bucketEnd, formatEnd, {local: !utc})}`;\n}\n\nfunction defaultValueFormatter(value: string | number) {\n  if (typeof value === 'number') {\n    return value.toLocaleString();\n  }\n\n  return value;\n}\n\nfunction defaultNameFormatter(value: string) {\n  return value;\n}\n\nfunction getSeriesValue(series: EChartOption.Tooltip.Format, offset: number) {\n  if (!series.data) {\n    return undefined;\n  }\n  if (Array.isArray(series.data)) {\n    return series.data[offset];\n  }\n  if (Array.isArray(series.data.value)) {\n    return series.data.value[offset];\n  }\n\n  return undefined;\n}\n\ntype NeededChartProps = 'isGroupedByDate' | 'showTimeInTooltip' | 'utc' | 'bucketSize';\n\ntype TooltipFormatters =\n  | 'truncate'\n  | 'filter'\n  | 'formatAxisLabel'\n  | 'valueFormatter'\n  | 'nameFormatter';\n\ntype FormatterOptions = Pick<NonNullable<ChartProps['tooltip']>, TooltipFormatters> &\n  Pick<ChartProps, NeededChartProps>;\n\nfunction getFormatter({\n  filter,\n  isGroupedByDate,\n  showTimeInTooltip,\n  truncate,\n  formatAxisLabel,\n  utc,\n  bucketSize,\n  valueFormatter = defaultValueFormatter,\n  nameFormatter = defaultNameFormatter,\n}: FormatterOptions) {\n  const getFilter = (seriesParam: EChartOption.Tooltip.Format) => {\n    // Series do not necessarily have `data` defined, e.g. releases don't have `data`, but rather\n    // has a series using strictly `markLine`s.\n    // However, real series will have `data` as a tuple of (label, value) or be\n    // an object with value/label keys.\n    const value = getSeriesValue(seriesParam, 0);\n    if (typeof filter === 'function') {\n      return filter(value);\n    }\n\n    return true;\n  };\n\n  const formatter: EChartOption.Tooltip['formatter'] = seriesParamsOrParam => {\n    // If this is a tooltip for the axis, it will include all series for that axis item.\n    // In this case seriesParamsOrParam will be of type `Object[]`\n    //\n    // Otherwise, it will be an `Object`, and is a tooltip for a single item\n    const axisFormatterOrDefault = formatAxisLabel || defaultFormatAxisLabel;\n\n    // Special tooltip if component is a `markPoint`\n    if (\n      !Array.isArray(seriesParamsOrParam) &&\n      // TODO(ts): The EChart types suggest that this can _only_ be `series`,\n      //           but assuming this code is correct (which I have not\n      //           verified) their types may be wrong.\n      (seriesParamsOrParam.componentType as unknown) === 'markPoint'\n    ) {\n      const timestamp = seriesParamsOrParam.data.coord[0] as number;\n      const label = axisFormatterOrDefault(\n        timestamp,\n        !!isGroupedByDate,\n        !!utc,\n        !!showTimeInTooltip,\n        bucketSize\n      );\n      // eCharts sets seriesName as null when `componentType` !== 'series'\n      const truncatedName = truncationFormatter(\n        seriesParamsOrParam.data.labelForValue,\n        truncate\n      );\n      const formattedValue = valueFormatter(\n        seriesParamsOrParam.data.coord[1],\n        seriesParamsOrParam.name\n      );\n\n      return [\n        '<div class=\"tooltip-series\">',\n        `<div>\n          <span class=\"tooltip-label\"><strong>${seriesParamsOrParam.name}</strong></span>\n          ${truncatedName}: ${formattedValue}\n        </div>`,\n        '</div>',\n        `<div class=\"tooltip-date\">${label}</div>`,\n        '</div>',\n      ].join('');\n    }\n\n    const seriesParams = Array.isArray(seriesParamsOrParam)\n      ? seriesParamsOrParam\n      : [seriesParamsOrParam];\n\n    // If axis, timestamp comes from axis, otherwise for a single item it is defined in the data attribute.\n    // The data attribute is usually a list of [name, value] but can also be an object of {name, value} when\n    // there is item specific formatting being used.\n    const timestamp = Array.isArray(seriesParamsOrParam)\n      ? seriesParams[0].axisValue\n      : getSeriesValue(seriesParams[0], 0);\n\n    const label =\n      seriesParams.length &&\n      axisFormatterOrDefault(\n        timestamp,\n        !!isGroupedByDate,\n        !!utc,\n        !!showTimeInTooltip,\n        bucketSize\n      );\n\n    return [\n      '<div class=\"tooltip-series\">',\n      seriesParams\n        .filter(getFilter)\n        .map(s => {\n          const formattedLabel = nameFormatter(\n            truncationFormatter(s.seriesName ?? '', truncate)\n          );\n          const value = valueFormatter(getSeriesValue(s, 1), s.seriesName);\n          return `<div><span class=\"tooltip-label\">${s.marker} <strong>${formattedLabel}</strong></span> ${value}</div>`;\n        })\n        .join(''),\n      '</div>',\n      `<div class=\"tooltip-date\">${label}</div>`,\n      `<div class=\"tooltip-arrow\"></div>`,\n    ].join('');\n  };\n\n  return formatter;\n}\n\ntype Props = ChartProps['tooltip'] & Pick<ChartProps, NeededChartProps>;\n\nexport default function Tooltip({\n  filter,\n  isGroupedByDate,\n  showTimeInTooltip,\n  formatter,\n  truncate,\n  utc,\n  bucketSize,\n  formatAxisLabel,\n  valueFormatter,\n  nameFormatter,\n  ...props\n}: Props = {}): EChartOption.Tooltip {\n  formatter =\n    formatter ||\n    getFormatter({\n      filter,\n      isGroupedByDate,\n      showTimeInTooltip,\n      truncate,\n      utc,\n      bucketSize,\n      formatAxisLabel,\n      valueFormatter,\n      nameFormatter,\n    });\n\n  return {\n    show: true,\n    trigger: 'item',\n    backgroundColor: 'transparent',\n    transitionDuration: 0,\n    padding: 0,\n    position(pos, _params, dom, _rec, _size) {\n      // Center the tooltip slightly above the cursor.\n      const tipWidth = dom.clientWidth;\n      const tipHeight = dom.clientHeight;\n\n      // Get the left offset of the tip container (the chart)\n      // so that we can estimate overflows\n      const chartLeft =\n        dom.parentNode instanceof Element\n          ? dom.parentNode.getBoundingClientRect().left\n          : 0;\n\n      // Determine the new left edge.\n      let leftPos = Number(pos[0]) - tipWidth / 2;\n      let arrowPosition = '50%';\n\n      // And the right edge taking into account the chart left offset\n      const rightEdge = chartLeft + Number(pos[0]) + tipWidth / 2;\n\n      // If the tooltip would leave viewport on the right, pin it.\n      // and adjust the arrow position.\n      if (rightEdge >= window.innerWidth - 30) {\n        leftPos -= rightEdge - window.innerWidth + 30;\n        arrowPosition = `${Number(pos[0]) - leftPos}px`;\n      }\n\n      // If the tooltip would leave viewport on the left, pin it.\n      if (leftPos + chartLeft - 20 <= 0) {\n        leftPos = chartLeft * -1 + 20;\n        arrowPosition = `${Number(pos[0]) - leftPos}px`;\n      }\n\n      // Reposition the arrow.\n      const arrow = dom.querySelector<HTMLDivElement>('.tooltip-arrow');\n      if (arrow) {\n        arrow.style.left = arrowPosition;\n      }\n\n      return {left: leftPos, top: Number(pos[1]) - tipHeight - 20};\n    },\n    formatter,\n    ...props,\n  };\n}\n","import {EChartOption} from 'echarts';\n\nimport {getFormattedDate, getTimeFormat} from 'app/utils/dates';\nimport BaseChart from 'app/components/charts/baseChart';\nimport theme from 'app/utils/theme';\n\nimport {truncationFormatter, useShortInterval} from '../utils';\n\ntype ChartProps = React.ComponentProps<typeof BaseChart>;\ntype HelperProps =\n  | 'isGroupedByDate'\n  | 'useShortDate'\n  | 'start'\n  | 'end'\n  | 'period'\n  | 'utc';\n\ntype Props = ChartProps['xAxis'] & Pick<ChartProps, HelperProps>;\n\nexport default function XAxis({\n  isGroupedByDate,\n  useShortDate,\n  axisLabel,\n  axisTick,\n  axisLine,\n\n  start,\n  end,\n  period,\n  utc,\n  ...props\n}: Props = {}): EChartOption.XAxis {\n  const axisLabelFormatter = (value: string, index: number) => {\n    if (isGroupedByDate) {\n      const timeFormat = getTimeFormat();\n      const dateFormat = useShortDate ? 'MMM Do' : `MMM D ${timeFormat}`;\n      const firstItem = index === 0;\n      const format =\n        useShortInterval({start, end, period}) && !firstItem ? timeFormat : dateFormat;\n      return getFormattedDate(value, format, {local: !utc});\n    } else if (props.truncate) {\n      return truncationFormatter(value, props.truncate);\n    } else {\n      return undefined;\n    }\n  };\n\n  return {\n    type: isGroupedByDate ? 'time' : 'category',\n    boundaryGap: false,\n    axisLine: {\n      lineStyle: {\n        color: theme.gray400,\n      },\n      ...(axisLine || {}),\n    },\n    axisTick: {\n      lineStyle: {\n        color: theme.gray400,\n      },\n      ...(axisTick || {}),\n    },\n    splitLine: {\n      show: false,\n    },\n    axisLabel: {\n      margin: 12,\n\n      // This was default with ChartZoom, we are making it default for all charts now\n      // Otherwise the xAxis can look congested when there is always a min/max label\n      showMaxLabel: false,\n      showMinLabel: false,\n\n      formatter: axisLabelFormatter,\n      ...(axisLabel || {}),\n    },\n    axisPointer: {\n      show: true,\n      type: 'line',\n      label: {\n        show: false,\n      },\n      lineStyle: {\n        width: 0.5,\n      },\n    },\n    ...props,\n  };\n}\n","import {EChartOption} from 'echarts';\n\nimport theme from 'app/utils/theme';\n\nexport default function YAxis(props: EChartOption.YAxis = {}): EChartOption.YAxis {\n  return {\n    axisLine: {\n      show: false,\n    },\n    axisTick: {\n      show: false,\n    },\n    axisLabel: {\n      color: theme.gray400,\n    },\n    splitLine: {\n      lineStyle: {\n        color: theme.borderLighter,\n      },\n    },\n    ...props,\n  };\n}\n","import React from 'react';\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport {EChartOption, ECharts} from 'echarts/lib/echarts';\nimport styled from '@emotion/styled';\n\nimport {IS_CI} from 'app/constants';\nimport {\n  Series,\n  EChartEventHandler,\n  EChartChartReadyHandler,\n  EChartDataZoomHandler,\n} from 'app/types/echarts';\nimport space from 'app/styles/space';\nimport theme from 'app/utils/theme';\n\nimport LoadingPanel from './loadingPanel';\nimport Grid from './components/grid';\nimport Legend from './components/legend';\nimport LineSeries from './series/lineSeries';\nimport Tooltip from './components/tooltip';\nimport XAxis from './components/xAxis';\nimport YAxis from './components/yAxis';\n\n// If dimension is a number convert it to pixels, otherwise use dimension without transform\nconst getDimensionValue = (dimension?: ReactEChartOpts['height']) => {\n  if (typeof dimension === 'number') {\n    return `${dimension}px`;\n  }\n\n  if (dimension === null) {\n    return undefined;\n  }\n\n  return dimension;\n};\n\ntype ReactEchartProps = React.ComponentProps<typeof ReactEchartsCore>;\ntype ReactEChartOpts = NonNullable<ReactEchartProps['opts']>;\n\n/**\n * Used for soem properties that can be truncated\n */\ntype Truncateable = {\n  /**\n   * Truncate the label / value some number of characters\n   */\n  truncate?: number;\n};\n\ntype Props = {\n  options?: EChartOption;\n  /**\n   * Chart Series\n   * This is different than the interface to higher level charts, these need to\n   * be an array of ECharts \"Series\" components.\n   */\n  series?: EChartOption.Series[];\n  /**\n   * Array of color codes to use in charts\n   */\n  colors?: string[];\n  /**\n   * Must be explicitly `null` to disable xAxis\n   *\n   * Additionally a `truncate` option\n   */\n  xAxis?: EChartOption.XAxis & Truncateable;\n  /**\n   * Must be explicitly `null` to disable yAxis\n   */\n  yAxis?: EChartOption.YAxis;\n  /**\n   * Pass `true` to have 2 y-axes with default properties. Can pass an array of\n   * objects to customize yAxis properties\n   */\n  yAxes?: true | Props['yAxis'][];\n  /**\n   * Pass `true` to have 2 x-axes with default properties.  Can pass an array\n   * of multiple objects to customize xAxis properties\n   */\n  xAxes?: true | Props['xAxis'][];\n  /**\n   * Tooltip options\n   */\n  tooltip?: EChartOption.Tooltip &\n    Truncateable & {\n      filter?: (value: number) => number;\n      formatAxisLabel?: (\n        value: number,\n        isTimestamp: boolean,\n        utc: boolean,\n        showTimeInTooltip: boolean\n      ) => string;\n      valueFormatter?: (value: number, label?: string) => string | number;\n      nameFormatter?: (name: string) => string;\n    };\n  /**\n   * DataZoom (allows for zooming of chart)\n   */\n  dataZoom?: EChartOption['dataZoom'];\n  /**\n   * Axis pointer options\n   */\n  axisPointer?: EChartOption.AxisPointer;\n  /**\n   * Toolbox options\n   */\n  toolBox?: EChartOption['toolbox'];\n  /**\n   * Graphic options\n   */\n  graphic?: EChartOption['graphic'];\n  /**\n   * ECharts Grid options. multiple grids allow multiple sub-graphs.\n   */\n  grid?: EChartOption.Grid | EChartOption.Grid[];\n  /**\n   * Chart legend\n   */\n  legend?: EChartOption.Legend & Truncateable;\n  /**\n   * Chart height\n   */\n  height?: ReactEChartOpts['height'];\n  /**\n   * Chart width\n   */\n  width?: ReactEChartOpts['width'];\n  /**\n   * Use `canvas` when dealing with large datasets\n   * See: https://ecomfe.github.io/echarts-doc/public/en/tutorial.html#Render%20by%20Canvas%20or%20SVG\n   */\n  renderer?: ReactEChartOpts['renderer'];\n  devicePixelRatio?: ReactEChartOpts['devicePixelRatio'];\n  /**\n   * theme name\n   * example theme: https://github.com/apache/incubator-echarts/blob/master/theme/dark.js\n   */\n  theme?: ReactEchartProps['theme'];\n  /**\n   * states whether or not to merge with previous `option`\n   */\n  notMerge?: boolean;\n  /**\n   * states whether not to update chart immediately\n   */\n  lazyUpdate?: boolean;\n  onChartReady?: EChartChartReadyHandler;\n  onHighlight?: EChartEventHandler<any>;\n  onMouseOver?: EChartEventHandler<any>;\n  onClick?: EChartEventHandler<any>;\n  onDataZoom?: EChartDataZoomHandler;\n  /**\n   * One example of when this is called is restoring chart from zoom levels\n   */\n  onRestore?: EChartEventHandler<{type: 'restore'}>;\n  onFinished?: EChartEventHandler<{}>;\n  onLegendSelectChanged?: EChartEventHandler<{}>;\n  /**\n   * Forwarded Ref\n   */\n  forwardedRef?: React.Ref<ReactEchartsCore>;\n  /**\n   * Custom chart props that are implemented by us (and not a feature of eCharts)\n   *\n   * Display previous period as a LineSeries\n   */\n  previousPeriod?: Series[];\n  /**\n   * If data is grouped by date; then apply default date formatting to x-axis\n   * and tooltips.\n   */\n  isGroupedByDate?: boolean;\n  /**\n   * Format timestamp with date AND time\n   */\n  showTimeInTooltip?: boolean;\n  /**\n   * Use short date formatting for xAxis\n   */\n  useShortDate?: boolean;\n  /**\n   * optional, used to determine how xAxis is formatted if `isGroupedByDate == true`\n   */\n  start?: Date;\n  /**\n   * optional, used to determine how xAxis is formatted if `isGroupedByDate == true`\n   */\n  end?: Date;\n  /**\n   * optional, used to determine how xAxis is formatted if `isGroupedByDate == true`\n   */\n  period?: string;\n  /**\n   * Formats dates as UTC?\n   */\n  utc?: boolean;\n  /**\n   * Bucket size to display time range in chart tooltip\n   */\n  bucketSize?: number;\n  /**\n   * Inline styles\n   */\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  chartDeps: any;\n};\n\nclass BaseChart extends React.Component<Props, State> {\n  static defaultProps = {\n    height: 200,\n    width: 'auto',\n    renderer: 'svg',\n    notMerge: true,\n    lazyUpdate: false,\n    onChartReady: () => {},\n    options: {},\n\n    series: [],\n    xAxis: {},\n    yAxis: {},\n    isGroupedByDate: false,\n  };\n\n  state: State = {\n    chartDeps: undefined,\n  };\n\n  componentDidMount() {\n    this.loadEcharts();\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  async loadEcharts() {\n    const chartDeps = await import(\n      /* webpackChunkName: \"echarts\" */ 'app/components/charts/libs'\n    );\n    if (this._isMounted) {\n      this.setState({chartDeps});\n    }\n  }\n\n  private _isMounted: boolean = false;\n\n  getEventsMap: ReactEchartProps['onEvents'] = {\n    click: (props, instance) => {\n      this.handleClick(props, instance);\n      this.props.onClick?.(props, instance);\n    },\n    highlight: (props, instance) => this.props.onHighlight?.(props, instance),\n    mouseover: (props, instance) => this.props.onMouseOver?.(props, instance),\n    datazoom: (props, instance) => this.props.onDataZoom?.(props, instance),\n    restore: (props, instance) => this.props.onRestore?.(props, instance),\n    finished: (props, instance) => this.props.onFinished?.(props, instance),\n    legendselectchanged: (props, instance) =>\n      this.props.onLegendSelectChanged?.(props, instance),\n  };\n\n  // TODO(ts): What is the series type? EChartOption.Series's data cannot have\n  // `onClick` since it's typically an array.\n  /**\n   * Handle series item clicks (e.g. Releases mark line or a single series item)\n   * This is different than when you hover over an \"axis\" line on a chart (e.g.\n   * if there are 2 series for an axis and you're not directly hovered over an item)\n   *\n   * Calls \"onClick\" inside of series data\n   */\n  handleClick = (series: any, instance: ECharts) => {\n    if (series.data) {\n      series.data.onClick?.(series, instance);\n    }\n  };\n\n  getColorPalette() {\n    const {series} = this.props;\n\n    const palette = series?.length\n      ? theme.charts.getColorPalette(series.length)\n      : theme.charts.colors;\n\n    return (palette as unknown) as string[];\n  }\n\n  render() {\n    const {\n      options,\n      colors,\n      grid,\n      tooltip,\n      legend,\n      series,\n      yAxis,\n      xAxis,\n      dataZoom,\n      toolBox,\n      graphic,\n      axisPointer,\n\n      isGroupedByDate,\n      showTimeInTooltip,\n      useShortDate,\n      previousPeriod,\n      start,\n      end,\n      period,\n      utc,\n      yAxes,\n      xAxes,\n\n      devicePixelRatio,\n      height,\n      width,\n      renderer,\n      notMerge,\n      lazyUpdate,\n      style,\n      forwardedRef,\n      onChartReady,\n    } = this.props;\n    const {chartDeps} = this.state;\n\n    if (typeof chartDeps === 'undefined') {\n      return (\n        <LoadingPanel\n          height={height ? `${height}px` : undefined}\n          data-test-id=\"basechart-loading\"\n        />\n      );\n    }\n\n    const yAxisOrCustom = !yAxes\n      ? yAxis !== null\n        ? YAxis(yAxis)\n        : undefined\n      : Array.isArray(yAxes)\n      ? yAxes.map(YAxis)\n      : [YAxis(), YAxis()];\n    const xAxisOrCustom = !xAxes\n      ? xAxis !== null\n        ? XAxis({\n            ...xAxis,\n            useShortDate,\n            start,\n            end,\n            period,\n            isGroupedByDate,\n            utc,\n          })\n        : undefined\n      : Array.isArray(xAxes)\n      ? xAxes.map(axis =>\n          XAxis({...axis, useShortDate, start, end, period, isGroupedByDate, utc})\n        )\n      : [XAxis(), XAxis()];\n\n    // Maybe changing the series type to types/echarts Series[] would be a better solution\n    // and can't use ignore for multiline blocks\n    // @ts-ignore\n    const seriesValid = series && series[0]?.data && series[0].data.length > 1;\n    // @ts-ignore\n    const seriesData = seriesValid ? series[0].data : undefined;\n    // @ts-ignore\n    const bucketSize = seriesData ? seriesData[1][0] - seriesData[0][0] : undefined;\n\n    return (\n      <ChartContainer>\n        <chartDeps.ReactEchartsCore\n          ref={forwardedRef}\n          echarts={chartDeps.echarts}\n          notMerge={notMerge}\n          lazyUpdate={lazyUpdate}\n          theme={this.props.theme}\n          onChartReady={onChartReady}\n          onEvents={this.getEventsMap}\n          opts={{\n            height,\n            width,\n            renderer,\n            devicePixelRatio,\n          }}\n          style={{\n            height: getDimensionValue(height),\n            width: getDimensionValue(width),\n            ...style,\n          }}\n          option={{\n            animation: IS_CI ? false : true,\n            ...options,\n            useUTC: utc,\n            color: colors || this.getColorPalette(),\n            grid: Array.isArray(grid) ? grid.map(Grid) : Grid(grid),\n            tooltip:\n              tooltip !== null\n                ? Tooltip({\n                    showTimeInTooltip,\n                    isGroupedByDate,\n                    utc,\n                    bucketSize,\n                    ...tooltip,\n                  })\n                : undefined,\n            legend: legend ? Legend({...legend}) : undefined,\n            yAxis: yAxisOrCustom,\n            xAxis: xAxisOrCustom,\n            series: !previousPeriod\n              ? series\n              : [\n                  ...series,\n                  ...previousPeriod.map(previous =>\n                    LineSeries({\n                      name: previous.seriesName,\n                      data: previous.data.map(({name, value}) => [name, value]),\n                      lineStyle: {\n                        color: theme.gray400,\n                        type: 'dotted',\n                      },\n                      itemStyle: {\n                        color: theme.gray400,\n                      },\n                    })\n                  ),\n                ],\n            axisPointer,\n            dataZoom,\n            toolbox: toolBox,\n            graphic,\n          }}\n        />\n      </ChartContainer>\n    );\n  }\n}\n\n// Contains styling for chart elements as we can't easily style those\n// elements directly\nconst ChartContainer = styled('div')`\n  /* Tooltip styling */\n  .tooltip-series,\n  .tooltip-date {\n    color: ${p => p.theme.gray500};\n    font-family: ${p => p.theme.text.family};\n    background: ${p => p.theme.gray800};\n    padding: ${space(1)} ${space(2)};\n    border-radius: ${p => p.theme.borderRadius} ${p => p.theme.borderRadius} 0 0;\n  }\n  .tooltip-series-solo {\n    border-radius: ${p => p.theme.borderRadius};\n  }\n  .tooltip-label {\n    margin-right: ${space(1)};\n  }\n  .tooltip-label strong {\n    font-weight: normal;\n    color: #fff;\n  }\n  .tooltip-series > div {\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n  }\n  .tooltip-date {\n    border-top: 1px solid ${p => p.theme.gray600};\n    text-align: center;\n    position: relative;\n    width: auto;\n    border-radius: ${p => p.theme.borderRadiusBottom};\n  }\n  .tooltip-arrow {\n    top: 100%;\n    left: 50%;\n    border: 0px solid transparent;\n    content: ' ';\n    height: 0;\n    width: 0;\n    position: absolute;\n    pointer-events: none;\n    border-top-color: ${p => p.theme.gray800};\n    border-width: 8px;\n    margin-left: -8px;\n  }\n\n  .echarts-for-react div:first-of-type {\n    width: 100% !important;\n  }\n`;\n\nconst BaseChartRef = React.forwardRef<ReactEchartsCore, Props>((props, ref) => (\n  <BaseChart forwardedRef={ref} {...props} />\n));\nBaseChartRef.displayName = 'forwardRef(BaseChart)';\n\nexport default BaseChartRef;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport LoadingMask from 'app/components/loadingMask';\n\ntype Props = {\n  height?: string;\n} & React.HTMLProps<HTMLDivElement>;\n\nconst LoadingPanel = styled(({height: _height, ...props}: Props) => (\n  <div {...props}>\n    <LoadingMask />\n  </div>\n))`\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n`;\n\nLoadingPanel.defaultProps = {\n  height: '200px',\n};\n\nexport default LoadingPanel;\n","import {EChartOption} from 'echarts';\n\nimport theme from 'app/utils/theme';\n\nexport default function LineSeries(\n  props: EChartOption.SeriesLine\n): EChartOption.SeriesLine {\n  return {\n    showSymbol: false,\n    symbolSize: theme.charts.symbolSize,\n    ...props,\n    type: 'line',\n  };\n}\n","import styled from '@emotion/styled';\n\nconst LoadingMask = styled('div')`\n  background-color: ${p => p.theme.gray200};\n  border-radius: ${p => p.theme.borderRadius};\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nexport default LoadingMask;\n","import {EChartOption} from 'echarts';\n\nimport BaseChart from 'app/components/charts/baseChart';\n\nimport {truncationFormatter} from '../utils';\n\ntype ChartProps = React.ComponentProps<typeof BaseChart>;\n\nexport default function Legend(props: ChartProps['legend'] = {}): EChartOption.Legend {\n  const {truncate, ...rest} = props ?? {};\n  const formatter = (value: string) => truncationFormatter(value, truncate ?? 0);\n\n  return {\n    show: true,\n    type: 'scroll',\n    padding: 0,\n    formatter,\n    ...rest,\n  };\n}\n"],"sourceRoot":""}