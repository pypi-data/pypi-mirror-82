{"version":3,"sources":["webpack:///./app/components/charts/barChart.jsx","webpack:///./app/components/charts/series/barSeries.tsx","webpack:///./app/views/discover/utils.tsx","webpack:///./app/views/discover/aggregations/utils.tsx","webpack:///./app/views/discover/missingProjectWarningModal.tsx","webpack:///./app/views/discover/queryBuilder.tsx"],"names":["BarChart","this","props","series","stacked","xAxis","boundaryGap","map","seriesName","data","options","type","BarSeries","name","stack","value","itemStyle","undefined","React","Component","VALID_QUERY_KEYS","getQueryFromQueryString","queryString","queryKeys","Set","result","replace","split","forEach","item","includes","key","has","JSON","parse","decodeURIComponent","getQueryStringFromQuery","query","queryParams","queryProperties","Object","entries","encodeURIComponent","stringify","push","sort","join","getOrderbyFields","queryBuilder","columns","getColumns","getInternal","validAggregations","aggregations","filter","agg","isValidAggregation","hasAggregations","length","hasFields","fields","columnOptions","reduce","acc","isInvalidField","NON_SNUBA_FIELDS","label","aggregationOptions","aggregation","getView","params","requestedView","defaultRequestedView","savedQueryId","queryHasChanged","prev","next","isEqual","pick","qs","parseSavedQuery","savedQuery","id","dateCreated","dateUpdated","createdBy","fetchSavedQuery","organization","queryId","api","Client","endpoint","slug","requestPromise","method","fetchSavedQueries","all","sortBy","createSavedQuery","updateSavedQuery","deleteSavedQuery","generateQueryName","moment","utc","format","cols","func","col","external","getAlias","columnName","tagMatch","match","getExternal","internal","column","MissingProjectWarningModal","project","projects","find","p","toString","t","validProjects","invalidProjects","text","show","onHide","renderProject","priority","onClick","closeModal","DEFAULTS","conditions","orderby","limit","applyDefaults","createQueryBuilder","initial","specificProjects","start","end","range","DEFAULT_STATS_PERIOD","hasGlobalProjectAccess","ConfigStore","get","isSuperuser","access","projectsToUse","defaultProjects","hasAccess","isMember","defaultProjectIds","getProjectIds","projectsToFetchTags","COLUMNS","isTag","tags","updateField","fetch","fetchWithoutLimit","cancelRequests","getQueryByType","load","reset","turbo","then","res","tag","HIDDEN_TAGS","tags_key","SPECIAL_TAGS","PROMOTED_TAGS","getParams","statsPeriod","daterange","field","orderbyField","hasOrderFieldInFields","f","hasOrderFieldInSelectedFields","hasOrderFieldInAggregations","some","cursor","Promise","reject","Error","isAfter","includeAllArgs","responseData","utils","pageLinks","getResponseHeader","clear","originalQuery","groupby","rollup","uniq","q","partition","openModal","deps","parseInt"],"mappings":"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","file":"DiscoverContainer~OverviewDashboard.js","sourcesContent":["import React from 'react';\n\nimport BarSeries from './series/barSeries';\nimport BaseChart from './baseChart';\n\nexport default class BarChart extends React.Component {\n  static propTypes = {\n    ...BaseChart.propTypes,\n  };\n\n  render() {\n    const {series, stacked, xAxis, ...props} = this.props;\n\n    return (\n      <BaseChart\n        {...props}\n        xAxis={xAxis !== null ? {...(xAxis || {}), boundaryGap: true} : null}\n        series={series.map(({seriesName, data, ...options}) =>\n          BarSeries({\n            name: seriesName,\n            stack: stacked ? 'stack1' : null,\n            data: data.map(({value, name, itemStyle}) => {\n              if (itemStyle === undefined) {\n                return [name, value];\n              }\n              return {value: [name, value], itemStyle};\n            }),\n            ...options,\n          })\n        )}\n      />\n    );\n  }\n}\n","import {EChartOption} from 'echarts';\n\nexport default function barSeries(\n  props: EChartOption.SeriesBar = {}\n): EChartOption.SeriesBar {\n  return {\n    ...props,\n    type: 'bar',\n  };\n}\n","import isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport moment from 'moment';\nimport * as qs from 'query-string';\n\nimport {Client} from 'app/api';\n\nimport {isValidAggregation} from './aggregations/utils';\nimport {NON_SNUBA_FIELDS} from './data';\nimport {Aggregation, Column, ReactSelectOption, SavedQuery} from './types';\n\nconst VALID_QUERY_KEYS = [\n  'projects',\n  'fields',\n  'conditions',\n  'aggregations',\n  'range',\n  'start',\n  'end',\n  'orderby',\n  'limit',\n];\n\nexport function getQueryFromQueryString(queryString: string): {[key: string]: any} {\n  const queryKeys = new Set([...VALID_QUERY_KEYS, 'utc']);\n  const result: {[key: string]: any} = {};\n  const parsedQuery = queryString.replace(/^\\?|\\/$/g, '').split('&');\n  parsedQuery.forEach((item: string) => {\n    if (item.includes('=')) {\n      const [key, value] = item.split('=');\n      if (queryKeys.has(key)) {\n        result[key] = JSON.parse(decodeURIComponent(value));\n      }\n    }\n  });\n  return result;\n}\n\nexport function getQueryStringFromQuery(\n  query: {[key: string]: any},\n  queryParams: object = {}\n): string {\n  const queryProperties = Object.entries(query).map(\n    ([key, value]) => `${key}=${encodeURIComponent(JSON.stringify(value))}`\n  );\n\n  Object.entries(queryParams).forEach(([key, value]) => {\n    queryProperties.push(`${key}=${value}`);\n  });\n\n  return `?${queryProperties.sort().join('&')}`;\n}\n\nexport function getOrderbyFields(queryBuilder: any): ReactSelectOption[] {\n  const columns = queryBuilder.getColumns();\n  const query = queryBuilder.getInternal();\n\n  // If there are valid aggregations, only allow summarized fields and aggregations in orderby\n  const validAggregations = query.aggregations.filter((agg: Aggregation) =>\n    isValidAggregation(agg, columns)\n  );\n\n  const hasAggregations = validAggregations.length > 0;\n\n  const hasFields = query.fields.length > 0;\n\n  const columnOptions = columns.reduce((acc: ReactSelectOption[], {name}: Column) => {\n    if (hasAggregations) {\n      const isInvalidField = hasFields && !query.fields.includes(name);\n      if (!hasFields || isInvalidField) {\n        return acc;\n      }\n    }\n\n    // Never allow ordering by project.name or issue.id since this can't be done in Snuba\n    if (NON_SNUBA_FIELDS.includes(name)) {\n      return acc;\n    }\n\n    return [...acc, {value: name, label: name}];\n  }, []);\n\n  const aggregationOptions = validAggregations\n    .map((aggregation: Aggregation) => aggregation[2])\n    .reduce(\n      (acc: Aggregation[], agg: Aggregation) => [...acc, {value: agg, label: agg}],\n      []\n    );\n\n  return [...columnOptions, ...aggregationOptions];\n}\n\n/**\n * Takes the params object and the requested view querystring and returns the\n * correct view to be displayed\n */\nexport function getView(params: any, requestedView: string): string {\n  let defaultRequestedView = requestedView;\n  if (typeof params.savedQueryId !== 'undefined') {\n    defaultRequestedView = 'saved';\n  }\n\n  switch (defaultRequestedView) {\n    case 'saved':\n      return 'saved';\n    default:\n      return 'query';\n  }\n}\n\n/**\n * Returns true if the underlying discover query has changed based on the\n * querystring, otherwise false.\n *\n * @param prev previous location.search string\n * @param next next location.search string\n */\nexport function queryHasChanged(prev: string, next: string): boolean {\n  return !isEqual(\n    pick(qs.parse(prev), VALID_QUERY_KEYS),\n    pick(qs.parse(next), VALID_QUERY_KEYS)\n  );\n}\n\n/**\n * Takes a saved query and strips associated query metadata in order to match\n * our internal representation of queries.\n */\nexport function parseSavedQuery(savedQuery: any): SavedQuery {\n  const {\n    id: _id,\n    name: _name,\n    dateCreated: _dateCreated,\n    dateUpdated: _dateUpdated,\n    createdBy: _createdBy,\n    ...query\n  } = savedQuery;\n  return query;\n}\n\nexport function fetchSavedQuery(organization: any, queryId: string): Promise<any> {\n  const api = new Client();\n  const endpoint = `/organizations/${organization.slug}/discover/saved/${queryId}/`;\n\n  return api.requestPromise(endpoint, {\n    method: 'GET',\n  } as any); // TODO(ts): Remove as any\n}\n\nexport function fetchSavedQueries(organization: any): Promise<any> {\n  const api = new Client();\n  const endpoint = `/organizations/${organization.slug}/discover/saved/`;\n\n  return api.requestPromise(endpoint, {\n    method: 'GET',\n    query: {all: 1, query: 'version:1', sortBy: '-dateUpdated'},\n  } as any); // TODO(ts): Remove as any\n}\n\nexport function createSavedQuery(organization: any, data: any): Promise<any> {\n  const api = new Client();\n\n  const endpoint = `/organizations/${organization.slug}/discover/saved/`;\n  return api.requestPromise(endpoint, {\n    data,\n    method: 'POST',\n  } as any); // TODO(ts): Remove as any\n}\n\nexport function updateSavedQuery(organization: any, id: any, data: any): Promise<any> {\n  const api = new Client();\n  const endpoint = `/organizations/${organization.slug}/discover/saved/${id}/`;\n\n  return api.requestPromise(endpoint, {\n    data,\n    method: 'PUT',\n  } as any); // TODO(ts): Remove as any\n}\n\nexport function deleteSavedQuery(organization: any, id: any): Promise<any> {\n  const api = new Client();\n  const endpoint = `/organizations/${organization.slug}/discover/saved/${id}/`;\n\n  return api.requestPromise(endpoint, {\n    method: 'DELETE',\n  } as any); // TODO(ts): Remove as any\n}\n\n/**\n * Generate a saved query name based on the current timestamp\n */\nexport function generateQueryName(): string {\n  return `Result - ${moment.utc().format('MMM DD HH:mm:ss')}`;\n}\n","import {Column, Aggregation} from '../types';\n\n/**\n * Returns true if an aggregation is valid and false if not\n *\n * @param aggregation Aggregation in external Snuba format\n * @param cols List of column objects\n * @param cols.name Column name\n * @param cols.type Type of column\n * @returns True if valid aggregation, false if not\n */\nexport function isValidAggregation(aggregation: Aggregation, cols: Column[]): boolean {\n  const columns = new Set(cols.map(({name}) => name));\n  const [func, col] = aggregation;\n\n  if (!func) {\n    return false;\n  }\n\n  if (func === 'count()') {\n    return !col;\n  }\n\n  if (func === 'uniq') {\n    return columns.has(col || '');\n  }\n\n  if (func === 'avg' || func === 'sum') {\n    const validCols = new Set(\n      cols.filter(({type}) => type === 'number').map(({name}) => name)\n    );\n    return validCols.has(col || '');\n  }\n\n  return false;\n}\n\n/**\n * Converts aggregation from external Snuba format to internal format for dropdown\n *\n * @param external Aggregation in external Snuba format\n * @return Aggregation in internal format\n */\nexport function getInternal(external: Aggregation): string {\n  const [func, col] = external;\n\n  if (!func) {\n    return '';\n  }\n\n  if (func === 'count()') {\n    return 'count';\n  }\n\n  if (func === 'uniq') {\n    return `uniq(${col})`;\n  }\n\n  if (func === 'avg') {\n    return `avg(${col})`;\n  }\n\n  if (func === 'sum') {\n    return `sum(${col})`;\n  }\n\n  return func;\n}\n\n/**\n * Returns an alias for a given column name, which is either just the column name\n * or a string with an underscore instead of square brackets for tags. We'll also\n * replace the characters `.`, `:` and `-` from aliases.\n *\n * @param columnName Name of column\n * @return Alias\n */\nfunction getAlias(columnName: string): string {\n  const tagMatch = columnName.match(/^tags\\[(.+)]$/);\n  return tagMatch\n    ? `tags_${tagMatch[1].replace(/[.:-]/, '_')}`\n    : columnName.replace('.', '_');\n}\n\n/**\n * Converts aggregation internal string format to external Snuba representation\n *\n * @param internal Aggregation in internal format\n * @return Aggregation in external Snuba format\n */\nexport function getExternal(internal: string): Aggregation {\n  const uniqRegex = /^uniq\\((.+)\\)$/;\n  const avgRegex = /^avg\\((.+)\\)$/;\n  const sumRegex = /^sum\\((.+)\\)$/;\n\n  let match = internal.match(uniqRegex);\n  if (match && match[1]) {\n    const column = match[1];\n    return ['uniq', column, `uniq_${getAlias(column)}`];\n  }\n\n  match = internal.match(avgRegex);\n  if (match && match[1]) {\n    const column = match[1];\n    return ['avg', column, `avg_${getAlias(column)}`];\n  }\n\n  match = internal.match(sumRegex);\n  if (match && match[1]) {\n    const column = match[1];\n    return ['sum', column, `sum_${getAlias(column)}`];\n  }\n\n  return ['count()', null, 'count'];\n}\n","import React from 'react';\nimport Modal, {Header, Body, Footer} from 'react-bootstrap/lib/Modal';\n\nimport {Organization} from 'app/types';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\n\ntype MissingProjectWarningModalProps = {\n  organization: Organization;\n  validProjects: number[];\n  invalidProjects: number[];\n  closeModal: () => void;\n};\n\nexport default class MissingProjectWarningModal extends React.Component<\n  MissingProjectWarningModalProps\n> {\n  renderProject(id: number) {\n    const project = this.props.organization.projects.find(p => p.id === id.toString());\n    return <li key={id}>{project ? project.slug : t(`Unknown project ${id}`)}</li>;\n  }\n  render() {\n    const {validProjects, invalidProjects} = this.props;\n\n    const text = validProjects.length\n      ? t(`You are not currently a member of all of the projects specified by\n          this query. As a result, data for the following projects will be\n          omitted from the displayed results:`)\n      : t(`You are not currently a member of any of the following projects specified\n           by this query. You may still run this query against other projects you\n           have access to.`);\n\n    return (\n      <Modal show onHide={() => {}}>\n        <Header>{t('Project access')}</Header>\n        <Body>\n          <p>{text}</p>\n          <ul>{invalidProjects.map(id => this.renderProject(id))}</ul>\n        </Body>\n        <Footer>\n          <Button priority=\"primary\" onClick={this.props.closeModal}>\n            {t('View results')}\n          </Button>\n        </Footer>\n      </Modal>\n    );\n  }\n}\n","import React from 'react';\nimport uniq from 'lodash/uniq';\nimport partition from 'lodash/partition';\nimport moment from 'moment-timezone';\n\nimport {Client} from 'app/api';\nimport {DEFAULT_STATS_PERIOD} from 'app/constants';\nimport {t} from 'app/locale';\nimport {Project, Organization} from 'app/types';\nimport {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';\nimport {openModal} from 'app/actionCreators/modal';\nimport ConfigStore from 'app/stores/configStore';\n\nimport MissingProjectWarningModal from './missingProjectWarningModal';\nimport {COLUMNS, PROMOTED_TAGS, SPECIAL_TAGS, HIDDEN_TAGS} from './data';\nimport {isValidAggregation} from './aggregations/utils';\nimport {Aggregation, Column, Query, SnubaResult} from './types';\n\nconst API_LIMIT = 10000;\n\nconst DEFAULTS = {\n  projects: [],\n  fields: ['id', 'issue', 'project.name', 'platform', 'timestamp'],\n  conditions: [],\n  aggregations: [],\n  orderby: '-timestamp',\n  limit: 1000,\n};\n\nfunction applyDefaults(query: any) {\n  Object.entries(DEFAULTS).forEach(([key, value]) => {\n    if (!(key in query)) {\n      query[key] = value;\n    }\n  });\n  return query;\n}\n\nexport interface QueryBuilder {\n  load(): void;\n  getInternal: () => any;\n  getExternal: () => any;\n  updateField: (field: string, value: any) => void;\n  fetch: (data?: any, cursor?: string) => Promise<any>;\n  fetchWithoutLimit: (data?: any) => Promise<any>;\n  cancelRequests(): void;\n  getQueryByType(originalQuery: any, type: string): Query;\n  getColumns(): Column[];\n  reset(q: any): void;\n}\n\n/**\n * This function is responsible for storing and managing updates to query state,\n * It applies sensible defaults if query parameters are not provided on\n * initialization.\n */\nexport default function createQueryBuilder(\n  initial = {},\n  organization: Organization,\n  specificProjects?: Project[]\n): QueryBuilder {\n  const api = new Client();\n  let query = applyDefaults(initial);\n\n  if (!query.start && !query.end && !query.range) {\n    query.range = DEFAULT_STATS_PERIOD;\n  }\n\n  const hasGlobalProjectAccess =\n    ConfigStore.get('user').isSuperuser || organization.access.includes('org:admin');\n\n  // TODO(lightweight-org): This needs to be refactored so that queries\n  // do not depend on organization.projects\n  const projectsToUse = specificProjects ?? organization.projects;\n  const defaultProjects = projectsToUse.filter(projects =>\n    hasGlobalProjectAccess ? projects.hasAccess : projects.isMember\n  );\n\n  const defaultProjectIds = getProjectIds(defaultProjects);\n\n  const projectsToFetchTags = getProjectIds(\n    hasGlobalProjectAccess ? projectsToUse : defaultProjects\n  );\n\n  const columns = COLUMNS.map(col => ({...col, isTag: false}));\n  let tags: Column[] = [];\n\n  return {\n    getInternal,\n    getExternal,\n    updateField,\n    fetch,\n    fetchWithoutLimit,\n    cancelRequests,\n    getQueryByType,\n    getColumns,\n    load,\n    reset,\n  };\n\n  /**\n   * Loads tags keys for user's projects and updates `tags` with the result.\n   * If the request fails updates `tags` to be the hardcoded list of predefined\n   * promoted tags.\n   *\n   * @returns {Promise<Void>}\n   */\n  function load() {\n    type TagData = {\n      tags_key: string;\n    };\n\n    return fetch({\n      projects: projectsToFetchTags,\n      fields: ['tags_key'],\n      aggregations: [['count()', null, 'count']],\n      orderby: '-count',\n      range: '90d',\n      turbo: true,\n    })\n      .then((res: SnubaResult) => {\n        tags = res.data\n          .filter((tag: TagData) => !HIDDEN_TAGS.includes(tag.tags_key))\n          .map((tag: TagData) => {\n            const type = SPECIAL_TAGS[tag.tags_key] || 'string';\n            return {name: tag.tags_key, type, isTag: true};\n          });\n      })\n      .catch(() => {\n        tags = PROMOTED_TAGS.map((tag: string) => {\n          const type = SPECIAL_TAGS[tag] || 'string';\n          return {name: tag, type, isTag: true};\n        });\n      });\n  }\n\n  /**\n   * Returns the query object (internal state of the query)\n   *\n   * @returns {Object}\n   */\n  function getInternal() {\n    return query;\n  }\n\n  /**\n   * Returns the external representation of the query as required by Snuba.\n   * Applies default projects and fields if these properties were not specified\n   * by the user.\n   *\n   * @returns {Object}\n   */\n  function getExternal() {\n    // Default to all projects if none is selected\n    const projects = query.projects.length ? query.projects : defaultProjectIds;\n\n    // Default to DEFAULT_STATS_PERIOD when no date range selected (either relative or absolute)\n    const {statsPeriod, start, end} = getParams({...query, statsPeriod: query.range});\n    const hasAbsolute = start && end;\n    const daterange = {\n      ...(hasAbsolute && {start, end}),\n      ...(statsPeriod && {range: statsPeriod}),\n    };\n\n    // Default to all fields if there are none selected, and no aggregation is\n    // specified\n    const useDefaultFields = !query.fields.length && !query.aggregations.length;\n\n    const fields = useDefaultFields ? getColumns().map(({name}) => name) : query.fields;\n\n    // Remove orderby property if it is not set\n    if (!query.orderby) {\n      delete query.orderby;\n    }\n\n    return {\n      ...query,\n      ...daterange,\n      projects,\n      fields,\n    };\n  }\n\n  /**\n   * Updates field in query to value provided. Also updates orderby and limit\n   * parameters if this causes their values to become invalid.\n   *\n   * @param {String} field Name of field to be updated\n   * @param {*} value Value to update field to\n   * @returns {Void}\n   */\n  function updateField(field: string, value: any) {\n    query[field] = value;\n\n    // Ignore non valid aggregations (e.g. user halfway inputting data)\n    const validAggregations = query.aggregations.filter((agg: Aggregation) =>\n      isValidAggregation(agg, getColumns())\n    );\n\n    const orderbyField = (query.orderby || '').replace(/^-/, '');\n    const hasOrderFieldInFields =\n      getColumns().find(f => f.name === orderbyField) !== undefined;\n    const hasOrderFieldInSelectedFields = query.fields.includes(orderbyField);\n    const hasOrderFieldInAggregations = query.aggregations.some(\n      (agg: Aggregation) => orderbyField === agg[2]\n    );\n\n    const hasInvalidOrderbyField = validAggregations.length\n      ? !hasOrderFieldInSelectedFields && !hasOrderFieldInAggregations\n      : !hasOrderFieldInFields;\n\n    // If orderby value becomes invalid, update it to the first valid aggregation\n    if (hasInvalidOrderbyField) {\n      if (validAggregations.length > 0) {\n        query.orderby = `-${validAggregations[0][2]}`;\n      } else {\n        query.orderby = '-timestamp';\n      }\n    }\n\n    // Snuba doesn't allow limit without orderby\n    if (!query.orderby) {\n      query.limit = null;\n    }\n  }\n\n  /**\n   * Fetches either the query provided as an argument or the current query state\n   * if this is not provided and returns the result wrapped in a promise\n   *\n   * @param {Object} [data] Optional field to provide data to fetch\n   * @returns {Promise<Object|Error>}\n   */\n  function fetch(data = getExternal(), cursor = '0:0:1') {\n    const limit = data.limit || 1000;\n    const endpoint = `/organizations/${organization.slug}/discover/query/?per_page=${limit}&cursor=${cursor}`;\n\n    // Reject immediately if no projects are available\n    if (!data.projects.length) {\n      return Promise.reject(new Error(t('No projects selected')));\n    }\n\n    if (typeof data.limit === 'number') {\n      if (data.limit < 1 || data.limit > 1000) {\n        return Promise.reject(new Error(t('Invalid limit parameter')));\n      }\n    }\n\n    if (moment.utc(data.start).isAfter(moment.utc(data.end))) {\n      return Promise.reject(new Error('Start date cannot be after end date'));\n    }\n\n    const {start, end, statsPeriod} = getParams({...data, statsPeriod: data.range});\n\n    if (start && end) {\n      data.start = start;\n      data.end = end;\n    }\n\n    if (statsPeriod) {\n      data.range = statsPeriod;\n    }\n\n    return api\n      .requestPromise(endpoint, {includeAllArgs: true, method: 'POST', data} as any)\n      .then(([responseData, _, utils]) => {\n        responseData.pageLinks = utils.getResponseHeader('Link');\n        return responseData;\n      })\n      .catch(() => {\n        throw new Error(t('An error occurred'));\n      });\n  }\n\n  /**\n   * Fetches either the query provided as an argument or the current query state\n   * if this is not provided and returns the result wrapped in a promise\n   *\n   * This is similar to `fetch` but does not support pagination and mirrors the API limit\n   *\n   * @param {Object} [data] Optional field to provide data to fetch\n   * @returns {Promise<Object|Error>}\n   */\n  function fetchWithoutLimit(data = getExternal()) {\n    const endpoint = `/organizations/${organization.slug}/discover/query/`;\n\n    // Reject immediately if no projects are available\n    if (!data.projects.length) {\n      return Promise.reject(new Error(t('No projects selected')));\n    }\n\n    if (typeof data.limit === 'number') {\n      if (data.limit < 1 || data.limit > API_LIMIT) {\n        return Promise.reject(new Error(t('Invalid limit parameter')));\n      }\n    }\n\n    if (moment.utc(data.start).isAfter(moment.utc(data.end))) {\n      return Promise.reject(new Error('Start date cannot be after end date'));\n    }\n\n    const {start, end, statsPeriod} = getParams({...data, statsPeriod: data.range});\n\n    if (start && end) {\n      data.start = start;\n      data.end = end;\n    }\n\n    if (statsPeriod) {\n      data.range = statsPeriod;\n    }\n\n    return api.requestPromise(endpoint, {method: 'POST', data} as any).catch(() => {\n      throw new Error(t('Error with query'));\n    });\n  }\n\n  /**\n   * Cancels any in-flight API requests made via `fetch` or `fetchWithoutLimit`\n   *\n   * @returns {Void}\n   */\n  function cancelRequests() {\n    api.clear();\n  }\n\n  /**\n   * Get the actual query to be run for each visualization type\n   *\n   * @param {Object} originalQuery Original query input by user (external query representation)\n   * @param {String} Type to fetch - currently either byDay or base\n   * @returns {Object} Modified query to be run for that type\n   */\n  function getQueryByType(originalQuery: any, type: string): Query {\n    if (type === 'byDayQuery') {\n      return {\n        ...originalQuery,\n        groupby: ['time'],\n        rollup: 60 * 60 * 24,\n        orderby: '-time',\n        limit: 5000,\n      };\n    }\n\n    // If id or issue.id is present in query fields, always fetch the project.id\n    // so we can generate links\n    if (type === 'baseQuery') {\n      return (originalQuery.fields || []).some(\n        (field: string) => field === 'id' || field === 'issue.id'\n      )\n        ? {\n            ...originalQuery,\n            fields: uniq([...originalQuery.fields, 'project.id']),\n          }\n        : originalQuery;\n    }\n\n    throw new Error('Invalid query type');\n  }\n\n  /**\n   * Returns all column objects, including tags\n   *\n   * @returns {Array<{name: String, type: String}>}\n   */\n  function getColumns() {\n    return [...columns, ...tags];\n  }\n\n  /**\n   * Resets the query to defaults or the query provided\n   * Displays a warning if user does not have access to any project in the query\n   *\n   * @param {Object} [q] optional query to reset to\n   * @returns {Void}\n   */\n  function reset(q: any) {\n    const [validProjects, invalidProjects] = partition(q.projects || [], project =>\n      // -1 means all projects\n      project === -1 ? true : defaultProjectIds.includes(project)\n    );\n\n    if (invalidProjects.length) {\n      openModal((deps: any) => (\n        <MissingProjectWarningModal\n          organization={organization}\n          validProjects={validProjects}\n          invalidProjects={invalidProjects}\n          {...deps}\n        />\n      ));\n    }\n\n    q.projects = validProjects;\n\n    query = applyDefaults(q);\n  }\n}\n\nfunction getProjectIds(projects: Project[]) {\n  return projects.map(project => parseInt(project.id, 10));\n}\n"],"sourceRoot":""}