{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/admin/adminOverview/apiChart.jsx","webpack:///./app/views/admin/adminOverview/eventChart.jsx","webpack:///./app/views/admin/adminOverview/index.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","ApiChart","createReactClass","getInitialState","error","loading","rawData","componentWillMount","fetchData","componentWillReceiveProps","nextProps","props","since","setState","forEach","statName","api","request","method","data","resolution","key","success","prevState","requestFinished","state","processOrgData","processRawSeries","series","map","item","x","y","getChartSeries","color","shadowSize","label","render","onRetry","height","className","withApi","EventChart","displayName","stats","received","rejected","systemTotal","accepted","oReceived","oRejected","sReceived","sRejected","aReceived","point","idx","dReceived","dRejected","ts","undefined","avgRate","parseInt","Object","keys","AdminOverview","Date","getTime","t","id"],"mappings":"4qBAQqBA,E,uIAKjB,MAAO,K,+BAIP,IAAMC,EAAQC,KAAKC,WACnB,OACE,YAAC,IAAD,CAAeF,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,WACjBC,KAAKE,uB,GATJC,KAHWL,E,oRCCfM,EAAWC,IAAiB,wBAOhCC,gBAPgC,WAQ9B,MAAO,CACLC,OAAO,EACPC,SAAS,EACTC,QAAS,CACP,wCAAyC,KACzC,wCAAyC,KACzC,wCAAyC,QAK/CC,mBAnBgC,WAoB9BV,KAAKW,aAGPC,0BAvBgC,SAuBNC,GACpBb,KAAKc,MAAMC,QAAUF,EAAUE,OACjCf,KAAKgB,SAAShB,KAAKM,kBAAmBN,KAAKW,YAI/CA,UA7BgC,WA6BpB,WACW,CACnB,wCACA,wCACA,yCAGWM,SAAQ,SAAAC,GACnB,EAAKJ,MAAMK,IAAIC,QAAQ,mBAAoB,CACzCC,OAAQ,MACRC,KAAM,CACJP,MAAO,EAAKD,MAAMC,MAClBQ,WAAY,EAAKT,MAAMS,WACvBC,IAAKN,GAEPO,QAAS,SAAAH,GACP,EAAKN,UAAS,SAAAU,GACZ,IAAMjB,EAAUiB,EAAUjB,QAE1B,OADAA,EAAQS,GAAYI,EACb,CACLb,aAED,EAAKkB,kBAEVpB,MAAO,WACL,EAAKS,SAAS,CACZT,OAAO,WAOjBoB,gBA9DgC,WA8Dd,IACTlB,EAAWT,KAAK4B,MAAhBnB,QACHA,EAAQ,iBAAmBA,EAAQ,mBACrCT,KAAK6B,iBAGLpB,EAAQ,0CACRA,EAAQ,0CACRA,EAAQ,0CAERT,KAAKgB,SAAS,CACZR,SAAS,KAKfsB,iBA9EgC,SA8EfC,GACf,OAAOA,EAAOC,KAAI,SAAAC,GAAI,MAAK,CAACC,EAAGD,EAAK,GAAIE,EAAGF,EAAK,QAGlDG,eAlFgC,WAkFf,IACR3B,EAAWT,KAAK4B,MAAhBnB,QACP,MAAO,CACL,CACEa,KAAMtB,KAAK8B,iBAAiBrB,EAAQ,0CACpC4B,MAAO,oBACPC,WAAY,EACZC,MAAO,OAET,CACEjB,KAAMtB,KAAK8B,iBAAiBrB,EAAQ,0CACpC4B,MAAO,mBACPE,MAAO,OAET,CACEjB,KAAMtB,KAAK8B,iBAAiBrB,EAAQ,0CACpC4B,MAAO,mBACPE,MAAO,SAKbC,OAxGgC,WAyG9B,OAAIxC,KAAK4B,MAAMpB,QACN,YAAC,UAAD,MACER,KAAK4B,MAAMrB,MACb,YAAC,IAAD,CAAckC,QAASzC,KAAKW,YAGnC,YAAC,IAAD,CACEoB,OAAQ/B,KAAKoC,iBACbM,OAAQ,IACRC,UAAU,yBAMHC,cAAQxC,GCxHjByC,EAAaxC,IAAiB,CAClCyC,YAAa,aAQbxC,gBATkC,WAUhC,MAAO,CACLC,OAAO,EACPC,SAAS,EACTC,QAAS,CACP,eAAgB,KAChB,iBAAkB,MAEpBsC,MAAO,CAACC,SAAU,GAAIC,SAAU,IAChCC,YAAa,CAACF,SAAU,EAAGC,SAAU,EAAGE,SAAU,KAItDzC,mBAtBkC,WAuBhCV,KAAKW,aAGPC,0BA1BkC,SA0BRC,GACpBb,KAAKc,MAAMC,QAAUF,EAAUE,OACjCf,KAAKgB,SAAShB,KAAKM,kBAAmBN,KAAKW,YAI/CA,UAhCkC,WAgCtB,WACW,CAAC,eAAgB,kBAEzBM,SAAQ,SAAAC,GAGnB,EAAKJ,MAAMK,IAAIC,QAAQ,mBAAoB,CACzCC,OAAQ,MACRC,KAAM,CACJP,MAAO,EAAKD,MAAMC,MAClBQ,WAAY,EAAKT,MAAMS,WACvBC,IAAKN,GAEPO,QAAS,SAAAH,GACP,EAAKN,UAAS,SAAAU,GACZ,IAAMjB,EAAUiB,EAAUjB,QAE1B,OADAA,EAAQS,GAAYI,EACb,CACLb,aAED,EAAKkB,kBAEVpB,MAAO,WACL,EAAKS,SAAS,CACZT,OAAO,WAOjBoB,gBA/DkC,WA+DhB,IACTlB,EAAWT,KAAK4B,MAAhBnB,QACHA,EAAQ,iBAAmBA,EAAQ,mBACrCT,KAAK6B,kBAITA,eAtEkC,WAsEjB,IACRpB,EAAWT,KAAK4B,MAAhBnB,QACH2C,EAAY,EACZC,EAAY,EACVC,EAAY,GACZC,EAAY,GACZC,EAAY,CAAC,EAAG,GACtB/C,EAAQ,gBAAgBQ,SAAQ,SAACwC,EAAOC,GACtC,IAAMC,EAAYF,EAAM,GAClBG,EAAYnD,EAAQ,kBAAkBiD,GAAK,GAC3CG,EAAKJ,EAAM,QACKK,IAAlBR,EAAUO,IACZP,EAAUO,GAAMF,EAChBJ,EAAUM,GAAMD,IAEhBN,EAAUO,IAAOF,EACjBJ,EAAUM,IAAOD,GAEnBR,GAAaO,EACbN,GAAaO,EACTD,EAAY,IACdH,EAAU,IAAMG,EAChBH,EAAU,IAAM,MAGpBxD,KAAKgB,SAAS,CACZkC,YAAa,CACXF,SAAUI,EACVH,SAAUI,EACVF,SAAUC,EAAYC,EACtBU,QAASC,SAASR,EAAU,GAAKA,EAAU,GAAK,GAAI,KAEtDT,MAAO,CACLE,SAAUgB,OAAOC,KAAKX,GAAWvB,KAAI,SAAA6B,GAAE,MAAK,CAAC3B,EAAG2B,EAAI1B,EAAGoB,EAAUM,IAAO,SACxEV,SAAUc,OAAOC,KAAKZ,GAAWtB,KAAI,SAAA6B,GAAE,MACrC,CACE3B,EAAG2B,EAAI1B,EAAGmB,EAAUO,GAAMN,EAAUM,QAG1CrD,SAAS,KAIb4B,eAjHkC,WAiHjB,IACRW,EAAS/C,KAAK4B,MAAdmB,MAEP,MAAO,CACL,CACEzB,KAAMyB,EAAMI,SACZZ,MAAO,WACPF,MAAO,yBAET,CACEf,KAAMyB,EAAME,SACZZ,MAAO,uBACPE,MAAO,aAKbC,OAlIkC,WAmIhC,OAAIxC,KAAK4B,MAAMpB,QACN,YAAC,UAAD,MACER,KAAK4B,MAAMrB,MACb,YAAC,IAAD,CAAckC,QAASzC,KAAKW,YAGnC,YAAC,IAAD,CACEoB,OAAQ/B,KAAKoC,iBACbM,OAAQ,IACRC,UAAU,yBAMHC,cAAQC,G,4aCnJFsB,E,uIAEjB,MAAO,mB,qCAIP,MAAO,K,mCAIP,IACMpD,GAAQ,IAAIqD,MAAOC,UAAY,IAAO,OAC5C,OACE,uBACE,sBAAKC,YAAE,oBAEP,mBAAK3B,UAAU,OACb,mBAAKA,UAAU,cACb,sBACG2B,YAAE,oBACH,oBAAMC,GAAG,OAAO5B,UAAU,iBAG9B,YAAC,EAAD,CAAY5B,MAAOA,EAAOQ,WAbb,QAgBf,mBAAKoB,UAAU,OACb,mBAAKA,UAAU,cACb,sBAAK2B,YAAE,mBAET,YAAC,EAAD,CAAUvD,MAAOA,EAAOQ,WApBX,a,GAVoBzB","file":"AdminOverview.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\n\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport StackedBarChart from 'app/components/stackedBarChart';\nimport withApi from 'app/utils/withApi';\n\nconst ApiChart = createReactClass({\n  propTypes: {\n    api: PropTypes.object.isRequired,\n    since: PropTypes.number.isRequired,\n    resolution: PropTypes.string.isRequired,\n  },\n\n  getInitialState() {\n    return {\n      error: false,\n      loading: true,\n      rawData: {\n        'client-api.all-versions.responses.2xx': null,\n        'client-api.all-versions.responses.4xx': null,\n        'client-api.all-versions.responses.5xx': null,\n      },\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.since !== nextProps.since) {\n      this.setState(this.getInitialState(), this.fetchData);\n    }\n  },\n\n  fetchData() {\n    const statNameList = [\n      'client-api.all-versions.responses.2xx',\n      'client-api.all-versions.responses.4xx',\n      'client-api.all-versions.responses.5xx',\n    ];\n\n    statNameList.forEach(statName => {\n      this.props.api.request('/internal/stats/', {\n        method: 'GET',\n        data: {\n          since: this.props.since,\n          resolution: this.props.resolution,\n          key: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawData = prevState.rawData;\n            rawData[statName] = data;\n            return {\n              rawData,\n            };\n          }, this.requestFinished);\n        },\n        error: () => {\n          this.setState({\n            error: true,\n          });\n        },\n      });\n    });\n  },\n\n  requestFinished() {\n    const {rawData} = this.state;\n    if (rawData['events.total'] && rawData['events.dropped']) {\n      this.processOrgData();\n    }\n    if (\n      rawData['client-api.all-versions.responses.2xx'] &&\n      rawData['client-api.all-versions.responses.4xx'] &&\n      rawData['client-api.all-versions.responses.5xx']\n    ) {\n      this.setState({\n        loading: false,\n      });\n    }\n  },\n\n  processRawSeries(series) {\n    return series.map(item => ({x: item[0], y: item[1]}));\n  },\n\n  getChartSeries() {\n    const {rawData} = this.state;\n    return [\n      {\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.4xx']),\n        color: 'rgb(86, 175, 232)',\n        shadowSize: 0,\n        label: '4xx',\n      },\n      {\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.5xx']),\n        color: 'rgb(244, 63, 32)',\n        label: '5xx',\n      },\n      {\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.2xx']),\n        color: 'rgb(78, 222, 73)',\n        label: '2xx',\n      },\n    ];\n  },\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n    return (\n      <StackedBarChart\n        series={this.getChartSeries()}\n        height={150}\n        className=\"standard-barchart\"\n      />\n    );\n  },\n});\n\nexport default withApi(ApiChart);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\n\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport StackedBarChart from 'app/components/stackedBarChart';\nimport withApi from 'app/utils/withApi';\n\nconst EventChart = createReactClass({\n  displayName: 'eventChart',\n\n  propTypes: {\n    api: PropTypes.object.isRequired,\n    since: PropTypes.number.isRequired,\n    resolution: PropTypes.string.isRequired,\n  },\n\n  getInitialState() {\n    return {\n      error: false,\n      loading: true,\n      rawData: {\n        'events.total': null,\n        'events.dropped': null,\n      },\n      stats: {received: [], rejected: []},\n      systemTotal: {received: 0, rejected: 0, accepted: 0},\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.since !== nextProps.since) {\n      this.setState(this.getInitialState(), this.fetchData);\n    }\n  },\n\n  fetchData() {\n    const statNameList = ['events.total', 'events.dropped'];\n\n    statNameList.forEach(statName => {\n      // query the organization stats via a separate call as its possible the project stats\n      // are too heavy\n      this.props.api.request('/internal/stats/', {\n        method: 'GET',\n        data: {\n          since: this.props.since,\n          resolution: this.props.resolution,\n          key: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawData = prevState.rawData;\n            rawData[statName] = data;\n            return {\n              rawData,\n            };\n          }, this.requestFinished);\n        },\n        error: () => {\n          this.setState({\n            error: true,\n          });\n        },\n      });\n    });\n  },\n\n  requestFinished() {\n    const {rawData} = this.state;\n    if (rawData['events.total'] && rawData['events.dropped']) {\n      this.processOrgData();\n    }\n  },\n\n  processOrgData() {\n    const {rawData} = this.state;\n    let oReceived = 0;\n    let oRejected = 0;\n    const sReceived = {};\n    const sRejected = {};\n    const aReceived = [0, 0]; // received, points\n    rawData['events.total'].forEach((point, idx) => {\n      const dReceived = point[1];\n      const dRejected = rawData['events.dropped'][idx][1];\n      const ts = point[0];\n      if (sReceived[ts] === undefined) {\n        sReceived[ts] = dReceived;\n        sRejected[ts] = dRejected;\n      } else {\n        sReceived[ts] += dReceived;\n        sRejected[ts] += dRejected;\n      }\n      oReceived += dReceived;\n      oRejected += dRejected;\n      if (dReceived > 0) {\n        aReceived[0] += dReceived;\n        aReceived[1] += 1;\n      }\n    });\n    this.setState({\n      systemTotal: {\n        received: oReceived,\n        rejected: oRejected,\n        accepted: oReceived - oRejected,\n        avgRate: parseInt(aReceived[0] / aReceived[1] / 60, 10),\n      },\n      stats: {\n        rejected: Object.keys(sRejected).map(ts => ({x: ts, y: sRejected[ts] || null})),\n        accepted: Object.keys(sReceived).map(ts =>\n          // total number of events accepted (received - rejected)\n          ({x: ts, y: sReceived[ts] - sRejected[ts]})\n        ),\n      },\n      loading: false,\n    });\n  },\n\n  getChartSeries() {\n    const {stats} = this.state;\n\n    return [\n      {\n        data: stats.accepted,\n        label: 'Accepted',\n        color: 'rgba(86, 175, 232, 1)',\n      },\n      {\n        data: stats.rejected,\n        color: 'rgba(244, 63, 32, 1)',\n        label: 'Dropped',\n      },\n    ];\n  },\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n    return (\n      <StackedBarChart\n        series={this.getChartSeries()}\n        height={150}\n        className=\"standard-barchart\"\n      />\n    );\n  },\n});\n\nexport default withApi(EventChart);\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\n\nimport ApiChart from './apiChart';\nimport EventChart from './eventChart';\n\nexport default class AdminOverview extends AsyncView {\n  getTitle() {\n    return 'Admin Overview';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  renderBody() {\n    const resolution = '1h';\n    const since = new Date().getTime() / 1000 - 3600 * 24 * 7;\n    return (\n      <div>\n        <h3>{t('System Overview')}</h3>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h4>\n              {t('Event Throughput')}\n              <span id=\"rate\" className=\"pull-right\" />\n            </h4>\n          </div>\n          <EventChart since={since} resolution={resolution} />\n        </div>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h4>{t('API Responses')}</h4>\n          </div>\n          <ApiChart since={since} resolution={resolution} />\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}