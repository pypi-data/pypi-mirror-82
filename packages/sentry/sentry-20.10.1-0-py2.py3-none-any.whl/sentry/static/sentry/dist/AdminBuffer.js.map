{"version":3,"sources":["webpack:///./app/components/internalStatChart.jsx","webpack:///./app/views/admin/adminBuffer.jsx"],"names":["InternalStatChart","state","error","loading","data","this","fetchData","_nextProps","nextState","prevProps","since","props","stat","resolution","setState","api","request","method","key","success","map","x","y","onRetry","points","getChartPoints","className","label","height","React","Component","defaultProps","withApi","AdminBuffer","Date","getTime"],"mappings":"0qBAQMA,E,kLAcJC,MAAQ,CACNC,OAAO,EACPC,SAAS,EACTC,KAAM,M,0DAINC,KAAKC,c,4CAGeC,EAAYC,GAChC,OAAOH,KAAKJ,MAAME,UAAYK,EAAUL,U,yCAGvBM,GAEfA,EAAUC,QAAUL,KAAKM,MAAMD,OAC/BD,EAAUG,OAASP,KAAKM,MAAMC,MAC9BH,EAAUI,aAAeR,KAAKM,MAAME,YAEpCR,KAAKC,c,kCAIG,WACVD,KAAKS,SAAS,CAACX,SAAS,IACxBE,KAAKM,MAAMI,IAAIC,QAAQ,mBAAoB,CACzCC,OAAQ,MACRb,KAAM,CACJM,MAAOL,KAAKM,MAAMD,MAClBG,WAAYR,KAAKM,MAAME,WACvBK,IAAKb,KAAKM,MAAMC,MAElBO,QAAS,SAAAf,GAAI,OACX,EAAKU,SAAS,CACZV,OACAD,SAAS,EACTD,OAAO,KAEXA,MAAO,kBAAM,EAAKY,SAAS,CAACZ,OAAO,S,uCAKrC,OAAOG,KAAKJ,MAAMG,KAAKgB,KAAI,iCAAa,CAACC,EAAd,KAAiBC,EAAjB,W,+BAI3B,OAAIjB,KAAKJ,MAAME,QACN,YAAC,UAAD,MACEE,KAAKJ,MAAMC,MACb,YAAC,IAAD,CAAcqB,QAASlB,KAAKC,YAInC,YAAC,IAAD,CACEkB,OAAQnB,KAAKoB,iBACbC,UAAU,oBACVC,MAAOtB,KAAKM,MAAMgB,MAClBC,OAAQvB,KAAKM,MAAMiB,a,GAzEKC,IAAMC,WAAhC9B,E,gCAAAA,EAUG+B,aAAe,CACpBH,OAAQ,KAoEGI,gBAAQhC,I,snBClFFiC,E,qIASV,IAEApB,EAAcR,KAAKM,MAAnBE,WACDH,GAAQ,IAAIwB,MAAOC,UAAY,IAAO,OAE5C,OACE,uBACE,iCAEA,mBAAKT,UAAU,OACb,mBAAKA,UAAU,cACb,gCAGF,mBAAKA,UAAU,4BACb,uKAEsE,IACpE,mCAHF,kGASJ,mBAAKA,UAAU,OACb,mBAAKA,UAAU,cACb,4CAEF,YAAC,IAAD,CACEhB,MAAOA,EACPG,WAAYA,EACZD,KAAK,yDACLe,MAAM,UAIV,mBAAKD,UAAU,OACb,mBAAKA,UAAU,cACb,0CAEF,YAAC,IAAD,CACEhB,MAAOA,EACPG,WAAYA,EACZD,KAAK,iBACLe,MAAM,e,GArDuBE,IAAMC,WAA1BG,E,0BAAAA,EAKZF,aAAe,CACpBlB,WAAY","file":"AdminBuffer.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport BarChart from 'app/components/barChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport withApi from 'app/utils/withApi';\n\nclass InternalStatChart extends React.Component {\n  static propTypes = {\n    api: PropTypes.object.isRequired,\n    since: PropTypes.number.isRequired,\n    resolution: PropTypes.string.isRequired,\n    stat: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    height: PropTypes.number,\n  };\n\n  static defaultProps = {\n    height: 150,\n  };\n\n  state = {\n    error: false,\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(_nextProps, nextState) {\n    return this.state.loading !== nextState.loading;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.since !== this.props.since ||\n      prevProps.stat !== this.props.stat ||\n      prevProps.resolution !== this.props.resolution\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    this.setState({loading: true});\n    this.props.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data =>\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        }),\n      error: () => this.setState({error: true}),\n    });\n  }\n\n  getChartPoints() {\n    return this.state.data.map(([x, y]) => ({x, y}));\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    return (\n      <BarChart\n        points={this.getChartPoints()}\n        className=\"standard-barchart\"\n        label={this.props.label}\n        height={this.props.height}\n      />\n    );\n  }\n}\n\nexport default withApi(InternalStatChart);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport InternalStatChart from 'app/components/internalStatChart';\n\nexport default class AdminBuffer extends React.Component {\n  static propTypes = {\n    resolution: PropTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    resolution: '1h',\n  };\n\n  render() {\n    // TODO(dcramer): show buffer configuration when its moved into option store\n    const {resolution} = this.props;\n    const since = new Date().getTime() / 1000 - 3600 * 24 * 7;\n\n    return (\n      <div>\n        <h3>Buffers</h3>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h4>About</h4>\n          </div>\n\n          <div className=\"box-content with-padding\">\n            <p>\n              Sentry buffers are responsible for making changes to cardinality counters —\n              such as an issues event count — as well as updating attributes like{' '}\n              <em>last seen</em>. These are flushed on a regularly interval, and are\n              directly affected by the queue backlog.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h4>Updates Processed</h4>\n          </div>\n          <InternalStatChart\n            since={since}\n            resolution={resolution}\n            stat=\"jobs.finished.sentry.tasks.process_buffer.process_incr\"\n            label=\"Jobs\"\n          />\n        </div>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h4>Revoked Updates</h4>\n          </div>\n          <InternalStatChart\n            since={since}\n            resolution={resolution}\n            stat=\"buffer.revoked\"\n            label=\"Jobs\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}