{"version":3,"sources":["webpack:///./app/actions/groupingActions.tsx","webpack:///./app/stores/groupingStore.jsx","webpack:///./app/components/flowLayout.tsx","webpack:///./app/components/spreadLayout.tsx","webpack:///./app/components/toolbar.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedItem.jsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedToolbar.jsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedList.jsx","webpack:///./app/views/organizationGroupDetails/groupMerged/index.jsx"],"names":["GroupingActions","Reflux","createActions","api","Client","GroupingStore","createStore","listenables","init","state","this","getInitialState","Object","entries","forEach","key","value","mergedItems","unmergeList","Map","unmergeState","unmergeDisabled","unmergeLastCollapsed","enableFingerprintCompare","similarItems","filteredSimilarItems","similarLinks","mergeState","mergeList","Set","mergedLinks","mergeDisabled","loading","error","setStateForId","map","idOrIds","newState","Array","isArray","id","has","get","mergedState","assign","set","isAllUnmergedSelected","lockedItems","from","values","filter","busy","size","latestEvent","length","onFetch","toFetchArray","requests","triggerFetchState","promises","endpoint","queryParams","dataKey","Promise","resolve","reject","request","method","data","success","_","jqXHR","links","getResponseHeader","err","responseJSON","detail","responseProcessors","merged","item","similar","scores","issue","scoreMap","isBelowThreshold","keys","find","score","scoresByInterface","scoreKey","reduce","acc","split","interfaceName","push","aggregate","avg","sum","all","then","resultsArray","items","onToggleMerge","checked","add","triggerMergeState","onToggleUnmerge","fingerprint","eventId","triggerUnmergeState","onUnmerge","groupId","loadingMessage","successMessage","errorMessage","ids","Error","addLoadingMessage","query","addSuccessMessage","clear","addErrorMessage","complete","onMerge","params","projectId","orgId","merge","itemIds","parent","trigger","mergedParent","onToggleCollapseFingerprints","collapsed","onToggleCollapseFingerprint","pick","FlowLayout","p","vertical","center","truncate","propTypes","PropTypes","bool","defaultProps","SpreadLayout","responsive","children","className","props","cx","classNames","Toolbar","theme","gray100","borderLight","MergedItem","createReactClass","displayName","mixins","listenTo","onGroupingChange","stateForId","setState","handleToggleEvents","toggleCollapseFingerprint","handleLabelClick","e","preventDefault","handleToggle","disabled","event","toggleUnmerge","handleCheckClick","render","checkboxDisabled","MergedGroup","Controls","expanded","onClick","ActionColumn","onChange","Fingerprint","htmlFor","Collapse","direction","MergedEventList","EventDetails","hideIcons","hideLevel","space","text","familyMono","MergedToolbar","onGroupingUpdate","updateObj","handleShowDiff","project","baseEventId","targetEventId","openDiffModal","baseIssueId","targetIssueId","stopPropagation","onToggleCollapse","unmergeCount","StyledToolbar","title","t","message","onConfirm","CompareButton","Button","MergedList","renderEmpty","pageLinks","itemsWithLatestEvent","count","MergedItems","slug","React","Component","GroupMergedView","location","componentWillMount","fetchData","componentWillReceiveProps","nextProps","search","getEndpoint","type","limit","queryString","fetch","handleCollapse","collapseFingerprints","handleUnmerge","unmerge","isLoading","isError","isLoadedSuccessfully","onRetry","toggleCollapseFingerprints"],"mappings":"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","file":"GroupMerged.js","sourcesContent":["import Reflux from 'reflux';\n\n// Actions for \"Grouping\" view - for merging/unmerging events/issues\nconst GroupingActions = Reflux.createActions([\n  'fetch',\n  'showAllSimilarItems',\n  'toggleUnmerge',\n  'toggleMerge',\n  'unmerge',\n  'merge',\n  'toggleCollapseFingerprint',\n  'toggleCollapseFingerprints',\n]);\nexport default GroupingActions;\n","import Reflux from 'reflux';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'app/api';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport GroupingActions from 'app/actions/groupingActions';\n\nconst api = new Client();\n\n// Between 0-100\nconst MIN_SCORE = 0.6;\n\n// @param score: {[key: string]: number}\nconst checkBelowThreshold = scores => {\n  const scoreKeys = (scores && Object.keys(scores)) || [];\n  return !scoreKeys.map(key => scores[key]).find(score => score >= MIN_SCORE);\n};\n\nconst GroupingStore = Reflux.createStore({\n  listenables: [GroupingActions],\n  init() {\n    const state = this.getInitialState();\n\n    Object.entries(state).forEach(([key, value]) => {\n      this[key] = value;\n    });\n  },\n\n  getInitialState() {\n    return {\n      // List of fingerprints that belong to issue\n      mergedItems: [],\n      // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n      unmergeList: new Map(),\n      // Map of state for each fingerprint (i.e. \"collapsed\")\n      unmergeState: new Map(),\n      // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n      unmergeDisabled: true,\n      // If \"Collapse All\" was just used, this will be true\n      unmergeLastCollapsed: false,\n      // \"Compare\" button state\n      enableFingerprintCompare: false,\n\n      similarItems: [],\n      filteredSimilarItems: [],\n      similarLinks: '',\n      mergeState: new Map(),\n      mergeList: new Set(),\n      mergedLinks: '',\n      mergeDisabled: false,\n\n      loading: true,\n      error: false,\n    };\n  },\n\n  setStateForId(map, idOrIds, newState) {\n    const ids = Array.isArray(idOrIds) ? idOrIds : [idOrIds];\n\n    return ids.map(id => {\n      const state = (map.has(id) && map.get(id)) || {};\n      const mergedState = Object.assign({}, state, newState);\n      map.set(id, mergedState);\n      return mergedState;\n    });\n  },\n\n  isAllUnmergedSelected() {\n    const lockedItems =\n      Array.from(this.unmergeState.values()).filter(({busy}) => busy) || [];\n    return (\n      this.unmergeList.size ===\n      this.mergedItems.filter(({latestEvent}) => !!latestEvent).length -\n        lockedItems.length\n    );\n  },\n\n  // Fetches data\n  onFetch(toFetchArray) {\n    const requests = toFetchArray || this.toFetchArray;\n\n    // Reset state and trigger update\n    this.init();\n    this.triggerFetchState();\n\n    const promises = requests.map(\n      ({endpoint, queryParams, dataKey}) =>\n        new Promise((resolve, reject) => {\n          api.request(endpoint, {\n            method: 'GET',\n            data: queryParams,\n            success: (data, _, jqXHR) => {\n              resolve({\n                dataKey,\n                data,\n                links: jqXHR.getResponseHeader('Link'),\n              });\n            },\n            error: err => {\n              const error = (err.responseJSON && err.responseJSON.detail) || true;\n              reject(error);\n            },\n          });\n        })\n    );\n\n    const responseProcessors = {\n      merged: item => {\n        // Check for locked items\n        this.setStateForId(this.unmergeState, item.id, {\n          busy: item.state === 'locked',\n        });\n        return item;\n      },\n      similar: ([issue, scoreMap]) => {\n        // Hide items with a low scores\n        const isBelowThreshold = checkBelowThreshold(scoreMap);\n\n        // List of scores indexed by interface (i.e., exception and message)\n        const scoresByInterface = Object.keys(scoreMap)\n          .map(scoreKey => [scoreKey, scoreMap[scoreKey]])\n          .reduce((acc, [scoreKey, score]) => {\n            // tokenize scorekey, first token is the interface name\n            const [interfaceName] = scoreKey.split(':');\n            if (!acc[interfaceName]) {\n              acc[interfaceName] = [];\n            }\n            acc[interfaceName].push([scoreKey, score]);\n\n            return acc;\n          }, {});\n\n        // Aggregate score by interface\n        const aggregate = Object.keys(scoresByInterface)\n          .map(interfaceName => [interfaceName, scoresByInterface[interfaceName]])\n          .reduce((acc, [interfaceName, allScores]) => {\n            // `null` scores means feature was not present in both issues, do not\n            // include in aggregate\n            const scores = allScores.filter(([, score]) => score !== null);\n            const avg = scores.reduce((sum, [, score]) => sum + score, 0) / scores.length;\n            acc[interfaceName] = avg;\n            return acc;\n          }, {});\n\n        return {\n          issue,\n          score: scoreMap,\n          scoresByInterface,\n          aggregate,\n          isBelowThreshold,\n        };\n      },\n    };\n\n    if (toFetchArray) {\n      this.toFetchArray = toFetchArray;\n    }\n\n    return Promise.all(promises).then(\n      resultsArray => {\n        resultsArray.forEach(({dataKey, data, links}) => {\n          const items = data.map(responseProcessors[dataKey]);\n          this[`${dataKey}Items`] = items;\n          this[`${dataKey}Links`] = links;\n        });\n\n        this.loading = false;\n        this.error = false;\n        this.triggerFetchState();\n      },\n      () => {\n        this.loading = false;\n        this.error = true;\n        this.triggerFetchState();\n      }\n    );\n  },\n\n  // Toggle merge checkbox\n  onToggleMerge(id) {\n    let checked;\n\n    // Don't do anything if item is busy\n    const state = this.mergeState.has(id) && this.mergeState.get(id);\n    if (state && state.busy === true) {\n      return;\n    }\n\n    if (this.mergeList.has(id)) {\n      this.mergeList.delete(id);\n      checked = false;\n    } else {\n      this.mergeList.add(id);\n      checked = true;\n    }\n\n    this.setStateForId(this.mergeState, id, {\n      checked,\n    });\n\n    this.triggerMergeState();\n  },\n\n  // Toggle unmerge check box\n  onToggleUnmerge([fingerprint, eventId]) {\n    let checked;\n\n    // Uncheck an item to unmerge\n    const state = this.unmergeState.get(fingerprint);\n\n    if (state && state.busy === true) {\n      return;\n    }\n\n    if (this.unmergeList.has(fingerprint)) {\n      this.unmergeList.delete(fingerprint);\n      checked = false;\n    } else {\n      this.unmergeList.set(fingerprint, eventId);\n      checked = true;\n    }\n\n    // Update \"checked\" state for row\n    this.setStateForId(this.unmergeState, fingerprint, {\n      checked,\n    });\n\n    // Unmerge should be disabled if 0 or all items are selected\n    this.unmergeDisabled = this.unmergeList.size === 0 || this.isAllUnmergedSelected();\n    this.enableFingerprintCompare = this.unmergeList.size === 2;\n\n    this.triggerUnmergeState();\n  },\n\n  onUnmerge({groupId, loadingMessage, successMessage, errorMessage}) {\n    const ids = Array.from(this.unmergeList.keys());\n\n    return new Promise((resolve, reject) => {\n      if (this.isAllUnmergedSelected()) {\n        reject(new Error('Not allowed to unmerge ALL events'));\n        return;\n      }\n\n      // Disable unmerge button\n      this.unmergeDisabled = true;\n\n      // Disable rows\n      this.setStateForId(this.unmergeState, ids, {\n        checked: false,\n        busy: true,\n      });\n      this.triggerUnmergeState();\n      addLoadingMessage(loadingMessage);\n\n      api.request(`/issues/${groupId}/hashes/`, {\n        method: 'DELETE',\n        query: {\n          id: ids,\n        },\n        success: () => {\n          addSuccessMessage(successMessage);\n\n          // Busy rows after successful merge\n          this.setStateForId(this.unmergeState, ids, {\n            checked: false,\n            busy: true,\n          });\n          this.unmergeList.clear();\n        },\n        error: () => {\n          addErrorMessage(errorMessage);\n          this.setStateForId(this.unmergeState, ids, {\n            checked: true,\n            busy: false,\n          });\n        },\n        complete: () => {\n          this.unmergeDisabled = false;\n          resolve(this.triggerUnmergeState());\n        },\n      });\n    });\n  },\n\n  // For cross-project views, we need to pass projectId instead of\n  // depending on router params (since we will only have orgId in that case)\n  onMerge({params, query, projectId}) {\n    const ids = Array.from(this.mergeList.values());\n\n    this.mergeDisabled = true;\n    this.setStateForId(this.mergeState, ids, {\n      busy: true,\n    });\n    this.triggerMergeState();\n\n    const promise = new Promise(resolve => {\n      // Disable merge button\n\n      if (params) {\n        const {orgId, groupId} = params;\n        api.merge(\n          {\n            orgId,\n            projectId: projectId || params.projectId,\n            itemIds: [...ids, groupId],\n            query,\n          },\n          {\n            success: data => {\n              if (data && data.merge && data.merge.parent) {\n                this.trigger({\n                  mergedParent: data.merge.parent,\n                });\n              }\n\n              // Hide rows after successful merge\n              this.setStateForId(this.mergeState, ids, {\n                checked: false,\n                busy: true,\n              });\n              this.mergeList.clear();\n            },\n            error: () => {\n              this.setStateForId(this.mergeState, ids, {\n                checked: true,\n                busy: false,\n              });\n            },\n            complete: () => {\n              this.mergeDisabled = false;\n              resolve(this.triggerMergeState());\n            },\n          }\n        );\n      } else {\n        resolve(null);\n      }\n    });\n\n    return promise;\n  },\n\n  // Toggle collapsed state of all fingerprints\n  onToggleCollapseFingerprints() {\n    this.setStateForId(\n      this.unmergeState,\n      this.mergedItems.map(({id}) => id),\n      {\n        collapsed: !this.unmergeLastCollapsed,\n      }\n    );\n\n    this.unmergeLastCollapsed = !this.unmergeLastCollapsed;\n\n    this.trigger({\n      unmergeLastCollapsed: this.unmergeLastCollapsed,\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  onToggleCollapseFingerprint(fingerprint) {\n    const collapsed =\n      this.unmergeState.has(fingerprint) && this.unmergeState.get(fingerprint).collapsed;\n    this.setStateForId(this.unmergeState, fingerprint, {collapsed: !collapsed});\n    this.trigger({\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  triggerFetchState() {\n    const state = {\n      similarItems: this.similarItems.filter(({isBelowThreshold}) => !isBelowThreshold),\n      filteredSimilarItems: this.similarItems.filter(\n        ({isBelowThreshold}) => isBelowThreshold\n      ),\n      ...pick(this, [\n        'mergedItems',\n        'mergedLinks',\n        'similarLinks',\n        'mergeState',\n        'unmergeState',\n        'loading',\n        'error',\n      ]),\n    };\n    this.trigger(state);\n    return state;\n  },\n\n  triggerUnmergeState() {\n    const state = pick(this, [\n      'unmergeDisabled',\n      'unmergeState',\n      'unmergeList',\n      'enableFingerprintCompare',\n      'unmergeLastCollapsed',\n    ]);\n    this.trigger(state);\n    return state;\n  },\n\n  triggerMergeState() {\n    const state = pick(this, ['mergeDisabled', 'mergeState', 'mergeList']);\n    this.trigger(state);\n    return state;\n  },\n});\n\nexport default GroupingStore;\n","import PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  /**\n   * Centers content via `justify-content`\n   */\n  center?: boolean;\n  /**\n   * Changes flex direction to be column\n   */\n  vertical?: boolean;\n  /**\n   * Applies \"overflow: hidden\" to container so that children can be truncated\n   */\n  truncate?: boolean;\n};\n\nconst FlowLayout = styled('div')<Props>`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: ${p => (p.vertical ? 'column' : null)};\n  justify-content: ${p => (p.center ? 'center' : null)};\n  overflow: ${p => (p.truncate ? 'hidden' : null)};\n`;\n\nFlowLayout.propTypes = {\n  center: PropTypes.bool,\n  vertical: PropTypes.bool,\n  truncate: PropTypes.bool,\n};\n\nFlowLayout.defaultProps = {\n  truncate: true,\n};\n\nexport default FlowLayout;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  responsive?: boolean;\n  center?: boolean;\n};\n\n// Flexbox container whose children will have `justify-content: space-between`\n//\n// Intended for children.length === 2\n// \"responsive\" will change flex-direction to be column on small widths\nconst SpreadLayout = ({\n  responsive = false,\n  center = true,\n  children,\n  className,\n  ...props\n}: Props) => {\n  const cx = classNames('spread-layout', className, {\n    center,\n    'allow-responsive': responsive,\n  });\n\n  return (\n    <div {...props} className={cx}>\n      {children}\n    </div>\n  );\n};\n\nSpreadLayout.propTypes = {\n  responsive: PropTypes.bool,\n  center: PropTypes.bool,\n  children: PropTypes.node,\n  style: PropTypes.object,\n};\n\nexport default SpreadLayout;\n","import styled from '@emotion/styled';\n\nconst Toolbar = styled('div')`\n  background: ${p => p.theme.gray100};\n  border: 1px solid ${p => p.theme.borderLight};\n  border-bottom: none;\n  border-radius: 3px 3px 0 0;\n  box-shadow: 0 1px 0 ${p => p.theme.borderLight};\n  margin: 0;\n`;\n\nexport default Toolbar;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\nimport styled from '@emotion/styled';\n\nimport {IconChevron} from 'app/icons';\nimport Checkbox from 'app/components/checkbox';\nimport EventOrGroupHeader from 'app/components/eventOrGroupHeader';\nimport FlowLayout from 'app/components/flowLayout';\nimport GroupingActions from 'app/actions/groupingActions';\nimport GroupingStore from 'app/stores/groupingStore';\nimport space from 'app/styles/space';\n\nconst MergedItem = createReactClass({\n  displayName: 'MergedItem',\n\n  propTypes: {\n    fingerprint: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    event: PropTypes.shape({\n      id: PropTypes.string,\n      groupID: PropTypes.string,\n      type: PropTypes.oneOf(['error', 'csp', 'default']),\n      dateCreated: PropTypes.string,\n      platform: PropTypes.string,\n    }),\n  },\n\n  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingChange')],\n\n  getInitialState() {\n    return {\n      collapsed: false,\n      checked: false,\n      busy: false,\n    };\n  },\n\n  onGroupingChange({unmergeState}) {\n    if (!unmergeState) {\n      return;\n    }\n\n    const {fingerprint} = this.props;\n    const stateForId = unmergeState.has(fingerprint) && unmergeState.get(fingerprint);\n    if (!stateForId) {\n      return;\n    }\n\n    Object.keys(stateForId).forEach(key => {\n      if (stateForId[key] === this.state[key]) {\n        return;\n      }\n\n      this.setState({\n        [key]: stateForId[key],\n      });\n    });\n  },\n\n  handleToggleEvents() {\n    const {fingerprint} = this.props;\n    GroupingActions.toggleCollapseFingerprint(fingerprint);\n  },\n\n  // Disable default behavior of toggling checkbox\n  handleLabelClick(e) {\n    e.preventDefault();\n  },\n\n  handleToggle() {\n    const {disabled, fingerprint, event} = this.props;\n\n    if (disabled || this.state.busy) {\n      return;\n    }\n\n    // clicking anywhere in the row will toggle the checkbox\n    GroupingActions.toggleUnmerge([fingerprint, event.id]);\n  },\n\n  handleCheckClick() {\n    // noop because of react warning about being a controlled input without `onChange`\n    // we handle change via row click\n  },\n\n  render() {\n    const {disabled, event, fingerprint} = this.props;\n    const checkboxDisabled = disabled || this.state.disabled;\n\n    // `event` can be null if last event w/ fingerprint is not within retention period\n    return (\n      <MergedGroup busy={this.state.busy}>\n        <Controls expanded={!this.state.collapsed}>\n          <FlowLayout onClick={this.handleToggle}>\n            <ActionColumn>\n              <Checkbox\n                id={fingerprint}\n                value={fingerprint}\n                checked={this.state.checked}\n                disabled={checkboxDisabled}\n                onChange={this.handleCheckClick}\n              />\n            </ActionColumn>\n\n            <Fingerprint onClick={this.handleLabelClick} htmlFor={fingerprint}>\n              {fingerprint}\n            </Fingerprint>\n          </FlowLayout>\n\n          <div>\n            <span />\n            <Collapse onClick={this.handleToggleEvents}>\n              {this.state.collapsed ? (\n                <IconChevron direction=\"down\" size=\"xs\" />\n              ) : (\n                <IconChevron direction=\"up\" size=\"xs\" />\n              )}\n            </Collapse>\n          </div>\n        </Controls>\n\n        {!this.state.collapsed && (\n          <MergedEventList className=\"event-list\">\n            {event && (\n              <EventDetails className=\"event-details\">\n                <FlowLayout>\n                  <EventOrGroupHeader data={event} hideIcons hideLevel />\n                </FlowLayout>\n              </EventDetails>\n            )}\n          </MergedEventList>\n        )}\n      </MergedGroup>\n    );\n  },\n});\n\nconst MergedGroup = styled('div')`\n  ${p => p.busy && 'opacity: 0.2'};\n`;\n\nconst ActionColumn = styled('div')`\n  display: flex;\n  padding: 0 10px;\n  align-items: center;\n\n  input {\n    margin: 0;\n  }\n`;\n\nconst Controls = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  border-top: 1px solid ${p => p.theme.borderLight};\n  background-color: #f3f1f6;\n  padding: ${space(0.5)} 0;\n  ${p => p.expanded && `border-bottom: 1px solid ${p.theme.borderLight}`};\n\n  ${MergedGroup} {\n    &:first-child & {\n      border-top: none;\n    }\n    &:last-child & {\n      border-top: none;\n      border-bottom: 1px solid ${p => p.theme.borderLight};\n    }\n  }\n`;\n\nconst Fingerprint = styled('label')`\n  font-family: ${p => p.theme.text.familyMono};\n\n  ${/* sc-selector */ Controls} & {\n    font-weight: normal;\n    margin: 0;\n  }\n`;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n  padding: 0 10px;\n`;\n\nconst MergedEventList = styled('div')`\n  overflow: hidden;\n  border: none;\n`;\n\nconst EventDetails = styled('div')`\n  display: flex;\n  justify-content: space-between;\n\n  .event-list & {\n    padding: 10px;\n  }\n`;\n\nexport default MergedItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport pick from 'lodash/pick';\nimport createReactClass from 'create-react-class';\nimport styled from '@emotion/styled';\n\nimport {openDiffModal} from 'app/actionCreators/modal';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport GroupingStore from 'app/stores/groupingStore';\nimport LinkWithConfirmation from 'app/components/links/linkWithConfirmation';\nimport SpreadLayout from 'app/components/spreadLayout';\nimport Toolbar from 'app/components/toolbar';\nimport space from 'app/styles/space';\nimport SentryTypes from 'app/sentryTypes';\n\nconst MergedToolbar = createReactClass({\n  displayName: 'MergedToolbar',\n\n  propTypes: {\n    orgId: PropTypes.string.isRequired,\n    project: SentryTypes.Project.isRequired,\n    groupId: PropTypes.string,\n    onUnmerge: PropTypes.func,\n    onToggleCollapse: PropTypes.func,\n  },\n\n  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],\n\n  getInitialState() {\n    const {\n      unmergeList,\n      unmergeLastCollapsed,\n      unmergeDisabled,\n      enableFingerprintCompare,\n    } = GroupingStore;\n\n    return {\n      enableFingerprintCompare,\n      unmergeList,\n      unmergeLastCollapsed,\n      unmergeDisabled,\n    };\n  },\n\n  onGroupingUpdate(updateObj) {\n    const allowedKeys = [\n      'unmergeLastCollapsed',\n      'unmergeDisabled',\n      'unmergeList',\n      'enableFingerprintCompare',\n    ];\n\n    this.setState(pick(updateObj, allowedKeys));\n  },\n\n  handleShowDiff(e) {\n    const {groupId, project, orgId} = this.props;\n    const entries = this.state.unmergeList.entries();\n\n    // `unmergeList` should only have 2 items in map\n    if (this.state.unmergeList.size !== 2) {\n      return;\n    }\n\n    // only need eventId, not fingerprint\n    const [baseEventId, targetEventId] = Array.from(entries).map(\n      ([, eventId]) => eventId\n    );\n\n    openDiffModal({\n      baseIssueId: groupId,\n      targetIssueId: groupId,\n      baseEventId,\n      targetEventId,\n      orgId,\n      project,\n    });\n\n    e.stopPropagation();\n  },\n\n  render() {\n    const {onUnmerge, onToggleCollapse} = this.props;\n    const unmergeCount = (this.state.unmergeList && this.state.unmergeList.size) || 0;\n\n    return (\n      <StyledToolbar>\n        <SpreadLayout>\n          <SpreadLayout>\n            <div>\n              <LinkWithConfirmation\n                disabled={this.state.unmergeDisabled}\n                title={t(`Unmerging ${unmergeCount} events`)}\n                message={t(\n                  'These events will be unmerged and grouped into a new issue. Are you sure you want to unmerge these events?'\n                )}\n                className=\"btn btn-sm btn-default\"\n                onConfirm={onUnmerge}\n              >\n                {t('Unmerge')} ({unmergeCount || 0})\n              </LinkWithConfirmation>\n\n              <CompareButton\n                size=\"small\"\n                disabled={!this.state.enableFingerprintCompare}\n                onClick={this.handleShowDiff}\n              >\n                {t('Compare')}\n              </CompareButton>\n            </div>\n          </SpreadLayout>\n          <SpreadLayout>\n            <div>\n              <Button size=\"small\" onClick={onToggleCollapse}>\n                {this.state.unmergeLastCollapsed ? t('Expand All') : t('Collapse All')}\n              </Button>\n            </div>\n          </SpreadLayout>\n        </SpreadLayout>\n      </StyledToolbar>\n    );\n  },\n});\n\nconst CompareButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n\nconst StyledToolbar = styled(Toolbar)`\n  padding: ${space(0.5)} ${space(1)};\n`;\n\nexport default MergedToolbar;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport Pagination from 'app/components/pagination';\nimport QueryCount from 'app/components/queryCount';\nimport SentryTypes from 'app/sentryTypes';\n\nimport MergedItem from './mergedItem';\nimport MergedToolbar from './mergedToolbar';\n\nclass MergedList extends React.Component {\n  static propTypes = {\n    onUnmerge: PropTypes.func.isRequired,\n    onToggleCollapse: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(SentryTypes.Event),\n    pageLinks: PropTypes.string,\n    orgId: PropTypes.string.isRequired,\n    project: SentryTypes.Project.isRequired,\n  };\n\n  renderEmpty = () => (\n    <EmptyStateWarning>\n      <p>{t(\"There don't seem to be any hashes for this issue.\")}</p>\n    </EmptyStateWarning>\n  );\n\n  render() {\n    const {items, pageLinks, onToggleCollapse, onUnmerge, orgId, project} = this.props;\n    const itemsWithLatestEvent = items.filter(({latestEvent}) => !!latestEvent);\n    const hasResults = itemsWithLatestEvent.length > 0;\n\n    if (!hasResults) {\n      return <Panel>{this.renderEmpty()}</Panel>;\n    }\n\n    return (\n      <div>\n        <h2>\n          <span>{t('Merged fingerprints with latest event')}</span>\n          <QueryCount count={itemsWithLatestEvent.length} />\n        </h2>\n\n        <MergedToolbar\n          onToggleCollapse={onToggleCollapse}\n          onUnmerge={onUnmerge}\n          orgId={orgId}\n          project={project}\n        />\n\n        <MergedItems>\n          {itemsWithLatestEvent.map(({id, latestEvent}) => (\n            <MergedItem\n              key={id}\n              orgId={orgId}\n              projectId={project.slug}\n              disabled={items.length === 1}\n              event={latestEvent}\n              fingerprint={id}\n            />\n          ))}\n        </MergedItems>\n\n        <Pagination pageLinks={pageLinks} />\n      </div>\n    );\n  }\n}\n\nexport default MergedList;\n\nconst MergedItems = styled('div')`\n  border: 1px solid ${p => p.theme.borderLight};\n  border-top: none;\n`;\n","import React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\nimport * as queryString from 'query-string';\n\nimport {t} from 'app/locale';\nimport GroupingActions from 'app/actions/groupingActions';\nimport GroupingStore from 'app/stores/groupingStore';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SentryTypes from 'app/sentryTypes';\n\nimport MergedList from './mergedList';\n\nconst GroupMergedView = createReactClass({\n  displayName: 'GroupMergedView',\n  propTypes: {\n    project: SentryTypes.Project,\n  },\n  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],\n\n  getInitialState() {\n    const queryParams = this.props.location.query;\n    return {\n      mergedItems: [],\n      loading: true,\n      error: false,\n      query: queryParams.query || '',\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.params.groupId !== this.props.params.groupId ||\n      nextProps.location.search !== this.props.location.search\n    ) {\n      const queryParams = nextProps.location.query;\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  },\n\n  onGroupingUpdate({mergedItems, mergedLinks, loading, error}) {\n    if (mergedItems) {\n      this.setState({\n        mergedItems,\n        mergedLinks,\n        loading: typeof loading !== 'undefined' ? loading : false,\n        error: typeof error !== 'undefined' ? error : false,\n      });\n    }\n  },\n\n  getEndpoint(type = 'hashes') {\n    const params = this.props.params;\n    const queryParams = {\n      ...this.props.location.query,\n      limit: 50,\n      query: this.state.query,\n    };\n\n    return `/issues/${params.groupId}/${type}/?${queryString.stringify(queryParams)}`;\n  },\n\n  fetchData() {\n    GroupingActions.fetch([\n      {\n        endpoint: this.getEndpoint('hashes'),\n        dataKey: 'merged',\n        queryParams: this.props.location.query,\n      },\n    ]);\n  },\n\n  handleCollapse() {\n    GroupingActions.collapseFingerprints();\n  },\n\n  handleUnmerge() {\n    GroupingActions.unmerge({\n      groupId: this.props.params.groupId,\n      loadingMessage: `${t('Unmerging events')}...`,\n      successMessage: t('Events successfully queued for unmerging.'),\n      errorMessage: t('Unable to queue events for unmerging.'),\n    });\n  },\n\n  render() {\n    const isLoading = this.state.loading;\n    const isError = this.state.error && !isLoading;\n    const isLoadedSuccessfully = !isError && !isLoading;\n\n    return (\n      <div>\n        <div className=\"alert alert-block alert-warning\">\n          <strong>{t('Warning')}:</strong>{' '}\n          {t(\n            'This is an experimental feature. Data may not be immediately available while we process unmerges.'\n          )}\n        </div>\n\n        {isLoading && <LoadingIndicator />}\n        {isError && (\n          <LoadingError\n            message=\"Unable to load merged events, please try again later\"\n            onRetry={this.fetchData}\n          />\n        )}\n\n        {isLoadedSuccessfully && (\n          <MergedList\n            orgId={this.props.params.orgId}\n            project={this.props.project}\n            items={this.state.mergedItems}\n            pageLinks={this.state.mergedLinks}\n            onUnmerge={this.handleUnmerge}\n            onToggleCollapse={GroupingActions.toggleCollapseFingerprints}\n          />\n        )}\n      </div>\n    );\n  },\n});\n\nexport {GroupMergedView};\n\nexport default GroupMergedView;\n"],"sourceRoot":""}