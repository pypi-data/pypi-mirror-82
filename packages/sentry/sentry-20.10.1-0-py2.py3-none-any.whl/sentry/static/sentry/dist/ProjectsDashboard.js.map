{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./images/spot/releases.svg","webpack:///./images/spot/breadcrumbs-generic.svg","webpack:///./images/spot/code-arguments-tags-mirrored.svg","webpack:///./app/utils/withTeamsForUser.tsx","webpack:///./app/utils/getProjectsByTeams.tsx","webpack:///./app/components/resourceCard.tsx","webpack:///./app/views/projectsDashboard/resources.tsx","webpack:///./app/views/projectsDashboard/teamMembers.tsx","webpack:///./app/views/projectsDashboard/chart.tsx","webpack:///./app/views/projectsDashboard/deploys.tsx","webpack:///./app/views/projectsDashboard/noEvents.tsx","webpack:///./app/views/projectsDashboard/projectCard.tsx","webpack:///./app/views/projectsDashboard/teamSection.tsx","webpack:///./app/views/projectsDashboard/index.tsx"],"names":["SentryDocumentTitle","props","_title","title","objSlug","children","module","exports","withTeamsForUser","WrappedComponent","state","teams","loadingTeams","error","this","fetchTeams","setState","metric","mark","name","api","requestPromise","getUsersTeamsEndpoint","teamsWithProjects","measure","start","data","route","organization_id","parseInt","organization","id","projects","projectsByTeam","isSuperuser","teamlessProjects","usersTeams","Set","filter","team","isMember","map","slug","size","forEach","project","length","push","has","hasOwnProperty","getProjectsByTeams","ConfigStore","get","React","Component","displayName","getDisplayName","ResourceCard","link","imgUrl","ResourceCardWrapper","onClick","analytics","StyledLink","href","StyledImg","src","alt","StyledTitle","Panel","space","ExternalLink","p","theme","gray700","fontSizeLarge","Resources","trackAnalyticsEvent","eventKey","eventName","ResourcesWrapper","data-test-id","withMargins","t","ResourceCards","releasesImg","breadcrumbsImg","docsImg","borderLight","breakpoints","TeamMembers","orgId","teamId","renderBody","members","users","user","AsyncComponent","Chart","stats","d","x","y","StyledBarChart","points","label","height","gap","BarChart","Deploys","deploys","Object","entries","latestDeploys","environment","sort","a","b","Date","dateFinished","getTime","slice","DeployContainer","deploy","key","version","Deploy","DeployRow","Environment","StyledTextOverflow","projectId","tooltipRawVersion","truncate","DeployTimeWrapper","getDynamicText","fixed","value","date","NoDeploys","Background","external","gray500","fontSizeSmall","TextOverflow","fontSizeExtraSmall","gray100","borderRadius","NoEvents","Container","EmptyText","ProjectCard","loadStatsForProject","hasProjectAccess","firstEvent","StyledProjectCard","StyledProjectCardHeader","StyledIdBadge","avatarSize","to","ChartContainer","LoadingCard","ProjectCardContainer","createReactClass","mixins","Reflux","listenTo","ProjectsStatsStore","getInitialState","projectDetails","onProjectStoreUpdate","itemsBySlug","render","borderDark","dropShadowLight","IdBadge","withOrganization","withApi","TeamSection","showBorder","access","hasTeamAccess","TeamSectionWrapper","TeamTitleBar","TeamName","ProjectCards","PageHeading","Dashboard","reset","params","message","filteredTeams","team1","team2","localeCompare","uniqBy","flatten","teamObj","favorites","isBookmarked","canCreateProjects","hasTeamAdminAccess","showEmptyMessage","showResources","Fragment","ProjectsHeader","disabled","undefined","icon","isCircled","index","once","debounce","offset","TeamLink","sortProjects","OrganizationDashboard","OrganizationDashboardWrapper","Link","withProfiler"],"mappings":"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","file":"ProjectsDashboard.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","module.exports = __webpack_public_path__ + \"releases.0588cc.svg\";","module.exports = __webpack_public_path__ + \"breadcrumbs-generic.8e69b7.svg\";","module.exports = __webpack_public_path__ + \"code-arguments-tags-mirrored.064162.svg\";","import React from 'react';\n\nimport {Client} from 'app/api';\nimport {Organization, Project, Team, TeamWithProjects} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport getProjectsByTeams from 'app/utils/getProjectsByTeams';\nimport ConfigStore from 'app/stores/configStore';\n\nimport {metric} from './analytics';\n\n// We require these props when using this HOC\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedTeamsProps = {\n  teams: TeamWithProjects[];\n  loadingTeams: boolean;\n  error: Error | null;\n};\n\nconst withTeamsForUser = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  class extends React.Component<\n    Omit<P, keyof InjectedTeamsProps> & Partial<InjectedTeamsProps> & DependentProps,\n    InjectedTeamsProps\n  > {\n    static displayName = `withUsersTeams(${getDisplayName(WrappedComponent)})`;\n\n    state = {\n      teams: [],\n      loadingTeams: true,\n      error: null,\n    };\n\n    componentDidMount() {\n      this.fetchTeams();\n    }\n\n    async fetchTeams() {\n      this.setState({\n        loadingTeams: true,\n      });\n\n      try {\n        metric.mark({name: 'user-teams-fetch-start'});\n        const teamsWithProjects: TeamWithProjects[] = await this.props.api.requestPromise(\n          this.getUsersTeamsEndpoint()\n        );\n        this.setState(\n          {\n            teams: teamsWithProjects,\n            loadingTeams: false,\n          },\n          () => {\n            metric.measure({\n              name: 'app.component.perf',\n              start: 'user-teams-fetch-start',\n              data: {\n                name: 'user-teams',\n                route: '/organizations/:orgid/user-teams',\n                organization_id: parseInt(this.props.organization.id, 10),\n              },\n            });\n          }\n        );\n      } catch (error) {\n        this.setState({\n          error,\n          loadingTeams: false,\n        });\n      }\n    }\n\n    populateTeamsWithProjects(teams: Team[], projects: Project[]) {\n      const {isSuperuser} = ConfigStore.get('user');\n      const {projectsByTeam} = getProjectsByTeams(teams, projects, isSuperuser);\n      const teamsWithProjects: TeamWithProjects[] = teams.map(team => {\n        const teamProjects = projectsByTeam[team.slug] || [];\n        return {...team, projects: teamProjects};\n      });\n      this.setState({\n        teams: teamsWithProjects,\n        loadingTeams: false,\n      });\n    }\n\n    getUsersTeamsEndpoint() {\n      return `/organizations/${this.props.organization.slug}/user-teams/`;\n    }\n\n    render() {\n      return <WrappedComponent {...(this.props as P & DependentProps)} {...this.state} />;\n    }\n  };\n\nexport default withTeamsForUser;\n","import {Project, Team} from 'app/types';\n\nexport default function getProjectsByTeams(\n  teams: Team[],\n  projects: Project[],\n  isSuperuser: boolean = false\n): {projectsByTeam: {[teamSlug: string]: Project[]}; teamlessProjects: Project[]} {\n  const projectsByTeam = {};\n  const teamlessProjects: Project[] = [];\n  let usersTeams = new Set(teams.filter(team => team.isMember).map(team => team.slug));\n\n  if (usersTeams.size === 0 && isSuperuser) {\n    usersTeams = new Set(teams.map(team => team.slug));\n  }\n\n  projects.forEach(project => {\n    if (!project.teams.length && project.isMember) {\n      teamlessProjects.push(project);\n    } else {\n      project.teams.forEach(team => {\n        if (!usersTeams.has(team.slug)) {\n          return;\n        }\n        if (!projectsByTeam.hasOwnProperty(team.slug)) {\n          projectsByTeam[team.slug] = [];\n        }\n        projectsByTeam[team.slug].push(project);\n      });\n    }\n  });\n\n  return {projectsByTeam, teamlessProjects};\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {analytics} from 'app/utils/analytics';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\n\ntype Props = {\n  title: string;\n  link: string;\n  imgUrl: string;\n};\n\nconst ResourceCard = ({title, link, imgUrl}: Props) => (\n  <ResourceCardWrapper\n    onClick={() => analytics('orgdash.resource_clicked', {link, title})}\n  >\n    <StyledLink href={link}>\n      <StyledImg src={imgUrl} alt={title} />\n      <StyledTitle>{title}</StyledTitle>\n    </StyledLink>\n  </ResourceCardWrapper>\n);\n\nexport default ResourceCard;\n\nconst ResourceCardWrapper = styled(Panel)`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  padding: ${space(3)};\n  margin-bottom: 0;\n`;\n\nconst StyledLink = styled(ExternalLink)`\n  flex: 1;\n`;\n\nconst StyledImg = styled('img')`\n  display: block;\n  margin: 0 auto ${space(3)} auto;\n  height: 160px;\n`;\n\nconst StyledTitle = styled('div')`\n  color: ${p => p.theme.gray700};\n  font-size: ${p => p.theme.fontSizeLarge};\n  text-align: center;\n  font-weight: bold;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport PageHeading from 'app/components/pageHeading';\nimport ResourceCard from 'app/components/resourceCard';\nimport space from 'app/styles/space';\nimport {t} from 'app/locale';\n\nimport releasesImg from '../../../images/spot/releases.svg';\nimport breadcrumbsImg from '../../../images/spot/breadcrumbs-generic.svg';\nimport docsImg from '../../../images/spot/code-arguments-tags-mirrored.svg';\n\ntype Props = {\n  organization: Organization;\n};\n\nclass Resources extends React.Component<Props> {\n  componentDidMount() {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'orgdash.resources_shown',\n      eventName: 'Projects Dashboard: Resources Shown',\n      organization: organization.id,\n    });\n  }\n\n  render() {\n    return (\n      <ResourcesWrapper data-test-id=\"resources\">\n        <PageHeading withMargins>{t('Resources')}</PageHeading>\n        <ResourceCards>\n          <ResourceCard\n            link=\"https://blog.sentry.io/2018/03/06/the-sentry-workflow\"\n            imgUrl={releasesImg}\n            title={t('The Sentry Workflow')}\n          />\n          <ResourceCard\n            link=\"https://sentry.io/vs/logging/\"\n            imgUrl={breadcrumbsImg}\n            title={t('Sentry vs Logging')}\n          />\n          <ResourceCard\n            link=\"https://docs.sentry.io/\"\n            imgUrl={docsImg}\n            title={t('Docs')}\n          />\n        </ResourceCards>\n      </ResourcesWrapper>\n    );\n  }\n}\n\nexport default Resources;\n\nconst ResourcesWrapper = styled('div')`\n  border-top: 1px solid ${p => p.theme.borderLight};\n  padding: 25px 30px 10px 30px;\n`;\n\nconst ResourceCards = styled('div')`\n  display: grid;\n  grid-template-columns: minmax(100px, 1fr);\n  grid-gap: ${space(3)};\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Member} from 'app/types';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport AvatarList from 'app/components/avatar/avatarList';\n\ntype Props = AsyncComponent['props'] & {\n  teamId: string;\n  orgId: string;\n};\n\ntype State = AsyncComponent['state'] & {\n  members?: Member[];\n};\n\nclass TeamMembers extends AsyncComponent<Props, State> {\n  static propTypes = {\n    teamId: PropTypes.string.isRequired,\n    orgId: PropTypes.string.isRequired,\n  };\n\n  getEndpoints(): Array<[string, string]> {\n    const {orgId, teamId} = this.props;\n    return [['members', `/teams/${orgId}/${teamId}/members/`]];\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody(): React.ReactNode {\n    const {members} = this.state;\n    if (!members) {\n      return null;\n    }\n\n    const users = members.filter(({user}) => !!user).map(({user}) => user);\n    return <AvatarList users={users} />;\n  }\n}\n\nexport default TeamMembers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\n\nimport {Project} from 'app/types';\nimport BarChart from 'app/components/barChart';\n\ntype Props = {\n  stats: Required<Project>['stats'];\n};\n\nconst Chart = ({stats = []}: Props) => {\n  const data = stats.map(d => ({x: d[0], y: d[1]}));\n  return <StyledBarChart points={data} label=\"events\" height={60} gap={1.5} />;\n};\n\nChart.propTypes = {\n  stats: PropTypes.array,\n};\n\nexport default Chart;\n\nconst StyledBarChart = styled(BarChart)`\n  a {\n    &:not(:first-child) {\n      border-left: 2px solid transparent;\n    }\n    &:not(:last-child) {\n      border-right: 2px solid transparent;\n    }\n    > span {\n      left: 0;\n      right: 0;\n    }\n  }\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Project, Deploy as DeployType} from 'app/types';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport SentryTypes from 'app/sentryTypes';\nimport TextOverflow from 'app/components/textOverflow';\nimport TimeSince from 'app/components/timeSince';\nimport Version from 'app/components/version';\nimport space from 'app/styles/space';\nimport getDynamicText from 'app/utils/getDynamicText';\n\nconst DEPLOY_COUNT = 2;\n\ntype Props = {\n  project: Project;\n};\n\nconst Deploys = ({project}: Props) => {\n  const flattenedDeploys = Object.entries(project.latestDeploys || {}).map(\n    ([environment, value]): Pick<\n      DeployType,\n      'version' | 'dateFinished' | 'environment'\n    > => ({environment, ...value})\n  );\n\n  const deploys = (flattenedDeploys || [])\n    .sort(\n      (a, b) => new Date(b.dateFinished).getTime() - new Date(a.dateFinished).getTime()\n    )\n    .slice(0, DEPLOY_COUNT);\n\n  if (!deploys.length) {\n    return <NoDeploys />;\n  }\n\n  return (\n    <DeployContainer>\n      {deploys.map(deploy => (\n        <Deploy\n          key={`${deploy.environment}-${deploy.version}`}\n          deploy={deploy}\n          project={project}\n        />\n      ))}\n    </DeployContainer>\n  );\n};\n\nDeploys.propTypes = {\n  project: SentryTypes.Project.isRequired,\n};\n\nexport default Deploys;\n\ntype DeployProps = Props & {\n  deploy: Pick<DeployType, 'version' | 'dateFinished' | 'environment'>;\n};\n\nconst Deploy = ({deploy, project}: DeployProps) => (\n  <DeployRow>\n    <Environment>{deploy.environment}</Environment>\n\n    <StyledTextOverflow>\n      <Version\n        version={deploy.version}\n        projectId={project.id}\n        tooltipRawVersion\n        truncate\n      />\n    </StyledTextOverflow>\n\n    <DeployTimeWrapper>\n      {getDynamicText({\n        fixed: '3 hours ago',\n        value: <TimeSince date={deploy.dateFinished} />,\n      })}\n    </DeployTimeWrapper>\n  </DeployRow>\n);\n\nDeploy.propTypes = {\n  deploy: SentryTypes.Deploy.isRequired,\n  project: SentryTypes.Project.isRequired,\n};\n\nconst NoDeploys = () => (\n  <DeployContainer>\n    <Background>\n      <Button size=\"xsmall\" href=\"https://docs.sentry.io/learn/releases/\" external>\n        {t('Track deploys')}\n      </Button>\n    </Background>\n  </DeployContainer>\n);\n\nconst DeployRow = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  color: ${p => p.theme.gray500};\n  font-size: ${p => p.theme.fontSizeSmall};\n\n  &:not(:last-of-type) {\n    margin-top: ${space(1)};\n  }\n`;\n\nconst Environment = styled(TextOverflow)`\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n  width: 80px;\n  border: 1px solid ${p => p.theme.borderLight};\n  margin-right: ${space(1)};\n  background-color: ${p => p.theme.gray100};\n  text-align: center;\n  border-radius: ${p => p.theme.borderRadius};\n  flex-shrink: 0;\n`;\n\nconst StyledTextOverflow = styled(TextOverflow)`\n  margin-right: ${space(1)};\n`;\n\nconst DeployTimeWrapper = styled('div')`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 90px;\n  flex-grow: 1;\n  flex-shrink: 0;\n  text-align: right;\n`;\n\nconst DeployContainer = styled('div')`\n  height: 92px;\n  padding: ${space(2)};\n`;\n\nconst Background = styled('div')`\n  display: flex;\n  height: 100%;\n  background-color: ${p => p.theme.gray100};\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\n\nconst NoEvents = () => (\n  <Container>\n    <EmptyText>{t('No activity yet.')}</EmptyText>\n  </Container>\n);\n\nexport default NoEvents;\n\nconst Container = styled('div')`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst EmptyText = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 4px;\n  margin-right: 4px;\n  height: 68px;\n  color: ${p => p.theme.gray500};\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\nimport styled from '@emotion/styled';\n\nimport {Organization, Project} from 'app/types';\nimport BookmarkStar from 'app/components/projects/bookmarkStar';\nimport {Client} from 'app/api';\nimport {loadStatsForProject} from 'app/actionCreators/projects';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport ProjectsStatsStore from 'app/stores/projectsStatsStore';\nimport SentryTypes from 'app/sentryTypes';\nimport space from 'app/styles/space';\nimport withOrganization from 'app/utils/withOrganization';\nimport withApi from 'app/utils/withApi';\n\nimport Chart from './chart';\nimport Deploys from './deploys';\nimport NoEvents from './noEvents';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  project: Project;\n  hasProjectAccess: boolean;\n};\n\nclass ProjectCard extends React.Component<Props> {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    project: SentryTypes.Project.isRequired,\n    hasProjectAccess: PropTypes.bool,\n  };\n\n  componentDidMount() {\n    const {organization, project, api} = this.props;\n\n    // fetch project stats\n    loadStatsForProject(api, project.id, {\n      orgId: organization.slug,\n      projectId: project.id,\n    });\n  }\n\n  render() {\n    const {organization, project, hasProjectAccess} = this.props;\n    const {id, firstEvent, stats, slug} = project;\n\n    return (\n      <div data-test-id={slug}>\n        {stats ? (\n          <StyledProjectCard>\n            <StyledProjectCardHeader>\n              <StyledIdBadge\n                project={project}\n                avatarSize={18}\n                displayName={\n                  hasProjectAccess ? (\n                    <Link\n                      to={`/organizations/${organization.slug}/issues/?project=${id}`}\n                    >\n                      <strong>{slug}</strong>\n                    </Link>\n                  ) : (\n                    <span>{slug}</span>\n                  )\n                }\n              />\n              <BookmarkStar organization={organization} project={project} />\n            </StyledProjectCardHeader>\n            <ChartContainer>\n              <Chart stats={stats} />\n              {!firstEvent && <NoEvents />}\n            </ChartContainer>\n            <Deploys project={project} />\n          </StyledProjectCard>\n        ) : (\n          <LoadingCard />\n        )}\n      </div>\n    );\n  }\n}\n\ntype ContainerProps = {\n  api: Client;\n  project: Project;\n  organization: Organization;\n  hasProjectAccess: boolean;\n};\n\ntype ContainerState = {\n  projectDetails: Project | null;\n};\n\nconst ProjectCardContainer = createReactClass<ContainerProps, ContainerState>({\n  propTypes: {\n    project: SentryTypes.Project,\n  },\n  mixins: [Reflux.listenTo(ProjectsStatsStore, 'onProjectStoreUpdate') as any],\n  getInitialState(): ContainerState {\n    const {project} = this.props;\n    const initialState = ProjectsStatsStore.getInitialState() || {};\n    return {\n      projectDetails: initialState[project.slug] || null,\n    };\n  },\n  onProjectStoreUpdate(itemsBySlug: typeof ProjectsStatsStore['itemsBySlug']) {\n    const {project} = this.props;\n\n    // Don't update state if we already have stats\n    if (!itemsBySlug[project.slug]) {\n      return;\n    }\n    if (itemsBySlug[project.slug] === this.state.projectDetails) {\n      return;\n    }\n\n    this.setState({\n      projectDetails: itemsBySlug[project.slug],\n    });\n  },\n  render() {\n    const {project, ...props} = this.props;\n    const {projectDetails} = this.state;\n    return (\n      <ProjectCard\n        {...props}\n        project={{\n          ...project,\n          ...(projectDetails || {}),\n        }}\n      />\n    );\n  },\n});\n\nconst ChartContainer = styled('div')`\n  position: relative;\n  background: ${p => p.theme.gray100};\n  padding-top: ${space(1)};\n`;\n\nconst StyledProjectCardHeader = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px ${space(2)};\n`;\n\nconst StyledProjectCard = styled('div')`\n  background-color: white;\n  border: 1px solid ${p => p.theme.borderDark};\n  border-radius: ${p => p.theme.borderRadius};\n  box-shadow: ${p => p.theme.dropShadowLight};\n`;\n\nconst LoadingCard = styled('div')`\n  border: 1px solid transparent;\n  background-color: ${p => p.theme.gray100};\n  height: 210px;\n`;\n\nconst StyledIdBadge = styled(IdBadge)`\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport {ProjectCard};\nexport default withOrganization(withApi(ProjectCardContainer));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\n\nimport {Team, Project, Scope} from 'app/types';\nimport SentryTypes from 'app/sentryTypes';\nimport space from 'app/styles/space';\nimport PageHeading from 'app/components/pageHeading';\n\nimport TeamMembers from './teamMembers';\nimport ProjectCard from './projectCard';\n\ntype Props = {\n  team: Team;\n  orgId: string;\n  showBorder: boolean;\n  access: Set<Scope>;\n  title: React.ReactNode;\n  projects: Project[];\n};\n\nconst TeamSection = ({team, projects, title, showBorder, orgId, access}: Props) => {\n  const hasTeamAccess = access.has('team:read');\n  const hasProjectAccess = access.has('project:read');\n\n  return (\n    <TeamSectionWrapper data-test-id=\"team\" showBorder={showBorder}>\n      <TeamTitleBar>\n        <TeamName>{title}</TeamName>\n        {hasTeamAccess && team && <TeamMembers teamId={team.slug} orgId={orgId} />}\n      </TeamTitleBar>\n      <ProjectCards>\n        {projects.map(project => (\n          <ProjectCard\n            data-test-id={project.slug}\n            key={project.slug}\n            project={project}\n            hasProjectAccess={hasProjectAccess}\n          />\n        ))}\n      </ProjectCards>\n    </TeamSectionWrapper>\n  );\n};\n\nTeamSection.propTypes = {\n  team: SentryTypes.Team,\n  orgId: PropTypes.string,\n  showBorder: PropTypes.bool,\n  access: PropTypes.object,\n  title: PropTypes.node,\n  projects: PropTypes.array,\n};\n\nconst ProjectCards = styled('div')`\n  display: grid;\n  grid-template-columns: minmax(100px, 1fr);\n  grid-gap: ${space(3)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    grid-template-columns: repeat(2, minmax(100px, 1fr));\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    grid-template-columns: repeat(3, minmax(100px, 1fr));\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    grid-template-columns: repeat(4, minmax(100px, 1fr));\n  }\n`;\n\nconst TeamSectionWrapper = styled('div')<{showBorder: boolean}>`\n  border-bottom: ${p => (p.showBorder ? '1px solid ' + p.theme.borderLight : 0)};\n  padding: 0 ${space(4)} ${space(4)};\n`;\n\nconst TeamTitleBar = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${space(3)} 0 ${space(2)};\n`;\n\nconst TeamName = styled(PageHeading)`\n  font-size: 20px;\n  line-height: 24px; /* We need this so that header doesn't flicker when lazy loading because avatarList height > this */\n`;\n\nexport default TeamSection;\n","import {Link} from 'react-router';\nimport LazyLoad from 'react-lazyload';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport uniqBy from 'lodash/uniqBy';\nimport flatten from 'lodash/flatten';\nimport {withProfiler} from '@sentry/react';\nimport {RouteComponentProps} from 'react-router/lib/Router';\n\nimport {Client} from 'app/api';\nimport {TeamWithProjects, Organization} from 'app/types';\nimport {sortProjects} from 'app/utils';\nimport {t} from 'app/locale';\nimport LoadingError from 'app/components/loadingError';\nimport Button from 'app/components/button';\nimport IdBadge from 'app/components/idBadge';\nimport NoProjectMessage from 'app/components/noProjectMessage';\nimport PageHeading from 'app/components/pageHeading';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport ProjectsStatsStore from 'app/stores/projectsStatsStore';\nimport SentryTypes from 'app/sentryTypes';\nimport space from 'app/styles/space';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeamsForUser from 'app/utils/withTeamsForUser';\nimport {IconAdd} from 'app/icons';\n\nimport Resources from './resources';\nimport TeamSection from './teamSection';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  teams: TeamWithProjects[];\n  loadingTeams: boolean;\n  error: Error | null;\n} & RouteComponentProps<{orgId: string}, {}>;\n\nclass Dashboard extends React.Component<Props> {\n  static propTypes = {\n    teams: PropTypes.array,\n    organization: SentryTypes.Organization,\n    loadingTeams: PropTypes.bool,\n    error: PropTypes.instanceOf(Error),\n  };\n\n  componentWillUnmount() {\n    ProjectsStatsStore.reset();\n  }\n\n  render() {\n    const {teams, params, organization, loadingTeams, error} = this.props;\n\n    if (loadingTeams) {\n      return <LoadingIndicator />;\n    }\n\n    if (error) {\n      return <LoadingError message=\"An error occurred while fetching your projects\" />;\n    }\n\n    const filteredTeams = teams.filter(team => team.projects.length);\n    filteredTeams.sort((team1, team2) => team1.slug.localeCompare(team2.slug));\n\n    const projects = uniqBy(flatten(teams.map(teamObj => teamObj.projects)), 'id');\n    const favorites = projects.filter(project => project.isBookmarked);\n\n    const access = new Set(organization.access);\n    const canCreateProjects = access.has('project:admin');\n    const hasTeamAdminAccess = access.has('team:admin');\n\n    const showEmptyMessage = projects.length === 0 && favorites.length === 0;\n    const showResources = projects.length === 1 && !projects[0].firstEvent;\n\n    if (showEmptyMessage) {\n      return (\n        <NoProjectMessage organization={organization} projects={projects}>\n          {null}\n        </NoProjectMessage>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle\n          title={t('Projects Dashboard')}\n          objSlug={organization.slug}\n        />\n        {projects.length > 0 && (\n          <ProjectsHeader>\n            <PageHeading>Projects</PageHeading>\n            <Button\n              size=\"small\"\n              disabled={!canCreateProjects}\n              title={\n                !canCreateProjects\n                  ? t('You do not have permission to create projects')\n                  : undefined\n              }\n              to={`/organizations/${organization.slug}/projects/new/`}\n              icon={<IconAdd size=\"xs\" isCircled />}\n              data-test-id=\"create-project\"\n            >\n              {t('Create Project')}\n            </Button>\n          </ProjectsHeader>\n        )}\n\n        {filteredTeams.map((team, index) => {\n          const showBorder = index !== teams.length - 1;\n          return (\n            <LazyLoad key={team.slug} once debounce={50} height={300} offset={300}>\n              <TeamSection\n                orgId={params.orgId}\n                team={team}\n                showBorder={showBorder}\n                title={\n                  hasTeamAdminAccess ? (\n                    <TeamLink to={`/settings/${organization.slug}/teams/${team.slug}/`}>\n                      <IdBadge team={team} avatarSize={22} />\n                    </TeamLink>\n                  ) : (\n                    <IdBadge team={team} avatarSize={22} />\n                  )\n                }\n                projects={sortProjects(team.projects)}\n                access={access}\n              />\n            </LazyLoad>\n          );\n        })}\n\n        {showResources && <Resources organization={organization} />}\n      </React.Fragment>\n    );\n  }\n}\n\nconst OrganizationDashboard = (props: Props) => (\n  <OrganizationDashboardWrapper>\n    <Dashboard {...props} />\n  </OrganizationDashboardWrapper>\n);\n\nconst TeamLink = styled(Link)`\n  display: flex;\n  align-items: center;\n`;\n\nconst ProjectsHeader = styled('div')`\n  padding: ${space(3)} ${space(4)} 0 ${space(4)};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst OrganizationDashboardWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n\nexport {Dashboard};\nexport default withApi(\n  withOrganization(withTeamsForUser(withProfiler(OrganizationDashboard)))\n);\n"],"sourceRoot":""}