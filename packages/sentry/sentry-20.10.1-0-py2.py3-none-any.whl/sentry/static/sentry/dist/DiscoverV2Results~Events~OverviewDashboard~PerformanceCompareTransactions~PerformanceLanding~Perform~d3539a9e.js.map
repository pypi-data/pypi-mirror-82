{"version":3,"sources":["webpack:///./app/components/charts/lineChart.jsx","webpack:///./app/components/charts/areaChart.jsx","webpack:///./app/components/charts/chartZoom.jsx","webpack:///./app/utils/getPeriod.tsx","webpack:///./app/components/charts/releaseSeries.jsx","webpack:///./app/components/charts/components/markLine.tsx","webpack:///./app/components/charts/series/areaSeries.tsx","webpack:///./app/components/charts/components/dataZoomInside.tsx","webpack:///./app/components/charts/components/toolBox.tsx"],"names":["LineChart","this","props","series","seriesOptions","map","seriesName","data","dataArray","options","LineSeries","name","value","React","Component","AreaChart","stacked","colors","i","otherSeriesProps","AreaSeries","stack","color","lineStyle","opacity","width","areaStyle","animation","animationThreshold","animationDuration","getDate","date","moment","utc","format","HTML5_FMT","DATETIME_LOCAL_SECONDS","ChartZoom","saveCurrentPeriod","currentPeriod","period","start","end","setPeriod","saveHistory","router","onZoom","startFormatted","endFormatted","history","push","callIfFunction","zooming","updateDateTime","getUtcToLocalDateObject","handleChartReady","chart","dispatchAction","type","key","dataZoomSelectActive","onChartReady","handleZoomRestore","evt","length","onRestore","handleDataZoom","axis","getModel","option","xAxis","rangeStart","rangeEnd","previousPeriod","pop","onDataZoom","handleChartFinished","onFinished","disabled","children","xAxisIndex","isGroupedByDate","dataZoom","DataZoomInside","showTimeInTooltip","toolBox","ToolBox","title","zoom","back","iconStyle","borderWidth","getPeriod","shouldDoublePeriod","DEFAULT_STATS_PERIOD","statsPeriod","match","periodNumber","periodLength","parseInt","Error","formattedStart","getUtcDateString","formattedEnd","diff","previousPeriodStart","subtract","ReleaseSeries","state","releases","releaseSeries","getReleaseSeries","organization","tooltip","markLine","MarkLine","normal","theme","purple400","trigger","formatter","time","getFormattedDate","local","version","escape","formatVersion","t","join","label","show","release","Date","dateCreated","onClick","pathname","slug","query","Set","features","has","undefined","project","location","_isMounted","setReleasesWithSeries","fetchData","prevProps","isEqual","projects","environments","api","clear","conditions","Object","keys","forEach","requestPromise","method","getOrganizationReleases","environment","then","addErrorMessage","setState","withRouter","withOrganization","withApi","symbol","DEFAULT","zoomOnMouseWheel","throttle","Array","isArray","getFeatures","yAxisIndex","restore","right","top","itemSize","feature"],"mappings":"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","file":"DiscoverV2Results~Events~OverviewDashboard~PerformanceCompareTransactions~PerformanceLanding~Perform~d3539a9e.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport BaseChart from './baseChart';\nimport LineSeries from './series/lineSeries';\n\nexport default class LineChart extends React.Component {\n  static propTypes = {\n    ...BaseChart.propTypes,\n    seriesOptions: PropTypes.object,\n  };\n\n  render() {\n    const {series, seriesOptions, ...props} = this.props;\n\n    return (\n      <BaseChart\n        {...props}\n        series={series.map(({seriesName, data, dataArray, ...options}) =>\n          LineSeries({\n            ...seriesOptions,\n            ...options,\n            name: seriesName,\n            data: dataArray || data.map(({value, name}) => [name, value]),\n          })\n        )}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AreaSeries from './series/areaSeries';\nimport BaseChart from './baseChart';\n\nclass AreaChart extends React.Component {\n  static propTypes = {\n    ...BaseChart.propTypes,\n    stacked: PropTypes.bool,\n  };\n\n  render() {\n    const {series, stacked, colors, ...props} = this.props;\n\n    return (\n      <BaseChart\n        {...props}\n        series={series.map(({seriesName, data, ...otherSeriesProps}, i) =>\n          AreaSeries({\n            stack: stacked ? 'area' : false,\n            name: seriesName,\n            data: data.map(({name, value}) => [name, value]),\n            color: colors && colors[i],\n            lineStyle: {\n              opacity: 1,\n              width: 0.4,\n            },\n            areaStyle: {\n              color: colors && colors[i],\n              opacity: 1.0,\n            },\n            animation: false,\n            animationThreshold: 1,\n            animationDuration: 0,\n            ...otherSeriesProps,\n          })\n        )}\n      />\n    );\n  }\n}\n\nexport default AreaChart;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport moment from 'moment';\n\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {getUtcToLocalDateObject} from 'app/utils/dates';\nimport {updateDateTime} from 'app/actionCreators/globalSelection';\nimport DataZoomInside from 'app/components/charts/components/dataZoomInside';\nimport SentryTypes from 'app/sentryTypes';\nimport ToolBox from 'app/components/charts/components/toolBox';\n\nconst getDate = date =>\n  date ? moment.utc(date).format(moment.HTML5_FMT.DATETIME_LOCAL_SECONDS) : null;\n\n/**\n * This is a very opinionated component that takes a render prop through `children`. It\n * will provide props to be passed to `BaseChart` to enable support of zooming without\n * eCharts' clunky zoom toolboxes.\n *\n * This also is very tightly coupled with the Global Selection Header. We can make it more\n * generic if need be in the future.\n */\nclass ChartZoom extends React.Component {\n  static propTypes = {\n    router: PropTypes.object,\n    period: PropTypes.string,\n    start: PropTypes.instanceOf(Date),\n    end: PropTypes.instanceOf(Date),\n    utc: PropTypes.bool,\n    disabled: PropTypes.bool,\n\n    xAxis: SentryTypes.EChartsXAxis,\n    /**\n     * If you need the dataZoom control to control more than one chart.\n     * you can provide a list of the axis indexes.\n     */\n    xAxisIndex: PropTypes.arrayOf(PropTypes.number),\n\n    // Callback for when chart has been zoomed\n    onZoom: PropTypes.func,\n    // Callbacks for eCharts events\n    onRestore: PropTypes.func,\n    onChartReady: PropTypes.func,\n    onDataZoom: PropTypes.func,\n    onFinished: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n\n    // Zoom history\n    this.history = [];\n\n    // Initialize current period instance state for zoom history\n    this.saveCurrentPeriod(props);\n  }\n\n  componentDidUpdate() {\n    if (this.props.disabled) {\n      return;\n    }\n\n    // When component updates, make sure we sync current period state\n    // for use in zoom history\n    this.saveCurrentPeriod(this.props);\n  }\n\n  /**\n   * Save current period state from period in props to be used\n   * in handling chart's zoom history state\n   */\n  saveCurrentPeriod = props => {\n    this.currentPeriod = {\n      period: props.period,\n      start: getDate(props.start),\n      end: getDate(props.end),\n    };\n  };\n\n  /**\n   * Sets the new period due to a zoom related action\n   *\n   * Saves the current period to an instance property so that we\n   * can control URL state when zoom history is being manipulated\n   * by the chart controls.\n   *\n   * Saves a callback function to be called after chart animation is completed\n   */\n  setPeriod = ({period, start, end}, saveHistory) => {\n    const {router, onZoom} = this.props;\n    const startFormatted = getDate(start);\n    const endFormatted = getDate(end);\n\n    // Save period so that we can revert back to it when using echarts \"back\" navigation\n    if (saveHistory) {\n      this.history.push(this.currentPeriod);\n    }\n\n    // Callback to let parent component know zoom has changed\n    // This is required for some more perceived responsiveness since\n    // we delay updating URL state so that chart animation can finish\n    //\n    // Parent container can use this to change into a loading state before\n    // URL parameters are changed\n    callIfFunction(onZoom, {\n      period,\n      start: startFormatted,\n      end: endFormatted,\n    });\n\n    this.zooming = () => {\n      updateDateTime(\n        {\n          period,\n          start: startFormatted\n            ? getUtcToLocalDateObject(startFormatted)\n            : startFormatted,\n          end: endFormatted ? getUtcToLocalDateObject(endFormatted) : endFormatted,\n        },\n        router\n      );\n\n      this.saveCurrentPeriod({period, start, end});\n    };\n  };\n\n  /**\n   * Enable zoom immediately instead of having to toggle to zoom\n   */\n  handleChartReady = chart => {\n    chart.dispatchAction({\n      type: 'takeGlobalCursor',\n      key: 'dataZoomSelect',\n      dataZoomSelectActive: true,\n    });\n\n    callIfFunction(this.props.onChartReady, chart);\n  };\n\n  /**\n   * Restores the chart to initial viewport/zoom level\n   *\n   * Updates URL state to reflect initial params\n   */\n  handleZoomRestore = (evt, chart) => {\n    if (!this.history.length) {\n      return;\n    }\n\n    this.setPeriod(this.history[0]);\n\n    // reset history\n    this.history = [];\n\n    callIfFunction(this.props.onRestore, evt, chart);\n  };\n\n  handleDataZoom = (evt, chart) => {\n    const model = chart.getModel();\n    const {xAxis} = model.option;\n    const axis = xAxis[0];\n\n    // if `rangeStart` and `rangeEnd` are null, then we are going back\n    if (axis.rangeStart === null && axis.rangeEnd === null) {\n      const previousPeriod = this.history.pop();\n\n      if (!previousPeriod) {\n        return;\n      }\n\n      this.setPeriod(previousPeriod);\n    } else {\n      const start = moment.utc(axis.rangeStart);\n\n      // Add a day so we go until the end of the day (e.g. next day at midnight)\n      const end = moment.utc(axis.rangeEnd);\n\n      this.setPeriod({period: null, start, end}, true);\n    }\n\n    callIfFunction(this.props.onDataZoom, evt, chart);\n  };\n\n  /**\n   * Chart event when *any* rendering+animation finishes\n   *\n   * `this.zooming` acts as a callback function so that\n   * we can let the native zoom animation on the chart complete\n   * before we update URL state and re-render\n   */\n  handleChartFinished = () => {\n    if (typeof this.zooming === 'function') {\n      this.zooming();\n      this.zooming = null;\n    }\n    callIfFunction(this.props.onFinished);\n  };\n\n  render() {\n    const {\n      utc,\n      disabled,\n      children,\n      xAxisIndex,\n\n      onZoom: _onZoom,\n      onRestore: _onRestore,\n      onChartReady: _onChartReady,\n      onDataZoom: _onDataZoom,\n      onFinished: _onFinished,\n      ...props\n    } = this.props;\n\n    if (disabled) {\n      return children(props);\n    }\n\n    // TODO(mark) Update consumers of DataZoom when typing this.\n    const renderProps = {\n      // Zooming only works when grouped by date\n      isGroupedByDate: true,\n      onChartReady: this.handleChartReady,\n      utc,\n      dataZoom: DataZoomInside({xAxisIndex}),\n      showTimeInTooltip: true,\n      toolBox: ToolBox(\n        {},\n        {\n          dataZoom: {\n            title: {\n              zoom: '',\n              back: '',\n            },\n            iconStyle: {\n              borderWidth: 0,\n              color: 'transparent',\n              opacity: 0,\n            },\n          },\n        }\n      ),\n      onDataZoom: this.handleDataZoom,\n      onRestore: this.handleZoomRestore,\n      onFinished: this.handleChartFinished,\n      ...props,\n    };\n\n    return children(renderProps);\n  }\n}\n\nexport default ChartZoom;\n","import moment from 'moment';\n\nimport {DEFAULT_STATS_PERIOD} from 'app/constants';\nimport {getUtcDateString} from 'app/utils/dates';\n\n/**\n * Gets the period to query with if we need to double the initial period in order\n * to get data for the previous period\n *\n * @param {Object} dateObj The date object\n * @param {String} dateObj.period Relative period string in format \"<int><unit>\" (e.g. 4d for 4 days)\n * @param {Date} dateObj.start Starting date object\n * @param {Date} dateObj.end Ending date object\n * @param {Object} options Options\n * @param {Boolean} [options.shouldDoublePeriod] Doubles the given period (useful for getting previous period data)\n * @return {Object} Returns an object with either a period or start/end dates ({statsPeriod: string} or {start: string, end: string})\n */\ntype Options = {shouldDoublePeriod?: boolean};\n\nexport const getPeriod = (\n  {period, start, end},\n  {shouldDoublePeriod}: Options = {}\n): {start: string; end: string} | {statsPeriod: string} => {\n  if (!period && !start && !end) {\n    period = DEFAULT_STATS_PERIOD;\n  }\n\n  // you can not specify both relative and absolute periods\n  // relative period takes precedence\n  if (period) {\n    if (!shouldDoublePeriod) {\n      return {statsPeriod: period};\n    }\n    const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/);\n\n    return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};\n  }\n\n  if (!start || !end) {\n    throw new Error('start and end required');\n  }\n\n  const formattedStart = getUtcDateString(start);\n  const formattedEnd = getUtcDateString(end);\n\n  if (shouldDoublePeriod) {\n    // get duration of end - start and double\n    const diff = moment(end).diff(moment(start));\n\n    const previousPeriodStart = moment(start).subtract(diff);\n\n    // This is not as accurate as having 2 start/end objs\n    return {\n      start: getUtcDateString(previousPeriodStart),\n      end: formattedEnd,\n    };\n  }\n\n  return {\n    start: formattedStart,\n    end: formattedEnd,\n  };\n};\n","import {withRouter} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {getFormattedDate, getUtcDateString} from 'app/utils/dates';\nimport {t} from 'app/locale';\nimport MarkLine from 'app/components/charts/components/markLine';\nimport SentryTypes from 'app/sentryTypes';\nimport theme from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport {escape} from 'app/utils';\nimport {formatVersion} from 'app/utils/formatters';\n\n// This is not an exported action/function because releases list uses AsyncComponent\n// and this is not re-used anywhere else afaict\nfunction getOrganizationReleases(api, organization, conditions = null) {\n  const query = {};\n  Object.keys(conditions).forEach(key => {\n    let value = conditions[key];\n    if (value && (key === 'start' || key === 'end')) {\n      value = getUtcDateString(value);\n    }\n    if (value) {\n      query[key] = value;\n    }\n  });\n  api.clear();\n  return api.requestPromise(`/organizations/${organization.slug}/releases/`, {\n    method: 'GET',\n    query,\n  });\n}\n\nclass ReleaseSeries extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    router: PropTypes.object,\n    organization: SentryTypes.Organization,\n    projects: PropTypes.arrayOf(PropTypes.number),\n    environments: PropTypes.arrayOf(PropTypes.string),\n\n    period: PropTypes.string,\n    start: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),\n    end: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),\n    utc: PropTypes.bool,\n    // Array of releases, if empty, component will fetch releases itself\n    releases: PropTypes.arrayOf(SentryTypes.Release),\n    tooltip: SentryTypes.EChartsTooltip,\n  };\n\n  state = {\n    releases: null,\n    releaseSeries: [],\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    const {releases} = this.props;\n\n    if (releases) {\n      // No need to fetch releases if passed in from props\n      this.setReleasesWithSeries(releases);\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      !isEqual(prevProps.projects, this.props.projects) ||\n      !isEqual(prevProps.environments, this.props.environments) ||\n      !isEqual(prevProps.start, this.props.start) ||\n      !isEqual(prevProps.end, this.props.end) ||\n      !isEqual(prevProps.period, this.props.period)\n    ) {\n      this.fetchData();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.props.api.clear();\n  }\n\n  fetchData() {\n    const {api, organization, projects, environments, period, start, end} = this.props;\n    const conditions = {\n      start,\n      end,\n      project: projects,\n      environment: environments,\n      statsPeriod: period,\n    };\n    getOrganizationReleases(api, organization, conditions)\n      .then(releases => {\n        if (this._isMounted) {\n          this.setReleasesWithSeries(releases);\n        }\n      })\n      .catch(() => {\n        addErrorMessage(t('Error fetching releases'));\n      });\n  }\n\n  setReleasesWithSeries(releases) {\n    this.setState({\n      releases,\n      releaseSeries: [this.getReleaseSeries(releases)],\n    });\n  }\n\n  getReleaseSeries = releases => {\n    const {organization, router, tooltip} = this.props;\n\n    return {\n      seriesName: 'Releases',\n      data: [],\n      markLine: MarkLine({\n        lineStyle: {\n          normal: {\n            color: theme.purple400,\n            opacity: 0.3,\n            type: 'solid',\n          },\n        },\n        tooltip: tooltip || {\n          trigger: 'item',\n          formatter: ({data}) => {\n            // XXX using this.props here as this function does not get re-run\n            // unless projects are changed. Using a closure variable would result\n            // in stale values.\n            const time = getFormattedDate(data.value, 'MMM D, YYYY LT', {\n              local: !this.props.utc,\n            });\n            const version = escape(formatVersion(data.name, true));\n            return [\n              '<div class=\"tooltip-series\">',\n              `<div><span class=\"tooltip-label\"><strong>${t(\n                'Release'\n              )}</strong></span> ${version}</div>`,\n              '</div>',\n              '<div class=\"tooltip-date\">',\n              time,\n              '</div>',\n              '</div>',\n              '<div class=\"tooltip-arrow\"></div>',\n            ].join('');\n          },\n        },\n        label: {\n          show: false,\n        },\n        data: releases.map(release => ({\n          xAxis: +new Date(release.dateCreated),\n          name: formatVersion(release.version, true),\n          value: formatVersion(release.version, true),\n          onClick: () => {\n            router.push({\n              pathname: `/organizations/${organization.slug}/releases/${release.version}/`,\n              query: new Set(organization.features).has('global-views')\n                ? undefined\n                : {project: router.location.query.project},\n            });\n          },\n          label: {\n            formatter: () => formatVersion(release.version, true),\n          },\n        })),\n      }),\n    };\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children({\n      releases: this.state.releases,\n      releaseSeries: this.state.releaseSeries,\n    });\n  }\n}\n\nexport default withRouter(withOrganization(withApi(ReleaseSeries)));\n","import {EChartOption} from 'echarts';\n\n/**\n * eCharts markLine\n *\n * See https://echarts.apache.org/en/option.html#series-line.markLine\n */\nexport default function MarkLine(\n  props: EChartOption.SeriesLine['markLine']\n): EChartOption.SeriesLine['markLine'] {\n  return {\n    // The second symbol is a very ugly arrow, we don't want it\n    symbol: ['none', 'none'],\n    ...props,\n  };\n}\n","import {EChartOption} from 'echarts';\n\nimport LineSeries from 'app/components/charts/series/lineSeries';\n\nexport default function AreaSeries(\n  props: EChartOption.SeriesLine = {}\n): EChartOption.SeriesLine {\n  return LineSeries({\n    ...props,\n  });\n}\n","import {EChartOption} from 'echarts';\n\nconst DEFAULT = {\n  type: 'inside',\n  zoomOnMouseWheel: 'shift',\n  throttle: 50,\n};\n\nexport default function DataZoomInside(\n  props: EChartOption.DataZoom.Inside\n): EChartOption.DataZoom[] {\n  // `props` can be boolean, if so return default\n  if (!props || !Array.isArray(props)) {\n    const dataZoom = {\n      ...DEFAULT,\n      ...props,\n    } as EChartOption.DataZoom.Inside;\n    return [dataZoom];\n  }\n\n  return props;\n}\n","import {EChartOption} from 'echarts';\n\nfunction getFeatures({dataZoom, ...features}) {\n  return {\n    ...(dataZoom\n      ? {\n          dataZoom: {\n            yAxisIndex: 'none',\n            title: {\n              zoom: 'zoom',\n              back: 'undo',\n              restore: 'reset',\n            },\n            ...dataZoom,\n          },\n        }\n      : {}),\n    ...features,\n  };\n}\n\nexport default function ToolBox(options, features): EChartOption['toolbox'] {\n  return {\n    right: 0,\n    top: 0,\n    itemSize: 16,\n\n    feature: getFeatures(features),\n    ...options,\n  };\n}\n"],"sourceRoot":""}