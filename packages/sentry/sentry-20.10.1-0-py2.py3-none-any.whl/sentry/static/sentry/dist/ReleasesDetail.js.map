{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/components/layouts/thirds.tsx","webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/components/deployBadge.tsx","webpack:///./app/views/releases/detail/releaseStat.tsx","webpack:///./app/views/releases/detail/releaseActions.tsx","webpack:///./app/views/releases/detail/releaseHeader.tsx","webpack:///./app/views/releases/detail/pickProjectToContinue.tsx","webpack:///./app/views/releases/detail/index.tsx","webpack:///./app/views/releases/detail/utils.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","routeTitleGen","routeName","orgSlug","withSentry","tmpl","Body","space","p","theme","white","breakpoints","HeaderContent","HeaderActions","Title","headerFontSize","gray700","overflowEllipsis","Header","borderDark","Main","fullWidth","Side","Breadcrumbs","crumbs","linkLastItem","props","length","to","BreadcrumbList","map","index","label","preserveGlobalSelection","key","labelKey","mapKey","Fragment","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","gray500","gray600","IconChevron","DeployBadge","deploy","projectId","version","className","shouldLinkToIssues","badge","Badge","Label","environment","Icon","pathname","query","project","stringifyQueryObject","QueryResults","t","Tag","fontSizeSmall","IconOpen","ReleaseStat","children","help","Wrapper","hasHelp","StyledQuestionTooltip","position","Value","QuestionTooltip","fontSizeExtraLarge","ReleaseActions","orgId","hasHealthData","handleDelete","a","redirectPath","addLoadingMessage","deleteRelease","addSuccessMessage","browserHistory","push","errorMessage","responseJSON","detail","addErrorMessage","onConfirm","message","disabled","icon","ReleaseHeader","location","release","releaseMeta","newGroups","url","lastDeploy","dateCreated","commitCount","commitFilesChanged","releaseFileCount","healthData","sessionsCrashed","releasePath","encodeURIComponent","tabs","NavTabsBadge","text","formatAbbreviatedNumber","StyledHeader","HeaderInfoContainer","formatVersion","StatsWrapper","dateFinished","DeploysWrapper","date","StyledDeployBadge","value","ReleaseName","anchor","IconWrapper","containerDisplayMode","href","StyledNavTabs","tab","path","pick","Object","values","URL_PARAM","isActive","Layout","NavTabs","PickProjectToContinue","router","projects","navigating","replace","id","openModal","modalProps","needOrg","needProject","nextPath","onFinish","projectSlugs","slug","onClose","ContextPickerBackground","ReleaseContext","React","createContext","ReleasesDetail","shouldReload","params","organization","deploys","health","basePath","endpoints","deployCount","possiblyWrongProject","state","errors","find","e","status","type","args","selection","reloading","StyledPageContent","Provider","ReleasesDetailContainer","has404Errors","ProjectsFooterMessage","isProjectMissingInUrl","lockedMessageSubject","shouldForceProject","forceProject","undefined","specificProjectSlugs","disableMultipleProjectSelection","showProjectSettingsLink","projectsFooterMessage","renderProjectsFooterMessage","PageContent","withGlobalSelection","withOrganization","Client","requestPromise","method","getFilesByRepository","fileList","reduce","filesByRepository","file","filename","repoName","author","hasOwnProperty","authors","types","Set","email","add","getCommitsByRepository","commitList","commitsByRepository","commit","repositoryName","repository","name","getQuery","perPage","activeRepository","per_page","repo_name","getReposToRender","repos"],"mappings":"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","file":"ReleasesDetail.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport NavTabs from 'app/components/navTabs';\n\n/**\n * Base container for 66/33 containers.\n */\nexport const Body = styled('div')`\n  padding: ${space(2)};\n  margin: 0;\n  background-color: ${p => p.theme.white};\n  flex-grow: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    padding: ${space(2)} ${space(4)};\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    display: grid;\n    grid-template-columns: 66% auto;\n    align-content: start;\n    grid-gap: ${space(3)};\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    grid-template-columns: minmax(100px, auto) 325px;\n  }\n`;\n\n/**\n * Use HeaderContent to create horizontal regions in the header\n * that contain a heading/breadcrumbs and a button group.\n */\nexport const HeaderContent = styled('div')`\n  display: flex;\n  flex-direction: column;\n  justify-content: normal;\n  margin-bottom: ${space(2)};\n  overflow: hidden;\n  max-width: 100%;\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    margin-bottom: ${space(1)};\n  }\n`;\n\n/**\n * Container for action buttons and secondary information that\n * flows on the top right of the header.\n */\nexport const HeaderActions = styled('div')`\n  display: flex;\n  flex-direction: column;\n  justify-content: normal;\n  min-width: max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    width: max-content;\n    margin-bottom: ${space(2)};\n  }\n`;\n\n/**\n * Heading container that includes margins.\n */\nexport const Title = styled('h2')`\n  font-size: ${p => p.theme.headerFontSize};\n  font-weight: normal;\n  line-height: 1.2;\n  color: ${p => p.theme.gray700};\n  margin-top: ${space(3)};\n  /* TODO(bootstrap) Remove important when bootstrap headings are removed */\n  margin-bottom: 0 !important;\n  min-height: 30px;\n  align-self: center;\n  ${overflowEllipsis};\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    margin-top: ${space(1)};\n  }\n`;\n\n/**\n * Header container for header content and header actions.\n *\n * Uses a horizontal layout in wide viewports to put space between\n * the headings and the actions container. In narrow viewports these elements\n * are stacked vertically.\n */\nexport const Header = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  flex-grow: 0;\n  justify-content: space-between;\n  padding: ${space(2)} ${space(4)} 0 ${space(4)};\n  margin: 0;\n\n  background-color: transparent;\n  border-bottom: 1px solid ${p => p.theme.borderDark};\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    flex-direction: column;\n  }\n`;\n\n/**\n * Styled Nav Tabs for use inside a Layout.Header component\n */\nexport const HeaderNavTabs = styled(NavTabs)`\n  margin: 0;\n  border-bottom: 0 !important;\n  li {\n    margin-right: ${space(0.5)};\n  }\n  li > a {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\n/**\n * Containers for two column 66/33 layout.\n */\nexport const Main = styled('section')<{fullWidth?: boolean}>`\n  grid-column: ${p => (p.fullWidth ? '1/3' : '1/2')};\n  max-width: 100%;\n`;\nexport const Side = styled('aside')`\n  grid-column: 2/3;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {IconChevron} from 'app/icons';\nimport Link from 'app/components/links/link';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport {Theme} from 'app/utils/theme';\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: Crumb[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    crumbs[crumbs.length - 1].to = null;\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map(({label, to, preserveGlobalSelection, key}, index) => {\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <React.Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray500};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.gray700};\n  }\n`;\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nconst BreadcrumbLink = styled(({preserveGlobalSelection, ...props}) =>\n  preserveGlobalSelection ? <GlobalSelectionLink {...props} /> : <Link {...props} />\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.gray600};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray500};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Deploy} from 'app/types';\nimport Tag from 'app/components/tag';\nimport Link from 'app/components/links/link';\nimport {IconOpen} from 'app/icons';\nimport {stringifyQueryObject, QueryResults} from 'app/utils/tokenizeSearch';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\ntype Props = {\n  deploy: Deploy;\n  projectId?: number;\n  orgSlug?: string;\n  version?: string;\n  className?: string;\n};\n\nconst DeployBadge = ({deploy, orgSlug, projectId, version, className}: Props) => {\n  const shouldLinkToIssues = !!orgSlug && !!version;\n\n  const badge = (\n    <Badge className={className}>\n      <Label>{deploy.environment}</Label>\n      {shouldLinkToIssues && <Icon size=\"xs\" />}\n    </Badge>\n  );\n\n  if (!shouldLinkToIssues) {\n    return badge;\n  }\n\n  return (\n    <Link\n      to={{\n        pathname: `/organizations/${orgSlug}/issues/`,\n        query: {\n          project: projectId ?? null,\n          environment: deploy.environment,\n          query: stringifyQueryObject(new QueryResults([`release:${version!}`])),\n        },\n      }}\n      title={t('Open in Issues')}\n    >\n      {badge}\n    </Link>\n  );\n};\n\nconst Badge = styled(Tag)`\n  background-color: ${p => p.theme.gray700};\n  color: ${p => p.theme.white};\n  font-size: ${p => p.theme.fontSizeSmall};\n  align-items: center;\n  height: 20px;\n`;\n\nconst Label = styled('span')`\n  max-width: 100px;\n  line-height: 20px;\n  ${overflowEllipsis}\n`;\n\nconst Icon = styled(IconOpen)`\n  margin-left: ${space(0.5)};\n  flex-shrink: 0;\n`;\n\nexport default DeployBadge;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport QuestionTooltip from 'app/components/questionTooltip';\n\ntype Props = {\n  label: string;\n  children: React.ReactNode;\n  help?: React.ReactNode;\n};\n\nconst ReleaseStat = ({label, children, help}: Props) => (\n  <Wrapper>\n    <Label hasHelp={!!help}>\n      {label}\n      {help && <StyledQuestionTooltip title={help} size=\"xs\" position=\"top\" />}\n    </Label>\n    <Value>{children}</Value>\n  </Wrapper>\n);\n\nconst Wrapper = styled('div')`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin: ${space(2)} ${space(4)} ${space(2)} 0;\n  }\n`;\n\nconst Label = styled('div')<{hasHelp: boolean}>`\n  font-weight: 600;\n  font-size: ${p => p.theme.fontSizeSmall};\n  text-transform: uppercase;\n  color: ${p => p.theme.gray500};\n  line-height: 1.3;\n  margin-bottom: ${space(0.25)};\n  white-space: nowrap;\n  display: flex;\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    justify-content: flex-end;\n  }\n`;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n  margin-left: ${space(0.5)};\n`;\n\nconst Value = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  color: ${p => p.theme.gray700};\n`;\n\nexport default ReleaseStat;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {browserHistory} from 'react-router';\n\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport Button from 'app/components/button';\nimport {IconDelete} from 'app/icons';\nimport Confirm from 'app/components/confirm';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport Tooltip from 'app/components/tooltip';\n\nimport {deleteRelease} from './utils';\n\ntype Props = {\n  orgId: string;\n  version: string;\n  hasHealthData: boolean;\n};\n\nconst ReleaseActions = ({orgId, version, hasHealthData}: Props) => {\n  const handleDelete = async () => {\n    const redirectPath = `/organizations/${orgId}/releases/`;\n    addLoadingMessage(t('Deleting Release...'));\n\n    try {\n      await deleteRelease(orgId, version);\n      addSuccessMessage(t('Release was successfully removed.'));\n      browserHistory.push(redirectPath);\n    } catch (error) {\n      const errorMessage =\n        error.responseJSON?.detail ?? t('Release could not be be removed.');\n      addErrorMessage(errorMessage);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <Confirm\n        onConfirm={handleDelete}\n        message={t(\n          'Deleting this release is permanent and will affect other projects associated with it. Are you sure you wish to continue?'\n        )}\n      >\n        <div>\n          <Tooltip\n            title={t(\n              'You can only delete releases if they have no issues or health data.'\n            )}\n            disabled={!hasHealthData}\n          >\n            <Button icon={<IconDelete />} disabled={hasHealthData} />\n          </Tooltip>\n        </div>\n      </Confirm>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: min-content;\n  grid-gap: ${space(0.5)};\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: 100%;\n    margin: ${space(1)} 0 ${space(2)} 0;\n  }\n`;\n\nexport default ReleaseActions;\n","import React from 'react';\nimport {Location} from 'history';\nimport styled from '@emotion/styled';\nimport pick from 'lodash/pick';\n\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport space from 'app/styles/space';\nimport {t} from 'app/locale';\nimport ListLink from 'app/components/links/listLink';\nimport ExternalLink from 'app/components/links/externalLink';\nimport NavTabs from 'app/components/navTabs';\nimport {Release, ReleaseProject, ReleaseMeta} from 'app/types';\nimport Version from 'app/components/version';\nimport Clipboard from 'app/components/clipboard';\nimport {IconCopy, IconOpen} from 'app/icons';\nimport Tooltip from 'app/components/tooltip';\nimport Count from 'app/components/count';\nimport TimeSince from 'app/components/timeSince';\nimport {formatVersion, formatAbbreviatedNumber} from 'app/utils/formatters';\nimport Breadcrumbs from 'app/components/breadcrumbs';\nimport DeployBadge from 'app/components/deployBadge';\nimport Badge from 'app/components/badge';\nimport * as Layout from 'app/components/layouts/thirds';\n\nimport ReleaseStat from './releaseStat';\nimport ReleaseActions from './releaseActions';\n\ntype Props = {\n  location: Location;\n  orgId: string;\n  release: Release;\n  project: Required<ReleaseProject>;\n  releaseMeta: ReleaseMeta;\n};\n\nconst ReleaseHeader = ({location, orgId, release, project, releaseMeta}: Props) => {\n  const {version, newGroups, url, lastDeploy, dateCreated} = release;\n  const {commitCount, commitFilesChanged, releaseFileCount} = releaseMeta;\n  const {hasHealthData, sessionsCrashed} = project.healthData;\n\n  const releasePath = `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`;\n\n  const tabs = [\n    {title: t('Overview'), to: releasePath},\n    {\n      title: (\n        <React.Fragment>\n          {t('Commits')} <NavTabsBadge text={formatAbbreviatedNumber(commitCount)} />\n        </React.Fragment>\n      ),\n      to: `${releasePath}commits/`,\n    },\n    {\n      title: (\n        <React.Fragment>\n          {t('Files Changed')}\n          <NavTabsBadge text={formatAbbreviatedNumber(commitFilesChanged)} />\n        </React.Fragment>\n      ),\n      to: `${releasePath}files-changed/`,\n    },\n    {\n      title: (\n        <React.Fragment>\n          {t('Artifacts')}\n          <NavTabsBadge text={formatAbbreviatedNumber(releaseFileCount)} />\n        </React.Fragment>\n      ),\n      to: `${releasePath}artifacts/`,\n    },\n  ];\n\n  const getCurrentTabUrl = (path: string) => ({\n    pathname: path,\n    query: pick(location.query, Object.values(URL_PARAM)),\n  });\n\n  return (\n    <StyledHeader>\n      <HeaderInfoContainer>\n        <Breadcrumbs\n          crumbs={[\n            {\n              to: `/organizations/${orgId}/releases/`,\n              label: t('Releases'),\n              preserveGlobalSelection: true,\n            },\n            {label: formatVersion(version)},\n          ]}\n        />\n\n        <StatsWrapper>\n          <ReleaseStat\n            label={lastDeploy?.dateFinished ? t('Last Deploy') : t('Date Created')}\n          >\n            <DeploysWrapper>\n              <TimeSince date={lastDeploy?.dateFinished || dateCreated} />\n              {lastDeploy?.dateFinished && <StyledDeployBadge deploy={lastDeploy} />}\n            </DeploysWrapper>\n          </ReleaseStat>\n          {hasHealthData && (\n            <ReleaseStat\n              label={t('Crashes')}\n              help={t('Crash means that user experienced an unhandled error')}\n            >\n              <Count value={sessionsCrashed} />\n            </ReleaseStat>\n          )}\n          <ReleaseStat label={t('New Issues')}>\n            <Count value={newGroups} />\n          </ReleaseStat>\n          <ReleaseActions version={version} orgId={orgId} hasHealthData={hasHealthData} />\n        </StatsWrapper>\n      </HeaderInfoContainer>\n\n      <Layout.HeaderContent>\n        <ReleaseName>\n          <Version version={version} anchor={false} />\n\n          <IconWrapper>\n            <Clipboard value={version}>\n              <Tooltip title={version} containerDisplayMode=\"flex\">\n                <IconCopy size=\"xs\" />\n              </Tooltip>\n            </Clipboard>\n          </IconWrapper>\n\n          {!!url && (\n            <IconWrapper>\n              <Tooltip title={url}>\n                <ExternalLink href={url}>\n                  <IconOpen size=\"xs\" />\n                </ExternalLink>\n              </Tooltip>\n            </IconWrapper>\n          )}\n        </ReleaseName>\n      </Layout.HeaderContent>\n\n      <StyledNavTabs>\n        {tabs.map(tab => (\n          <ListLink\n            key={tab.to}\n            to={getCurrentTabUrl(tab.to)}\n            isActive={() => tab.to === location.pathname}\n          >\n            {tab.title}\n          </ListLink>\n        ))}\n      </StyledNavTabs>\n    </StyledHeader>\n  );\n};\n\nconst StyledHeader = styled(Layout.Header)`\n  flex-direction: column;\n`;\n\nconst HeaderInfoContainer = styled('div')`\n  margin-bottom: ${space(1)};\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    display: grid;\n    grid-column-gap: ${space(3)};\n    grid-template-columns: 1fr 1fr;\n    margin-bottom: 0;\n    align-items: flex-start;\n  }\n`;\n\nconst StatsWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: grid;\n    padding: ${space(1.5)} 0;\n    grid-auto-flow: column;\n    grid-gap: ${space(4)};\n  }\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    justify-content: flex-end;\n    text-align: right;\n  }\n`;\n\nconst DeploysWrapper = styled('div')`\n  white-space: nowrap;\n`;\n\nconst StyledDeployBadge = styled(DeployBadge)`\n  margin-left: ${space(1)};\n  bottom: ${space(0.25)};\n`;\n\nconst ReleaseName = styled('div')`\n  font-size: ${p => p.theme.headerFontSize};\n  color: ${p => p.theme.gray700};\n  display: flex;\n  align-items: center;\n`;\n\nconst IconWrapper = styled('span')`\n  transition: color 0.3s ease-in-out;\n  margin-left: ${space(1)};\n\n  &,\n  a {\n    color: ${p => p.theme.gray500};\n    display: flex;\n    &:hover {\n      cursor: pointer;\n      color: ${p => p.theme.gray700};\n    }\n  }\n`;\n\nconst StyledNavTabs = styled(NavTabs)`\n  margin-bottom: 0;\n  grid-column: 1 / 2;\n`;\n\nconst NavTabsBadge = styled(Badge)`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: none;\n  }\n`;\n\nexport default ReleaseHeader;\n","import React from 'react';\nimport * as ReactRouter from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {openModal} from 'app/actionCreators/modal';\nimport ContextPickerModalContainer from 'app/components/contextPickerModal';\nimport {ReleaseProject} from 'app/types';\n\ntype Props = {\n  orgSlug: string;\n  version: string;\n  router: ReactRouter.InjectedRouter;\n  projects: ReleaseProject[];\n};\n\nconst PickProjectToContinue = ({orgSlug, version, router, projects}: Props) => {\n  let navigating = false;\n\n  const path = `/organizations/${orgSlug}/releases/${encodeURIComponent(\n    version\n  )}/?project=`;\n\n  // if the project in URL is missing, but this release belongs to only one project, redirect there\n  if (projects.length === 1) {\n    router.replace(path + projects[0].id);\n    return null;\n  }\n\n  openModal(\n    modalProps => (\n      <ContextPickerModalContainer\n        {...modalProps}\n        needOrg={false}\n        needProject\n        nextPath={`${path}:project`}\n        onFinish={pathname => {\n          navigating = true;\n          router.replace(pathname);\n        }}\n        projectSlugs={projects.map(p => p.slug)}\n      />\n    ),\n    {\n      onClose() {\n        // we want this to be executed only if the user didn't select any project\n        // (closed modal either via button, Esc, clicking outside, ...)\n        if (!navigating) {\n          router.push(`/organizations/${orgSlug}/releases/`);\n        }\n      },\n    }\n  );\n\n  return <ContextPickerBackground />;\n};\n\nconst ContextPickerBackground = styled('div')`\n  height: 100vh;\n  width: 100%;\n`;\n\nexport default PickProjectToContinue;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport pick from 'lodash/pick';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport {\n  Organization,\n  ReleaseProject,\n  ReleaseMeta,\n  Deploy,\n  GlobalSelection,\n  ReleaseWithHealth,\n} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport {PageContent} from 'app/styles/organization';\nimport withOrganization from 'app/utils/withOrganization';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {formatVersion} from 'app/utils/formatters';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {IconInfo, IconWarning} from 'app/icons';\nimport space from 'app/styles/space';\nimport Alert from 'app/components/alert';\n\nimport ReleaseHeader from './releaseHeader';\nimport PickProjectToContinue from './pickProjectToContinue';\n\ntype ReleaseContext = {\n  release: ReleaseWithHealth;\n  project: Required<ReleaseProject>;\n  deploys: Deploy[];\n  releaseMeta: ReleaseMeta;\n};\nconst ReleaseContext = React.createContext<ReleaseContext>({} as ReleaseContext);\n\ntype RouteParams = {\n  orgId: string;\n  release: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  selection: GlobalSelection;\n  releaseMeta: ReleaseMeta;\n};\n\ntype State = {\n  release: ReleaseWithHealth;\n  deploys: Deploy[];\n} & AsyncView['state'];\n\nclass ReleasesDetail extends AsyncView<Props, State> {\n  shouldReload = true;\n\n  getTitle() {\n    const {params, organization} = this.props;\n    return routeTitleGen(\n      t('Release %s', formatVersion(params.release)),\n      organization.slug,\n      false\n    );\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      deploys: [],\n    };\n  }\n\n  getEndpoints() {\n    const {organization, location, params, releaseMeta} = this.props;\n\n    const query = {\n      ...pick(location.query, [...Object.values(URL_PARAM)]),\n      health: 1,\n    };\n\n    const basePath = `/organizations/${organization.slug}/releases/${encodeURIComponent(\n      params.release\n    )}/`;\n\n    const endpoints: ReturnType<AsyncView['getEndpoints']> = [\n      ['release', basePath, {query}],\n    ];\n\n    if (releaseMeta.deployCount > 0) {\n      endpoints.push(['deploys', `${basePath}deploys/`]);\n    }\n\n    return endpoints;\n  }\n\n  renderError(...args) {\n    const possiblyWrongProject = Object.values(this.state.errors).find(\n      e => e?.status === 404 || e?.status === 403\n    );\n\n    if (possiblyWrongProject) {\n      return (\n        <PageContent>\n          <Alert type=\"error\" icon={<IconWarning />}>\n            {t('This release may not be in your selected project.')}\n          </Alert>\n        </PageContent>\n      );\n    }\n\n    return super.renderError(...args);\n  }\n\n  renderLoading() {\n    return (\n      <PageContent>\n        <LoadingIndicator />\n      </PageContent>\n    );\n  }\n\n  renderBody() {\n    const {organization, location, selection, releaseMeta} = this.props;\n    const {release, deploys, reloading} = this.state;\n    const project = release?.projects.find(p => p.id === selection.projects[0]);\n\n    if (!project || !release) {\n      if (reloading) {\n        return <LoadingIndicator />;\n      }\n\n      return null;\n    }\n\n    return (\n      <LightWeightNoProjectMessage organization={organization}>\n        <StyledPageContent>\n          <ReleaseHeader\n            location={location}\n            orgId={organization.slug}\n            release={release}\n            project={project}\n            releaseMeta={releaseMeta}\n          />\n          <Body>\n            <ReleaseContext.Provider value={{release, project, deploys, releaseMeta}}>\n              {this.props.children}\n            </ReleaseContext.Provider>\n          </Body>\n        </StyledPageContent>\n      </LightWeightNoProjectMessage>\n    );\n  }\n}\n\nclass ReleasesDetailContainer extends AsyncComponent<Omit<Props, 'releaseMeta'>> {\n  shouldReload = true;\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n    // fetch projects this release belongs to\n    return [\n      [\n        'releaseMeta',\n        `/organizations/${organization.slug}/releases/${encodeURIComponent(\n          params.release\n        )}/meta/`,\n      ],\n    ];\n  }\n\n  renderError(...args) {\n    const has404Errors = Object.values(this.state.errors).find(e => e?.status === 404);\n\n    if (has404Errors) {\n      // This catches a 404 coming from the release endpoint and displays a custom error message.\n      return (\n        <PageContent>\n          <Alert type=\"error\" icon={<IconWarning />}>\n            {t('This release could not be found.')}\n          </Alert>\n        </PageContent>\n      );\n    }\n\n    return super.renderError(...args);\n  }\n\n  isProjectMissingInUrl() {\n    const projectId = this.props.location.query.project;\n\n    return !projectId || typeof projectId !== 'string';\n  }\n\n  renderLoading() {\n    return (\n      <PageContent>\n        <LoadingIndicator />\n      </PageContent>\n    );\n  }\n\n  renderProjectsFooterMessage() {\n    return (\n      <ProjectsFooterMessage>\n        <IconInfo size=\"xs\" /> {t('Only projects with this release are visible.')}\n      </ProjectsFooterMessage>\n    );\n  }\n\n  renderBody() {\n    const {organization, params, router} = this.props;\n    const {releaseMeta} = this.state;\n    const {projects} = releaseMeta;\n\n    if (this.isProjectMissingInUrl()) {\n      return (\n        <PickProjectToContinue\n          orgSlug={organization.slug}\n          version={params.release}\n          router={router}\n          projects={projects}\n        />\n      );\n    }\n\n    return (\n      <GlobalSelectionHeader\n        lockedMessageSubject={t('release')}\n        shouldForceProject={projects.length === 1}\n        forceProject={projects.length === 1 ? projects[0] : undefined}\n        specificProjectSlugs={projects.map(p => p.slug)}\n        disableMultipleProjectSelection\n        showProjectSettingsLink\n        projectsFooterMessage={this.renderProjectsFooterMessage()}\n      >\n        <ReleasesDetail {...this.props} releaseMeta={releaseMeta} />\n      </GlobalSelectionHeader>\n    );\n  }\n}\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nconst ProjectsFooterMessage = styled('div')`\n  display: grid;\n  align-items: center;\n  grid-template-columns: min-content 1fr;\n  grid-gap: ${space(1)};\n`;\n\nconst Body = styled('div')`\n  padding: ${space(2)} ${space(4)};\n`;\n\nexport {ReleasesDetailContainer, ReleaseContext};\nexport default withGlobalSelection(withOrganization(ReleasesDetailContainer));\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'app/api';\nimport {CommitFile, Commit, FilesByRepository, Repository} from 'app/types';\nimport {t} from 'app/locale';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\nexport const deleteRelease = (orgId: string, version: string) => {\n  const api = new Client();\n\n  return api.requestPromise(\n    `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`,\n    {\n      method: 'DELETE',\n    }\n  );\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce<FilesByRepository>((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    if (author.email) {\n      filesByRepository[repoName][filename].authors[author.email] = author;\n    }\n\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n\n/**\n * Get request query according to the url params and active repository\n */\n\ntype GetQueryProps = {\n  location: Location;\n  perPage?: number;\n  activeRepository?: Repository;\n};\n\nexport function getQuery({location, perPage = 40, activeRepository}: GetQueryProps) {\n  const query = {\n    ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    per_page: perPage,\n  };\n\n  if (!activeRepository) {\n    return query;\n  }\n\n  return {...query, repo_name: activeRepository.name};\n}\n\n/**\n * Get repositories to render according to the activeRepository\n */\nexport function getReposToRender(repos: Array<string>, activeRepository?: Repository) {\n  if (!activeRepository) {\n    return repos;\n  }\n  return [activeRepository.name];\n}\n"],"sourceRoot":""}