Metadata-Version: 2.1
Name: gcgc
Version: 1.0.0
Summary: GCGC is a preprocessing library for biological sequence model development.
Home-page: http://gcgc.trenthauck.com/
Author: Trent Hauck
Author-email: trent@trenthauck.com
License: MIT
Project-URL: homepage, http://gcgc.trenthauck.com/
Project-URL: repository, https://github.com/tshauck/gcgc
Platform: UNKNOWN
Requires-Python: <4.0,>=3.6.1
Description-Content-Type: text/markdown
Requires-Dist: pydantic (>=1.6.1)
Requires-Dist: importlib-metadata ; python_version < "3.8"
Provides-Extra: dev
Requires-Dist: pytest (~=5.0) ; extra == 'dev'
Requires-Dist: black (~=19.10b0) ; extra == 'dev'
Requires-Dist: mypy ; extra == 'dev'
Requires-Dist: mypy-extensions ; extra == 'dev'
Requires-Dist: pycodestyle (~=2.4) ; extra == 'dev'
Requires-Dist: pydocstyle (~=4.0) ; extra == 'dev'
Requires-Dist: pytest-cov (~=2.6) ; extra == 'dev'
Requires-Dist: mkdocs (==1.1.2) ; extra == 'dev'
Requires-Dist: mkdocs-material (==4.6.3) ; extra == 'dev'
Requires-Dist: phmdoctest ; extra == 'dev'
Requires-Dist: mkdocstrings ; extra == 'dev'
Requires-Dist: commitizen ; extra == 'dev'
Requires-Dist: pygments (~=2.3) ; extra == 'dev'
Requires-Dist: isort (~=4.3) ; extra == 'dev'
Requires-Dist: pylint (~=2.4) ; extra == 'dev'
Requires-Dist: twine (~=3.2) ; extra == 'dev'
Provides-Extra: hf
Requires-Dist: biopython (>=1.78) ; extra == 'hf'
Requires-Dist: tokenizers (==0.9.0) ; extra == 'hf'
Requires-Dist: datasets (==1.1.0) ; extra == 'hf'
Provides-Extra: include_package_data
Requires-Dist: True ; extra == 'include_package_data'
Provides-Extra: setup_requires
Requires-Dist: setuptools-scm (>=1.15) ; extra == 'setup_requires'

# GCGC

> GCGC is a tool for feature processing on Biological Sequences.

[![](https://github.com/tshauck/gcgc/workflows/Run%20Tests%20and%20Lint/badge.svg)](https://github.com/tshauck/gcgc/actions?query=workflow%3A%22Run+Tests+and+Lint%22)
[![](https://img.shields.io/pypi/v/gcgc.svg)](https://pypi.python.org/pypi/gcgc)
[![code style black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

## Installation

GCGC is primarily intended to be used as part of a larger workflow inside
Python.

To install via pip:

```sh
$ pip install gcgc
```

If you'd like to use code that helps gcgc's tokenizers integrate with common
third party libraries, either install those packages separately, or use gcgc's
extras.

```sh
$ pip install 'gcgc[pytorch,hf]'
```

## Documentation

The GCGC documentation is at [gcgc.trenthauck.com](http://gcgc.trenthauck.com),
please see it for examples.

### Quick Start

The easiest way to get started is to import the kmer tokenizer, configure it,
then start tokenizing.

```python
from gcgc import KmerTokenizer

kmer_tokenizer = KmerTokenizer(alphabet="unambiguous_dna")
encoded = kmer_tokenizer.encode("ATCG")
print(encoded)
```

sample output:

```
[1, 6, 7, 8, 5, 2]
```

This output includes the "bos" token, the "eos" token, and the four nucleotide
tokens in between.

You can go the other way and convert the integers to strings.

```python
from gcgc import KmerTokenizer

kmer_tokenizer = KmerTokenizer(alphabet="unambiguous_dna")
decoded = kmer_tokenizer.decode(kmer_tokenizer.encode("ATCG"))
print(decoded)
```

sample output:

```
['>', 'A', 'T', 'C', 'G', '<']
```

There's also the vocab for the kmer tokenizer.

```python
from gcgc import KmerTokenizer

kmer_tokenizer = KmerTokenizer(alphabet="unambiguous_dna")
print(kmer_tokenizer.vocab.stoi)
```

sample output:

```
{'|': 0, '>': 1, '<': 2, '#': 3, '?': 4, 'G': 5, 'A': 6, 'T': 7, 'C': 8}
```


