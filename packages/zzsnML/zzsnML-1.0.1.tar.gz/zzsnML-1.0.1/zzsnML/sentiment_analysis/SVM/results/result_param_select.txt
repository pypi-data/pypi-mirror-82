Using HanLP as Chinese sentence segmentation backend.
Loading word vectors...
Performing PCA...
100 components can explain 90.85% variance.
Training SVM...
# Tuning hyper-parameters for precision

/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
Best parameters set found on development set:

{'C': 1, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}

Grid scores on development set:

0.762 (+/-0.021) for {'C': 1, 'class_weight': 'balanced', 'kernel': 'linear'}
0.923 (+/-0.014) for {'C': 1, 'class_weight': None, 'kernel': 'linear'}
0.763 (+/-0.019) for {'C': 10, 'class_weight': 'balanced', 'kernel': 'linear'}
0.918 (+/-0.016) for {'C': 10, 'class_weight': None, 'kernel': 'linear'}
0.765 (+/-0.017) for {'C': 100, 'class_weight': 'balanced', 'kernel': 'linear'}
0.918 (+/-0.016) for {'C': 100, 'class_weight': None, 'kernel': 'linear'}
0.765 (+/-0.021) for {'C': 1000, 'class_weight': 'balanced', 'kernel': 'linear'}
0.918 (+/-0.016) for {'C': 1000, 'class_weight': None, 'kernel': 'linear'}
0.728 (+/-0.025) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.653 (+/-0.019) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.807 (+/-0.029) for {'C': 1, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.968 (+/-0.038) for {'C': 1, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.480 (+/-0.000) for {'C': 1, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.964 (+/-0.024) for {'C': 1, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.767 (+/-0.022) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.722 (+/-0.020) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.911 (+/-0.012) for {'C': 10, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.957 (+/-0.018) for {'C': 10, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.966 (+/-0.033) for {'C': 10, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.955 (+/-0.013) for {'C': 10, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.810 (+/-0.034) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.753 (+/-0.019) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.937 (+/-0.013) for {'C': 100, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.953 (+/-0.028) for {'C': 100, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.944 (+/-0.026) for {'C': 100, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.943 (+/-0.023) for {'C': 100, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.896 (+/-0.037) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.774 (+/-0.026) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.933 (+/-0.022) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.943 (+/-0.029) for {'C': 1000, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.938 (+/-0.012) for {'C': 1000, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.932 (+/-0.020) for {'C': 1000, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.707 (+/-0.017) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.625 (+/-0.013) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.700 (+/-0.013) for {'C': 1, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.981 (+/-0.000) for {'C': 1, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.480 (+/-0.000) for {'C': 1, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.882 (+/-0.020) for {'C': 1, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.746 (+/-0.019) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.707 (+/-0.017) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.674 (+/-0.011) for {'C': 10, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.946 (+/-0.028) for {'C': 10, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.981 (+/-0.000) for {'C': 10, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.805 (+/-0.035) for {'C': 10, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.757 (+/-0.026) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.746 (+/-0.019) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.674 (+/-0.014) for {'C': 100, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.926 (+/-0.013) for {'C': 100, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.946 (+/-0.028) for {'C': 100, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.782 (+/-0.024) for {'C': 100, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.753 (+/-0.021) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.757 (+/-0.026) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.674 (+/-0.013) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.922 (+/-0.010) for {'C': 1000, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.926 (+/-0.013) for {'C': 1000, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.776 (+/-0.030) for {'C': 1000, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.821 (+/-0.023) for {'C': 1, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.801 (+/-0.033) for {'C': 1, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.827 (+/-0.028) for {'C': 1, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.967 (+/-0.032) for {'C': 1, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.959 (+/-0.036) for {'C': 1, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.965 (+/-0.067) for {'C': 1, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}
0.874 (+/-0.016) for {'C': 10, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.853 (+/-0.024) for {'C': 10, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.854 (+/-0.044) for {'C': 10, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.957 (+/-0.017) for {'C': 10, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.965 (+/-0.030) for {'C': 10, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.967 (+/-0.038) for {'C': 10, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}
0.920 (+/-0.024) for {'C': 100, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.920 (+/-0.019) for {'C': 100, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.892 (+/-0.026) for {'C': 100, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.943 (+/-0.013) for {'C': 100, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.935 (+/-0.015) for {'C': 100, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.938 (+/-0.035) for {'C': 100, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}
0.929 (+/-0.013) for {'C': 1000, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.920 (+/-0.031) for {'C': 1000, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.916 (+/-0.045) for {'C': 1000, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.930 (+/-0.025) for {'C': 1000, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.919 (+/-0.037) for {'C': 1000, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.925 (+/-0.030) for {'C': 1000, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}

Detailed classification report:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

          0       1.00      0.10      0.18       143
          1       0.96      1.00      0.98      3080

avg / total       0.96      0.96      0.94      3223


# Tuning hyper-parameters for recall

Best parameters set found on development set:

{'C': 10, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}

Grid scores on development set:

0.951 (+/-0.035) for {'C': 1, 'class_weight': 'balanced', 'kernel': 'linear'}
0.889 (+/-0.044) for {'C': 1, 'class_weight': None, 'kernel': 'linear'}
0.946 (+/-0.039) for {'C': 10, 'class_weight': 'balanced', 'kernel': 'linear'}
0.896 (+/-0.055) for {'C': 10, 'class_weight': None, 'kernel': 'linear'}
0.947 (+/-0.039) for {'C': 100, 'class_weight': 'balanced', 'kernel': 'linear'}
0.896 (+/-0.055) for {'C': 100, 'class_weight': None, 'kernel': 'linear'}
0.946 (+/-0.042) for {'C': 1000, 'class_weight': 'balanced', 'kernel': 'linear'}
0.896 (+/-0.055) for {'C': 1000, 'class_weight': None, 'kernel': 'linear'}
0.959 (+/-0.012) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.934 (+/-0.018) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.956 (+/-0.025) for {'C': 1, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.632 (+/-0.007) for {'C': 1, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.500 (+/-0.000) for {'C': 1, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.878 (+/-0.053) for {'C': 1, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.964 (+/-0.020) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.959 (+/-0.012) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.947 (+/-0.037) for {'C': 10, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.864 (+/-0.048) for {'C': 10, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.638 (+/-0.010) for {'C': 10, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.918 (+/-0.035) for {'C': 10, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.952 (+/-0.042) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.961 (+/-0.021) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.915 (+/-0.037) for {'C': 100, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.902 (+/-0.055) for {'C': 100, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.844 (+/-0.068) for {'C': 100, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.912 (+/-0.039) for {'C': 100, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.944 (+/-0.049) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.957 (+/-0.029) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.910 (+/-0.045) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.910 (+/-0.051) for {'C': 1000, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.893 (+/-0.058) for {'C': 1000, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.910 (+/-0.041) for {'C': 1000, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.953 (+/-0.016) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.918 (+/-0.014) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.950 (+/-0.019) for {'C': 1, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.510 (+/-0.006) for {'C': 1, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.500 (+/-0.000) for {'C': 1, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.803 (+/-0.069) for {'C': 1, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.962 (+/-0.016) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.953 (+/-0.016) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.928 (+/-0.036) for {'C': 10, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.811 (+/-0.074) for {'C': 10, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.510 (+/-0.006) for {'C': 10, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.792 (+/-0.077) for {'C': 10, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.957 (+/-0.028) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.962 (+/-0.016) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.929 (+/-0.032) for {'C': 100, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.871 (+/-0.055) for {'C': 100, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.811 (+/-0.074) for {'C': 100, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.783 (+/-0.066) for {'C': 100, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.947 (+/-0.039) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.957 (+/-0.028) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.929 (+/-0.031) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.886 (+/-0.045) for {'C': 1000, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.870 (+/-0.054) for {'C': 1000, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.780 (+/-0.070) for {'C': 1000, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.944 (+/-0.028) for {'C': 1, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.900 (+/-0.043) for {'C': 1, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.787 (+/-0.061) for {'C': 1, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.728 (+/-0.031) for {'C': 1, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.623 (+/-0.025) for {'C': 1, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.520 (+/-0.019) for {'C': 1, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}
0.942 (+/-0.038) for {'C': 10, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.936 (+/-0.041) for {'C': 10, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.882 (+/-0.062) for {'C': 10, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.871 (+/-0.045) for {'C': 10, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.802 (+/-0.043) for {'C': 10, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.695 (+/-0.040) for {'C': 10, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}
0.916 (+/-0.024) for {'C': 100, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.916 (+/-0.051) for {'C': 100, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.899 (+/-0.035) for {'C': 100, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.892 (+/-0.059) for {'C': 100, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.882 (+/-0.048) for {'C': 100, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.812 (+/-0.036) for {'C': 100, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}
0.905 (+/-0.057) for {'C': 1000, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.900 (+/-0.054) for {'C': 1000, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.883 (+/-0.047) for {'C': 1000, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.903 (+/-0.055) for {'C': 1000, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.898 (+/-0.054) for {'C': 1000, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.875 (+/-0.048) for {'C': 1000, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}

Detailed classification report:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

          0       0.60      0.95      0.73       143
          1       1.00      0.97      0.98      3080

avg / total       0.98      0.97      0.97      3223


# Tuning hyper-parameters for f1

/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/home/hongjp/.local/lib/python3.6/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
Best parameters set found on development set:

{'C': 10, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}

Grid scores on development set:

0.828 (+/-0.024) for {'C': 1, 'class_weight': 'balanced', 'kernel': 'linear'}
0.905 (+/-0.030) for {'C': 1, 'class_weight': None, 'kernel': 'linear'}
0.827 (+/-0.022) for {'C': 10, 'class_weight': 'balanced', 'kernel': 'linear'}
0.906 (+/-0.036) for {'C': 10, 'class_weight': None, 'kernel': 'linear'}
0.829 (+/-0.020) for {'C': 100, 'class_weight': 'balanced', 'kernel': 'linear'}
0.906 (+/-0.036) for {'C': 100, 'class_weight': None, 'kernel': 'linear'}
0.829 (+/-0.023) for {'C': 1000, 'class_weight': 'balanced', 'kernel': 'linear'}
0.906 (+/-0.036) for {'C': 1000, 'class_weight': None, 'kernel': 'linear'}
0.798 (+/-0.026) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.709 (+/-0.026) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.865 (+/-0.027) for {'C': 1, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.700 (+/-0.010) for {'C': 1, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.490 (+/-0.000) for {'C': 1, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.915 (+/-0.033) for {'C': 1, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.835 (+/-0.022) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.792 (+/-0.022) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.928 (+/-0.023) for {'C': 10, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.904 (+/-0.029) for {'C': 10, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.707 (+/-0.013) for {'C': 10, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.935 (+/-0.018) for {'C': 10, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.866 (+/-0.037) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.822 (+/-0.019) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.926 (+/-0.020) for {'C': 100, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.925 (+/-0.030) for {'C': 100, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.886 (+/-0.047) for {'C': 100, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.927 (+/-0.022) for {'C': 100, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.918 (+/-0.041) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'rbf'}
0.839 (+/-0.026) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'rbf'}
0.921 (+/-0.027) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'rbf'}
0.925 (+/-0.038) for {'C': 1000, 'class_weight': None, 'gamma': 0.001, 'kernel': 'rbf'}
0.914 (+/-0.038) for {'C': 1000, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'rbf'}
0.920 (+/-0.022) for {'C': 1000, 'class_weight': None, 'gamma': 'auto', 'kernel': 'rbf'}
0.775 (+/-0.020) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.669 (+/-0.020) for {'C': 1, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.767 (+/-0.016) for {'C': 1, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.510 (+/-0.012) for {'C': 1, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.490 (+/-0.000) for {'C': 1, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.837 (+/-0.050) for {'C': 1, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.815 (+/-0.018) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.775 (+/-0.020) for {'C': 10, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.736 (+/-0.015) for {'C': 10, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.864 (+/-0.054) for {'C': 10, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.510 (+/-0.012) for {'C': 10, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.798 (+/-0.056) for {'C': 10, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.824 (+/-0.027) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.816 (+/-0.017) for {'C': 100, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.736 (+/-0.017) for {'C': 100, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.896 (+/-0.031) for {'C': 100, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.864 (+/-0.054) for {'C': 100, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.782 (+/-0.044) for {'C': 100, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.819 (+/-0.025) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.825 (+/-0.027) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.736 (+/-0.016) for {'C': 1000, 'class_weight': 'balanced', 'gamma': 'auto', 'kernel': 'sigmoid'}
0.903 (+/-0.027) for {'C': 1000, 'class_weight': None, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.895 (+/-0.030) for {'C': 1000, 'class_weight': None, 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.778 (+/-0.049) for {'C': 1000, 'class_weight': None, 'gamma': 'auto', 'kernel': 'sigmoid'}
0.871 (+/-0.017) for {'C': 1, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.842 (+/-0.035) for {'C': 1, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.805 (+/-0.047) for {'C': 1, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.803 (+/-0.029) for {'C': 1, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.688 (+/-0.034) for {'C': 1, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.528 (+/-0.035) for {'C': 1, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}
0.905 (+/-0.018) for {'C': 10, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.890 (+/-0.028) for {'C': 10, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.867 (+/-0.049) for {'C': 10, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.908 (+/-0.025) for {'C': 10, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.865 (+/-0.036) for {'C': 10, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.770 (+/-0.042) for {'C': 10, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}
0.918 (+/-0.011) for {'C': 100, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.918 (+/-0.032) for {'C': 100, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.895 (+/-0.026) for {'C': 100, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.915 (+/-0.037) for {'C': 100, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.906 (+/-0.030) for {'C': 100, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.863 (+/-0.033) for {'C': 100, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}
0.916 (+/-0.032) for {'C': 1000, 'class_weight': 'balanced', 'degree': 2, 'kernel': 'poly'}
0.909 (+/-0.041) for {'C': 1000, 'class_weight': 'balanced', 'degree': 3, 'kernel': 'poly'}
0.898 (+/-0.042) for {'C': 1000, 'class_weight': 'balanced', 'degree': 4, 'kernel': 'poly'}
0.915 (+/-0.034) for {'C': 1000, 'class_weight': None, 'degree': 2, 'kernel': 'poly'}
0.908 (+/-0.041) for {'C': 1000, 'class_weight': None, 'degree': 3, 'kernel': 'poly'}
0.898 (+/-0.038) for {'C': 1000, 'class_weight': None, 'degree': 4, 'kernel': 'poly'}

Detailed classification report:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

          0       0.90      0.78      0.83       143
          1       0.99      1.00      0.99      3080

avg / total       0.99      0.99      0.99      3223


