# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['structlog_sentry_logger']

package_data = \
{'': ['*']}

install_requires = \
['gitpython>=3.1.7,<4.0.0',
 'orjson>=3.4.0,<4.0.0',
 'python-dotenv>=0.14.0,<0.15.0',
 'sentry-sdk>0.17.0',
 'structlog-sentry>=1.2.2,<2.0.0',
 'structlog>=20.1.0,<21.0.0']

setup_kwargs = {
    'name': 'structlog-sentry-logger',
    'version': '0.4.1',
    'description': 'Log without the setup via a pre-configured structlog logger with optional Sentry integration',
    'long_description': 'Structlog-Sentry-Logger\n==============================\n\nA multi-purpose, pre-configured [`structlog`](https://www.structlog.org/en/stable/) logger\nwith (optional) [Sentry](https://sentry.io/welcome/) integration\nvia [`structlog-sentry`](https://github.com/kiwicom/structlog-sentry).\n\nWhy\n------------\n1. Makes logging as easy as using print statements, but prettier and less smelly!\n2. Highly opinionated! There are only [two (2) distinct configurations](#output-formatting--storage).\n3. Structured logs in JSON format means they are ready to be ingested by many of your\nfavorite log analysis tools!\n\nWhat You Get\n------------\n\n### Powerful Automatic Context Fields\nThe pre-configured options include:\n\n1. Timestamps\n    - `DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"`\n2. Log levels\n    - Added to the JSON context for filtering and categorization\n3. Logger names\n    - Automatically assigned to namespaced versions of the initializing\npython modules (`.py` files), relative to your project directory.\n        - e.g., the logger in `tests/structlog_sentry_logger/test_logger.py` is named `tests.structlog_sentry_logger.test_logger`\n\nWith fields sorted by key for easier at-a-glance analysis.\n\n### Performance\n`structlog-sentry-logger` is fully-tuned and leverages [`ORJSON`](https://github.com/ijl/orjson)\nas the JSON serializer for lightning-fast logging. It\'s 2020, you don\'t have to let your obligate cross-cutting concerns\ncripple performance any longer!  \n\nFor further reference, see:\n- "[`ORJSON`: Serialize](https://github.com/ijl/orjson#serialize)" for benchmarks\n- "[`structlog`: Performance](https://www.structlog.org/en/stable/performance.html)" for salient performance-related configurations.\n\n### Built-in Sentry Integration (Optional)\nAutomatically add much richer context to your Sentry reports.\n- Your entire logging context is sent as a Sentry event when the `structlog-sentry-logger`\nlog level is `error` or higher.\n    - i.e., `logger.error("")`, `logger.exception("")`\n- See [`structlog-sentry`](https://github.com/kiwicom/structlog-sentry) for more details.\n\n------------\nTable of Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n  * [Pure `structlog` Logging (Without Sentry)](#pure-structlog-logging-without-sentry)\n  * [Sentry Integration](#sentry-integration)\n- [Output: Formatting & Storage](#output-formatting--storage)\n- [Summary](#summary)\n- [Further Reading](#further-reading)\n    + [`structlog`](#structlog-structured-logging-for-python)\n    + [`Sentry`](#sentry-monitor-and-fix-crashes-in-realtime)\n    + [`structlog-sentry`](#structlog-sentry-provides-the-structlog-sentryprocessor-for-sentry-integration)\n\nInstallation\n==============================\n ```shell script\npip install structlog-sentry-logger\n```\n\nUsage\n==============================\nPure `structlog` Logging (Without Sentry)\n------------\nAt the top of your Python module, import and instantiate the logger:\n```python\nimport structlog_sentry_logger\nLOGGER = structlog_sentry_logger.get_logger()\n```\nNow anytime you want to print anything, don\'t. Instead do this:\n```python\nLOGGER.info("Information that\'s useful for future me and others", extra_field="extra_value")\n```\n###### Note: all the regular [Python logging levels](https://docs.python.org/3/library/logging.html#levels) are supported.\n```\n{\n    "event": "Information that\'s useful for future me and others",\n    "extra_field": "extra_value",\n    "level": "info",\n    "logger": "<input>",\n    "timestamp": "2020-09-25 17:21:26",\n}\n```\n\nWith `structlog`, you can even incorporate custom messages in your exception handling:\n```python\nimport uuid\n\nimport structlog_sentry_logger\nLOGGER = structlog_sentry_logger.get_logger()\n\ncurr_user_logger = LOGGER.bind(uuid=uuid.uuid4().hex)  # LOGGER instance with bound UUID\ntry:\n    curr_user_logger.warn("A dummy error for testing purposes is about to be thrown!")\n    assert False\nexcept AssertionError as err:\n    err_msg = ("I threw an error on purpose for this example!\\n"\n               "Now throwing another that explicitly chains from that one!")\n    curr_user_logger.exception(err_msg)\n    raise RuntimeError(err_msg) from err\n```\n\n```\n{\n    "event": "A dummy error for testing purposes is about to be thrown!",\n    "level": "warning",\n    "logger": "<input>",\n    "timestamp": "2020-09-25 17:19:02",\n    "uuid": "68f595440e69478a97a26b002f9cbf44",\n}\n{\n    "event": "I threw an error on purpose for this example!\\nNow throwing another that explicitly chains from that one!",\n    "exception": \'Traceback (most recent call last):\\n  File "<input>", line 8, in <module>\\nAssertionError\',\n    "level": "error",\n    "logger": "<input>",\n    "timestamp": "2020-09-25 17:19:02",\n    "uuid": "68f595440e69478a97a26b002f9cbf44",\n}\nTraceback (most recent call last):\n  File "<input>", line 8, in <module>\nAssertionError\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File "<input>", line 13, in <module>\nRuntimeError: I threw an error on purpose for this example!\nNow throwing another that explicitly chains from that one!\n```\nSentry Integration\n------------\nExport your [Sentry DSN](https://docs.sentry.io/platforms/python/#configure)\ninto your local environment.\n\n- An easy way to do this is to put it into a local `.env` file and use\n[`python-dotenv`](https://github.com/theskumar/python-dotenv) to populate your environment:\n ```shell script\n# On the command line:\nSENTRY_DSN=YOUR_SENTRY_DSN\n echo "SENTRY_DSN=${SENTRY_DSN}" > .env\n```\n```python\n# In your Python code, prior to instantiating the logger:\nfrom dotenv import find_dotenv, load_dotenv\nload_dotenv(find_dotenv())\n```\n\nOutput: Formatting & Storage\n==============================\nThe default behavior is to stream JSON logs directly to the standard output\nstream [like a proper 12 Factor App](https://12factor.net/logs).\n\nFor local development, it often helps to prettify logging to stdout and save\nJSON logs to a `.logs` folder at the root of your project directory. To enable\nthis behavior, set the following environment variable:\n```bash\nCI_ENVIRONMENT_SLUG=dev-local\n```\nIn doing so, with our previous exception handling example we would get:\n\n<img src=".static/Output_Formatting_example.png">\n\nSummary\n==============================\nThat\'s it. Now no excuses.\nGet out there and program with pride knowing no one\nwill laugh at you in production! For not logging properly, that is. You\'re on your own\nfor that other [observability](https://devops.com/metrics-logs-and-traces-the-golden-triangle-of-observability-in-monitoring/) stuff.\n\nFurther Reading\n==============================\n<img src="https://www.structlog.org/en/stable/_static/structlog_logo_small.png" width="200">\n\n### [`structlog`](https://www.structlog.org/en/stable/#): Structured Logging for Python\n\n<img src="https://camo.githubusercontent.com/2dfeafbee0904d6df16ddf7200993dace1629e60/68747470733a2f2f73656e7472792d6272616e642e73746f726167652e676f6f676c65617069732e636f6d2f73656e7472792d6c6f676f2d626c61636b2e706e67" width="400">\n\n### [`Sentry`](https://sentry.io/welcome/): Monitor and fix crashes in realtime.\n\n### [`structlog-sentry`](https://github.com/kiwicom/structlog-sentry): Provides the [`structlog`](https://www.structlog.org/en/stable/#) `SentryProcessor` for [Sentry](https://sentry.io/welcome/) integration.\n',
    'author': 'Teo Zosa',
    'author_email': 'teo@sonosim.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/TeoZosa/structlog-sentry-logger',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6.1,<4.0.0',
}


setup(**setup_kwargs)
