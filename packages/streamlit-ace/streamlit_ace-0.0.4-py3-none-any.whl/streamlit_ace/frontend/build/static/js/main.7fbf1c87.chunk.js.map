{"version":3,"sources":["ace.tsx","index.tsx"],"names":["withStreamlitConnection","timeout","args","pendingRef","useRef","editorRef","debounceRef","showPending","display","current","style","updateStreamlit","value","Streamlit","setComponentValue","useEffect","setFrameHeight","height","editor","commands","removeCommand","addCommand","name","bindKey","mac","win","exec","autoUpdate","selection","clearSelection","navigateLineEnd","insert","isPending","getValue","enableBasicAutocompletion","enableLiveAutocompletion","onChange","clearTimeout","setTimeout","width","ref","color","fontSize","textAlign","platform","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAmGeA,G,oBAAAA,aAlFH,SAAC,GAAwB,IAAD,EAI9BC,EAJSC,EAAqB,EAArBA,KACPC,EAAaC,iBAAuB,MACpCC,EAAYD,iBAAmB,MAC/BE,EAAcF,iBAAe,GAK7BG,EAAc,SAACC,GACfL,EAAWM,UACbN,EAAWM,QAAQC,MAAMF,QAAUA,EAAU,QAAU,SAKrDG,EAAkB,SAACC,GACvBC,IAAUC,kBAAkBF,GAC5BL,GAAY,IAiDd,OAhCAQ,qBAAU,WAGR,GAFAF,IAAUG,eAAed,EAAKe,OAAS,IAEnCZ,EAAUI,QAAS,CACrB,IAAMS,EAASb,EAAUI,QAAQS,OAEjCA,EAAOC,SAASC,cAAc,gBAC9BF,EAAOC,SAASE,WAAW,CACzBC,KAAM,kBACNC,QAAS,CAACC,IAAK,aAAcC,IAAK,eAClCC,KAAM,SAACR,GACDhB,EAAKyB,YACPT,EAAOU,UAAUC,iBACjBX,EAAOY,kBACPZ,EAAOa,OAAO,OA1CN,uBAA4C,WAAtC,UAAA5B,EAAWM,eAAX,eAAoBC,MAAMF,SA4CjCwB,IACPrB,EAAgBO,EAAOe,eAK7B3B,EAAYG,QAAUP,EAAKyB,WAAa,IAAM,MAKlDzB,EAAKgC,2BAA4B,EACjChC,EAAKiC,0BAA2B,EAChCjC,EAAKkC,SA1CgB,SAACxB,GACpByB,aAAapC,GACbA,EAAUqC,YAAW,WACfpC,EAAKyB,WACPhB,EAAgBC,GAGhBL,GAAY,KAEbD,EAAYG,UAkCjBP,EAAKqC,MAAQ,OAEN,oCACL,kBAAC,IAAD,eAAWC,IAAKnC,GAAeH,IAC/B,yBACEsC,IAAKrC,EACLO,MAAO,CACL+B,MAAO,UACPjC,QAAS,OACTkC,SAAU,QACVC,UAAW,UANf,SASyD,SAAhD,UAAAtC,EAAUI,eAAV,eAAmBS,OAAOC,SAASyB,UAAqB,MAAQ,OATzE,wBCjFJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.7fbf1c87.chunk.js","sourcesContent":["import {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useEffect, useRef } from \"react\"\nimport AceEditor from \"react-ace\"\nimport { IAceEditor } from \"react-ace/lib/types\"\n\nimport \"ace-builds/webpack-resolver\"\nimport \"ace-builds/src-min-noconflict/ext-emmet\"\nimport \"ace-builds/src-min-noconflict/ext-language_tools\"\n\ninterface AceProps extends ComponentProps {\n  args: any\n}\n\nconst Ace = ({ args }: AceProps) => {\n  const pendingRef = useRef<HTMLDivElement>(null)\n  const editorRef = useRef<IAceEditor>(null)\n  const debounceRef = useRef<number>(0)\n  let timeout: NodeJS.Timeout\n\n  const isPending = () => pendingRef.current?.style.display === \"block\"\n\n  const showPending = (display: boolean) => {\n    if (pendingRef.current) {\n      pendingRef.current.style.display = display ? \"block\" : \"none\"\n    }\n  }\n\n  // Send editor content to streamlit\n  const updateStreamlit = (value: string) => {\n    Streamlit.setComponentValue(value)\n    showPending(false)\n  }\n\n  // Called on editor update\n  const handleChange = (value: string) => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      if (args.autoUpdate) {\n        updateStreamlit(value)      \n      }\n      else {\n        showPending(true)\n      }\n    }, debounceRef.current)\n  }\n  \n  // Update component height with an offset for the pending message\n  useEffect(() => {\n    Streamlit.setFrameHeight(args.height + 20)\n\n    if (editorRef.current) {\n      const editor = editorRef.current.editor\n\n      editor.commands.removeCommand(\"addLineAfter\")\n      editor.commands.addCommand({\n        name: \"updateStreamlit\",\n        bindKey: {mac: \"cmd-return\", win: \"ctrl-return\"},\n        exec: (editor: IAceEditor) => {\n          if (args.autoUpdate) {\n            editor.selection.clearSelection();\n            editor.navigateLineEnd();\n            editor.insert(\"\\n\");\n          }\n          else if (isPending()) {\n            updateStreamlit(editor.getValue())\n          }\n        }\n      })\n\n      debounceRef.current = args.autoUpdate ? 200 : 0\n    }\n  })\n\n  // Set default prop values that shouldn't be exposed to python\n  args.enableBasicAutocompletion = true\n  args.enableLiveAutocompletion = true\n  args.onChange = handleChange\n  args.width = \"100%\"\n\n  return <>\n    <AceEditor ref={editorRef} {...args} />\n    <div\n      ref={pendingRef}\n      style={{\n        color: \"#a3a8b8\",\n        display: \"none\",\n        fontSize: \".8rem\",\n        textAlign: \"right\",\n      }}\n    >\n      Press {editorRef.current?.editor.commands.platform === \"mac\" ? \"Cmd\" : \"Ctrl\"}+Enter to apply\n    </div>\n  </>\n}\n\nexport default withStreamlitConnection(Ace)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Ace from \"./ace\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Ace />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}