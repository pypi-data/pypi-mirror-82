Metadata-Version: 2.1
Name: ServeLight
Version: 3.4.3
Summary: Lightweight and Responsive Server Framework
Home-page: https://github.com/Ksengine/ServeLight
Author: Kavindu Santhusa
Author-email: kavindusanthusa@gmail.com
License: MIT
Download-URL: https://pypi.python.org/pypi/ServeLight
Project-URL: Bug Tracker, https://github.com/Ksengine/ServeLight/issues
Project-URL: Download, https://github.com/Ksengine/ServeLight/releases
Keywords: simple,lightweight,WSGI,micro,server,library,python
Platform: any
Classifier: Intended Audience :: Developers
Classifier: Development Status :: 5 - Production/Stable
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3
Description-Content-Type: text/markdown

# ServeLight

[![Downloads](https://pepy.tech/badge/servelight)](https://pepy.tech/project/servelight)

**This module defines classes for implementing HTTP/WSGI servers (Web servers).**
> Warning : This is not recommended for production. It only implements
> basic security checks.

One class, Server or WSGI Server creates and listens at the HTTP 
socket, dispatching the requests to a handler. Code to create and run the server looks like this:\

```python
def run(server_class=Server, handler_class=BaseHandler):
    server_address = ('', 8000)
    httpd = server_class(server_address, handler_class)
    httpd.serve_forever()
run()
```

 - fast ( It's very fast )
 - simple ( modified version of simple wsgiref )
 - lightweight ( lightweight because simple )
 - [WSGI](http://www.wsgi.org/) ( supports web server gateway interface )
 - micro web-server ( can use as a traditional server )
 - with web frameworks (any  [WSGI](http://www.wsgi.org/)  framework supported)

> Flask, Django, Pyramid, Bottle supported
 ### Example: "Hello World"

```python
def app(environ, start_response):
    ""A barebones WSGI application.
    This is a starting point for your own Web framework :)
    """
    status = '200 OK'
    response_headers = [('Content-Type', 'text/plain')]
    start_response(status, response_headers)
    return [b'Hello world from a simple WSGI application!\n']
```

save above code as app.py
now run sl (ServeLight)

```bash
python -m sl --app=app:app
```

view [examples](https://github.com/Ksengine/ServeLight/blob/master/examples) for more...

**View [Documentaion](https://servelight2020.gitbook.io)***

**Report [Issues(https://github.com/Ksengine/ServeLight/issues)***

### License
Code and documentation are available according to the MIT License (see  [LICENSE](https://github.com/Ksengine/ServeLight/blob/master/LICENSE)).


