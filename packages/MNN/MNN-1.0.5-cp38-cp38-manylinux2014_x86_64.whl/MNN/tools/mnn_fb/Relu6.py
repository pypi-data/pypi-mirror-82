# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class Relu6(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRelu6(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Relu6()
        x.Init(buf, n + offset)
        return x

    # Relu6
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Relu6
    def MinValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Relu6
    def MaxValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 6.0

def Relu6Start(builder): builder.StartObject(2)
def Relu6AddMinValue(builder, minValue): builder.PrependFloat32Slot(0, minValue, 0.0)
def Relu6AddMaxValue(builder, maxValue): builder.PrependFloat32Slot(1, maxValue, 6.0)
def Relu6End(builder): return builder.EndObject()
