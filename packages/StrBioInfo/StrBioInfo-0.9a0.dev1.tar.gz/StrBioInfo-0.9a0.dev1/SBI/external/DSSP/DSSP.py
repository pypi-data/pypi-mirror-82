# -*- coding: utf-8 -*-
"""
.. codeauthor:: Jaume Bonet <jaume.bonet@gmail.com>

.. affiliation::
    Structural BioInformatics Lab <sbi.upf.edu>
    Baldo Oliva <baldo.oliva@upf.edu>

.. class:: DSSPFrame
.. func:: read_dssp
"""
# Standard Libraries
import math
import os
import re
import sys

# External Libraries
import numpy as np
import pandas as pd


# This Library
import SBI.core as core
from SBI.data import properties

__all__ = ['DSSPFrame', 'read_dssp']


class DSSPFrame( pd.DataFrame ):
    """Stores secondary structure data as provided by the [DSSP](https://github.com/cmbi/xssp)
    software.
    """
    _sse_types = pd.DataFrame([['H', 'alpha helix', 'H'],
                               ['B', 'beta bridge', 'E'],
                               ['E', 'strand',      'E'],
                               ['G', 'helix-3',     'H'],
                               ['I', 'helix-5',     'H'],
                               ['L', 'loop',        'L'],
                               ['T', 'turn',        'L'],
                               ['S', 'bend',        'L']],
                              columns=['sse', 'description', 'simplified'])

    @property
    def sse_types( self ):
        """**Getter:** Known secondary structure types.

        :returns: :class:`~pandas.DataFrame`
        """
        return self._sse_types.copy()

    def simplify( self, sse='BGITS' ):
        """Simplifies the secondary structure description limiting it to the provided secondary
        structure identifiers.

        Accepted secondary structure types are those generated by **DSSP**.

        .. ipython:
            In [1]: from SBI.external.DSSP import DSSPFrame
               ...: DSSPFrame.sse_types

        .. warning::
            Simplifying the DSSP secondary structure definition is a one-way process and cannot be taken back.

        :param str sse: Secondary structure codes to simplify. ``H``, ``E`` and ``L`` are ignored if provided, as they
            cannot be simplified. The default represents the maximum possible simplification.

        :return: :class:`.DSSPFrame`

        :raises:
            :ValueError: If provided secondary structure definitions to keep do not exist.
        """
        replacements = {}
        for code in set(sse.upper().strip()):
            if code in 'HEL':
                continue
            if code not in self._sse_types['sse'].values:
                raise ValueError('The provided sse code {} is not DSSP compliant.'.format(code))
            replacements.setdefault(code, self._sse_types[self._sse_types['sse'] == code]['simplified'].iloc[0])

        self.replace({'sse': replacements}, inplace=True)
        return self


def read_dssp( filename, minimize=False ):
    """Parse a [DSSP](https://github.com/cmbi/xssp) output file.

    .. note::
        Calls on :data:`.properties` to determine the expected surface are of each residue type.

        Depends on global configuration option ``data.surface.threshold`` to determine the
        boolean assignation of exposition.

    :param str filename: Name of the DSSP file.
    :param bool minimize: When :data:`True`, other data than secondary structure and
        accessibility is ignored.

    :returns: :class:`.DSSPFrame`

    :raises:
        :IOError: If ``filename`` is not found.
    """
    def hbonds_fix( row ):
        # Fix hydrogen bond data
        return np.ravel([row['N-H-->O1'].split(','),
                         row['O-->H-N1'].split(','),
                         row['N-H-->O2'].split(','),
                         row['O-->H-N2'].split(',')])

    def sse_fix( row ):
        # Fix secondary structure
        # TODO: Expand DSSP comprehension of structural data.
        # BODY: There is extra information in the STRUCTURE column. Although explanations such as
        #       http://www.csb.yale.edu/userguides/databases/dssp/dssp_man.html are not completely
        #       clear for me yet.
        sse = list(str(row['STRUCTURE']))[1]
        return sse if sse != ' ' else 'L'

    def acc_fix( row ):
        # Fix accessibility
        acc = int(row['ACC'])
        try:
            acc10 = float(float(10 * acc) / properties.get_surface(row['auth_comp_id']))
        except IndexError as e:
            acc10 = 1
            if core.get_option('system', 'verbose') > 1:
                sys.stderr.write(e + '\n')
        acccode = math.ceil(float(acc10) / 10)
        acccode = '*' if int(acc10) == 0 else '?' if int(acc10) > 10 else '#' if int(acc10) == 10 else int(acc10)
        accbin = acc10 > core.get_option('data', 'surface.threshold')
        return [acc, acc10, acccode, accbin]

    def insertion_fix( row ):
        # Fix insertion code
        m = re.search(r'(\-*\d+)(\w*)', row['auth_seq_id'])
        return [m.group(1), m.group(2) if m.group(2) != '' else ' ']

    def fix( row ):
        data = list(hbonds_fix(row))
        data.append(sse_fix(row))
        data.extend(acc_fix(row))
        data.extend(insertion_fix(row))
        return data

    if not os.path.isfile(filename):
        raise IOError('DSSP file {} not found'.format(filename))

    data = pd.read_fwf(filename, delimiter='~',
                       widths=[5, 6, 1, 3, 10, 4, 5, 4, 13, 11, 11, 11, 8, 5, 6, 6, 6, 7, 7, 7],
                       names=['#', 'auth_seq_id', 'auth_asym_id', 'auth_comp_id', 'STRUCTURE',
                              'BP1', 'BP2', 'ACC', 'N-H-->O1', 'O-->H-N1', 'N-H-->O2', 'O-->H-N2',
                              'TCO', 'KAPPA', 'ALPHA', 'PHI', 'PSI', 'X-CA', 'Y-CA', 'Z-CA'] )
    # Drop header lines
    data = data.dropna(subset=['Z-CA'])[1:].drop(['#', 'X-CA', 'Y-CA', 'Z-CA'], axis=1).reset_index(drop=True)
    # Drop chainbreaks
    data = data[~data['auth_comp_id'].str.contains('!')]
    # Apply fixes
    data[['rnhoa', 'enhoa', 'rohna', 'eohna', 'rnhob', 'enhob', 'rohnb', 'eohnb',
          'sse',
          'access', 'access10', 'accesscode', 'exposed',
          'auth_seq_id', 'pdbx_PDB_ins_code']] = data.apply(lambda row: fix(row), axis=1, result_type='expand')
    # Drop processed columns
    data.drop(['N-H-->O1', 'O-->H-N1', 'N-H-->O2', 'O-->H-N2'], axis=1, inplace=True)
    data.drop(['STRUCTURE'], axis=1, inplace=True)
    data.drop(['ACC'], axis=1, inplace=True)

    # Minimize
    if minimize:
        data.drop(['BP1', 'BP2', 'TCO', 'KAPPA', 'ALPHA', 'PHI', 'PSI', 'rnhoa', 'enhoa',
                   'rohna', 'eohna', 'rnhob', 'enhob', 'rohnb', 'eohnb'], axis=1, inplace=True)
    return DSSPFrame(data.apply(pd.to_numeric, errors='ignore'))
