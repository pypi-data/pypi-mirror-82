<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
This file is redistributed as part of CoVeriTeam, a tool for on-demand composition of cooperative verification systems:
https://gitlab.com/sosy-lab/software/coveriteam

This file has been taken from the sv-benchmarks repository: https://github.com/sosy-lab/sv-benchmarks

SPDX-FileCopyrightText: 2008-2020 SV-Benchmarks community

SPDX-License-Identifier: Apache-2.0
-->

<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
  <default>false</default>
 </key>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
  <default>false</default>
 </key>
 <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
  <default>false</default>
 </key>
 <key attr.name="violatedProperty" attr.type="string" for="node" id="violatedProperty"/>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
 <key attr.name="endoffset" attr.type="int" for="edge" id="endoffset"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>/home/kanav/repos/coveriteam/examples/test/gcnr2008.i</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
 <key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/>
 <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">violation_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 1.9.1 / witnessValidation</data>
  <data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data>
  <data key="inputwitnesshash">552a7bd8b584770354fd9d9e3a0e109b051e69dcc71aa0e0c5dc2ae07e723d86</data>
  <data key="programfile">/home/kanav/repos/coveriteam/examples/test/gcnr2008.i</data>
  <data key="programhash">ba5455a717fbac98f5f0bd57522f122609a3b4e3cffe9439e23913e1160d89ce</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2020-05-28T18:46:35+02:00</data>
  <node id="A0">
   <data key="entry">true</data>
  </node>
  <node id="A8"/>
  <edge source="A0" target="A8">
   <data key="startline">13</data>
   <data key="endline">13</data>
   <data key="startoffset">255</data>
   <data key="endoffset">265</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="A19"/>
  <edge source="A8" target="A19">
   <data key="startline">15</data>
   <data key="endline">15</data>
   <data key="startoffset">301</data>
   <data key="endoffset">305</data>
   <data key="assumption">w == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A21"/>
  <edge source="A19" target="A21">
   <data key="startline">15</data>
   <data key="endline">15</data>
   <data key="startoffset">297</data>
   <data key="endoffset">305</data>
   <data key="assumption">z == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A22"/>
  <edge source="A21" target="A22">
   <data key="startline">15</data>
   <data key="endline">15</data>
   <data key="startoffset">293</data>
   <data key="endoffset">305</data>
   <data key="assumption">y == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A23"/>
  <edge source="A22" target="A23">
   <data key="enterLoopHead">true</data>
   <data key="startline">15</data>
   <data key="endline">15</data>
   <data key="startoffset">289</data>
   <data key="endoffset">305</data>
   <data key="assumption">x == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A27"/>
  <edge source="A23" target="A27">
   <data key="startline">16</data>
   <data key="endline">16</data>
   <data key="startoffset">319</data>
   <data key="endoffset">341</data>
   <data key="assumption">\result == (0);</data>
   <data key="assumption.resultfunction">__VERIFIER_nondet_int</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A28"/>
  <edge source="A27" target="A28">
   <data key="startline">16</data>
   <data key="endline">16</data>
   <data key="startoffset">319</data>
   <data key="endoffset">341</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="sink">
   <data key="sink">true</data>
  </node>
  <edge source="A27" target="sink">
   <data key="startline">16</data>
   <data key="endline">16</data>
   <data key="startoffset">319</data>
   <data key="endoffset">341</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A31"/>
  <edge source="A28" target="A31">
   <data key="startline">31</data>
   <data key="endline">31</data>
   <data key="startoffset">623</data>
   <data key="endoffset">628</data>
   <data key="control">condition-false</data>
   <data key="assumption">x == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <edge source="A28" target="sink">
   <data key="startline">31</data>
   <data key="endline">31</data>
   <data key="startoffset">623</data>
   <data key="endoffset">628</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A33"/>
  <edge source="A31" target="A33">
   <data key="startline">31</data>
   <data key="endline">31</data>
   <data key="startoffset">605</data>
   <data key="endoffset">638</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <node id="A35">
   <data key="violation">true</data>
   <data key="violatedProperty">unreach-call: __VERIFIER_error(); called in line 8</data>
  </node>
  <edge source="A33" target="A35">
   <data key="startline">7</data>
   <data key="endline">7</data>
   <data key="startoffset">168</data>
   <data key="endoffset">171</data>
   <data key="control">condition-true</data>
   <data key="assumption">cond == (0);</data>
   <data key="assumption.scope">__VERIFIER_assert</data>
  </edge>
  <edge source="A33" target="sink">
   <data key="startline">7</data>
   <data key="endline">7</data>
   <data key="startoffset">168</data>
   <data key="endoffset">171</data>
   <data key="control">condition-false</data>
  </edge>
 </graph>
</graphml>
