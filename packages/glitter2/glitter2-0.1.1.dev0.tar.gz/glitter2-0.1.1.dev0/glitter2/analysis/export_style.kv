#:import pretty_space base_kivy_app.utils.pretty_space
#:import Factory kivy.factory.Factory

<ExportWidget@BoxLayout>:
    size_hint_min_x: self.minimum_width
    orientation: 'vertical'
    spacing: '5dp'
    export_options: export_options.__self__
    canvas:
        Color:
            rgba: app.theme.primary_light
        Rectangle:
            pos: self.pos
            size: self.size
    ExportSourceItemLog:
        on_kv_post:
            app.source_item_log = self.__self__
            root.remove_widget(self)
    ExportOptionsDropDown:
        id: export_options
        on_kv_post: root.remove_widget(self)
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: None
        size_hint_min_x: self.minimum_width
        height: self.minimum_height
        padding: '15dp', '5dp'
        spacing: '8dp'
        canvas:
            Color:
                rgba: app.theme.primary
            Rectangle:
                pos: self.pos
                size: self.size
        FlatLabel:
            text: 'Source directory'
            height: self.texture_size[1]
            size_hint_y: None
            size_hint_min_x: self.texture_size[0]
            bold: True
            center_texture: True
            flat_color: app.theme.text_primary
        BoxLayout:
            size_hint_y: None
            size_hint_min_x: self.minimum_width
            height: '34dp'
            spacing: '5dp'
            AnimatedToggleButton:
                anim_active: bool(app.export_manager.source_processing)
                disabled: bool(app.export_manager.thread_has_job) and not app.export_manager.source_processing
                scale_down_color: True
                source: 'flat_refresh.png' if self.state == 'normal' else 'flat_stop.png'
                flat_color: app.theme.accent
                state: 'down' if app.export_manager.source_processing else 'normal'
                on_release:
                    if self.state == 'down': app.export_manager.request_refresh_source_contents()
                    if self.state == 'normal': app.export_manager.stop_op = True
            BoxLayout:
                disabled: app.export_manager.thread_has_job
                size_hint_min_x: self.minimum_width
                spacing: '5dp'
                FlatLabel:
                    text: 'Glob file filter:'
                    size: self.texture_size
                    size_hint: None, None
                    flat_color: app.theme.text_primary
                FlatSizedTextInput:
                    text: app.export_manager.source_match_suffix
                    background_color: app.theme.primary_light
                    hint_text: '.ext'
                    on_focus: if not self.focus: app.export_manager.source_match_suffix = self.text
                    width: '100dp'
                    size_hint_x: None
                FlatLabel:
                    text: 'Source path:'
                    size: self.texture_size
                    size_hint: None, None
                    flat_color: app.theme.text_primary
                FlatImageButton:
                    scale_down_color: True
                    source: 'flat_folder.png'
                    flat_color: app.theme.accent
                    on_release: app.open_filechooser(callback=app.export_manager.gui_set_path('source'), target=app.export_manager.source_viz, dirselect=True, title='Select data directories')
                FlatSizedTextInput:
                    text: app.export_manager.source_viz
                    background_color: app.theme.primary_light
                    hint_text: 'Source'
                    on_focus: if not self.focus: app.export_manager.set_source(self.text)
                    size_hint_min_x: '100dp'
    BoxLayout:
        orientation: 'vertical'
        size_hint_min: self.minimum_size
        padding: '15dp', '5dp'
        spacing: '8dp'
        canvas:
            Color:
                rgba: app.theme.primary
            Rectangle:
                pos: self.pos
                size: self.size
        FlatLabel:
            text: 'Data files'
            height: self.texture_size[1]
            size_hint_y: None
            size_hint_min_x: self.texture_size[0]
            bold: True
            center_texture: True
            flat_color: app.theme.text_primary
        BoxLayout:
            size_hint_y: None
            size_hint_min_x: self.minimum_width
            height: '34dp'
            padding: '15dp', '5dp'
            spacing: '15dp'
            AnimatedToggleButton:
                anim_active: bool(app.export_manager.currently_processing)
                disabled: bool(app.export_manager.thread_has_job) and not app.export_manager.currently_processing
                scale_down_color: True
                source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
                flat_color: app.theme.accent
                state: 'down' if app.export_manager.currently_processing else 'normal'
                on_release:
                    if self.state == 'down': app.set_export_stats_opts(root.export_options.ids.export_stats.ids.zone_event_groups.children)
                    if self.state == 'down': app.export_manager.request_export_files()
                    if self.state == 'normal': app.export_manager.stop_op = True
            FlatImageButton:
                scale_down_color: True
                source: 'flat_dots_vertical.png'
                flat_color: app.theme.accent
                on_release: root.export_options.open(self.parent)
            Widget
            FlatLabel:
                text:'Succeeded: [b]{}[/b], Failed: [b]{}[/b], Skipped: [b]{}[/b]'.format(app.export_manager.num_processed_files, app.export_manager.num_failed_files, app.export_manager.num_skipped_files)
                size_hint: None, None
                size: self.texture_size
                flat_color: app.theme.text_primary
                center_texture: False
                markup: True
        RecycleView:
            on_kv_post: app.export_manager.recycle_view = self.__self__
            viewclass: 'SourceItemView'
            size_hint_min_x: rv.minimum_width
            size_hint_min_y: min(dp(50), rv.minimum_height)
            bar_width: '10dp'
            scroll_type: ['bars']
            padding: '10dp', 0
            RecycleBoxLayout:
                id: rv
                default_size: None, None
                default_size_hint: 1, None
                size_hint_y: None
                height: self.minimum_height
                orientation: 'vertical'
                spacing: '1dp'
                canvas:
                    Color:
                        rgba: app.theme.accent
                    Rectangle:
                        pos: self.pos
                        size: self.size


<SourceItemView@RecycleKVIDsDataViewBehavior+BoxLayout>:
    spacing: '5dp'
    size_hint_y: None
    height: self.minimum_height
    result: ''
    source_obj: None
    padding: '10dp', '2dp'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    FlatLabel:
        text: 'Filename:'
        size: self.texture_size
        size_hint: None, None
        flat_color: app.theme.text_primary
        bold: True
        center_texture: False
    FlatLabel:
        id: filename
        flat_color: app.theme.text_primary
        text_size: self.width, None
        shorten: True
        shorten_from: 'left'
        size_hint_min_x: '100dp'
        padding_y: '2dp'
    FlatLabel:
        id: file_size
        size: max(self.texture_size[0], self.width), self.texture_size[1]
        size_hint: None, None
        flat_color: app.theme.text_primary
        bold: True
        center_texture: False
    FlatToggleButton:
        id: skip
        disabled: bool(app.export_manager.thread_has_job)
        text: "Don't skip" if self.state == 'normal' else 'Skip'
        size_hint: None, None
        size: max(self.texture_size[0], self.width), self.texture_size[1]
        padding_x: '1dp'
        bold: True
        on_release: app.export_manager.request_set_skip(root.source_obj, self.state == 'down')
        scale_down_color: True
        flat_color: app.theme.text_primary
        flat_background_color: app.theme.primary_light if self.state == 'normal' else app.theme.primary_dark
    FlatLabel:
        id: status
        size: '100dp', self.texture_size[1]
        size_hint: None, None
        flat_color: [1, 0, 0, 1] if self.text == 'failed' else app.theme.text_primary
        center_texture: False
    AnimatedButton:
        disabled: status.text == 'processing'
        anim_active: status.text == 'processing'
        source: 'flat_refresh.png' if status.text == 'processing' else 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_release:
            app.source_item_log.result = root.result
            app.source_item_log.open(root)


<ExportOptionsDropDown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        max_size: self.minimum_width + dp(500)
        sizable_from: 'right'
        flat_color: app.theme.accent
        BoxLayout:
            disabled: bool(app.export_manager.thread_has_job)
            orientation: 'vertical'
            size_hint_y: None
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            padding: '2dp', '2dp'
            spacing: '3dp'
            canvas:
                Color:
                    rgba: app.theme.accent
                Rectangle:
                    pos: self.pos
                    size: self.size
            ImportedDataWidget
            RawDataExportWidget
            ExportStatsWidget:
                id: export_stats


<ExportOptionWidget@BoxLayout>:
    size_hint_y: None
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    orientation: 'vertical'
    padding: '5dp'
    spacing: '2dp'
    canvas:
        Color:
            rgba: app.theme.primary_text
        Rectangle:
            pos: self.pos
            size: self.size

<ImportedDataWidget@ExportOptionWidget>:
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        spacing: '10dp'
        padding: '4dp'
        CheckBox:
            group: 'generate_h5_data_files'
            currently_processing: app.export_manager.currently_processing
            on_currently_processing: if not self.currently_processing: self.state = 'normal'
            state: 'down' if app.export_manager.upgrade_legacy_files else 'normal'
            on_state: app.export_manager.upgrade_legacy_files = self.state == 'down'
            size_hint_x: None
            width: self.height
            color: app.theme.accent
        FlatLabel:
            size_hint: None, None
            size: self.texture_size
            text: "Upgrade legacy Glitter H5 files"
            flat_color: app.theme.text_primary
            bold: True
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        spacing: '10dp'
        padding: '4dp'
        CheckBox:
            group: 'generate_h5_data_files'
            currently_processing: app.export_manager.currently_processing
            on_currently_processing: if not self.currently_processing: self.state = 'normal'
            state: 'down' if app.export_manager.import_clever_sys_files else 'normal'
            on_state: app.export_manager.import_clever_sys_files = self.state == 'down'
            size_hint_x: None
            width: self.height
            color: app.theme.accent
        FlatLabel:
            size_hint: None, None
            size: self.texture_size
            text: "Create/Append data files from CleverSys TXT files"
            flat_color: app.theme.text_primary
            bold: True
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        spacing: '10dp'
        padding: '4dp'
        CheckBox:
            group: 'generate_h5_data_files'
            currently_processing: app.export_manager.currently_processing
            on_currently_processing: if not self.currently_processing: self.state = 'normal'
            state: 'down' if app.export_manager.import_tracking_csv_files else 'normal'
            on_state: app.export_manager.import_tracking_csv_files = self.state == 'down'
            size_hint_x: None
            width: self.height
            color: app.theme.accent
        FlatLabel:
            size_hint: None, None
            size: self.texture_size
            text: "Create/Append data files from csv XYT files"
            flat_color: app.theme.text_primary
            bold: True
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        FlatImageButton:
            scale_down_color: True
            source: 'flat_folder.png'
            flat_color: app.theme.accent
            on_release: app.open_filechooser(callback=app.export_manager.gui_set_path('generated_file_output_path'), target=app.export_manager.generated_file_output_path, dirselect=True, title='Select output directory')
        FlatSizedTextInput:
            text: app.export_manager.generated_file_output_path
            background_color: app.theme.primary_light
            hint_text: 'Output directory for generated H5 files'
            on_focus: if not self.focus: app.export_manager.generated_file_output_path = self.text
            size_hint_min_x: '200dp'


<RawDataExportWidget@ExportOptionWidget>:
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        spacing: '10dp'
        padding: '4dp'
        CheckBox:
            state: 'down' if app.export_manager.export_raw_data else 'normal'
            on_state: app.export_manager.export_raw_data = self.state == 'down'
            size_hint_x: None
            width: self.height
            color: app.theme.accent
        FlatLabel:
            size_hint: None, None
            size: self.texture_size
            text: "Export raw data"
            flat_color: app.theme.text_primary
            bold: True
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        FlatImageButton:
            scale_down_color: True
            source: 'flat_folder.png'
            flat_color: app.theme.accent
            on_release: app.open_filechooser(callback=app.export_manager.gui_set_path('root_raw_data_export_path'), target=app.export_manager.root_raw_data_export_path, dirselect=True, title='Select raw data directory')
        FlatSizedTextInput:
            text: app.export_manager.root_raw_data_export_path
            background_color: app.theme.primary_light
            hint_text: 'Raw data output directory'
            on_focus: if not self.focus: app.export_manager.root_raw_data_export_path = self.text
            size_hint_min_x: '200dp'
    BoxLayout:
        size_hint: None, None
        size: self.minimum_width, '26dp'
        FlatLabel:
            size: self.texture_size
            size_hint: None, None
            text: "Export position-zone channels collision data:"
            padding_x: '1dp'
            flat_color: app.theme.text_primary
        CheckBox:
            state: 'down' if app.export_manager.raw_dump_zone_collider else 'normal'
            on_state: app.export_manager.raw_dump_zone_collider = self.state == 'down'
            size_hint: None, None
            height: '30dp'
            width: self.height
            color: app.theme.accent



<ExportStatsWidget@ExportOptionWidget>:
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        spacing: '10dp'
        padding: '4dp'
        CheckBox:
            state: 'down' if app.export_manager.export_stats_data else 'normal'
            on_state: app.export_manager.export_stats_data = self.state == 'down'
            size_hint_x: None
            width: self.height
            color: app.theme.accent
        FlatLabel:
            size_hint: None, None
            size: self.texture_size
            text: "Export data statistics"
            flat_color: app.theme.text_primary
            bold: True
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        FlatImageButton:
            scale_down_color: True
            source: 'flat_folder.png'
            flat_color: app.theme.accent
            on_release: app.open_filechooser(callback=app.export_manager.gui_set_path('stats_export_path'), target=app.export_manager.stats_export_path, title='Create output file', mode='save', filters=['*.xlsx'])
        FlatSizedTextInput:
            text: app.export_manager.stats_export_path
            background_color: app.theme.primary_light
            hint_text: 'Stats filename'
            on_focus: if not self.focus: app.export_manager.stats_export_path = self.text
            size_hint_min_x: '200dp'
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        spacing: '5dp'
        FlatLabel:
            size: self.texture_size
            size_hint: None, None
            text: "Analysis start time:"
            padding_x: '1dp'
            flat_color: app.theme.text_primary
        FlatSizedTextInput:
            input_filter: 'float'
            background_color: app.theme.primary_light
            hint_text: 'Start time'
            size_hint_min_x: '50dp'
            size_hint_max_x: '150dp'
            on_focus: if not self.focus: app.export_manager.gui_set_start_time(int(self.text) if self.text else None)
        FlatLabel:
            size: self.texture_size
            size_hint: None, None
            text: "Analysis end time:"
            padding_x: '1dp'
            flat_color: app.theme.text_primary
        FlatSizedTextInput:
            input_filter: 'float'
            background_color: app.theme.primary_light
            hint_text: 'End time'
            size_hint_min_x: '50dp'
            size_hint_max_x: '150dp'
            on_focus: if not self.focus: app.export_manager.gui_set_end_time(int(self.text) if self.text else None)
    BoxLayout:
        size_hint_y: None
        height: '30dp'
        size_hint_min_x: self.minimum_width
        spacing: '5dp'
        FlatImageButton:
            scale_down_color: True
            source: 'flat_plus.png'
            flat_color: app.theme.accent
            on_release: zone_event_groups.add_widget(Factory.ZoneEventGroup())
        FlatLabel:
            size_hint: None, None
            size: self.texture_size
            text: "Additional zone/event groups for pos channel interaction analysis:"
            flat_color: app.theme.text_primary
            bold: True
            padding: '5dp', '5dp'
    ScrollView:
        size_hint_min_y: min(zone_event_groups.height, dp(150))
        size_hint_max_x: zone_event_groups.width
        bar_width: '10dp'
        scroll_type: ['bars']
        BoxLayout:
            id: zone_event_groups
            orientation: 'vertical'
            size_hint: None, None
            size: self.minimum_size
            spacing: '2dp'
            canvas:
                Color:
                    rgba: app.theme.accent
                Rectangle:
                    pos: self.pos
                    size: self.size


<ExportSourceItemLog@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    result: ''
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: '300dp'
        max_size: '800dp'
        width: '400'
        sizable_from: 'right'
        flat_color: app.theme.accent
        BoxLayout:
            size_hint_min_y: self.minimum_height
            ScrollView:
                size_hint_min_y: dp(300)
                bar_width: '10dp'
                scroll_type: ['bars']
                FlatLabel:
                    id: result
                    text: root.result
                    size_hint: None, None
                    size: self.texture_size
                    flat_color: app.theme.text_primary


<ZoneEventGroupChannelName@FlatToggleButton>:
    padding: '5dp', '5dp'
    flat_color: app.theme.text_primary
    flat_background_color: app.theme.primary_light if self.state == 'normal' else app.theme.primary
    size_hint: None, None
    size: self.texture_size
    on_state: self.parent.parent.parent.channels[self.text] = self.state == 'down'


<ZoneEventGroup@BoxLayout>:
    size_hint: None, None
    size: self.minimum_size
    on_kv_post:
        for channel in app.channel_controller.zone_channels: zones.add_widget(Factory.ZoneEventGroupChannelName(text=channel.name))
        for channel in app.channel_controller.event_channels: events.add_widget(Factory.ZoneEventGroupChannelName(text=channel.name))
    spacing: '5dp'
    padding: '5dp'
    channels: {}
    canvas:
        Color:
            rgba: app.theme.primary_text
        Rectangle:
            pos: self.pos
            size: self.size
    FlatImageButton:
        size_hint_y: None
        height: '26dp'
        scale_down_color: True
        source: 'flat_delete.png'
        flat_color: app.theme.accent
        on_release: root.parent.remove_widget(root)
    BoxLayout:
        orientation: 'vertical'
        size_hint: None, None
        size: self.minimum_size
        FlatLabel:
            size_hint: None, None
            size: self.texture_size
            text: "Zone channels: "
            flat_color: app.theme.text_primary
            padding: '5dp', '5dp'
        FlatLabel:
            size_hint: None, None
            size: self.texture_size
            text: "Event channels: "
            flat_color: app.theme.text_primary
            padding: '5dp', '5dp'
    BoxLayout:
        orientation: 'vertical'
        size_hint: None, None
        size: self.minimum_size
        spacing: '5dp'
        BoxLayout:
            id: zones
            size_hint: None, None
            size: self.minimum_size
            spacing: '5dp'
        BoxLayout:
            id: events
            size_hint: None, None
            size: self.minimum_size
            spacing: '5dp'
