# coding: utf-8

"""
    SQE API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qumranica.configuration import Configuration


class PlacementDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scale': 'float',
        'rotate': 'float',
        'z_index': 'int',
        'translate': 'TranslateDTO'
    }

    attribute_map = {
        'scale': 'scale',
        'rotate': 'rotate',
        'z_index': 'zIndex',
        'translate': 'translate'
    }

    def __init__(self, scale=None, rotate=None, z_index=None, translate=None, local_vars_configuration=None):  # noqa: E501
        """PlacementDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._scale = None
        self._rotate = None
        self._z_index = None
        self._translate = None
        self.discriminator = None

        self.scale = scale
        self.rotate = rotate
        self.z_index = z_index
        self.translate = translate

    @property
    def scale(self):
        """Gets the scale of this PlacementDTO.  # noqa: E501


        :return: The scale of this PlacementDTO.  # noqa: E501
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this PlacementDTO.


        :param scale: The scale of this PlacementDTO.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and scale is None:  # noqa: E501
            raise ValueError("Invalid value for `scale`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                scale is not None and scale > 99.9999):  # noqa: E501
            raise ValueError("Invalid value for `scale`, must be a value less than or equal to `99.9999`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                scale is not None and scale < 0.1):  # noqa: E501
            raise ValueError("Invalid value for `scale`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._scale = scale

    @property
    def rotate(self):
        """Gets the rotate of this PlacementDTO.  # noqa: E501


        :return: The rotate of this PlacementDTO.  # noqa: E501
        :rtype: float
        """
        return self._rotate

    @rotate.setter
    def rotate(self, rotate):
        """Sets the rotate of this PlacementDTO.


        :param rotate: The rotate of this PlacementDTO.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and rotate is None:  # noqa: E501
            raise ValueError("Invalid value for `rotate`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                rotate is not None and rotate > 360):  # noqa: E501
            raise ValueError("Invalid value for `rotate`, must be a value less than or equal to `360`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                rotate is not None and rotate < 0):  # noqa: E501
            raise ValueError("Invalid value for `rotate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rotate = rotate

    @property
    def z_index(self):
        """Gets the z_index of this PlacementDTO.  # noqa: E501


        :return: The z_index of this PlacementDTO.  # noqa: E501
        :rtype: int
        """
        return self._z_index

    @z_index.setter
    def z_index(self, z_index):
        """Sets the z_index of this PlacementDTO.


        :param z_index: The z_index of this PlacementDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and z_index is None:  # noqa: E501
            raise ValueError("Invalid value for `z_index`, must not be `None`")  # noqa: E501

        self._z_index = z_index

    @property
    def translate(self):
        """Gets the translate of this PlacementDTO.  # noqa: E501


        :return: The translate of this PlacementDTO.  # noqa: E501
        :rtype: TranslateDTO
        """
        return self._translate

    @translate.setter
    def translate(self, translate):
        """Sets the translate of this PlacementDTO.


        :param translate: The translate of this PlacementDTO.  # noqa: E501
        :type: TranslateDTO
        """

        self._translate = translate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlacementDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlacementDTO):
            return True

        return self.to_dict() != other.to_dict()
