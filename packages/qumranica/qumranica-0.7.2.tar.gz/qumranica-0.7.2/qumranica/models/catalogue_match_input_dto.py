# coding: utf-8

"""
    SQE API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qumranica.configuration import Configuration


class CatalogueMatchInputDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'catalog_side': 'SideDesignation',
        'imaged_object_id': 'str',
        'manuscript_id': 'int',
        'edition_name': 'str',
        'edition_volume': 'str',
        'edition_location1': 'str',
        'edition_location2': 'str',
        'edition_side': 'SideDesignation',
        'comment': 'str',
        'text_fragment_id': 'int',
        'edition_id': 'int',
        'confirmed': 'bool'
    }

    attribute_map = {
        'catalog_side': 'catalogSide',
        'imaged_object_id': 'imagedObjectId',
        'manuscript_id': 'manuscriptId',
        'edition_name': 'editionName',
        'edition_volume': 'editionVolume',
        'edition_location1': 'editionLocation1',
        'edition_location2': 'editionLocation2',
        'edition_side': 'editionSide',
        'comment': 'comment',
        'text_fragment_id': 'textFragmentId',
        'edition_id': 'editionId',
        'confirmed': 'confirmed'
    }

    def __init__(self, catalog_side=None, imaged_object_id=None, manuscript_id=None, edition_name=None, edition_volume=None, edition_location1=None, edition_location2=None, edition_side=None, comment=None, text_fragment_id=None, edition_id=None, confirmed=None, local_vars_configuration=None):  # noqa: E501
        """CatalogueMatchInputDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._catalog_side = None
        self._imaged_object_id = None
        self._manuscript_id = None
        self._edition_name = None
        self._edition_volume = None
        self._edition_location1 = None
        self._edition_location2 = None
        self._edition_side = None
        self._comment = None
        self._text_fragment_id = None
        self._edition_id = None
        self._confirmed = None
        self.discriminator = None

        if catalog_side is not None:
            self.catalog_side = catalog_side
        self.imaged_object_id = imaged_object_id
        self.manuscript_id = manuscript_id
        self.edition_name = edition_name
        self.edition_volume = edition_volume
        self.edition_location1 = edition_location1
        self.edition_location2 = edition_location2
        self.edition_side = edition_side
        self.comment = comment
        self.text_fragment_id = text_fragment_id
        self.edition_id = edition_id
        self.confirmed = confirmed

    @property
    def catalog_side(self):
        """Gets the catalog_side of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The catalog_side of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: SideDesignation
        """
        return self._catalog_side

    @catalog_side.setter
    def catalog_side(self, catalog_side):
        """Sets the catalog_side of this CatalogueMatchInputDTO.


        :param catalog_side: The catalog_side of this CatalogueMatchInputDTO.  # noqa: E501
        :type: SideDesignation
        """

        self._catalog_side = catalog_side

    @property
    def imaged_object_id(self):
        """Gets the imaged_object_id of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The imaged_object_id of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: str
        """
        return self._imaged_object_id

    @imaged_object_id.setter
    def imaged_object_id(self, imaged_object_id):
        """Sets the imaged_object_id of this CatalogueMatchInputDTO.


        :param imaged_object_id: The imaged_object_id of this CatalogueMatchInputDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and imaged_object_id is None:  # noqa: E501
            raise ValueError("Invalid value for `imaged_object_id`, must not be `None`")  # noqa: E501

        self._imaged_object_id = imaged_object_id

    @property
    def manuscript_id(self):
        """Gets the manuscript_id of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The manuscript_id of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: int
        """
        return self._manuscript_id

    @manuscript_id.setter
    def manuscript_id(self, manuscript_id):
        """Sets the manuscript_id of this CatalogueMatchInputDTO.


        :param manuscript_id: The manuscript_id of this CatalogueMatchInputDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and manuscript_id is None:  # noqa: E501
            raise ValueError("Invalid value for `manuscript_id`, must not be `None`")  # noqa: E501

        self._manuscript_id = manuscript_id

    @property
    def edition_name(self):
        """Gets the edition_name of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The edition_name of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: str
        """
        return self._edition_name

    @edition_name.setter
    def edition_name(self, edition_name):
        """Sets the edition_name of this CatalogueMatchInputDTO.


        :param edition_name: The edition_name of this CatalogueMatchInputDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and edition_name is None:  # noqa: E501
            raise ValueError("Invalid value for `edition_name`, must not be `None`")  # noqa: E501

        self._edition_name = edition_name

    @property
    def edition_volume(self):
        """Gets the edition_volume of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The edition_volume of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: str
        """
        return self._edition_volume

    @edition_volume.setter
    def edition_volume(self, edition_volume):
        """Sets the edition_volume of this CatalogueMatchInputDTO.


        :param edition_volume: The edition_volume of this CatalogueMatchInputDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and edition_volume is None:  # noqa: E501
            raise ValueError("Invalid value for `edition_volume`, must not be `None`")  # noqa: E501

        self._edition_volume = edition_volume

    @property
    def edition_location1(self):
        """Gets the edition_location1 of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The edition_location1 of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: str
        """
        return self._edition_location1

    @edition_location1.setter
    def edition_location1(self, edition_location1):
        """Sets the edition_location1 of this CatalogueMatchInputDTO.


        :param edition_location1: The edition_location1 of this CatalogueMatchInputDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and edition_location1 is None:  # noqa: E501
            raise ValueError("Invalid value for `edition_location1`, must not be `None`")  # noqa: E501

        self._edition_location1 = edition_location1

    @property
    def edition_location2(self):
        """Gets the edition_location2 of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The edition_location2 of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: str
        """
        return self._edition_location2

    @edition_location2.setter
    def edition_location2(self, edition_location2):
        """Sets the edition_location2 of this CatalogueMatchInputDTO.


        :param edition_location2: The edition_location2 of this CatalogueMatchInputDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and edition_location2 is None:  # noqa: E501
            raise ValueError("Invalid value for `edition_location2`, must not be `None`")  # noqa: E501

        self._edition_location2 = edition_location2

    @property
    def edition_side(self):
        """Gets the edition_side of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The edition_side of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: SideDesignation
        """
        return self._edition_side

    @edition_side.setter
    def edition_side(self, edition_side):
        """Sets the edition_side of this CatalogueMatchInputDTO.


        :param edition_side: The edition_side of this CatalogueMatchInputDTO.  # noqa: E501
        :type: SideDesignation
        """
        if self.local_vars_configuration.client_side_validation and edition_side is None:  # noqa: E501
            raise ValueError("Invalid value for `edition_side`, must not be `None`")  # noqa: E501

        self._edition_side = edition_side

    @property
    def comment(self):
        """Gets the comment of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The comment of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CatalogueMatchInputDTO.


        :param comment: The comment of this CatalogueMatchInputDTO.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def text_fragment_id(self):
        """Gets the text_fragment_id of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The text_fragment_id of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: int
        """
        return self._text_fragment_id

    @text_fragment_id.setter
    def text_fragment_id(self, text_fragment_id):
        """Sets the text_fragment_id of this CatalogueMatchInputDTO.


        :param text_fragment_id: The text_fragment_id of this CatalogueMatchInputDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and text_fragment_id is None:  # noqa: E501
            raise ValueError("Invalid value for `text_fragment_id`, must not be `None`")  # noqa: E501

        self._text_fragment_id = text_fragment_id

    @property
    def edition_id(self):
        """Gets the edition_id of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The edition_id of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: int
        """
        return self._edition_id

    @edition_id.setter
    def edition_id(self, edition_id):
        """Sets the edition_id of this CatalogueMatchInputDTO.


        :param edition_id: The edition_id of this CatalogueMatchInputDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and edition_id is None:  # noqa: E501
            raise ValueError("Invalid value for `edition_id`, must not be `None`")  # noqa: E501

        self._edition_id = edition_id

    @property
    def confirmed(self):
        """Gets the confirmed of this CatalogueMatchInputDTO.  # noqa: E501


        :return: The confirmed of this CatalogueMatchInputDTO.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this CatalogueMatchInputDTO.


        :param confirmed: The confirmed of this CatalogueMatchInputDTO.  # noqa: E501
        :type: bool
        """

        self._confirmed = confirmed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogueMatchInputDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CatalogueMatchInputDTO):
            return True

        return self.to_dict() != other.to_dict()
