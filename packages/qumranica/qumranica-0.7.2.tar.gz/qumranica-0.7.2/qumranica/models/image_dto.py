# coding: utf-8

"""
    SQE API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qumranica.configuration import Configuration


class ImageDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'image_to_image_map_editor_id': 'int',
        'region_in_master_image': 'str',
        'region_in_image': 'str',
        'transform_to_master': 'str',
        'id': 'int',
        'url': 'str',
        'lighting_type': 'Lighting',
        'lighting_direction': 'Direction',
        'wave_length': 'list[str]',
        'type': 'str',
        'side': 'SideDesignation',
        'ppi': 'int',
        'master': 'bool',
        'catalog_number': 'int'
    }

    attribute_map = {
        'image_to_image_map_editor_id': 'imageToImageMapEditorId',
        'region_in_master_image': 'regionInMasterImage',
        'region_in_image': 'regionInImage',
        'transform_to_master': 'transformToMaster',
        'id': 'id',
        'url': 'url',
        'lighting_type': 'lightingType',
        'lighting_direction': 'lightingDirection',
        'wave_length': 'waveLength',
        'type': 'type',
        'side': 'side',
        'ppi': 'ppi',
        'master': 'master',
        'catalog_number': 'catalogNumber'
    }

    def __init__(self, image_to_image_map_editor_id=None, region_in_master_image=None, region_in_image=None, transform_to_master=None, id=None, url=None, lighting_type=None, lighting_direction=None, wave_length=None, type=None, side=None, ppi=None, master=None, catalog_number=None, local_vars_configuration=None):  # noqa: E501
        """ImageDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._image_to_image_map_editor_id = None
        self._region_in_master_image = None
        self._region_in_image = None
        self._transform_to_master = None
        self._id = None
        self._url = None
        self._lighting_type = None
        self._lighting_direction = None
        self._wave_length = None
        self._type = None
        self._side = None
        self._ppi = None
        self._master = None
        self._catalog_number = None
        self.discriminator = None

        self.image_to_image_map_editor_id = image_to_image_map_editor_id
        self.region_in_master_image = region_in_master_image
        self.region_in_image = region_in_image
        self.transform_to_master = transform_to_master
        self.id = id
        self.url = url
        self.lighting_type = lighting_type
        self.lighting_direction = lighting_direction
        self.wave_length = wave_length
        self.type = type
        self.side = side
        self.ppi = ppi
        self.master = master
        self.catalog_number = catalog_number

    @property
    def image_to_image_map_editor_id(self):
        """Gets the image_to_image_map_editor_id of this ImageDTO.  # noqa: E501


        :return: The image_to_image_map_editor_id of this ImageDTO.  # noqa: E501
        :rtype: int
        """
        return self._image_to_image_map_editor_id

    @image_to_image_map_editor_id.setter
    def image_to_image_map_editor_id(self, image_to_image_map_editor_id):
        """Sets the image_to_image_map_editor_id of this ImageDTO.


        :param image_to_image_map_editor_id: The image_to_image_map_editor_id of this ImageDTO.  # noqa: E501
        :type: int
        """

        self._image_to_image_map_editor_id = image_to_image_map_editor_id

    @property
    def region_in_master_image(self):
        """Gets the region_in_master_image of this ImageDTO.  # noqa: E501


        :return: The region_in_master_image of this ImageDTO.  # noqa: E501
        :rtype: str
        """
        return self._region_in_master_image

    @region_in_master_image.setter
    def region_in_master_image(self, region_in_master_image):
        """Sets the region_in_master_image of this ImageDTO.


        :param region_in_master_image: The region_in_master_image of this ImageDTO.  # noqa: E501
        :type: str
        """

        self._region_in_master_image = region_in_master_image

    @property
    def region_in_image(self):
        """Gets the region_in_image of this ImageDTO.  # noqa: E501


        :return: The region_in_image of this ImageDTO.  # noqa: E501
        :rtype: str
        """
        return self._region_in_image

    @region_in_image.setter
    def region_in_image(self, region_in_image):
        """Sets the region_in_image of this ImageDTO.


        :param region_in_image: The region_in_image of this ImageDTO.  # noqa: E501
        :type: str
        """

        self._region_in_image = region_in_image

    @property
    def transform_to_master(self):
        """Gets the transform_to_master of this ImageDTO.  # noqa: E501


        :return: The transform_to_master of this ImageDTO.  # noqa: E501
        :rtype: str
        """
        return self._transform_to_master

    @transform_to_master.setter
    def transform_to_master(self, transform_to_master):
        """Sets the transform_to_master of this ImageDTO.


        :param transform_to_master: The transform_to_master of this ImageDTO.  # noqa: E501
        :type: str
        """

        self._transform_to_master = transform_to_master

    @property
    def id(self):
        """Gets the id of this ImageDTO.  # noqa: E501


        :return: The id of this ImageDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageDTO.


        :param id: The id of this ImageDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self):
        """Gets the url of this ImageDTO.  # noqa: E501


        :return: The url of this ImageDTO.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ImageDTO.


        :param url: The url of this ImageDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def lighting_type(self):
        """Gets the lighting_type of this ImageDTO.  # noqa: E501


        :return: The lighting_type of this ImageDTO.  # noqa: E501
        :rtype: Lighting
        """
        return self._lighting_type

    @lighting_type.setter
    def lighting_type(self, lighting_type):
        """Sets the lighting_type of this ImageDTO.


        :param lighting_type: The lighting_type of this ImageDTO.  # noqa: E501
        :type: Lighting
        """
        if self.local_vars_configuration.client_side_validation and lighting_type is None:  # noqa: E501
            raise ValueError("Invalid value for `lighting_type`, must not be `None`")  # noqa: E501

        self._lighting_type = lighting_type

    @property
    def lighting_direction(self):
        """Gets the lighting_direction of this ImageDTO.  # noqa: E501


        :return: The lighting_direction of this ImageDTO.  # noqa: E501
        :rtype: Direction
        """
        return self._lighting_direction

    @lighting_direction.setter
    def lighting_direction(self, lighting_direction):
        """Sets the lighting_direction of this ImageDTO.


        :param lighting_direction: The lighting_direction of this ImageDTO.  # noqa: E501
        :type: Direction
        """
        if self.local_vars_configuration.client_side_validation and lighting_direction is None:  # noqa: E501
            raise ValueError("Invalid value for `lighting_direction`, must not be `None`")  # noqa: E501

        self._lighting_direction = lighting_direction

    @property
    def wave_length(self):
        """Gets the wave_length of this ImageDTO.  # noqa: E501


        :return: The wave_length of this ImageDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._wave_length

    @wave_length.setter
    def wave_length(self, wave_length):
        """Sets the wave_length of this ImageDTO.


        :param wave_length: The wave_length of this ImageDTO.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and wave_length is None:  # noqa: E501
            raise ValueError("Invalid value for `wave_length`, must not be `None`")  # noqa: E501

        self._wave_length = wave_length

    @property
    def type(self):
        """Gets the type of this ImageDTO.  # noqa: E501


        :return: The type of this ImageDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageDTO.


        :param type: The type of this ImageDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def side(self):
        """Gets the side of this ImageDTO.  # noqa: E501


        :return: The side of this ImageDTO.  # noqa: E501
        :rtype: SideDesignation
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this ImageDTO.


        :param side: The side of this ImageDTO.  # noqa: E501
        :type: SideDesignation
        """
        if self.local_vars_configuration.client_side_validation and side is None:  # noqa: E501
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501

        self._side = side

    @property
    def ppi(self):
        """Gets the ppi of this ImageDTO.  # noqa: E501


        :return: The ppi of this ImageDTO.  # noqa: E501
        :rtype: int
        """
        return self._ppi

    @ppi.setter
    def ppi(self, ppi):
        """Sets the ppi of this ImageDTO.


        :param ppi: The ppi of this ImageDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and ppi is None:  # noqa: E501
            raise ValueError("Invalid value for `ppi`, must not be `None`")  # noqa: E501

        self._ppi = ppi

    @property
    def master(self):
        """Gets the master of this ImageDTO.  # noqa: E501


        :return: The master of this ImageDTO.  # noqa: E501
        :rtype: bool
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this ImageDTO.


        :param master: The master of this ImageDTO.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and master is None:  # noqa: E501
            raise ValueError("Invalid value for `master`, must not be `None`")  # noqa: E501

        self._master = master

    @property
    def catalog_number(self):
        """Gets the catalog_number of this ImageDTO.  # noqa: E501


        :return: The catalog_number of this ImageDTO.  # noqa: E501
        :rtype: int
        """
        return self._catalog_number

    @catalog_number.setter
    def catalog_number(self, catalog_number):
        """Sets the catalog_number of this ImageDTO.


        :param catalog_number: The catalog_number of this ImageDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and catalog_number is None:  # noqa: E501
            raise ValueError("Invalid value for `catalog_number`, must not be `None`")  # noqa: E501

        self._catalog_number = catalog_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageDTO):
            return True

        return self.to_dict() != other.to_dict()
