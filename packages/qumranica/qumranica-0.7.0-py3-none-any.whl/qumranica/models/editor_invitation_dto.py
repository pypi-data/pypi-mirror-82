# coding: utf-8

"""
    SQE API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qumranica.configuration import Configuration


class EditorInvitationDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token': 'str',
        'requesting_admin_name': 'str',
        'requesting_admin_email': 'str',
        'edition_id': 'int',
        'edition_name': 'str',
        'date': 'datetime',
        'may_lock': 'bool',
        'may_read': 'bool',
        'may_write': 'bool',
        'is_admin': 'bool'
    }

    attribute_map = {
        'token': 'token',
        'requesting_admin_name': 'requestingAdminName',
        'requesting_admin_email': 'requestingAdminEmail',
        'edition_id': 'editionId',
        'edition_name': 'editionName',
        'date': 'date',
        'may_lock': 'mayLock',
        'may_read': 'mayRead',
        'may_write': 'mayWrite',
        'is_admin': 'isAdmin'
    }

    def __init__(self, token=None, requesting_admin_name=None, requesting_admin_email=None, edition_id=None, edition_name=None, date=None, may_lock=None, may_read=None, may_write=None, is_admin=None, local_vars_configuration=None):  # noqa: E501
        """EditorInvitationDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._token = None
        self._requesting_admin_name = None
        self._requesting_admin_email = None
        self._edition_id = None
        self._edition_name = None
        self._date = None
        self._may_lock = None
        self._may_read = None
        self._may_write = None
        self._is_admin = None
        self.discriminator = None

        self.token = token
        self.requesting_admin_name = requesting_admin_name
        self.requesting_admin_email = requesting_admin_email
        self.edition_id = edition_id
        self.edition_name = edition_name
        self.date = date
        self.may_lock = may_lock
        self.may_read = may_read
        self.may_write = may_write
        self.is_admin = is_admin

    @property
    def token(self):
        """Gets the token of this EditorInvitationDTO.  # noqa: E501


        :return: The token of this EditorInvitationDTO.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this EditorInvitationDTO.


        :param token: The token of this EditorInvitationDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token is None:  # noqa: E501
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def requesting_admin_name(self):
        """Gets the requesting_admin_name of this EditorInvitationDTO.  # noqa: E501


        :return: The requesting_admin_name of this EditorInvitationDTO.  # noqa: E501
        :rtype: str
        """
        return self._requesting_admin_name

    @requesting_admin_name.setter
    def requesting_admin_name(self, requesting_admin_name):
        """Sets the requesting_admin_name of this EditorInvitationDTO.


        :param requesting_admin_name: The requesting_admin_name of this EditorInvitationDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and requesting_admin_name is None:  # noqa: E501
            raise ValueError("Invalid value for `requesting_admin_name`, must not be `None`")  # noqa: E501

        self._requesting_admin_name = requesting_admin_name

    @property
    def requesting_admin_email(self):
        """Gets the requesting_admin_email of this EditorInvitationDTO.  # noqa: E501


        :return: The requesting_admin_email of this EditorInvitationDTO.  # noqa: E501
        :rtype: str
        """
        return self._requesting_admin_email

    @requesting_admin_email.setter
    def requesting_admin_email(self, requesting_admin_email):
        """Sets the requesting_admin_email of this EditorInvitationDTO.


        :param requesting_admin_email: The requesting_admin_email of this EditorInvitationDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and requesting_admin_email is None:  # noqa: E501
            raise ValueError("Invalid value for `requesting_admin_email`, must not be `None`")  # noqa: E501

        self._requesting_admin_email = requesting_admin_email

    @property
    def edition_id(self):
        """Gets the edition_id of this EditorInvitationDTO.  # noqa: E501


        :return: The edition_id of this EditorInvitationDTO.  # noqa: E501
        :rtype: int
        """
        return self._edition_id

    @edition_id.setter
    def edition_id(self, edition_id):
        """Sets the edition_id of this EditorInvitationDTO.


        :param edition_id: The edition_id of this EditorInvitationDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and edition_id is None:  # noqa: E501
            raise ValueError("Invalid value for `edition_id`, must not be `None`")  # noqa: E501

        self._edition_id = edition_id

    @property
    def edition_name(self):
        """Gets the edition_name of this EditorInvitationDTO.  # noqa: E501


        :return: The edition_name of this EditorInvitationDTO.  # noqa: E501
        :rtype: str
        """
        return self._edition_name

    @edition_name.setter
    def edition_name(self, edition_name):
        """Sets the edition_name of this EditorInvitationDTO.


        :param edition_name: The edition_name of this EditorInvitationDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and edition_name is None:  # noqa: E501
            raise ValueError("Invalid value for `edition_name`, must not be `None`")  # noqa: E501

        self._edition_name = edition_name

    @property
    def date(self):
        """Gets the date of this EditorInvitationDTO.  # noqa: E501


        :return: The date of this EditorInvitationDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this EditorInvitationDTO.


        :param date: The date of this EditorInvitationDTO.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def may_lock(self):
        """Gets the may_lock of this EditorInvitationDTO.  # noqa: E501


        :return: The may_lock of this EditorInvitationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._may_lock

    @may_lock.setter
    def may_lock(self, may_lock):
        """Sets the may_lock of this EditorInvitationDTO.


        :param may_lock: The may_lock of this EditorInvitationDTO.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and may_lock is None:  # noqa: E501
            raise ValueError("Invalid value for `may_lock`, must not be `None`")  # noqa: E501

        self._may_lock = may_lock

    @property
    def may_read(self):
        """Gets the may_read of this EditorInvitationDTO.  # noqa: E501


        :return: The may_read of this EditorInvitationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._may_read

    @may_read.setter
    def may_read(self, may_read):
        """Sets the may_read of this EditorInvitationDTO.


        :param may_read: The may_read of this EditorInvitationDTO.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and may_read is None:  # noqa: E501
            raise ValueError("Invalid value for `may_read`, must not be `None`")  # noqa: E501

        self._may_read = may_read

    @property
    def may_write(self):
        """Gets the may_write of this EditorInvitationDTO.  # noqa: E501


        :return: The may_write of this EditorInvitationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._may_write

    @may_write.setter
    def may_write(self, may_write):
        """Sets the may_write of this EditorInvitationDTO.


        :param may_write: The may_write of this EditorInvitationDTO.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and may_write is None:  # noqa: E501
            raise ValueError("Invalid value for `may_write`, must not be `None`")  # noqa: E501

        self._may_write = may_write

    @property
    def is_admin(self):
        """Gets the is_admin of this EditorInvitationDTO.  # noqa: E501


        :return: The is_admin of this EditorInvitationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this EditorInvitationDTO.


        :param is_admin: The is_admin of this EditorInvitationDTO.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_admin is None:  # noqa: E501
            raise ValueError("Invalid value for `is_admin`, must not be `None`")  # noqa: E501

        self._is_admin = is_admin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorInvitationDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EditorInvitationDTO):
            return True

        return self.to_dict() != other.to_dict()
