# coding: utf-8

"""
    SQE API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qumranica.configuration import Configuration


class UpdateAttributeDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'create_values': 'list[CreateAttributeValueDTO]',
        'update_values': 'list[UpdateAttributeValueDTO]',
        'delete_values': 'list[int]',
        'editable': 'bool',
        'removable': 'bool',
        'repeatable': 'bool',
        'batch_editable': 'bool'
    }

    attribute_map = {
        'create_values': 'createValues',
        'update_values': 'updateValues',
        'delete_values': 'deleteValues',
        'editable': 'editable',
        'removable': 'removable',
        'repeatable': 'repeatable',
        'batch_editable': 'batchEditable'
    }

    def __init__(self, create_values=None, update_values=None, delete_values=None, editable=None, removable=None, repeatable=None, batch_editable=None, local_vars_configuration=None):  # noqa: E501
        """UpdateAttributeDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._create_values = None
        self._update_values = None
        self._delete_values = None
        self._editable = None
        self._removable = None
        self._repeatable = None
        self._batch_editable = None
        self.discriminator = None

        self.create_values = create_values
        self.update_values = update_values
        self.delete_values = delete_values
        if editable is not None:
            self.editable = editable
        if removable is not None:
            self.removable = removable
        if repeatable is not None:
            self.repeatable = repeatable
        if batch_editable is not None:
            self.batch_editable = batch_editable

    @property
    def create_values(self):
        """Gets the create_values of this UpdateAttributeDTO.  # noqa: E501


        :return: The create_values of this UpdateAttributeDTO.  # noqa: E501
        :rtype: list[CreateAttributeValueDTO]
        """
        return self._create_values

    @create_values.setter
    def create_values(self, create_values):
        """Sets the create_values of this UpdateAttributeDTO.


        :param create_values: The create_values of this UpdateAttributeDTO.  # noqa: E501
        :type: list[CreateAttributeValueDTO]
        """
        if self.local_vars_configuration.client_side_validation and create_values is None:  # noqa: E501
            raise ValueError("Invalid value for `create_values`, must not be `None`")  # noqa: E501

        self._create_values = create_values

    @property
    def update_values(self):
        """Gets the update_values of this UpdateAttributeDTO.  # noqa: E501


        :return: The update_values of this UpdateAttributeDTO.  # noqa: E501
        :rtype: list[UpdateAttributeValueDTO]
        """
        return self._update_values

    @update_values.setter
    def update_values(self, update_values):
        """Sets the update_values of this UpdateAttributeDTO.


        :param update_values: The update_values of this UpdateAttributeDTO.  # noqa: E501
        :type: list[UpdateAttributeValueDTO]
        """
        if self.local_vars_configuration.client_side_validation and update_values is None:  # noqa: E501
            raise ValueError("Invalid value for `update_values`, must not be `None`")  # noqa: E501

        self._update_values = update_values

    @property
    def delete_values(self):
        """Gets the delete_values of this UpdateAttributeDTO.  # noqa: E501


        :return: The delete_values of this UpdateAttributeDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._delete_values

    @delete_values.setter
    def delete_values(self, delete_values):
        """Sets the delete_values of this UpdateAttributeDTO.


        :param delete_values: The delete_values of this UpdateAttributeDTO.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and delete_values is None:  # noqa: E501
            raise ValueError("Invalid value for `delete_values`, must not be `None`")  # noqa: E501

        self._delete_values = delete_values

    @property
    def editable(self):
        """Gets the editable of this UpdateAttributeDTO.  # noqa: E501


        :return: The editable of this UpdateAttributeDTO.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this UpdateAttributeDTO.


        :param editable: The editable of this UpdateAttributeDTO.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def removable(self):
        """Gets the removable of this UpdateAttributeDTO.  # noqa: E501


        :return: The removable of this UpdateAttributeDTO.  # noqa: E501
        :rtype: bool
        """
        return self._removable

    @removable.setter
    def removable(self, removable):
        """Sets the removable of this UpdateAttributeDTO.


        :param removable: The removable of this UpdateAttributeDTO.  # noqa: E501
        :type: bool
        """

        self._removable = removable

    @property
    def repeatable(self):
        """Gets the repeatable of this UpdateAttributeDTO.  # noqa: E501


        :return: The repeatable of this UpdateAttributeDTO.  # noqa: E501
        :rtype: bool
        """
        return self._repeatable

    @repeatable.setter
    def repeatable(self, repeatable):
        """Sets the repeatable of this UpdateAttributeDTO.


        :param repeatable: The repeatable of this UpdateAttributeDTO.  # noqa: E501
        :type: bool
        """

        self._repeatable = repeatable

    @property
    def batch_editable(self):
        """Gets the batch_editable of this UpdateAttributeDTO.  # noqa: E501


        :return: The batch_editable of this UpdateAttributeDTO.  # noqa: E501
        :rtype: bool
        """
        return self._batch_editable

    @batch_editable.setter
    def batch_editable(self, batch_editable):
        """Sets the batch_editable of this UpdateAttributeDTO.


        :param batch_editable: The batch_editable of this UpdateAttributeDTO.  # noqa: E501
        :type: bool
        """

        self._batch_editable = batch_editable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAttributeDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateAttributeDTO):
            return True

        return self.to_dict() != other.to_dict()
