# coding: utf-8

"""
    SQE API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qumranica.configuration import Configuration


class ArtefactDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'edition_id': 'int',
        'imaged_object_id': 'str',
        'image_id': 'int',
        'artefact_data_editor_id': 'int',
        'mask': 'str',
        'artefact_mask_editor_id': 'int',
        'is_placed': 'bool',
        'placement': 'PlacementDTO',
        'artefact_placement_editor_id': 'int',
        'side': 'SideDesignation',
        'status_message': 'str',
        'id': 'int',
        'name': 'str'
    }

    attribute_map = {
        'edition_id': 'editionId',
        'imaged_object_id': 'imagedObjectId',
        'image_id': 'imageId',
        'artefact_data_editor_id': 'artefactDataEditorId',
        'mask': 'mask',
        'artefact_mask_editor_id': 'artefactMaskEditorId',
        'is_placed': 'isPlaced',
        'placement': 'placement',
        'artefact_placement_editor_id': 'artefactPlacementEditorId',
        'side': 'side',
        'status_message': 'statusMessage',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, edition_id=None, imaged_object_id=None, image_id=None, artefact_data_editor_id=None, mask=None, artefact_mask_editor_id=None, is_placed=None, placement=None, artefact_placement_editor_id=None, side=None, status_message=None, id=None, name=None, local_vars_configuration=None):  # noqa: E501
        """ArtefactDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._edition_id = None
        self._imaged_object_id = None
        self._image_id = None
        self._artefact_data_editor_id = None
        self._mask = None
        self._artefact_mask_editor_id = None
        self._is_placed = None
        self._placement = None
        self._artefact_placement_editor_id = None
        self._side = None
        self._status_message = None
        self._id = None
        self._name = None
        self.discriminator = None

        self.edition_id = edition_id
        self.imaged_object_id = imaged_object_id
        self.image_id = image_id
        self.artefact_data_editor_id = artefact_data_editor_id
        self.mask = mask
        self.artefact_mask_editor_id = artefact_mask_editor_id
        self.is_placed = is_placed
        self.placement = placement
        self.artefact_placement_editor_id = artefact_placement_editor_id
        self.side = side
        self.status_message = status_message
        self.id = id
        self.name = name

    @property
    def edition_id(self):
        """Gets the edition_id of this ArtefactDTO.  # noqa: E501


        :return: The edition_id of this ArtefactDTO.  # noqa: E501
        :rtype: int
        """
        return self._edition_id

    @edition_id.setter
    def edition_id(self, edition_id):
        """Sets the edition_id of this ArtefactDTO.


        :param edition_id: The edition_id of this ArtefactDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and edition_id is None:  # noqa: E501
            raise ValueError("Invalid value for `edition_id`, must not be `None`")  # noqa: E501

        self._edition_id = edition_id

    @property
    def imaged_object_id(self):
        """Gets the imaged_object_id of this ArtefactDTO.  # noqa: E501


        :return: The imaged_object_id of this ArtefactDTO.  # noqa: E501
        :rtype: str
        """
        return self._imaged_object_id

    @imaged_object_id.setter
    def imaged_object_id(self, imaged_object_id):
        """Sets the imaged_object_id of this ArtefactDTO.


        :param imaged_object_id: The imaged_object_id of this ArtefactDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and imaged_object_id is None:  # noqa: E501
            raise ValueError("Invalid value for `imaged_object_id`, must not be `None`")  # noqa: E501

        self._imaged_object_id = imaged_object_id

    @property
    def image_id(self):
        """Gets the image_id of this ArtefactDTO.  # noqa: E501


        :return: The image_id of this ArtefactDTO.  # noqa: E501
        :rtype: int
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ArtefactDTO.


        :param image_id: The image_id of this ArtefactDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and image_id is None:  # noqa: E501
            raise ValueError("Invalid value for `image_id`, must not be `None`")  # noqa: E501

        self._image_id = image_id

    @property
    def artefact_data_editor_id(self):
        """Gets the artefact_data_editor_id of this ArtefactDTO.  # noqa: E501


        :return: The artefact_data_editor_id of this ArtefactDTO.  # noqa: E501
        :rtype: int
        """
        return self._artefact_data_editor_id

    @artefact_data_editor_id.setter
    def artefact_data_editor_id(self, artefact_data_editor_id):
        """Sets the artefact_data_editor_id of this ArtefactDTO.


        :param artefact_data_editor_id: The artefact_data_editor_id of this ArtefactDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and artefact_data_editor_id is None:  # noqa: E501
            raise ValueError("Invalid value for `artefact_data_editor_id`, must not be `None`")  # noqa: E501

        self._artefact_data_editor_id = artefact_data_editor_id

    @property
    def mask(self):
        """Gets the mask of this ArtefactDTO.  # noqa: E501


        :return: The mask of this ArtefactDTO.  # noqa: E501
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this ArtefactDTO.


        :param mask: The mask of this ArtefactDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mask is None:  # noqa: E501
            raise ValueError("Invalid value for `mask`, must not be `None`")  # noqa: E501

        self._mask = mask

    @property
    def artefact_mask_editor_id(self):
        """Gets the artefact_mask_editor_id of this ArtefactDTO.  # noqa: E501


        :return: The artefact_mask_editor_id of this ArtefactDTO.  # noqa: E501
        :rtype: int
        """
        return self._artefact_mask_editor_id

    @artefact_mask_editor_id.setter
    def artefact_mask_editor_id(self, artefact_mask_editor_id):
        """Sets the artefact_mask_editor_id of this ArtefactDTO.


        :param artefact_mask_editor_id: The artefact_mask_editor_id of this ArtefactDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and artefact_mask_editor_id is None:  # noqa: E501
            raise ValueError("Invalid value for `artefact_mask_editor_id`, must not be `None`")  # noqa: E501

        self._artefact_mask_editor_id = artefact_mask_editor_id

    @property
    def is_placed(self):
        """Gets the is_placed of this ArtefactDTO.  # noqa: E501


        :return: The is_placed of this ArtefactDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_placed

    @is_placed.setter
    def is_placed(self, is_placed):
        """Sets the is_placed of this ArtefactDTO.


        :param is_placed: The is_placed of this ArtefactDTO.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_placed is None:  # noqa: E501
            raise ValueError("Invalid value for `is_placed`, must not be `None`")  # noqa: E501

        self._is_placed = is_placed

    @property
    def placement(self):
        """Gets the placement of this ArtefactDTO.  # noqa: E501


        :return: The placement of this ArtefactDTO.  # noqa: E501
        :rtype: PlacementDTO
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this ArtefactDTO.


        :param placement: The placement of this ArtefactDTO.  # noqa: E501
        :type: PlacementDTO
        """
        if self.local_vars_configuration.client_side_validation and placement is None:  # noqa: E501
            raise ValueError("Invalid value for `placement`, must not be `None`")  # noqa: E501

        self._placement = placement

    @property
    def artefact_placement_editor_id(self):
        """Gets the artefact_placement_editor_id of this ArtefactDTO.  # noqa: E501


        :return: The artefact_placement_editor_id of this ArtefactDTO.  # noqa: E501
        :rtype: int
        """
        return self._artefact_placement_editor_id

    @artefact_placement_editor_id.setter
    def artefact_placement_editor_id(self, artefact_placement_editor_id):
        """Sets the artefact_placement_editor_id of this ArtefactDTO.


        :param artefact_placement_editor_id: The artefact_placement_editor_id of this ArtefactDTO.  # noqa: E501
        :type: int
        """

        self._artefact_placement_editor_id = artefact_placement_editor_id

    @property
    def side(self):
        """Gets the side of this ArtefactDTO.  # noqa: E501


        :return: The side of this ArtefactDTO.  # noqa: E501
        :rtype: SideDesignation
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this ArtefactDTO.


        :param side: The side of this ArtefactDTO.  # noqa: E501
        :type: SideDesignation
        """
        if self.local_vars_configuration.client_side_validation and side is None:  # noqa: E501
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501

        self._side = side

    @property
    def status_message(self):
        """Gets the status_message of this ArtefactDTO.  # noqa: E501


        :return: The status_message of this ArtefactDTO.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ArtefactDTO.


        :param status_message: The status_message of this ArtefactDTO.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def id(self):
        """Gets the id of this ArtefactDTO.  # noqa: E501


        :return: The id of this ArtefactDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArtefactDTO.


        :param id: The id of this ArtefactDTO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ArtefactDTO.  # noqa: E501


        :return: The name of this ArtefactDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArtefactDTO.


        :param name: The name of this ArtefactDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtefactDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArtefactDTO):
            return True

        return self.to_dict() != other.to_dict()
