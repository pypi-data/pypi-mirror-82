# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['validate_it']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'validate-it',
    'version': '0.11.1',
    'description': 'Ultimate data validation tool built on top of the typing module',
    'long_description': '# Validate-it\n\n[![Build Status](https://travis-ci.org/ruslux/validate-it.svg?branch=master)](https://travis-ci.org/ruslux/validate-it) \n[![Coverage Status](https://coveralls.io/repos/github/ruslux/validate-it/badge.svg?branch=master)](https://coveralls.io/github/ruslux/validate-it)\n[![PyPI version](https://badge.fury.io/py/validate-it.svg)](https://badge.fury.io/py/validate-it)\n[![Downloads](https://img.shields.io/pypi/dm/validate-it.svg)](https://pypi.python.org/pypi/validate-it)\n\n- [About](#about)\n- [Installation](#installation)\n- [Supported fields](#fields)\n- [Validation example](#validation-example)\n- [Dataclass example](#dataclass-example)\n- [Simple mapping example](#simple-mapping-example)\n- [Nested mapping example](#nested-mapping-example)\n- [Requirements](#requirements)\n\n### <a name="about"/>About</a>\nUltimate data validation tool built on top of the typing module\n\nFeatures: \n* validation by type hints\n* validation on `__init__`: `SomeModel(**kwargs)`\n* validation on `__setattr__`: `some_instance.some_field = value`\n* built-in options for types:\n  * `min_value`, `max_value` (based on `<` and `>`)\n  * `min_length`, `max_length`, `size` (based on `len()`)\n* cast for incoming value and outgoing value: `Options(parser=int, serializer=str)` \n* `alias` for incoming keys and `rename` for outgoing keys: `d: int = Options(alias=\'dyn\', rename=\'dynamic\')`\n* validation by list `allow`ed values: `Options(allow=[1, 2, 3])`\n* validation by custom list of `validators`: `Options(validators=[is_odd, is_even])`\n* auto pack nested values: `data: List[SomeModel] = Options(auto_pack=True, packer=SomeModel)`\n* all this `options` can be callable: `Options(min_value=dynamic_min_value)`\n\n\n### <a name="installation"/>Installation</a>\nWith pip:\n```bash\npip install validate-it\n```\n\n### <a name="fields"/>Supported fields</a>\n```python\nimport re\nfrom datetime import datetime\nfrom typing import Dict, List, Union, Optional\nfrom validate_it import schema, Options\n\n\nclass IsNotEmailError(Exception):\n    pass\n\n\ndef is_email(name, key, value, root):\n    if not re.match(r"[^@]+@[^@]+\\.[^@]+", value):\n        raise IsNotEmailError(f"{key}: is not email")\n\n    return value\n\n@schema\nclass Example:\n    # required fields\n    field_a: datetime\n    field_b: float\n    \n    # required fields with defaults\n    field_c: str = "unknown"\n    field_d: int = 9\n    \n    # required fields with nested types\n    field_e: Dict[int, str]\n    field_f: List[int]\n    \n    # optional fields\n    field_g: Optional[int]\n    field_h: Union[int, None] # equivalent of Optional[int]\n    \n    # with some validators:\n    fields_i: int = Options(default=0, max_value=100, min_value=100)\n    fields_j: str = Options(size=10)\n    fields_k: str = Options(min_length=10, max_length=20)\n    fields_l: List[str] = Options(size=5)\n    fields_m: str = Options(validators=[is_email])\n    fields_n: int = Options(allowed=[1, 2, 3])\n    \n    # with search (input) alias:\n    fields_o: int = Options(alias="field_n")\n    \n    # with rename (output) alias:\n    fields_p: int = Options(rename="field_q")\n    \n    # with serializer used in #to_dict(), outgoing value is str type\n    fields_q: int = Options(serializer=str)\n    \n    # with parser used in #from_dict() or direct setattr, incoming value will be parsed as int\n    fields_r: int = Options(parser=int)\n```\n\n### <a name="validation-example"/>Validation example</a>\n```python\nfrom typing import List\nfrom validate_it import *\n\n\n@schema\nclass Simple:\n    a: int\n    b: int\n\n\nsimple = Simple(a=1, b=2)\nsimple.a = 2\nsimple.b = 3\n\ntry:\n    simple.a = \'not int\'\nexcept TypeError:\n    print("Wrong type")\n\n@schema\nclass Owner:\n    first_name: str\n    last_name: str\n\n\n@schema\nclass Characteristics:\n    cc: float = Options(min_value=0.0)\n    hp: int = Options(min_value=0)\n\n\n@schema\nclass Car:\n    name: str = Options(min_length=2, max_length=20)\n    owners: List[Owner] = Options(auto_pack=True, packer=pack_value)\n    characteristics: Characteristics = Options(default=lambda: {"cc": 0.0, "hp": 0}, auto_pack=True, packer=pack_value)\n    convert: bool = Options(parser=bool)\n\n\n_data = {\n    "name": "Shelby GT500",\n    "owners": [\n        {\n            "first_name": "Randall",\n            "last_name": "Raines",\n        }\n    ],\n    "characteristics": {\n        "cc": 4.7,\n        "hp": 306\n    },\n    "unknown_field": 10,\n    "convert": 1 \n}\n\n_expected = {\n    "name": "Shelby GT500",\n    "owners": [\n        {\n            "first_name": "Randall",\n            "last_name": "Raines",\n        }\n    ],\n    "characteristics": {\n        "cc": 4.7,\n        "hp": 306\n    },\n    "convert": "1"\n}\n\ncar = Car(**_data)\nassert to_dict(car) == _expected\n```\n### <a name="dataclass-example"/>Dataclass example</a>\n```python\nfrom validate_it import *\nfrom dataclasses import dataclass\n\n\n@schema\n@dataclass\nclass Simple:\n    a: int\n    b: int\n\n\nsimple = Simple(a=1, b=2)\nsimple.a = 2\nsimple.b = 3\n\ntry:\n    simple.a = \'not int\'\nexcept TypeError:\n    print("Wrong type")\n```\n\n### <a name="simple-mapping-example"/>Simple mapping example</a>\n```python\nfrom validate_it import *\n\n\n@schema\nclass User:\n    first_name: str = Options(alias="f")\n    last_name: str = Options(alias="l")\n\n_in_data = {\n    "f": "John",\n    "l": "Connor"\n}\n\nuser = User(**_in_data)\n\nassert to_dict(user) == {"first_name": "John", "last_name": "Connor"}\n```\n\n### <a name="nested-mapping-example"/>Nested mapping example</a>\n```python\nfrom validate_it import *\nfrom accordion import compress\n\n\n@schema\nclass Player:\n    nickname: str = Options(alias="info.nickname")\n    intelligence: int = Options(alias="characteristics/0")\n    dexterity: int = Options(alias="characteristics/1")\n    strength: int = Options(alias="characteristics/2")\n    vitality: int = Options(alias="characteristics/3")\n\n_in_data = {\n    "info": {\n        "nickname": "Killer777",\n    },\n    "characteristics": [\n        7,\n        55,\n        11,\n        44\n    ]\n}\n\nplayer = Player(**compress(_in_data))\n\nassert to_dict(player) == {\n    "nickname": "Killer777", \n    "intelligence": 7, \n    "dexterity": 55, \n    "strength": 11, \n    "vitality": 44\n}\n```\n\nand back:\n```python\nfrom validate_it import *\nfrom accordion import expand\n\n\n@schema\nclass Player:\n    nickname: str = Options(rename="info.nickname")\n    intelligence: int = Options(rename="characteristics/0")\n    dexterity: int = Options(rename="characteristics/1")\n    strength: int = Options(rename="characteristics/2")\n    vitality: int = Options(rename="characteristics/3")\n\n_in_data = {\n    "nickname": "Killer777", \n    "intelligence": 7, \n    "dexterity": 55, \n    "strength": 11, \n    "vitality": 44\n}\n\nplayer = Player(**_in_data)\n\nassert expand(to_dict(player)) == {\n    "info": {\n        "nickname": "Killer777",\n    },\n    "characteristics": [\n        7,\n        55,\n        11,\n        44\n    ]\n}\n```\n\n### <a name="requirements"/>Requirements</a>\nTested with `python3.6`, `python3.7`, `pypy3.6-7.0.0`\n',
    'author': 'Ruslan Roskoshny',
    'author_email': 'i.am.yarger@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/ruslux/validate-it',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
