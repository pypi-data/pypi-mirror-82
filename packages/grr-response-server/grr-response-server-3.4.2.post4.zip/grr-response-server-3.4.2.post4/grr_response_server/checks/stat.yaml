check_id: 'CIS-ROOT-PATH-HAS-FILES-WRITABLE-BY-NON-ROOT'
# CIS checks 9.05
method:
  - target: {os:['Linux']}
    probe:
      - artifact: 'RootEnvPath'
        hint:
          problem: >
             Files in default $PATH of root can be modified by
             non-privileged users.
          fix: >
             Make sure all files in $PATH of root are owned by root
             and not modifiable by any other users.
          format: >
             {pathspec.path} user: {st_uid}, group: {st_gid}, mode: {st_mode}
        mode: PARALLEL
        result_context: 'RAW'
        filters:
          # Anything not owned by root (0). and that is a file or a symlink.
          - type: 'StatFilter'
            expression: 'uid:!0 file_type:REGULAR'
          - type: 'StatFilter'
            expression: 'uid:!0 file_type:SYMLINK'
          # Anything not owned by group root, and group writable, and a file.
          - type: 'StatFilter'
            expression: 'gid:!0 mode:0020 mask:7020 file_type:REGULAR'
          # Anything world writable, and a file.
          - type: 'StatFilter'
            expression: 'mode:0002 mask:7002 file_type:REGULAR'
---
check_id: 'CIS-ROOT-PATH-HAS-FOLDERS-WRITABLE-BY-NON-ROOT'
# CIS checks 9.05
method:
  - target: {os:['Linux']}
    probe:
      - artifact: 'RootEnvPathDirs'
        hint:
          problem: >
             Folders that comprise the default $PATH of root can be modified by
             non-privileged users.
          fix: >
             Make sure all folders that comprise the $PATH of root are owned by
             root and not modifiable by any other users.
          format: >
             {pathspec.path} user: {st_uid}, group: {st_gid}, mode: {st_mode}
        mode: PARALLEL
        result_context: 'RAW'
        filters:
          # Anything not owned by root (0).
          - type: 'StatFilter'
            expression: 'uid:!0'
          # Anything not owned by group root (0).
          - type: 'StatFilter'
            expression: 'gid:!0'
          # Anything that is world writable, and either a file or directory.
          - type: 'StatFilter'
            expression: 'mode:0002 mask:7002 file_type:DIRECTORY'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:7002 file_type:REGULAR'
---
check_id: 'CIS-HOME-DIRS-WRITABLE-BY-NON-OWNERS'
# CIS checks 9.06
method:
  - target: {os:['Linux']}
    probe:
      - artifact: 'UserHomeDirs'
        hint:
          problem: >
             User home directory can be written to by group or others.
          fix: >
             Remove write permissions from group and others: chmod go-w
          format: >
             {pathspec.path} user: {st_uid}, group: {st_gid}, mode: {st_mode}
        mode: PARALLEL
        result_context: 'RAW'
        filters:
          # Ensure it's a directory. This avoids a false positive on symlinks.
          - type: 'StatFilter'
            expression: 'mode:0020 mask:0020 file_type:DIRECTORY'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:DIRECTORY'
---
check_id: 'CIS-USER-DOT-FILES-DIRS-WORLD-WRITABLE'
# CIS checks 9.07
method:
  - target: {os:['Linux']}
    probe:
      - artifact: 'UserDotFiles'
        hint:
          problem: >
             Dot files or folders in user home directory are world writable.
          fix: 'Please remove write permission from others: chmod o-w.'
          format: >
             {pathspec.path} user: {st_uid}, group: {st_gid}, mode: {st_mode}
        mode: PARALLEL
        result_context: 'RAW'
        filters:
          # We want every file type _except_ SYMLINK. Symlinks are 'lrwxrwxrwx'.
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:REGULAR'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:DIRECTORY'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:BLOCK'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:FIFO'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:SOCKET'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:CHARACTER'
---
check_id: 'CIS-DOT-NETRC-FILE-EXISTS'
# CIS checks 9.08
method:
  - target: {os:['Linux']}
    probe:
      - artifact: 'UserDotFiles'
        hint:
          problem: >
             The .netrc file exists in a user's home directory.
          fix:
             Please remove the .netrc file - they contain passwords in plain
             text.
          format: >
             {pathspec.path} user: {st_uid}, group: {st_gid}, mode: {st_mode}
        result_context: 'RAW'
        filters:
          - type: 'StatFilter'
            expression: 'file_re:"\.netrc"'
---
# make sure none of the log files in /var/log are world writable
check_id: 'CIS-LOG-FILES-PERMISSIONS-WORLD-WRITABLE'
# CIS checks 6.03
method:
  - target: {os:['Linux']}
    probe:
      - artifact: 'LinuxLogFiles'
        hint:
          problem: 'Log files are world writable.'
          fix: 'Remove write permissions from others: chmod o-w'
          format: >
             {pathspec.path} user: {st_uid}, group: {st_gid}, mode: {st_mode}
        mode: PARALLEL
        result_context: 'RAW'
        filters:
          # We want every file type _except_ SYMLINK. Symlinks are 'lrwxrwxrwx'.
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:REGULAR'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:DIRECTORY'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:BLOCK'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:FIFO'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:SOCKET'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:0002 file_type:CHARACTER'
---
# Next two checks deals with vital system log files whose owner and group
# we know has to be uid=0 and gid=(0 or 4). Since /var/log/ can have many
# log files with different owners/groups, this check prevents throwing up
# unnecessary red flags for non-vital log files.
check_id: 'CIS-LOG-FILES-PERMISSIONS-WRONG-OWNER'
# CIS checks 6.03
method:
  - target: {os:['Linux']}
    probe:
      - artifact: 'LinuxLogFiles'
        hint:
          problem: 'Vital system log files have wrong owner.'
          fix: 'Make sure the file is owned by root.'
          format: >
             {pathspec.path} user: {st_uid}, group: {st_gid}, mode: {st_mode}
        result_context: 'RAW'
        filters:
          - type: 'StatFilter'
            expression: >
               path_re:"/var/log/(syslog|auth\.log|daemon\.log|debug|dmesg|udev|dpkg\.log|boot\.log|cron\.log|apport\.log|kern\.log|mail\.(info|log|warn)|messages|user\.log)(.[0-9]+(\.gz)?)?"
               uid:!0
---
check_id: 'CIS-LOG-FILES-PERMISSIONS-WRONG-GROUP'
# CIS checks 6.03
method:
  - target: {os:['Linux']}
    probe:
      - artifact: 'LinuxLogFiles'
        hint:
          problem: 'Vital system log files have wrong group.'
          fix: 'Make sure the file group is set as root or adm.'
          format: >
             {pathspec.path} user: {st_uid}, group: {st_gid}, mode: {st_mode}
        result_context: 'RAW'
        filters:
          - type: 'StatFilter'
            expression: >
               path_re:"/var/log/(syslog|auth\.log|daemon\.log|debug|dmesg|udev|dpkg\.log|boot\.log|cron\.log|apport\.log|kern\.log|mail\.(info|log|warn)|messages|user\.log)(.[0-9]+(\.gz)?)?"
               gid:!0
          - type: 'StatFilter'
            expression: >
               path_re:"/var/log/(syslog|auth\.log|daemon\.log|debug|dmesg|udev|dpkg\.log|boot\.log|cron\.log|apport\.log|kern\.log|mail\.(info|log|warn)|messages|user\.log)(.[0-9]+(\.gz)?)?"
               gid:!4
