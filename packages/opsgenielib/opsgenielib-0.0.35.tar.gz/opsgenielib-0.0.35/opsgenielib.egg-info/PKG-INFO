Metadata-Version: 1.1
Name: opsgenielib
Version: 0.0.35
Summary: opsgenielib
Home-page: https://sbp.gitlab.schubergphilis.com/SaaS/opsgenielib
Author: Yorick Hoorneman
Author-email: yhoorneman@schubergphilis.com
License: MIT
Description: ===========
        opsgenielib
        ===========
        
        opsgenielib
        
        
        * Documentation: https://opsgenielib.readthedocs.org/en/latest
        
        
        Development Workflow
        ====================
        
        The workflow supports the following steps
        
         * lint
         * test
         * build
         * document
         * upload
         * graph
        
        These actions are supported out of the box by the corresponding scripts under _CI/scripts directory with sane defaults based on best practices.
        Sourcing setup_aliases.ps1 for windows powershell or setup_aliases.sh in bash on Mac or Linux will provide with handy aliases for the shell of all those commands prepended with an underscore.
        
        The bootstrap script creates a .venv directory inside the project directory hosting the virtual environment. It uses pipenv for that.
        It is called by all other scripts before they do anything. So one could simple start by calling _lint and that would set up everything before it tried to actually lint the project
        
        Once the code is ready to be delivered the _tag script should be called accepting one of three arguments, patch, minor, major following the semantic versioning scheme.
        So for the initial delivery one would call
        
            $ _tag --minor
        
        which would bump the version of the project to 0.1.0 tag it in git and do a push and also ask for the change and automagically update HISTORY.rst with the version and the change provided.
        
        
        So the full workflow after git is initialized is:
        
         * repeat as necessary (of course it could be test - code - lint :) )
        
           * code
           * lint
           * test
         * commit and push
         * develop more through the code-lint-test cycle
         * tag (with the appropriate argument)
         * build
         * upload (if you want to host your package in pypi)
         * document (of course this could be run at any point)
        
        
        Important Information
        =====================
        
        This template is based on pipenv. In order to be compatible with requirements.txt so the actual created package can be used by any part of the existing python ecosystem some hacks were needed.
        So when building a package out of this **do not** simple call
        
            $ python setup.py sdist bdist_egg
        
        **as this will produce an unusable artifact with files missing.**
        Instead use the provided build and upload scripts that create all the necessary files in the artifact.
        
        
        
        Project Features
        ================
        
        * TODO
        
        
        
        
        History
        -------
        
        0.0.1 (12-04-2019)
        ---------------------
        
        * First code creation
        
        
        0.0.11 (28-05-2019)
        -------------------
        
        * removal of .json on set_maintenance_policy
        
        
        0.0.12 (28-05-2019)
        -------------------
        
        * added functions
        
        
        0.0.13 (28-05-2019)
        -------------------
        
        * maintenance policies - list functions - are now teambased
        
        
        0.0.14 (28-05-2019)
        -------------------
        
        * added function: count_alerts_by_query
        
        
        0.0.15 (10-06-2019)
        -------------------
        
        * 'added functionality: adding more than 1 policy to a set_maintenance_policy'
        
        
        0.0.16 (10-06-2019)
        -------------------
        
        * refactoring
        
        
        0.0.17 (11-06-2019)
        -------------------
        
        * 2nd try on adding multiple arguments for set_maintenance_policy
        
        
        0.0.18 (09-08-2019)
        -------------------
        
        * function names with more explicit names + reusing url endpoints to make the code more dry
        
        
        0.0.19 (09-08-2019)
        -------------------
        
        * Adding the functionality to enable and disable alert/notification policies
        
        
        0.0.20 (16-08-2019)
        -------------------
        
        * cancel_maintenance_policy now supports multiple ID's
        
        
        0.0.21 (17-08-2019)
        -------------------
        
        * Allowing the input of multiple ID's for delete_maintenance_policy
        
        
        0.0.22 (18-08-2019)
        -------------------
        
        * Adding multiple arguments for: disable/enable/delete notification- & alert policy
        
        
        0.0.23 (20-08-2019)
        -------------------
        
        * Small fixes regarding the loops in multiple functions
        
        
        0.0.24 (07-09-2019)
        -------------------
        
        * Added the function: list_schedule_timeline_by_team_name
        
        
        0.0.25 (02-10-2019)
        -------------------
        
        * Adding users endpoint and the function list users
        
        
        0.0.26 (03-10-2019)
        -------------------
        
        * Added function close_alerts
        
        
        0.0.27 (09-10-2019)
        -------------------
        
        * Removed the team-id from list_maintenance_policy and renamed the function name
        
        
        0.0.28 (11-10-2019)
        -------------------
        
        * Added pagination for query_alerts
        
        
        0.0.29 (29-11-2019)
        -------------------
        
        * Class name changed from OpsGenie to Opsgenie and the functions with maintenance_policy were renamed to maintenance so removing the policy part.
        
        
        0.0.30 (04-01-2020)
        -------------------
        
        * Added function create_alert_policy
        
        
        0.0.31 (19-06-2020)
        -------------------
        
        * Adding more parameters to the function: list_schedule_timeline_by_team_name
        
        
        0.0.32 (23-06-2020)
        -------------------
        
        * Return empty array when response.json()['data'] is empty
        
        
        0.0.33 (26-06-2020)
        -------------------
        
        * Better way of limiting results of query_alerts to 2000 results maximum
        
        
        0.0.34 (29-06-2020)
        -------------------
        
        * added limit param to the query_alerts method
        
        
        0.0.35 (12-10-2020)
        -------------------
        
        * Cleaning up
        
Keywords: opsgenielib
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.7
