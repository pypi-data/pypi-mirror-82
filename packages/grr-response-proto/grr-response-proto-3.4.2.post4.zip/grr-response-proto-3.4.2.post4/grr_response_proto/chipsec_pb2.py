# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grr_response_proto/chipsec.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from grr_response_proto import jobs_pb2 as grr__response__proto_dot_jobs__pb2
from grr_response_proto import semantic_pb2 as grr__response__proto_dot_semantic__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='grr_response_proto/chipsec.proto',
  package='grr',
  syntax='proto2',
  serialized_options=None,
  serialized_pb=b'\n grr_response_proto/chipsec.proto\x12\x03grr\x1a\x1dgrr_response_proto/jobs.proto\x1a!grr_response_proto/semantic.proto\"\xfb\x03\n\x15\x44umpFlashImageRequest\x12\x7f\n\tlog_level\x18\x01 \x01(\rBl\xe2\xfc\xe3\xc4\x01\x66\x12\x64Set the log level. If set, the log returned will include additional information reported by Chipsec.\x12\x86\x01\n\nchunk_size\x18\x02 \x01(\r:\x05\x36\x35\x35\x33\x36\x42k\xe2\xfc\xe3\xc4\x01\x65\x12\x61\x41 heartbeat will be emitted every chunk_size.This could be reduced in case the process times out.\x18\x01\x12\xd7\x01\n\rnotify_syslog\x18\x03 \x01(\x08\x42\xbf\x01\xe2\xfc\xe3\xc4\x01\xb8\x01\x12\xb5\x01If true, a message will be written by the client to the syslog before running the action. This can be used for debugging in case the client crashes during the image dumping process.\"\x91\x01\n\x16\x44umpFlashImageResponse\x12G\n\x04path\x18\x01 \x01(\x0b\x32\r.grr.PathSpecB*\xe2\xfc\xe3\xc4\x01$\x12\"Temporary path to the flash image.\x12.\n\x04logs\x18\x02 \x03(\tB \xe2\xfc\xe3\xc4\x01\x1a\x12\x18\x45xtra debug information.\"\x94\x02\n\rACPITableData\x12\x42\n\rtable_address\x18\x01 \x01(\x04\x42+\xe2\xfc\xe3\xc4\x01%\x12#Physical address of the ACPI table.\x12y\n\ntable_blob\x18\x02 \x01(\x0c\x42\x65\xe2\xfc\xe3\xc4\x01_\n\x08RDFBytes\x12SDumped ACPI table in raw byte format as provided by the BIOS, including the header.\x12\x44\n\x0ftable_signature\x18\x03 \x01(\tB+\xe2\xfc\xe3\xc4\x01%\x12#Signature of the dumped ACPI table.\"\xc9\x01\n\x14\x44umpACPITableRequest\x12\x62\n\x07logging\x18\x01 \x01(\x08\x42Q\xe2\xfc\xe3\xc4\x01K\x12IIf logging is set to True, the client sends log, including Chipsec\'s log.\x12M\n\x0ftable_signature\x18\x02 \x01(\tB4\xe2\xfc\xe3\xc4\x01.\x12,Signature of the ACPI table(s) to be dumped.\"\xba\x01\n\x15\x44umpACPITableResponse\x12q\n\x0b\x61\x63pi_tables\x18\x01 \x03(\x0b\x32\x12.grr.ACPITableDataBH\xe2\xfc\xe3\xc4\x01\x42\x12@Data containing dumped ACPI tables and their physical addresses.\x12.\n\x04logs\x18\x02 \x03(\tB \xe2\xfc\xe3\xc4\x01\x1a\x12\x18\x45xtra debug information.'
  ,
  dependencies=[grr__response__proto_dot_jobs__pb2.DESCRIPTOR,grr__response__proto_dot_semantic__pb2.DESCRIPTOR,])




_DUMPFLASHIMAGEREQUEST = _descriptor.Descriptor(
  name='DumpFlashImageRequest',
  full_name='grr.DumpFlashImageRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='log_level', full_name='grr.DumpFlashImageRequest.log_level', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001f\022dSet the log level. If set, the log returned will include additional information reported by Chipsec.', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='chunk_size', full_name='grr.DumpFlashImageRequest.chunk_size', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=True, default_value=65536,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001e\022aA heartbeat will be emitted every chunk_size.This could be reduced in case the process times out.\030\001', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='notify_syslog', full_name='grr.DumpFlashImageRequest.notify_syslog', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001\270\001\022\265\001If true, a message will be written by the client to the syslog before running the action. This can be used for debugging in case the client crashes during the image dumping process.', file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=108,
  serialized_end=615,
)


_DUMPFLASHIMAGERESPONSE = _descriptor.Descriptor(
  name='DumpFlashImageResponse',
  full_name='grr.DumpFlashImageResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='grr.DumpFlashImageResponse.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001$\022\"Temporary path to the flash image.', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='logs', full_name='grr.DumpFlashImageResponse.logs', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001\032\022\030Extra debug information.', file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=618,
  serialized_end=763,
)


_ACPITABLEDATA = _descriptor.Descriptor(
  name='ACPITableData',
  full_name='grr.ACPITableData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='table_address', full_name='grr.ACPITableData.table_address', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001%\022#Physical address of the ACPI table.', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='table_blob', full_name='grr.ACPITableData.table_blob', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=b"",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001_\n\010RDFBytes\022SDumped ACPI table in raw byte format as provided by the BIOS, including the header.', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='table_signature', full_name='grr.ACPITableData.table_signature', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001%\022#Signature of the dumped ACPI table.', file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=766,
  serialized_end=1042,
)


_DUMPACPITABLEREQUEST = _descriptor.Descriptor(
  name='DumpACPITableRequest',
  full_name='grr.DumpACPITableRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='logging', full_name='grr.DumpACPITableRequest.logging', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001K\022IIf logging is set to True, the client sends log, including Chipsec\'s log.', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='table_signature', full_name='grr.DumpACPITableRequest.table_signature', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001.\022,Signature of the ACPI table(s) to be dumped.', file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1045,
  serialized_end=1246,
)


_DUMPACPITABLERESPONSE = _descriptor.Descriptor(
  name='DumpACPITableResponse',
  full_name='grr.DumpACPITableResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='acpi_tables', full_name='grr.DumpACPITableResponse.acpi_tables', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001B\022@Data containing dumped ACPI tables and their physical addresses.', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='logs', full_name='grr.DumpACPITableResponse.logs', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\342\374\343\304\001\032\022\030Extra debug information.', file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1249,
  serialized_end=1435,
)

_DUMPFLASHIMAGERESPONSE.fields_by_name['path'].message_type = grr__response__proto_dot_jobs__pb2._PATHSPEC
_DUMPACPITABLERESPONSE.fields_by_name['acpi_tables'].message_type = _ACPITABLEDATA
DESCRIPTOR.message_types_by_name['DumpFlashImageRequest'] = _DUMPFLASHIMAGEREQUEST
DESCRIPTOR.message_types_by_name['DumpFlashImageResponse'] = _DUMPFLASHIMAGERESPONSE
DESCRIPTOR.message_types_by_name['ACPITableData'] = _ACPITABLEDATA
DESCRIPTOR.message_types_by_name['DumpACPITableRequest'] = _DUMPACPITABLEREQUEST
DESCRIPTOR.message_types_by_name['DumpACPITableResponse'] = _DUMPACPITABLERESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

DumpFlashImageRequest = _reflection.GeneratedProtocolMessageType('DumpFlashImageRequest', (_message.Message,), {
  'DESCRIPTOR' : _DUMPFLASHIMAGEREQUEST,
  '__module__' : 'grr_response_proto.chipsec_pb2'
  # @@protoc_insertion_point(class_scope:grr.DumpFlashImageRequest)
  })
_sym_db.RegisterMessage(DumpFlashImageRequest)

DumpFlashImageResponse = _reflection.GeneratedProtocolMessageType('DumpFlashImageResponse', (_message.Message,), {
  'DESCRIPTOR' : _DUMPFLASHIMAGERESPONSE,
  '__module__' : 'grr_response_proto.chipsec_pb2'
  # @@protoc_insertion_point(class_scope:grr.DumpFlashImageResponse)
  })
_sym_db.RegisterMessage(DumpFlashImageResponse)

ACPITableData = _reflection.GeneratedProtocolMessageType('ACPITableData', (_message.Message,), {
  'DESCRIPTOR' : _ACPITABLEDATA,
  '__module__' : 'grr_response_proto.chipsec_pb2'
  # @@protoc_insertion_point(class_scope:grr.ACPITableData)
  })
_sym_db.RegisterMessage(ACPITableData)

DumpACPITableRequest = _reflection.GeneratedProtocolMessageType('DumpACPITableRequest', (_message.Message,), {
  'DESCRIPTOR' : _DUMPACPITABLEREQUEST,
  '__module__' : 'grr_response_proto.chipsec_pb2'
  # @@protoc_insertion_point(class_scope:grr.DumpACPITableRequest)
  })
_sym_db.RegisterMessage(DumpACPITableRequest)

DumpACPITableResponse = _reflection.GeneratedProtocolMessageType('DumpACPITableResponse', (_message.Message,), {
  'DESCRIPTOR' : _DUMPACPITABLERESPONSE,
  '__module__' : 'grr_response_proto.chipsec_pb2'
  # @@protoc_insertion_point(class_scope:grr.DumpACPITableResponse)
  })
_sym_db.RegisterMessage(DumpACPITableResponse)


_DUMPFLASHIMAGEREQUEST.fields_by_name['log_level']._options = None
_DUMPFLASHIMAGEREQUEST.fields_by_name['chunk_size']._options = None
_DUMPFLASHIMAGEREQUEST.fields_by_name['notify_syslog']._options = None
_DUMPFLASHIMAGERESPONSE.fields_by_name['path']._options = None
_DUMPFLASHIMAGERESPONSE.fields_by_name['logs']._options = None
_ACPITABLEDATA.fields_by_name['table_address']._options = None
_ACPITABLEDATA.fields_by_name['table_blob']._options = None
_ACPITABLEDATA.fields_by_name['table_signature']._options = None
_DUMPACPITABLEREQUEST.fields_by_name['logging']._options = None
_DUMPACPITABLEREQUEST.fields_by_name['table_signature']._options = None
_DUMPACPITABLERESPONSE.fields_by_name['acpi_tables']._options = None
_DUMPACPITABLERESPONSE.fields_by_name['logs']._options = None
# @@protoc_insertion_point(module_scope)
